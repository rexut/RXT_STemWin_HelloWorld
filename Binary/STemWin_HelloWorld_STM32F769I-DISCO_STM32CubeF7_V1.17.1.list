
STemWin_HelloWorld_STM32F769NIHx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a3c  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e728  0800e728  0001e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e734  0800e734  0001e734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  20000000  0800e738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00049ce4  200000b8  0800e7f0  000200b8  2**2
                  ALLOC
  8 ._user_heap_stack 0000b004  20049d9c  0800e7f0  00029d9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 10 .comment      000000b1  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY
 11 .debug_line   0001d29f  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000000cd  00000000  00000000  0003d436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0001c724  00000000  00000000  0003d503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6a  00000000  00000000  00059c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0005d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ac18  00000000  00000000  0005e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000112a  00000000  00000000  00199378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032dd8  00000000  00000000  0019a4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002fec  00000000  00000000  001cd27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000a8f7  00000000  00000000  001d0268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000b8 	.word	0x200000b8
 8000214:	00000000 	.word	0x00000000
 8000218:	08009cd4 	.word	0x08009cd4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000bc 	.word	0x200000bc
 8000234:	08009cd4 	.word	0x08009cd4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800056c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800053a:	e003      	b.n	8000544 <LoopCopyDataInit>

0800053c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800053e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000542:	3104      	adds	r1, #4

08000544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800054a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800054c:	d3f6      	bcc.n	800053c <CopyDataInit>
  ldr  r2, =_sbss
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000550:	e002      	b.n	8000558 <LoopFillZerobss>

08000552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000554:	f842 3b04 	str.w	r3, [r2], #4

08000558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800055a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800055c:	d3f9      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800055e:	f000 fd17 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000562:	f009 fb85 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000566:	f000 f82b 	bl	80005c0 <main>
  bx  lr    
 800056a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800056c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000570:	0800e738 	.word	0x0800e738
  ldr  r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000578:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 800057c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8000580:	20049d9c 	.word	0x20049d9c

08000584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC_IRQHandler>
	...

08000588 <MainTask>:
*/
/*********************************************************************
*
*       MainTask
*/
void MainTask(void) {
 8000588:	b508      	push	{r3, lr}
  GUI_Clear();
 800058a:	f004 fca1 	bl	8004ed0 <GUI_Clear>
  GUI_SetFont(GUI_DEFAULT_FONT);
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <MainTask+0x30>)
 8000590:	f004 fbde 	bl	8004d50 <GUI_SetFont>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8000594:	f005 fe20 	bl	80061d8 <LCD_GetXSize>
 8000598:	4604      	mov	r4, r0
 800059a:	f005 fe25 	bl	80061e8 <LCD_GetYSize>
 800059e:	3814      	subs	r0, #20
 80005a0:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 80005a4:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 80005a8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80005ac:	1052      	asrs	r2, r2, #1
 80005ae:	1041      	asrs	r1, r0, #1
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <MainTask+0x34>)
 80005b2:	f004 ff03 	bl	80053bc <GUI_DispStringAt>
  while(1);
 80005b6:	e7fe      	b.n	80005b6 <MainTask+0x2e>
 80005b8:	0800a3d0 	.word	0x0800a3d0
 80005bc:	0800e718 	.word	0x0800e718

080005c0 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 80005c0:	b500      	push	{lr}
 80005c2:	b093      	sub	sp, #76	; 0x4c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005c4:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 80005c8:	f000 fdcc 	bl	8001164 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005cc:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005ce:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005d0:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005d2:	f8ad 3014 	strh.w	r3, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005d6:	f248 731f 	movw	r3, #34591	; 0x871f

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80005da:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005de:	9508      	str	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005e0:	e9cd 4306 	strd	r4, r3, [sp, #24]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005e4:	f000 fddc 	bl	80011a0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80005e8:	4b61      	ldr	r3, [pc, #388]	; (8000770 <main+0x1b0>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005ea:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005ec:	f8ad 5014 	strh.w	r5, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80005f0:	e9cd 6306 	strd	r6, r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	9308      	str	r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005fa:	f000 fdd1 	bl	80011a0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005fe:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000602:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000606:	a805      	add	r0, sp, #20
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000608:	f8ad 3014 	strh.w	r3, [sp, #20]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <main+0x1b4>)
 800060e:	e9cd c306 	strd	ip, r3, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000612:	4b59      	ldr	r3, [pc, #356]	; (8000778 <main+0x1b8>)
 8000614:	9308      	str	r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000616:	f000 fdc3 	bl	80011a0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800061a:	2004      	movs	r0, #4
 800061c:	f000 fdb0 	bl	8001180 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000624:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000628:	4a54      	ldr	r2, [pc, #336]	; (800077c <main+0x1bc>)
 800062a:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800062e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000632:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000636:	6953      	ldr	r3, [r2, #20]
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000642:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000646:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800064a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800064e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800065a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800065e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000664:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000666:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000670:	d2f9      	bcs.n	8000666 <main+0xa6>
    } while(sets-- != 0U);
 8000672:	3b20      	subs	r3, #32
 8000674:	f113 0f20 	cmn.w	r3, #32
 8000678:	d1f2      	bne.n	8000660 <main+0xa0>
 800067a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800067e:	6953      	ldr	r3, [r2, #20]
 8000680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800068a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800068e:	f000 fcc9 	bl	8001024 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	2601      	movs	r6, #1
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000698:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 800069a:	2519      	movs	r5, #25
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800069c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a8:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006b0:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006b4:	2309      	movs	r3, #9
 80006b6:	9310      	str	r3, [sp, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006b8:	f001 fda4 	bl	8002204 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80006bc:	b118      	cbz	r0, 80006c6 <main+0x106>
    HAL_Delay(50);
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 fcd8 	bl	8001074 <HAL_Delay>
  while(1)
 80006c4:	e7fb      	b.n	80006be <main+0xfe>
  ret = HAL_PWREx_EnableOverDrive();
 80006c6:	f001 fd65 	bl	8002194 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 80006ca:	b118      	cbz	r0, 80006d4 <main+0x114>
    HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	; 0x32
 80006ce:	f000 fcd1 	bl	8001074 <HAL_Delay>
  while(1)
 80006d2:	e7fb      	b.n	80006cc <main+0x10c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006d4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006dc:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	e9cd 0303 	strd	r0, r3, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006ea:	4668      	mov	r0, sp
 80006ec:	f001 ff7a 	bl	80025e4 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80006f0:	4605      	mov	r5, r0
 80006f2:	b118      	cbz	r0, 80006fc <main+0x13c>
    HAL_Delay(50);
 80006f4:	2032      	movs	r0, #50	; 0x32
 80006f6:	f000 fcbd 	bl	8001074 <HAL_Delay>
  while(1)
 80006fa:	e7fb      	b.n	80006f4 <main+0x134>
  BSP_LED_Init(LED_RED);
 80006fc:	f000 fad4 	bl	8000ca8 <BSP_LED_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <main+0x1c0>)
 8000702:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000706:	4c1f      	ldr	r4, [pc, #124]	; (8000784 <main+0x1c4>)
 8000708:	681b      	ldr	r3, [r3, #0]
  TimHandle.Init.ClockDivision = 0;
 800070a:	6165      	str	r5, [r4, #20]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	60e5      	str	r5, [r4, #12]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	61e5      	str	r5, [r4, #28]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000710:	1d25      	adds	r5, r4, #4
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000712:	fbb3 f3f2 	udiv	r3, r3, r2
  TimHandle.Instance = TIM3;
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <main+0x1c8>)
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000718:	3b01      	subs	r3, #1
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800071a:	4628      	mov	r0, r5
  TimHandle.Instance = TIM3;
 800071c:	6062      	str	r2, [r4, #4]
  TimHandle.Init.Period = 500 - 1;
 800071e:	f240 12f3 	movw	r2, #499	; 0x1f3
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000722:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = 500 - 1;
 8000724:	6122      	str	r2, [r4, #16]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000726:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000728:	f002 fc58 	bl	8002fdc <HAL_TIM_Base_Init>
 800072c:	b100      	cbz	r0, 8000730 <main+0x170>
    while(1)
 800072e:	e7fe      	b.n	800072e <main+0x16e>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000730:	4628      	mov	r0, r5
 8000732:	f002 fafb 	bl	8002d2c <HAL_TIM_Base_Start_IT>
 8000736:	b100      	cbz	r0, 800073a <main+0x17a>
    while(1)
 8000738:	e7fe      	b.n	8000738 <main+0x178>
  BSP_LED_Init(LED_RED);
 800073a:	f000 fab5 	bl	8000ca8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800073e:	4630      	mov	r0, r6
 8000740:	f000 fab2 	bl	8000ca8 <BSP_LED_Init>
  BSP_SDRAM_Init();
 8000744:	f000 fbe6 	bl	8000f14 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0x1cc>)
 800074a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000758:	9305      	str	r3, [sp, #20]
 800075a:	9b05      	ldr	r3, [sp, #20]
  GUI_Init();
 800075c:	f004 fc12 	bl	8004f84 <GUI_Init>
  WM_MULTIBUF_Enable(1);
 8000760:	4630      	mov	r0, r6
  GUI_Initialized = 1;
 8000762:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
  WM_MULTIBUF_Enable(1);
 8000766:	f008 fe19 	bl	800939c <WM_MULTIBUF_Enable>
  MainTask();
 800076a:	f7ff ff0d 	bl	8000588 <MainTask>
  for(;;);
 800076e:	e7fe      	b.n	800076e <main+0x1ae>
 8000770:	03000018 	.word	0x03000018
 8000774:	0300000c 	.word	0x0300000c
 8000778:	01000101 	.word	0x01000101
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	20000018 	.word	0x20000018
 8000784:	200000d4 	.word	0x200000d4
 8000788:	40000400 	.word	0x40000400
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_TIM_Base_MspInit>:
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_Base_MspInit+0x2c>)
{
 8000792:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8000796:	2100      	movs	r1, #0
 8000798:	201d      	movs	r0, #29
  __HAL_RCC_TIM3_CLK_ENABLE();
 800079a:	f042 0202 	orr.w	r2, r2, #2
 800079e:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80007a0:	2201      	movs	r2, #1
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80007ac:	f000 fc86 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007b0:	201d      	movs	r0, #29
}
 80007b2:	b003      	add	sp, #12
 80007b4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007b8:	f000 bcb2 	b.w	8001120 <HAL_NVIC_EnableIRQ>
 80007bc:	40023800 	.word	0x40023800

080007c0 <BSP_Background>:
  BSP_LED_Toggle(LED_RED);
 80007c0:	2000      	movs	r0, #0
{
 80007c2:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED_RED);
 80007c4:	f000 fa92 	bl	8000cec <BSP_LED_Toggle>
  BSP_LED_Toggle(LED_GREEN);
 80007c8:	2001      	movs	r0, #1
}
 80007ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LED_Toggle(LED_GREEN);
 80007ce:	f000 ba8d 	b.w	8000cec <BSP_LED_Toggle>

080007d2 <HAL_TIM_PeriodElapsedCallback>:
  BSP_Background();
 80007d2:	f7ff bff5 	b.w	80007c0 <BSP_Background>

080007d6 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80007d6:	4770      	bx	lr

080007d8 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <HardFault_Handler>

080007da <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007da:	e7fe      	b.n	80007da <MemManage_Handler>

080007dc <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <BusFault_Handler>

080007de <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007de:	e7fe      	b.n	80007de <UsageFault_Handler>

080007e0 <DebugMon_Handler>:
 80007e0:	4770      	bx	lr
	...

080007e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007e4:	b508      	push	{r3, lr}
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 80007e6:	f000 fc33 	bl	8001050 <HAL_IncTick>

  OS_TimeMS++;
 80007ea:	4a02      	ldr	r2, [pc, #8]	; (80007f4 <SysTick_Handler+0x10>)
 80007ec:	6813      	ldr	r3, [r2, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	bd08      	pop	{r3, pc}
 80007f4:	200499b4 	.word	0x200499b4

080007f8 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80007f8:	4801      	ldr	r0, [pc, #4]	; (8000800 <LTDC_IRQHandler+0x8>)
 80007fa:	f001 baff 	b.w	8001dfc <HAL_LTDC_IRQHandler>
 80007fe:	bf00      	nop
 8000800:	2004027c 	.word	0x2004027c

08000804 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000804:	4801      	ldr	r0, [pc, #4]	; (800080c <TIM3_IRQHandler+0x8>)
 8000806:	f002 bad3 	b.w	8002db0 <HAL_TIM_IRQHandler>
 800080a:	bf00      	nop
 800080c:	200000d8 	.word	0x200000d8

08000810 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4604      	mov	r4, r0
 8000814:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000816:	2000      	movs	r0, #0
 8000818:	49c9      	ldr	r1, [pc, #804]	; (8000b40 <OTM8009A_Init+0x330>)
 800081a:	f003 f8b3 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800081e:	49c9      	ldr	r1, [pc, #804]	; (8000b44 <OTM8009A_Init+0x334>)
 8000820:	2003      	movs	r0, #3
 8000822:	f003 f8af 	bl	8003984 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000826:	49c8      	ldr	r1, [pc, #800]	; (8000b48 <OTM8009A_Init+0x338>)
 8000828:	2000      	movs	r0, #0
 800082a:	f003 f8ab 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800082e:	49c7      	ldr	r1, [pc, #796]	; (8000b4c <OTM8009A_Init+0x33c>)
 8000830:	2002      	movs	r0, #2
 8000832:	f003 f8a7 	bl	8003984 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000836:	49c4      	ldr	r1, [pc, #784]	; (8000b48 <OTM8009A_Init+0x338>)
 8000838:	2000      	movs	r0, #0
 800083a:	f003 f8a3 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800083e:	49c4      	ldr	r1, [pc, #784]	; (8000b50 <OTM8009A_Init+0x340>)
 8000840:	2000      	movs	r0, #0
 8000842:	f003 f89f 	bl	8003984 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f000 fa5a 	bl	8000d00 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 800084c:	49c1      	ldr	r1, [pc, #772]	; (8000b54 <OTM8009A_Init+0x344>)
 800084e:	2000      	movs	r0, #0
 8000850:	f003 f898 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000854:	49c0      	ldr	r1, [pc, #768]	; (8000b58 <OTM8009A_Init+0x348>)
 8000856:	2000      	movs	r0, #0
 8000858:	f003 f894 	bl	8003984 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800085c:	200a      	movs	r0, #10
 800085e:	f000 fa4f 	bl	8000d00 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000862:	49be      	ldr	r1, [pc, #760]	; (8000b5c <OTM8009A_Init+0x34c>)
 8000864:	2000      	movs	r0, #0
 8000866:	f003 f88d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800086a:	49bd      	ldr	r1, [pc, #756]	; (8000b60 <OTM8009A_Init+0x350>)
 800086c:	2000      	movs	r0, #0
 800086e:	f003 f889 	bl	8003984 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000872:	49bc      	ldr	r1, [pc, #752]	; (8000b64 <OTM8009A_Init+0x354>)
 8000874:	2000      	movs	r0, #0
 8000876:	f003 f885 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800087a:	49bb      	ldr	r1, [pc, #748]	; (8000b68 <OTM8009A_Init+0x358>)
 800087c:	2000      	movs	r0, #0
 800087e:	f003 f881 	bl	8003984 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000882:	49ba      	ldr	r1, [pc, #744]	; (8000b6c <OTM8009A_Init+0x35c>)
 8000884:	2000      	movs	r0, #0
 8000886:	f003 f87d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800088a:	49b9      	ldr	r1, [pc, #740]	; (8000b70 <OTM8009A_Init+0x360>)
 800088c:	2000      	movs	r0, #0
 800088e:	f003 f879 	bl	8003984 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000892:	49ab      	ldr	r1, [pc, #684]	; (8000b40 <OTM8009A_Init+0x330>)
 8000894:	2000      	movs	r0, #0
 8000896:	f003 f875 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800089a:	49b6      	ldr	r1, [pc, #728]	; (8000b74 <OTM8009A_Init+0x364>)
 800089c:	2000      	movs	r0, #0
 800089e:	f003 f871 	bl	8003984 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008a2:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x368>)
 80008a4:	2000      	movs	r0, #0
 80008a6:	f003 f86d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008aa:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x36c>)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f003 f869 	bl	8003984 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008b2:	49b3      	ldr	r1, [pc, #716]	; (8000b80 <OTM8009A_Init+0x370>)
 80008b4:	2000      	movs	r0, #0
 80008b6:	f003 f865 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008ba:	49b2      	ldr	r1, [pc, #712]	; (8000b84 <OTM8009A_Init+0x374>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f003 f861 	bl	8003984 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80008c2:	49b1      	ldr	r1, [pc, #708]	; (8000b88 <OTM8009A_Init+0x378>)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f003 f85d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80008ca:	49b0      	ldr	r1, [pc, #704]	; (8000b8c <OTM8009A_Init+0x37c>)
 80008cc:	2000      	movs	r0, #0
 80008ce:	f003 f859 	bl	8003984 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80008d2:	49af      	ldr	r1, [pc, #700]	; (8000b90 <OTM8009A_Init+0x380>)
 80008d4:	2000      	movs	r0, #0
 80008d6:	f003 f855 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008da:	49a3      	ldr	r1, [pc, #652]	; (8000b68 <OTM8009A_Init+0x358>)
 80008dc:	2000      	movs	r0, #0
 80008de:	f003 f851 	bl	8003984 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e2:	4997      	ldr	r1, [pc, #604]	; (8000b40 <OTM8009A_Init+0x330>)
 80008e4:	2000      	movs	r0, #0
 80008e6:	f003 f84d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80008ea:	49aa      	ldr	r1, [pc, #680]	; (8000b94 <OTM8009A_Init+0x384>)
 80008ec:	2002      	movs	r0, #2
 80008ee:	f003 f849 	bl	8003984 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80008f2:	49a9      	ldr	r1, [pc, #676]	; (8000b98 <OTM8009A_Init+0x388>)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f003 f845 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80008fa:	49a8      	ldr	r1, [pc, #672]	; (8000b9c <OTM8009A_Init+0x38c>)
 80008fc:	2000      	movs	r0, #0
 80008fe:	f003 f841 	bl	8003984 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000902:	49a7      	ldr	r1, [pc, #668]	; (8000ba0 <OTM8009A_Init+0x390>)
 8000904:	2000      	movs	r0, #0
 8000906:	f003 f83d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800090a:	49a6      	ldr	r1, [pc, #664]	; (8000ba4 <OTM8009A_Init+0x394>)
 800090c:	2000      	movs	r0, #0
 800090e:	f003 f839 	bl	8003984 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000912:	49a5      	ldr	r1, [pc, #660]	; (8000ba8 <OTM8009A_Init+0x398>)
 8000914:	2000      	movs	r0, #0
 8000916:	f003 f835 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800091a:	49a4      	ldr	r1, [pc, #656]	; (8000bac <OTM8009A_Init+0x39c>)
 800091c:	2000      	movs	r0, #0
 800091e:	f003 f831 	bl	8003984 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000922:	4995      	ldr	r1, [pc, #596]	; (8000b78 <OTM8009A_Init+0x368>)
 8000924:	2000      	movs	r0, #0
 8000926:	f003 f82d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800092a:	49a1      	ldr	r1, [pc, #644]	; (8000bb0 <OTM8009A_Init+0x3a0>)
 800092c:	2000      	movs	r0, #0
 800092e:	f003 f829 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000932:	4993      	ldr	r1, [pc, #588]	; (8000b80 <OTM8009A_Init+0x370>)
 8000934:	2000      	movs	r0, #0
 8000936:	f003 f825 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800093a:	499e      	ldr	r1, [pc, #632]	; (8000bb4 <OTM8009A_Init+0x3a4>)
 800093c:	2000      	movs	r0, #0
 800093e:	f003 f821 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000942:	499d      	ldr	r1, [pc, #628]	; (8000bb8 <OTM8009A_Init+0x3a8>)
 8000944:	2000      	movs	r0, #0
 8000946:	f003 f81d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800094a:	499c      	ldr	r1, [pc, #624]	; (8000bbc <OTM8009A_Init+0x3ac>)
 800094c:	2002      	movs	r0, #2
 800094e:	f003 f819 	bl	8003984 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000952:	497d      	ldr	r1, [pc, #500]	; (8000b48 <OTM8009A_Init+0x338>)
 8000954:	2000      	movs	r0, #0
 8000956:	f003 f815 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800095a:	4999      	ldr	r1, [pc, #612]	; (8000bc0 <OTM8009A_Init+0x3b0>)
 800095c:	2006      	movs	r0, #6
 800095e:	f003 f811 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000962:	4998      	ldr	r1, [pc, #608]	; (8000bc4 <OTM8009A_Init+0x3b4>)
 8000964:	2000      	movs	r0, #0
 8000966:	f003 f80d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800096a:	4997      	ldr	r1, [pc, #604]	; (8000bc8 <OTM8009A_Init+0x3b8>)
 800096c:	200e      	movs	r0, #14
 800096e:	f003 f809 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000972:	4996      	ldr	r1, [pc, #600]	; (8000bcc <OTM8009A_Init+0x3bc>)
 8000974:	2000      	movs	r0, #0
 8000976:	f003 f805 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800097a:	4995      	ldr	r1, [pc, #596]	; (8000bd0 <OTM8009A_Init+0x3c0>)
 800097c:	200e      	movs	r0, #14
 800097e:	f003 f801 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000982:	4994      	ldr	r1, [pc, #592]	; (8000bd4 <OTM8009A_Init+0x3c4>)
 8000984:	2000      	movs	r0, #0
 8000986:	f002 fffd 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800098a:	4993      	ldr	r1, [pc, #588]	; (8000bd8 <OTM8009A_Init+0x3c8>)
 800098c:	200a      	movs	r0, #10
 800098e:	f002 fff9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000992:	4992      	ldr	r1, [pc, #584]	; (8000bdc <OTM8009A_Init+0x3cc>)
 8000994:	2000      	movs	r0, #0
 8000996:	f002 fff5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800099a:	4991      	ldr	r1, [pc, #580]	; (8000be0 <OTM8009A_Init+0x3d0>)
 800099c:	2000      	movs	r0, #0
 800099e:	f002 fff1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a2:	4969      	ldr	r1, [pc, #420]	; (8000b48 <OTM8009A_Init+0x338>)
 80009a4:	2000      	movs	r0, #0
 80009a6:	f002 ffed 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009aa:	498e      	ldr	r1, [pc, #568]	; (8000be4 <OTM8009A_Init+0x3d4>)
 80009ac:	200a      	movs	r0, #10
 80009ae:	f002 ffe9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009b2:	498d      	ldr	r1, [pc, #564]	; (8000be8 <OTM8009A_Init+0x3d8>)
 80009b4:	2000      	movs	r0, #0
 80009b6:	f002 ffe5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009ba:	498c      	ldr	r1, [pc, #560]	; (8000bec <OTM8009A_Init+0x3dc>)
 80009bc:	200f      	movs	r0, #15
 80009be:	f002 ffe1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009c2:	4980      	ldr	r1, [pc, #512]	; (8000bc4 <OTM8009A_Init+0x3b4>)
 80009c4:	2000      	movs	r0, #0
 80009c6:	f002 ffdd 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80009ca:	4989      	ldr	r1, [pc, #548]	; (8000bf0 <OTM8009A_Init+0x3e0>)
 80009cc:	200f      	movs	r0, #15
 80009ce:	f002 ffd9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009d2:	497e      	ldr	r1, [pc, #504]	; (8000bcc <OTM8009A_Init+0x3bc>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f002 ffd5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80009da:	4986      	ldr	r1, [pc, #536]	; (8000bf4 <OTM8009A_Init+0x3e4>)
 80009dc:	200a      	movs	r0, #10
 80009de:	f002 ffd1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009e2:	497c      	ldr	r1, [pc, #496]	; (8000bd4 <OTM8009A_Init+0x3c4>)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 ffcd 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80009ea:	4983      	ldr	r1, [pc, #524]	; (8000bf8 <OTM8009A_Init+0x3e8>)
 80009ec:	200f      	movs	r0, #15
 80009ee:	f002 ffc9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009f2:	497a      	ldr	r1, [pc, #488]	; (8000bdc <OTM8009A_Init+0x3cc>)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f002 ffc5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80009fa:	4980      	ldr	r1, [pc, #512]	; (8000bfc <OTM8009A_Init+0x3ec>)
 80009fc:	200f      	movs	r0, #15
 80009fe:	f002 ffc1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a02:	497f      	ldr	r1, [pc, #508]	; (8000c00 <OTM8009A_Init+0x3f0>)
 8000a04:	2000      	movs	r0, #0
 8000a06:	f002 ffbd 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a0a:	497e      	ldr	r1, [pc, #504]	; (8000c04 <OTM8009A_Init+0x3f4>)
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f002 ffb9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a12:	497d      	ldr	r1, [pc, #500]	; (8000c08 <OTM8009A_Init+0x3f8>)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f002 ffb5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a1a:	497c      	ldr	r1, [pc, #496]	; (8000c0c <OTM8009A_Init+0x3fc>)
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f002 ffb1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a22:	4949      	ldr	r1, [pc, #292]	; (8000b48 <OTM8009A_Init+0x338>)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f002 ffad 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a2a:	4979      	ldr	r1, [pc, #484]	; (8000c10 <OTM8009A_Init+0x400>)
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f002 ffa9 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a32:	496d      	ldr	r1, [pc, #436]	; (8000be8 <OTM8009A_Init+0x3d8>)
 8000a34:	2000      	movs	r0, #0
 8000a36:	f002 ffa5 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a3a:	4976      	ldr	r1, [pc, #472]	; (8000c14 <OTM8009A_Init+0x404>)
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f002 ffa1 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a42:	4960      	ldr	r1, [pc, #384]	; (8000bc4 <OTM8009A_Init+0x3b4>)
 8000a44:	2000      	movs	r0, #0
 8000a46:	f002 ff9d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a4a:	4973      	ldr	r1, [pc, #460]	; (8000c18 <OTM8009A_Init+0x408>)
 8000a4c:	200f      	movs	r0, #15
 8000a4e:	f002 ff99 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a52:	495e      	ldr	r1, [pc, #376]	; (8000bcc <OTM8009A_Init+0x3bc>)
 8000a54:	2000      	movs	r0, #0
 8000a56:	f002 ff95 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a5a:	4970      	ldr	r1, [pc, #448]	; (8000c1c <OTM8009A_Init+0x40c>)
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f002 ff91 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a62:	495c      	ldr	r1, [pc, #368]	; (8000bd4 <OTM8009A_Init+0x3c4>)
 8000a64:	2000      	movs	r0, #0
 8000a66:	f002 ff8d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000a6a:	496d      	ldr	r1, [pc, #436]	; (8000c20 <OTM8009A_Init+0x410>)
 8000a6c:	200f      	movs	r0, #15
 8000a6e:	f002 ff89 	bl	8003984 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a72:	495a      	ldr	r1, [pc, #360]	; (8000bdc <OTM8009A_Init+0x3cc>)
 8000a74:	2000      	movs	r0, #0
 8000a76:	f002 ff85 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000a7a:	496a      	ldr	r1, [pc, #424]	; (8000c24 <OTM8009A_Init+0x414>)
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	f002 ff81 	bl	8003984 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000a82:	493d      	ldr	r1, [pc, #244]	; (8000b78 <OTM8009A_Init+0x368>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f002 ff7d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000a8a:	4967      	ldr	r1, [pc, #412]	; (8000c28 <OTM8009A_Init+0x418>)
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f002 ff79 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000a92:	4966      	ldr	r1, [pc, #408]	; (8000c2c <OTM8009A_Init+0x41c>)
 8000a94:	2000      	movs	r0, #0
 8000a96:	f002 ff75 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000a9a:	4965      	ldr	r1, [pc, #404]	; (8000c30 <OTM8009A_Init+0x420>)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f002 ff71 	bl	8003984 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000aa2:	4964      	ldr	r1, [pc, #400]	; (8000c34 <OTM8009A_Init+0x424>)
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 ff6d 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aaa:	4963      	ldr	r1, [pc, #396]	; (8000c38 <OTM8009A_Init+0x428>)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f002 ff69 	bl	8003984 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000ab2:	4923      	ldr	r1, [pc, #140]	; (8000b40 <OTM8009A_Init+0x330>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 ff65 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000aba:	4960      	ldr	r1, [pc, #384]	; (8000c3c <OTM8009A_Init+0x42c>)
 8000abc:	2003      	movs	r0, #3
 8000abe:	f002 ff61 	bl	8003984 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000ac2:	491f      	ldr	r1, [pc, #124]	; (8000b40 <OTM8009A_Init+0x330>)
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f002 ff5d 	bl	8003984 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000aca:	491d      	ldr	r1, [pc, #116]	; (8000b40 <OTM8009A_Init+0x330>)
 8000acc:	2000      	movs	r0, #0
 8000ace:	f002 ff59 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000ad2:	495b      	ldr	r1, [pc, #364]	; (8000c40 <OTM8009A_Init+0x430>)
 8000ad4:	2010      	movs	r0, #16
 8000ad6:	f002 ff55 	bl	8003984 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000ada:	4919      	ldr	r1, [pc, #100]	; (8000b40 <OTM8009A_Init+0x330>)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f002 ff51 	bl	8003984 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000ae2:	4958      	ldr	r1, [pc, #352]	; (8000c44 <OTM8009A_Init+0x434>)
 8000ae4:	2010      	movs	r0, #16
 8000ae6:	f002 ff4d 	bl	8003984 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000aea:	2000      	movs	r0, #0
 8000aec:	4956      	ldr	r1, [pc, #344]	; (8000c48 <OTM8009A_Init+0x438>)
 8000aee:	f002 ff49 	bl	8003984 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000af2:	2078      	movs	r0, #120	; 0x78
 8000af4:	f000 f904 	bl	8000d00 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	f000 80c7 	beq.w	8000c8c <OTM8009A_Init+0x47c>
 8000afe:	2c02      	cmp	r4, #2
 8000b00:	d103      	bne.n	8000b0a <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b02:	4952      	ldr	r1, [pc, #328]	; (8000c4c <OTM8009A_Init+0x43c>)
 8000b04:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000b06:	f002 ff3d 	bl	8003984 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000b0a:	2d01      	cmp	r5, #1
 8000b0c:	d10b      	bne.n	8000b26 <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000b0e:	4950      	ldr	r1, [pc, #320]	; (8000c50 <OTM8009A_Init+0x440>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f002 ff37 	bl	8003984 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x444>)
 8000b18:	2004      	movs	r0, #4
 8000b1a:	f002 ff33 	bl	8003984 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000b1e:	494e      	ldr	r1, [pc, #312]	; (8000c58 <OTM8009A_Init+0x448>)
 8000b20:	2004      	movs	r0, #4
 8000b22:	f002 ff2f 	bl	8003984 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000b26:	494d      	ldr	r1, [pc, #308]	; (8000c5c <OTM8009A_Init+0x44c>)
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f002 ff2b 	bl	8003984 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000b2e:	494c      	ldr	r1, [pc, #304]	; (8000c60 <OTM8009A_Init+0x450>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f002 ff27 	bl	8003984 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000b36:	494b      	ldr	r1, [pc, #300]	; (8000c64 <OTM8009A_Init+0x454>)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f002 ff23 	bl	8003984 <DSI_IO_WriteCmd>
 8000b3e:	e093      	b.n	8000c68 <OTM8009A_Init+0x458>
 8000b40:	08009cec 	.word	0x08009cec
 8000b44:	08009cee 	.word	0x08009cee
 8000b48:	08009cf2 	.word	0x08009cf2
 8000b4c:	08009cf4 	.word	0x08009cf4
 8000b50:	08009cf7 	.word	0x08009cf7
 8000b54:	08009cf9 	.word	0x08009cf9
 8000b58:	08009cfb 	.word	0x08009cfb
 8000b5c:	08009cfd 	.word	0x08009cfd
 8000b60:	08009cff 	.word	0x08009cff
 8000b64:	08009d01 	.word	0x08009d01
 8000b68:	08009d03 	.word	0x08009d03
 8000b6c:	08009d05 	.word	0x08009d05
 8000b70:	08009d07 	.word	0x08009d07
 8000b74:	08009d09 	.word	0x08009d09
 8000b78:	08009d0b 	.word	0x08009d0b
 8000b7c:	08009d0d 	.word	0x08009d0d
 8000b80:	08009d0f 	.word	0x08009d0f
 8000b84:	08009d11 	.word	0x08009d11
 8000b88:	08009d13 	.word	0x08009d13
 8000b8c:	08009d15 	.word	0x08009d15
 8000b90:	08009d17 	.word	0x08009d17
 8000b94:	08009d19 	.word	0x08009d19
 8000b98:	08009d1c 	.word	0x08009d1c
 8000b9c:	08009d1e 	.word	0x08009d1e
 8000ba0:	08009d20 	.word	0x08009d20
 8000ba4:	08009d22 	.word	0x08009d22
 8000ba8:	08009d24 	.word	0x08009d24
 8000bac:	08009d26 	.word	0x08009d26
 8000bb0:	08009d28 	.word	0x08009d28
 8000bb4:	08009d2a 	.word	0x08009d2a
 8000bb8:	08009d2c 	.word	0x08009d2c
 8000bbc:	08009d2e 	.word	0x08009d2e
 8000bc0:	08009d31 	.word	0x08009d31
 8000bc4:	08009d38 	.word	0x08009d38
 8000bc8:	08009d3a 	.word	0x08009d3a
 8000bcc:	08009d49 	.word	0x08009d49
 8000bd0:	08009d4b 	.word	0x08009d4b
 8000bd4:	08009d5a 	.word	0x08009d5a
 8000bd8:	08009d5c 	.word	0x08009d5c
 8000bdc:	08009d67 	.word	0x08009d67
 8000be0:	08009d69 	.word	0x08009d69
 8000be4:	08009d6b 	.word	0x08009d6b
 8000be8:	08009d76 	.word	0x08009d76
 8000bec:	08009d78 	.word	0x08009d78
 8000bf0:	08009d88 	.word	0x08009d88
 8000bf4:	08009d98 	.word	0x08009d98
 8000bf8:	08009da3 	.word	0x08009da3
 8000bfc:	08009db3 	.word	0x08009db3
 8000c00:	08009dc3 	.word	0x08009dc3
 8000c04:	08009dc5 	.word	0x08009dc5
 8000c08:	08009dd0 	.word	0x08009dd0
 8000c0c:	08009dd2 	.word	0x08009dd2
 8000c10:	08009ddd 	.word	0x08009ddd
 8000c14:	08009de8 	.word	0x08009de8
 8000c18:	08009df8 	.word	0x08009df8
 8000c1c:	08009e08 	.word	0x08009e08
 8000c20:	08009e13 	.word	0x08009e13
 8000c24:	08009e23 	.word	0x08009e23
 8000c28:	08009e33 	.word	0x08009e33
 8000c2c:	08009e35 	.word	0x08009e35
 8000c30:	08009e37 	.word	0x08009e37
 8000c34:	08009e39 	.word	0x08009e39
 8000c38:	08009e3b 	.word	0x08009e3b
 8000c3c:	08009e3d 	.word	0x08009e3d
 8000c40:	08009e41 	.word	0x08009e41
 8000c44:	08009e52 	.word	0x08009e52
 8000c48:	08009e63 	.word	0x08009e63
 8000c4c:	08009e65 	.word	0x08009e65
 8000c50:	08009e69 	.word	0x08009e69
 8000c54:	08009e6b 	.word	0x08009e6b
 8000c58:	08009e70 	.word	0x08009e70
 8000c5c:	08009e75 	.word	0x08009e75
 8000c60:	08009e77 	.word	0x08009e77
 8000c64:	08009e79 	.word	0x08009e79

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000c68:	490a      	ldr	r1, [pc, #40]	; (8000c94 <OTM8009A_Init+0x484>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f002 fe8a 	bl	8003984 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <OTM8009A_Init+0x488>)
 8000c72:	2000      	movs	r0, #0
 8000c74:	f002 fe86 	bl	8003984 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <OTM8009A_Init+0x48c>)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f002 fe82 	bl	8003984 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <OTM8009A_Init+0x490>)
 8000c82:	2000      	movs	r0, #0
 8000c84:	f002 fe7e 	bl	8003984 <DSI_IO_WriteCmd>

  return 0;
}
 8000c88:	2000      	movs	r0, #0
 8000c8a:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c8c:	4905      	ldr	r1, [pc, #20]	; (8000ca4 <OTM8009A_Init+0x494>)
 8000c8e:	4620      	mov	r0, r4
 8000c90:	e739      	b.n	8000b06 <OTM8009A_Init+0x2f6>
 8000c92:	bf00      	nop
 8000c94:	08009e7b 	.word	0x08009e7b
 8000c98:	08009e7d 	.word	0x08009e7d
 8000c9c:	08009cec 	.word	0x08009cec
 8000ca0:	08009e7f 	.word	0x08009e7f
 8000ca4:	08009e67 	.word	0x08009e67

08000ca8 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <BSP_LED_Init+0x3c>)
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cac:	a901      	add	r1, sp, #4
  LEDx_GPIO_CLK_ENABLE();
 8000cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <BSP_LED_Init+0x40>)
 8000cc2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000cca:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cce:	6880      	ldr	r0, [r0, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000cd0:	e9cd 2202 	strd	r2, r2, [sp, #8]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	9204      	str	r2, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cd8:	f000 fe7a 	bl	80019d0 <HAL_GPIO_Init>

}
 8000cdc:	b007      	add	sp, #28
 8000cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	20000000 	.word	0x20000000

08000cec <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <BSP_LED_Toggle+0x10>)
 8000cee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000cf2:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8000cf6:	6890      	ldr	r0, [r2, #8]
 8000cf8:	f000 bf51 	b.w	8001b9e <HAL_GPIO_TogglePin>
 8000cfc:	20000000 	.word	0x20000000

08000d00 <OTM8009A_IO_Delay>:
 8000d00:	f000 b9b8 	b.w	8001074 <HAL_Delay>

08000d04 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000d08:	4c21      	ldr	r4, [pc, #132]	; (8000d90 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d0a:	2710      	movs	r7, #16
 8000d0c:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8000d0e:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d12:	19e5      	adds	r5, r4, r7
 8000d14:	4621      	mov	r1, r4
{
 8000d16:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8000d1e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d22:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8000d26:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d2a:	f001 ffc8 	bl	8002cbe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f000 f9a0 	bl	8001074 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000d34:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000d36:	4621      	mov	r1, r4
 8000d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d3e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8000d42:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000d46:	f001 ffba 	bl	8002cbe <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000d4a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d52:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d54:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8000d58:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8000d5a:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d5e:	f001 ffae 	bl	8002cbe <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000d62:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d66:	4621      	mov	r1, r4
 8000d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000d6c:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000d6e:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d70:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8000d72:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000d74:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000d7c:	f001 ff9f 	bl	8002cbe <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000d80:	4649      	mov	r1, r9
 8000d82:	4628      	mov	r0, r5
}
 8000d84:	b003      	add	sp, #12
 8000d86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000d8a:	f001 bfb7 	b.w	8002cfc <HAL_SDRAM_ProgramRefreshRate>
 8000d8e:	bf00      	nop
 8000d90:	20000128 	.word	0x20000128

08000d94 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d94:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <BSP_SDRAM_MspInit+0x15c>)
 8000d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d98:	f042 0201 	orr.w	r2, r2, #1
{  
 8000d9c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8000da0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8000da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000da4:	2503      	movs	r5, #3
{  
 8000da6:	4606      	mov	r6, r0
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000da8:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_FMC_CLK_ENABLE();
 8000daa:	f002 0201 	and.w	r2, r2, #1
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000dae:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <BSP_SDRAM_MspInit+0x160>)
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000db0:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8000db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	f042 0208 	orr.w	r2, r2, #8
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd2:	f002 0208 	and.w	r2, r2, #8
 8000dd6:	9203      	str	r2, [sp, #12]
 8000dd8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ddc:	f042 0210 	orr.w	r2, r2, #16
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	f002 0210 	and.w	r2, r2, #16
 8000de8:	9204      	str	r2, [sp, #16]
 8000dea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dee:	f042 0220 	orr.w	r2, r2, #32
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
 8000df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df6:	f002 0220 	and.w	r2, r2, #32
 8000dfa:	9205      	str	r2, [sp, #20]
 8000dfc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
 8000e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e08:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e0c:	9206      	str	r2, [sp, #24]
 8000e0e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
 8000e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e1e:	9207      	str	r2, [sp, #28]
 8000e20:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e2a:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	9308      	str	r3, [sp, #32]
 8000e34:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000e42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e46:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000e48:	f000 fdc2 	bl	80019d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e4c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e50:	a909      	add	r1, sp, #36	; 0x24
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e54:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e56:	f000 fdbb 	bl	80019d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e5a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e5e:	a909      	add	r1, sp, #36	; 0x24
 8000e60:	4826      	ldr	r0, [pc, #152]	; (8000efc <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e62:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e64:	f000 fdb4 	bl	80019d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8000e68:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e6c:	a909      	add	r1, sp, #36	; 0x24
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8000e70:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e72:	f000 fdad 	bl	80019d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e76:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8000e7a:	a909      	add	r1, sp, #36	; 0x24
 8000e7c:	4821      	ldr	r0, [pc, #132]	; (8000f04 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e7e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8000e80:	f000 fda6 	bl	80019d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e84:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8000e88:	a909      	add	r1, sp, #36	; 0x24
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e8c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8000e8e:	f000 fd9f 	bl	80019d0 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <BSP_SDRAM_MspInit+0x178>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000e94:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000e96:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000e9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000e9e:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8000ea0:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000ea2:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000eba:	e9c3 541b 	strd	r5, r4, [r3, #108]	; 0x6c
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8000ebe:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <BSP_SDRAM_MspInit+0x17c>)
 8000ec6:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8000eca:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000ecc:	6335      	str	r5, [r6, #48]	; 0x30
 8000ece:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8000ed0:	f000 fa26 	bl	8001320 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 f9a5 	bl	8001224 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000eda:	4622      	mov	r2, r4
 8000edc:	210f      	movs	r1, #15
 8000ede:	2038      	movs	r0, #56	; 0x38
 8000ee0:	f000 f8ec 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000ee4:	2038      	movs	r0, #56	; 0x38
 8000ee6:	f000 f91b 	bl	8001120 <HAL_NVIC_EnableIRQ>
}
 8000eea:	b00e      	add	sp, #56	; 0x38
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40022000 	.word	0x40022000
 8000f0c:	20000128 	.word	0x20000128
 8000f10:	40026410 	.word	0x40026410

08000f14 <BSP_SDRAM_Init>:
{ 
 8000f14:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8000f18:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f1a:	4c1b      	ldr	r4, [pc, #108]	; (8000f88 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8000f1c:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f1e:	2020      	movs	r0, #32
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f20:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f24:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8000f26:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f28:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8000f2a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8000f2e:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8000f32:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f36:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 8000f38:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f3c:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000f40:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000f42:	f44f 73c0 	mov.w	r3, #384	; 0x180
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f46:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000f4a:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f4c:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f54:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f58:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f5c:	f7ff ff1a 	bl	8000d94 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f60:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8000f64:	4c09      	ldr	r4, [pc, #36]	; (8000f8c <BSP_SDRAM_Init+0x78>)
 8000f66:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8000f6a:	f001 fe88 	bl	8002c7e <HAL_SDRAM_Init>
 8000f6e:	3800      	subs	r0, #0
 8000f70:	bf18      	it	ne
 8000f72:	2001      	movne	r0, #1
 8000f74:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000f76:	f240 6003 	movw	r0, #1539	; 0x603
 8000f7a:	f7ff fec3 	bl	8000d04 <BSP_SDRAM_Initialization_sequence>
}
 8000f7e:	7820      	ldrb	r0, [r4, #0]
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	a0000140 	.word	0xa0000140
 8000f88:	20000128 	.word	0x20000128
 8000f8c:	20000014 	.word	0x20000014

08000f90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	490f      	ldr	r1, [pc, #60]	; (8000fd0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f92:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <SystemInit+0x44>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000faa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fb6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <SystemInit+0x48>)
 8000fba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fc4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fca:	608b      	str	r3, [r1, #8]
#endif
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	24003010 	.word	0x24003010

08000fdc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe2:	4e0e      	ldr	r6, [pc, #56]	; (800101c <HAL_InitTick+0x3c>)
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000fe8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fea:	7832      	ldrb	r2, [r6, #0]
 8000fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_InitTick+0x40>)
 8000ff2:	6810      	ldr	r0, [r2, #0]
 8000ff4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff8:	f000 f8a0 	bl	800113c <HAL_SYSTICK_Config>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	b950      	cbnz	r0, 8001016 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001000:	2d0f      	cmp	r5, #15
 8001002:	d808      	bhi.n	8001016 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	4602      	mov	r2, r0
 8001006:	4629      	mov	r1, r5
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 f856 	bl	80010bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4620      	mov	r0, r4
 8001012:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001014:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	e7fc      	b.n	8001014 <HAL_InitTick+0x34>
 800101a:	bf00      	nop
 800101c:	2000001c 	.word	0x2000001c
 8001020:	20000018 	.word	0x20000018

08001024 <HAL_Init>:
{
 8001024:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001030:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001038:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	f000 f82d 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f7ff ffce 	bl	8000fe0 <HAL_InitTick>
  HAL_MspInit();
 8001044:	f7ff ffca 	bl	8000fdc <HAL_MspInit>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd08      	pop	{r3, pc}
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x10>)
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_IncTick+0x14>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	440b      	add	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000248 	.word	0x20000248
 8001064:	2000001c 	.word	0x2000001c

08001068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_GetTick+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000248 	.word	0x20000248

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fff6 	bl	8001068 <HAL_GetTick>
 800107c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001080:	bf1e      	ittt	ne
 8001082:	4b04      	ldrne	r3, [pc, #16]	; (8001094 <HAL_Delay+0x20>)
 8001084:	781b      	ldrbne	r3, [r3, #0]
 8001086:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	1b43      	subs	r3, r0, r5
 800108e:	42a3      	cmp	r3, r4
 8001090:	d3fa      	bcc.n	8001088 <HAL_Delay+0x14>
  {
  }
}
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	2000001c 	.word	0x2000001c

08001098 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010a6:	0412      	lsls	r2, r2, #16
 80010a8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010b4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b530      	push	{r4, r5, lr}
 80010c0:	68dc      	ldr	r4, [r3, #12]
 80010c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	bf28      	it	cs
 80010d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d8:	bf8c      	ite	hi
 80010da:	3c03      	subhi	r4, #3
 80010dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80010e2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	fa03 f304 	lsl.w	r3, r3, r4
 80010f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80010fc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80010fe:	db06      	blt.n	800110e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001104:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001108:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800110c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	f000 000f 	and.w	r0, r0, #15
 8001112:	4a02      	ldr	r2, [pc, #8]	; (800111c <HAL_NVIC_SetPriority+0x60>)
 8001114:	5413      	strb	r3, [r2, r0]
 8001116:	e7f9      	b.n	800110c <HAL_NVIC_SetPriority+0x50>
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	e000ed14 	.word	0xe000ed14

08001120 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001120:	2800      	cmp	r0, #0
 8001122:	db07      	blt.n	8001134 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001124:	0941      	lsrs	r1, r0, #5
 8001126:	2301      	movs	r3, #1
 8001128:	f000 001f 	and.w	r0, r0, #31
 800112c:	4a02      	ldr	r2, [pc, #8]	; (8001138 <HAL_NVIC_EnableIRQ+0x18>)
 800112e:	4083      	lsls	r3, r0
 8001130:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	3801      	subs	r0, #1
 800113e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001142:	d20b      	bcs.n	800115c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_SYSTICK_Config+0x24>)
 800114a:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001154:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001156:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001158:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800115c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001164:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_MPU_Disable+0x18>)
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001172:	2200      	movs	r2, #0
 8001174:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_MPU_Enable+0x1c>)
 8001182:	f040 0001 	orr.w	r0, r0, #1
 8001186:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800118a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001196:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011a0:	7843      	ldrb	r3, [r0, #1]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_MPU_ConfigRegion+0x54>)
{
 80011a4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80011a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80011aa:	7801      	ldrb	r1, [r0, #0]
 80011ac:	b1e9      	cbz	r1, 80011ea <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80011ae:	6843      	ldr	r3, [r0, #4]
 80011b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011b4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011b8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ba:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011be:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011c2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011c6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011c8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011cc:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ce:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011d2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011de:	7a01      	ldrb	r1, [r0, #8]
 80011e0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80011e8:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80011ea:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80011ee:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80011f2:	e7f9      	b.n	80011e8 <HAL_MPU_ConfigRegion+0x48>
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011f8:	6803      	ldr	r3, [r0, #0]
 80011fa:	2118      	movs	r1, #24
 80011fc:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001202:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001204:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001208:	fbb2 f1f1 	udiv	r1, r2, r1
{
 800120c:	b510      	push	{r4, lr}
  if (stream_number > 3U)
 800120e:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001210:	4c03      	ldr	r4, [pc, #12]	; (8001220 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001212:	bf88      	it	hi
 8001214:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001216:	5c61      	ldrb	r1, [r4, r1]
 8001218:	6583      	str	r3, [r0, #88]	; 0x58
 800121a:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800121c:	4618      	mov	r0, r3
 800121e:	bd10      	pop	{r4, pc}
 8001220:	08009e99 	.word	0x08009e99

08001224 <HAL_DMA_Init>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ff1e 	bl	8001068 <HAL_GetTick>
 800122c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800122e:	2c00      	cmp	r4, #0
 8001230:	d071      	beq.n	8001316 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001232:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001234:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001236:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800123a:	2300      	movs	r3, #0
 800123c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	07d8      	lsls	r0, r3, #31
 800124e:	d42e      	bmi.n	80012ae <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8001250:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001252:	4832      	ldr	r0, [pc, #200]	; (800131c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001254:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001256:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001258:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800125c:	432b      	orrs	r3, r5
 800125e:	68e5      	ldr	r5, [r4, #12]
 8001260:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	6925      	ldr	r5, [r4, #16]
 8001264:	432b      	orrs	r3, r5
 8001266:	6965      	ldr	r5, [r4, #20]
 8001268:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	69e5      	ldr	r5, [r4, #28]
 800126c:	430b      	orrs	r3, r1
 800126e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	6a25      	ldr	r5, [r4, #32]
 8001272:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001274:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001276:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001278:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800127a:	bf02      	ittt	eq
 800127c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001280:	4335      	orreq	r5, r6
 8001282:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001284:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8001286:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001288:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800128a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800128e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001292:	d132      	bne.n	80012fa <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 8001294:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001296:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001298:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800129a:	b375      	cbz	r5, 80012fa <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800129c:	b991      	cbnz	r1, 80012c4 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800129e:	2801      	cmp	r0, #1
 80012a0:	d020      	beq.n	80012e4 <HAL_DMA_Init+0xc0>
 80012a2:	f030 0102 	bics.w	r1, r0, #2
 80012a6:	d128      	bne.n	80012fa <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012a8:	01e9      	lsls	r1, r5, #7
 80012aa:	d526      	bpl.n	80012fa <HAL_DMA_Init+0xd6>
 80012ac:	e01d      	b.n	80012ea <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ae:	f7ff fedb 	bl	8001068 <HAL_GetTick>
 80012b2:	1b40      	subs	r0, r0, r5
 80012b4:	2805      	cmp	r0, #5
 80012b6:	d9c7      	bls.n	8001248 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ba:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012bc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012c4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80012c8:	d113      	bne.n	80012f2 <HAL_DMA_Init+0xce>
    switch (tmp)
 80012ca:	2803      	cmp	r0, #3
 80012cc:	d815      	bhi.n	80012fa <HAL_DMA_Init+0xd6>
 80012ce:	a101      	add	r1, pc, #4	; (adr r1, 80012d4 <HAL_DMA_Init+0xb0>)
 80012d0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80012d4:	080012eb 	.word	0x080012eb
 80012d8:	080012a9 	.word	0x080012a9
 80012dc:	080012eb 	.word	0x080012eb
 80012e0:	080012e5 	.word	0x080012e5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012e4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80012e8:	d107      	bne.n	80012fa <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ea:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80012ec:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012ee:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012f0:	e7e5      	b.n	80012be <HAL_DMA_Init+0x9a>
    switch (tmp)
 80012f2:	2802      	cmp	r0, #2
 80012f4:	d9f9      	bls.n	80012ea <HAL_DMA_Init+0xc6>
 80012f6:	2803      	cmp	r0, #3
 80012f8:	d0d6      	beq.n	80012a8 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80012fa:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff7b 	bl	80011f8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001302:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001304:	233f      	movs	r3, #63	; 0x3f
 8001306:	4093      	lsls	r3, r2
 8001308:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800130c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001310:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001314:	e7d5      	b.n	80012c2 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8001316:	2001      	movs	r0, #1
 8001318:	e7d3      	b.n	80012c2 <HAL_DMA_Init+0x9e>
 800131a:	bf00      	nop
 800131c:	e010803f 	.word	0xe010803f

08001320 <HAL_DMA_DeInit>:
{
 8001320:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001322:	4605      	mov	r5, r0
 8001324:	b320      	cbz	r0, 8001370 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001326:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800132a:	2b02      	cmp	r3, #2
 800132c:	b2dc      	uxtb	r4, r3
 800132e:	d01d      	beq.n	800136c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001330:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001332:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800133c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800133e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001340:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001342:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001344:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001346:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001348:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800134a:	f7ff ff55 	bl	80011f8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001350:	233f      	movs	r3, #63	; 0x3f
 8001352:	4093      	lsls	r3, r2
 8001354:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001356:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001358:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800135c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001360:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001364:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001368:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 800136c:	4620      	mov	r0, r4
 800136e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001370:	2401      	movs	r4, #1
 8001372:	e7fb      	b.n	800136c <HAL_DMA_DeInit+0x4c>

08001374 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8001374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001378:	4607      	mov	r7, r0
 800137a:	460d      	mov	r5, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff fe72 	bl	8001068 <HAL_GetTick>
 8001384:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800138a:	07db      	lsls	r3, r3, #31
 800138c:	d50a      	bpl.n	80013a4 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800138e:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
 8001392:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8001394:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8001396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800139a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800139e:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 80013a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80013a4:	f7ff fe60 	bl	8001068 <HAL_GetTick>
 80013a8:	eba0 0008 	sub.w	r0, r0, r8
 80013ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80013b0:	d9e9      	bls.n	8001386 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 80013b2:	2003      	movs	r0, #3
 80013b4:	e7f4      	b.n	80013a0 <DSI_ShortWrite.constprop.0+0x2c>

080013b6 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80013b6:	4770      	bx	lr

080013b8 <HAL_DSI_Init>:
{
 80013b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ba:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80013bc:	4604      	mov	r4, r0
 80013be:	2800      	cmp	r0, #0
 80013c0:	f000 80a9 	beq.w	8001516 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80013c4:	7c43      	ldrb	r3, [r0, #17]
 80013c6:	b90b      	cbnz	r3, 80013cc <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80013c8:	f7ff fff5 	bl	80013b6 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80013cc:	2303      	movs	r3, #3
 80013ce:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80013da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80013e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80013e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80013ee:	f7ff fe3b 	bl	8001068 <HAL_GetTick>
 80013f2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80013f4:	6822      	ldr	r2, [r4, #0]
 80013f6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80013fa:	04d9      	lsls	r1, r3, #19
 80013fc:	d57a      	bpl.n	80014f4 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80013fe:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001402:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8001406:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800140a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800140e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8001412:	e9d5 0300 	ldrd	r0, r3, [r5]
 8001416:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001418:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800141c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800141e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8001422:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001424:	430b      	orrs	r3, r1
 8001426:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800142a:	2300      	movs	r3, #0
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800143a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8001446:	f7ff fe15 	bl	8001074 <HAL_Delay>
  tickstart = HAL_GetTick();
 800144a:	f7ff fe0d 	bl	8001068 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001456:	05d2      	lsls	r2, r2, #23
 8001458:	d556      	bpl.n	8001508 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800145a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800145e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001462:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001464:	f042 0206 	orr.w	r2, r2, #6
 8001468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800146c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001470:	f022 0203 	bic.w	r2, r2, #3
 8001474:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001478:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800147c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800147e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001488:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800148c:	f022 0203 	bic.w	r2, r2, #3
 8001490:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001494:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001498:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800149a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800149c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80014ac:	491b      	ldr	r1, [pc, #108]	; (800151c <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80014ae:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80014b0:	686a      	ldr	r2, [r5, #4]
 80014b2:	2a01      	cmp	r2, #1
 80014b4:	bf38      	it	cc
 80014b6:	2201      	movcc	r2, #1
 80014b8:	434a      	muls	r2, r1
 80014ba:	68a9      	ldr	r1, [r5, #8]
 80014bc:	f001 0103 	and.w	r1, r1, #3
 80014c0:	408a      	lsls	r2, r1
 80014c2:	6829      	ldr	r1, [r5, #0]
 80014c4:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 80014c6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80014c8:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80014cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80014d0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80014d4:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80014d8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80014dc:	430a      	orrs	r2, r1
 80014de:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80014e2:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80014e6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 80014ea:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80014ec:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 80014ee:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80014f0:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80014f2:	e007      	b.n	8001504 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80014f4:	f7ff fdb8 	bl	8001068 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014fe:	f67f af79 	bls.w	80013f4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8001502:	2003      	movs	r0, #3
}
 8001504:	b002      	add	sp, #8
 8001506:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001508:	f7ff fdae 	bl	8001068 <HAL_GetTick>
 800150c:	1b80      	subs	r0, r0, r6
 800150e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001512:	d99d      	bls.n	8001450 <HAL_DSI_Init+0x98>
 8001514:	e7f5      	b.n	8001502 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e7f4      	b.n	8001504 <HAL_DSI_Init+0x14c>
 800151a:	bf00      	nop
 800151c:	003d0900 	.word	0x003d0900

08001520 <HAL_DSI_MspDeInit>:
 8001520:	4770      	bx	lr

08001522 <HAL_DSI_DeInit>:
{
 8001522:	b530      	push	{r4, r5, lr}
  if (hdsi == NULL)
 8001524:	4605      	mov	r5, r0
{
 8001526:	b085      	sub	sp, #20
  if (hdsi == NULL)
 8001528:	2800      	cmp	r0, #0
 800152a:	d042      	beq.n	80015b2 <HAL_DSI_DeInit+0x90>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800152c:	2303      	movs	r3, #3
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800152e:	2400      	movs	r4, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001530:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	9400      	str	r4, [sp, #0]
 8001536:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001542:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001546:	f002 0208 	and.w	r2, r2, #8
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 800154e:	9401      	str	r4, [sp, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	f002 0201 	and.w	r2, r2, #1
 800155e:	9201      	str	r2, [sp, #4]
 8001560:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001562:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001566:	f022 0206 	bic.w	r2, r2, #6
 800156a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 800156e:	9402      	str	r4, [sp, #8]
 8001570:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800157c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001580:	f002 0201 	and.w	r2, r2, #1
 8001584:	9202      	str	r2, [sp, #8]
 8001586:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 8001588:	9403      	str	r4, [sp, #12]
 800158a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800158e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001592:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001596:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800159a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 80015a2:	f7ff ffbd 	bl	8001520 <HAL_DSI_MspDeInit>
  return HAL_OK;
 80015a6:	4620      	mov	r0, r4
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80015a8:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 80015aa:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 80015ac:	746c      	strb	r4, [r5, #17]
}
 80015ae:	b005      	add	sp, #20
 80015b0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
 80015b4:	e7fb      	b.n	80015ae <HAL_DSI_DeInit+0x8c>

080015b6 <HAL_DSI_ErrorCallback>:
 80015b6:	4770      	bx	lr

080015b8 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80015b8:	6803      	ldr	r3, [r0, #0]
 80015ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015be:	07d1      	lsls	r1, r2, #31
{
 80015c0:	b510      	push	{r4, lr}
 80015c2:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80015c4:	d508      	bpl.n	80015d8 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80015c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015ca:	07d2      	lsls	r2, r2, #31
 80015cc:	d504      	bpl.n	80015d8 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80015d4:	f002 fa6c 	bl	8003ab0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015de:	0791      	lsls	r1, r2, #30
 80015e0:	d509      	bpl.n	80015f6 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80015e2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015e6:	0792      	lsls	r2, r2, #30
 80015e8:	d505      	bpl.n	80015f6 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80015ea:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80015ec:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80015ee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80015f2:	f002 fa79 	bl	8003ae8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80015f6:	69a3      	ldr	r3, [r4, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d04e      	beq.n	800169a <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80015fc:	6821      	ldr	r1, [r4, #0]
 80015fe:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8001602:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8001606:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8001608:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800160c:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 8001610:	400b      	ands	r3, r1

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8001612:	b291      	uxth	r1, r2
 8001614:	b119      	cbz	r1, 800161e <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8001616:	6961      	ldr	r1, [r4, #20]
 8001618:	f041 0101 	orr.w	r1, r1, #1
 800161c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800161e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8001622:	d003      	beq.n	800162c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8001624:	6962      	ldr	r2, [r4, #20]
 8001626:	f042 0202 	orr.w	r2, r2, #2
 800162a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800162c:	07d8      	lsls	r0, r3, #31
 800162e:	d503      	bpl.n	8001638 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8001630:	6962      	ldr	r2, [r4, #20]
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8001638:	0799      	lsls	r1, r3, #30
 800163a:	d503      	bpl.n	8001644 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800163c:	6962      	ldr	r2, [r4, #20]
 800163e:	f042 0208 	orr.w	r2, r2, #8
 8001642:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8001644:	f013 0f0c 	tst.w	r3, #12
 8001648:	d003      	beq.n	8001652 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800164a:	6962      	ldr	r2, [r4, #20]
 800164c:	f042 0210 	orr.w	r2, r2, #16
 8001650:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8001652:	06da      	lsls	r2, r3, #27
 8001654:	d503      	bpl.n	800165e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8001656:	6962      	ldr	r2, [r4, #20]
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800165e:	0698      	lsls	r0, r3, #26
 8001660:	d503      	bpl.n	800166a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8001662:	6962      	ldr	r2, [r4, #20]
 8001664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001668:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800166a:	0659      	lsls	r1, r3, #25
 800166c:	d503      	bpl.n	8001676 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800166e:	6962      	ldr	r2, [r4, #20]
 8001670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001674:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8001676:	061a      	lsls	r2, r3, #24
 8001678:	d503      	bpl.n	8001682 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800167a:	6962      	ldr	r2, [r4, #20]
 800167c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001680:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8001682:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8001686:	d003      	beq.n	8001690 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8001688:	6963      	ldr	r3, [r4, #20]
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8001690:	6963      	ldr	r3, [r4, #20]
 8001692:	b113      	cbz	r3, 800169a <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff ff8e 	bl	80015b6 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800169a:	bd10      	pop	{r4, pc}

0800169c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800169c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800169e:	7c03      	ldrb	r3, [r0, #16]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d06a      	beq.n	800177a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80016a4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80016a6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80016b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80016bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	f022 0203 	bic.w	r2, r2, #3
 80016ce:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	4322      	orrs	r2, r4
 80016d4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	f022 0207 	bic.w	r2, r2, #7
 80016dc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80016de:	695c      	ldr	r4, [r3, #20]
 80016e0:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80016e4:	432a      	orrs	r2, r5
 80016e6:	694d      	ldr	r5, [r1, #20]
 80016e8:	432a      	orrs	r2, r5
 80016ea:	4322      	orrs	r2, r4

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80016ec:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80016ee:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	f022 020f 	bic.w	r2, r2, #15
 80016f6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	4322      	orrs	r2, r4
 80016fc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80016fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001702:	f022 020e 	bic.w	r2, r2, #14
 8001706:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800170a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800170e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8001712:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8001714:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8001718:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800171a:	0c12      	lsrs	r2, r2, #16
 800171c:	0412      	lsls	r2, r2, #16
 800171e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8001720:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001722:	4322      	orrs	r2, r4
 8001724:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8001726:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800172a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800172e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8001732:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8001736:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800173a:	432a      	orrs	r2, r5
 800173c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800173e:	432a      	orrs	r2, r5
 8001740:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8001742:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8001744:	432a      	orrs	r2, r5
 8001746:	4322      	orrs	r2, r4
 8001748:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800174c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8001754:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001756:	430a      	orrs	r2, r1
 8001758:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800175a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8001766:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800176a:	f042 0202 	orr.w	r2, r2, #2
 800176e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001772:	2300      	movs	r3, #0
 8001774:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8001776:	4618      	mov	r0, r3
}
 8001778:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800177a:	2002      	movs	r0, #2
 800177c:	e7fc      	b.n	8001778 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08001780 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8001780:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001782:	7c03      	ldrb	r3, [r0, #16]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d02a      	beq.n	80017de <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_DSI_ConfigCommand+0x64>)
 800178c:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800178e:	4023      	ands	r3, r4
 8001790:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8001792:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8001794:	e9d1 3500 	ldrd	r3, r5, [r1]
 8001798:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800179a:	688d      	ldr	r5, [r1, #8]
 800179c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800179e:	68cd      	ldr	r5, [r1, #12]
 80017a0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80017a2:	690d      	ldr	r5, [r1, #16]
 80017a4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80017a6:	694d      	ldr	r5, [r1, #20]
 80017a8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80017aa:	698d      	ldr	r5, [r1, #24]
 80017ac:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80017ae:	69cd      	ldr	r5, [r1, #28]
 80017b0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80017b2:	6a0d      	ldr	r5, [r1, #32]
 80017b4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80017b6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80017b8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80017ba:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80017bc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80017be:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80017c0:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80017c2:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80017c4:	4323      	orrs	r3, r4
 80017c6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80017c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80017ca:	f023 0302 	bic.w	r3, r3, #2
 80017ce:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80017d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80017d6:	2300      	movs	r3, #0
 80017d8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80017da:	4618      	mov	r0, r3
}
 80017dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80017de:	2002      	movs	r0, #2
 80017e0:	e7fc      	b.n	80017dc <HAL_DSI_ConfigCommand+0x5c>
 80017e2:	bf00      	nop
 80017e4:	fef080ff 	.word	0xfef080ff

080017e8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80017e8:	7c03      	ldrb	r3, [r0, #16]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d00b      	beq.n	8001806 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80017ee:	6803      	ldr	r3, [r0, #0]
 80017f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f2:	f022 021f 	bic.w	r2, r2, #31
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80017f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fa:	4311      	orrs	r1, r2
 80017fc:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80017fe:	2300      	movs	r3, #0
 8001800:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8001802:	4618      	mov	r0, r3
 8001804:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8001806:	2002      	movs	r0, #2
}
 8001808:	4770      	bx	lr

0800180a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800180a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800180c:	7c03      	ldrb	r3, [r0, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d035      	beq.n	800187e <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001812:	e9d1 4300 	ldrd	r4, r3, [r1]
 8001816:	429c      	cmp	r4, r3
 8001818:	bf38      	it	cc
 800181a:	461c      	movcc	r4, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001822:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8001826:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800182a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800182e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001832:	4322      	orrs	r2, r4
 8001834:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8001838:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800183c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001840:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001844:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8001848:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800184c:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800184e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001852:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8001854:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001856:	432a      	orrs	r2, r5
 8001858:	4322      	orrs	r2, r4
 800185a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800185e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001862:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800186a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800186e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001872:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001876:	2300      	movs	r3, #0
 8001878:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800187a:	4618      	mov	r0, r3
}
 800187c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800187e:	2002      	movs	r0, #2
 8001880:	e7fc      	b.n	800187c <HAL_DSI_ConfigPhyTimer+0x72>

08001882 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001882:	7c03      	ldrb	r3, [r0, #16]
{
 8001884:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8001886:	2b01      	cmp	r3, #1
 8001888:	d01c      	beq.n	80018c4 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800188a:	6802      	ldr	r2, [r0, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	6851      	ldr	r1, [r2, #4]
 8001892:	f041 0101 	orr.w	r1, r1, #1
 8001896:	6051      	str	r1, [r2, #4]
 8001898:	6851      	ldr	r1, [r2, #4]
 800189a:	f001 0101 	and.w	r1, r1, #1
 800189e:	9100      	str	r1, [sp, #0]
 80018a0:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80018a8:	f041 0108 	orr.w	r1, r1, #8
 80018ac:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80018b0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80018b4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80018b6:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80018b8:	f002 0208 	and.w	r2, r2, #8
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	9a01      	ldr	r2, [sp, #4]
}
 80018c0:	b002      	add	sp, #8
 80018c2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80018c4:	2002      	movs	r0, #2
 80018c6:	e7fb      	b.n	80018c0 <HAL_DSI_Start+0x3e>

080018c8 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80018c8:	7c03      	ldrb	r3, [r0, #16]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d00a      	beq.n	80018e4 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80018ce:	6802      	ldr	r2, [r0, #0]
 80018d0:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80018dc:	2300      	movs	r3, #0
 80018de:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80018e0:	4618      	mov	r0, r3
 80018e2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80018e4:	2002      	movs	r0, #2
}
 80018e6:	4770      	bx	lr

080018e8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80018e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80018ea:	7c05      	ldrb	r5, [r0, #16]
{
 80018ec:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80018ee:	2d01      	cmp	r5, #1
 80018f0:	d009      	beq.n	8001906 <HAL_DSI_ShortWrite+0x1e>
 80018f2:	2501      	movs	r5, #1
 80018f4:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80018f6:	9d06      	ldr	r5, [sp, #24]
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	f7ff fd3b 	bl	8001374 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80018fe:	2300      	movs	r3, #0
 8001900:	7423      	strb	r3, [r4, #16]

  return status;
}
 8001902:	b003      	add	sp, #12
 8001904:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8001906:	2002      	movs	r0, #2
 8001908:	e7fb      	b.n	8001902 <HAL_DSI_ShortWrite+0x1a>

0800190a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800190a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190e:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8001910:	7c03      	ldrb	r3, [r0, #16]
{
 8001912:	4606      	mov	r6, r0
 8001914:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8001916:	2b01      	cmp	r3, #1
{
 8001918:	4615      	mov	r5, r2
 800191a:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800191e:	d055      	beq.n	80019cc <HAL_DSI_LongWrite+0xc2>
 8001920:	2301      	movs	r3, #1
 8001922:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8001924:	f7ff fba0 	bl	8001068 <HAL_GetTick>
 8001928:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800192a:	f8d6 c000 	ldr.w	ip, [r6]
 800192e:	f8dc 3074 	ldr.w	r3, [ip, #116]	; 0x74
 8001932:	f013 0a01 	ands.w	sl, r3, #1
 8001936:	d01c      	beq.n	8001972 <HAL_DSI_LongWrite+0x68>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001938:	2c03      	cmp	r4, #3
 800193a:	4621      	mov	r1, r4

  for (count = 0U; count < nbBytes; count++)
 800193c:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8001940:	bf28      	it	cs
 8001942:	2103      	movcs	r1, #3
  for (count = 0U; count < nbBytes; count++)
 8001944:	428a      	cmp	r2, r1
 8001946:	d120      	bne.n	800198a <HAL_DSI_LongWrite+0x80>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8001948:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800194a:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800194c:	f8cc 9070 	str.w	r9, [ip, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8001950:	bb1b      	cbnz	r3, 800199a <HAL_DSI_LongWrite+0x90>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8001952:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8001954:	ea45 1187 	orr.w	r1, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8001958:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800195a:	0222      	lsls	r2, r4, #8
 800195c:	0224      	lsls	r4, r4, #8
 800195e:	b292      	uxth	r2, r2
 8001960:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8001964:	ea41 0502 	orr.w	r5, r1, r2
 8001968:	4325      	orrs	r5, r4
 800196a:	f8cc 506c 	str.w	r5, [ip, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800196e:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8001970:	e009      	b.n	8001986 <HAL_DSI_LongWrite+0x7c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001972:	f7ff fb79 	bl	8001068 <HAL_GetTick>
 8001976:	eba0 000b 	sub.w	r0, r0, fp
 800197a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800197e:	d9d4      	bls.n	800192a <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8001980:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8001982:	f886 a010 	strb.w	sl, [r6, #16]
}
 8001986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800198a:	f818 3002 	ldrb.w	r3, [r8, r2]
 800198e:	3201      	adds	r2, #1
 8001990:	00d0      	lsls	r0, r2, #3
 8001992:	4083      	lsls	r3, r0
 8001994:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8001998:	e7d4      	b.n	8001944 <HAL_DSI_LongWrite+0x3a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800199a:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800199c:	f04f 0000 	mov.w	r0, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80019a0:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80019a2:	4601      	mov	r1, r0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80019a4:	bf28      	it	cs
 80019a6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80019aa:	f812 8001 	ldrb.w	r8, [r2, r1]
 80019ae:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80019b2:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80019b4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80019b8:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80019ba:	ea40 0008 	orr.w	r0, r0, r8
    for (count = 0U; count < nbBytes; count++)
 80019be:	d1f4      	bne.n	80019aa <HAL_DSI_LongWrite+0xa0>
    uicounter -= nbBytes;
 80019c0:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80019c4:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80019c6:	f8cc 0070 	str.w	r0, [ip, #112]	; 0x70
    pparams += nbBytes;
 80019ca:	e7c1      	b.n	8001950 <HAL_DSI_LongWrite+0x46>
  __HAL_LOCK(hdsi);
 80019cc:	2002      	movs	r0, #2
 80019ce:	e7da      	b.n	8001986 <HAL_DSI_LongWrite+0x7c>

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019d4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8001b90 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4a6b      	ldr	r2, [pc, #428]	; (8001b88 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 80019dc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80019e0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80019e6:	43ac      	bics	r4, r5
 80019e8:	f040 80b4 	bne.w	8001b54 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ec:	684d      	ldr	r5, [r1, #4]
 80019ee:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019f2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019f8:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019fe:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a00:	2f01      	cmp	r7, #1
 8001a02:	d834      	bhi.n	8001a6e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8001a04:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a06:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a0a:	68cf      	ldr	r7, [r1, #12]
 8001a0c:	fa07 f708 	lsl.w	r7, r7, r8
 8001a10:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001a14:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a16:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001a20:	409f      	lsls	r7, r3
 8001a22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a26:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a28:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a2c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a30:	688f      	ldr	r7, [r1, #8]
 8001a32:	fa07 f708 	lsl.w	r7, r7, r8
 8001a36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001a3a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	d119      	bne.n	8001a72 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8001a3e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a42:	f003 0b07 	and.w	fp, r3, #7
 8001a46:	f04f 0e0f 	mov.w	lr, #15
 8001a4a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001a4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001a52:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a56:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001a5a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a5e:	690f      	ldr	r7, [r1, #16]
 8001a60:	fa07 f70b 	lsl.w	r7, r7, fp
 8001a64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001a68:	f8ca 7020 	str.w	r7, [sl, #32]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	2c03      	cmp	r4, #3
 8001a70:	d1da      	bne.n	8001a28 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8001a72:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a74:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a7c:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a80:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001a84:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a86:	d065      	beq.n	8001b54 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001a8c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a90:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001a98:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a9c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8001aa2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001aa6:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001aaa:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001aae:	9401      	str	r4, [sp, #4]
 8001ab0:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab2:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8001ab4:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab8:	40bc      	lsls	r4, r7
 8001aba:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001abe:	4c33      	ldr	r4, [pc, #204]	; (8001b8c <HAL_GPIO_Init+0x1bc>)
 8001ac0:	42a0      	cmp	r0, r4
 8001ac2:	d04e      	beq.n	8001b62 <HAL_GPIO_Init+0x192>
 8001ac4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ac8:	42a0      	cmp	r0, r4
 8001aca:	d04c      	beq.n	8001b66 <HAL_GPIO_Init+0x196>
 8001acc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ad0:	42a0      	cmp	r0, r4
 8001ad2:	d04a      	beq.n	8001b6a <HAL_GPIO_Init+0x19a>
 8001ad4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ad8:	42a0      	cmp	r0, r4
 8001ada:	d048      	beq.n	8001b6e <HAL_GPIO_Init+0x19e>
 8001adc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ae0:	42a0      	cmp	r0, r4
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0x1a2>
 8001ae4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ae8:	42a0      	cmp	r0, r4
 8001aea:	d044      	beq.n	8001b76 <HAL_GPIO_Init+0x1a6>
 8001aec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001af0:	42a0      	cmp	r0, r4
 8001af2:	d042      	beq.n	8001b7a <HAL_GPIO_Init+0x1aa>
 8001af4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d040      	beq.n	8001b7e <HAL_GPIO_Init+0x1ae>
 8001afc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b00:	42a0      	cmp	r0, r4
 8001b02:	d03e      	beq.n	8001b82 <HAL_GPIO_Init+0x1b2>
 8001b04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b08:	42a0      	cmp	r0, r4
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2409      	moveq	r4, #9
 8001b0e:	240a      	movne	r4, #10
 8001b10:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b12:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b14:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b18:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8001b1e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	bf54      	ite	pl
 8001b22:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001b24:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8001b2a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001b2c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	bf54      	ite	pl
 8001b30:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001b32:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b36:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8001b38:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001b3a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	bf54      	ite	pl
 8001b3e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001b40:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b44:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001b46:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001b48:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	bf54      	ite	pl
 8001b4c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001b4e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001b52:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b54:	3301      	adds	r3, #1
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	f47f af40 	bne.w	80019dc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001b5c:	b003      	add	sp, #12
 8001b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b62:	2400      	movs	r4, #0
 8001b64:	e7d4      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b66:	2401      	movs	r4, #1
 8001b68:	e7d2      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b6a:	2402      	movs	r4, #2
 8001b6c:	e7d0      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b6e:	2403      	movs	r4, #3
 8001b70:	e7ce      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b72:	2404      	movs	r4, #4
 8001b74:	e7cc      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b76:	2405      	movs	r4, #5
 8001b78:	e7ca      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b7a:	2406      	movs	r4, #6
 8001b7c:	e7c8      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b7e:	2407      	movs	r4, #7
 8001b80:	e7c6      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b82:	2408      	movs	r4, #8
 8001b84:	e7c4      	b.n	8001b10 <HAL_GPIO_Init+0x140>
 8001b86:	bf00      	nop
 8001b88:	40013c00 	.word	0x40013c00
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	b10a      	cbz	r2, 8001b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b96:	6181      	str	r1, [r0, #24]
  }
}
 8001b98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b9a:	0409      	lsls	r1, r1, #16
 8001b9c:	e7fb      	b.n	8001b96 <HAL_GPIO_WritePin+0x2>

08001b9e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b9e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba0:	ea01 0203 	and.w	r2, r1, r3
 8001ba4:	ea21 0103 	bic.w	r1, r1, r3
 8001ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001bac:	6181      	str	r1, [r0, #24]
}
 8001bae:	4770      	bx	lr

08001bb0 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bb0:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bb2:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001bb4:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bb8:	3284      	adds	r2, #132	; 0x84
 8001bba:	1883      	adds	r3, r0, r2
{
 8001bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bc0:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bc2:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bc6:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001bc8:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bcc:	684c      	ldr	r4, [r1, #4]
 8001bce:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bd2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001bd6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001bda:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001bdc:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001bde:	68c5      	ldr	r5, [r0, #12]
 8001be0:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8001be4:	443d      	add	r5, r7
 8001be6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001bea:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001bec:	68c6      	ldr	r6, [r0, #12]
 8001bee:	68cd      	ldr	r5, [r1, #12]
 8001bf0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001bf4:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001bf6:	689d      	ldr	r5, [r3, #8]
 8001bf8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8001bfc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001bfe:	688d      	ldr	r5, [r1, #8]
 8001c00:	68c7      	ldr	r7, [r0, #12]
 8001c02:	3501      	adds	r5, #1
 8001c04:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001c08:	443d      	add	r5, r7
 8001c0a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c0e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001c10:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001c12:	691d      	ldr	r5, [r3, #16]
 8001c14:	f025 0507 	bic.w	r5, r5, #7
 8001c18:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c1a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001c1c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001c1e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001c22:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001c26:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001c2a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001c2e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001c32:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001c36:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8001c3a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001c3c:	695d      	ldr	r5, [r3, #20]
 8001c3e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001c42:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001c44:	694d      	ldr	r5, [r1, #20]
 8001c46:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001c48:	69dd      	ldr	r5, [r3, #28]
 8001c4a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8001c4e:	f025 0507 	bic.w	r5, r5, #7
 8001c52:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001c54:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8001c58:	433d      	orrs	r5, r7
 8001c5a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c5c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c5e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001c60:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001c64:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001c66:	b1fe      	cbz	r6, 8001ca8 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001c68:	3e01      	subs	r6, #1
 8001c6a:	2e06      	cmp	r6, #6
 8001c6c:	d81e      	bhi.n	8001cac <LTDC_SetConfig+0xfc>
 8001c6e:	4d10      	ldr	r5, [pc, #64]	; (8001cb0 <LTDC_SetConfig+0x100>)
 8001c70:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c72:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001c74:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c78:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001c7c:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c7e:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001c80:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001c82:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c84:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001c86:	436e      	muls	r6, r5
 8001c88:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001c8c:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001c8e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001c90:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8001c94:	f024 0407 	bic.w	r4, r4, #7
 8001c98:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c9a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001c9c:	5883      	ldr	r3, [r0, r2]
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	5083      	str	r3, [r0, r2]
}
 8001ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001ca8:	2504      	movs	r5, #4
 8001caa:	e7e2      	b.n	8001c72 <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001cac:	2501      	movs	r5, #1
 8001cae:	e7e0      	b.n	8001c72 <LTDC_SetConfig+0xc2>
 8001cb0:	08009ea1 	.word	0x08009ea1

08001cb4 <HAL_LTDC_MspInit>:
}
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_LTDC_Init>:
{
 8001cb8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001cba:	4604      	mov	r4, r0
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d063      	beq.n	8001d88 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001cc0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc8:	b91b      	cbnz	r3, 8001cd2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001cca:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001cce:	f7ff fff1 	bl	8001cb4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001ce0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001ce2:	6999      	ldr	r1, [r3, #24]
 8001ce4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	68e0      	ldr	r0, [r4, #12]
 8001cec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001cee:	6920      	ldr	r0, [r4, #16]
 8001cf0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001cf2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cf4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001cf6:	4925      	ldr	r1, [pc, #148]	; (8001d8c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cf8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d06:	69a0      	ldr	r0, [r4, #24]
 8001d08:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001d0a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d0c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	400a      	ands	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d1a:	6a20      	ldr	r0, [r4, #32]
 8001d1c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d20:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	400a      	ands	r2, r1
 8001d26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d30:	4302      	orrs	r2, r0
 8001d32:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001d38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001d3a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d44:	430a      	orrs	r2, r1
 8001d46:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001d4a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001d52:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001d58:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001d5a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001d5e:	432a      	orrs	r2, r5
 8001d60:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001d64:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001d66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6e:	f042 0206 	orr.w	r2, r2, #6
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d7c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001d7e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
 8001d8a:	e7fc      	b.n	8001d86 <HAL_LTDC_Init+0xce>
 8001d8c:	f000f800 	.word	0xf000f800

08001d90 <HAL_LTDC_MspDeInit>:
 8001d90:	4770      	bx	lr

08001d92 <HAL_LTDC_DeInit>:
{
 8001d92:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001d94:	4604      	mov	r4, r0
 8001d96:	b360      	cbz	r0, 8001df2 <HAL_LTDC_DeInit+0x60>
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 8001d98:	6803      	ldr	r3, [r0, #0]
 8001d9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 8001da6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 8001db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db4:	f042 0202 	orr.w	r2, r2, #2
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001dba:	f7ff f955 	bl	8001068 <HAL_GetTick>
 8001dbe:	4605      	mov	r5, r0
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	075b      	lsls	r3, r3, #29
 8001dc6:	d404      	bmi.n	8001dd2 <HAL_LTDC_DeInit+0x40>
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 8001dc8:	f7ff f94e 	bl	8001068 <HAL_GetTick>
 8001dcc:	1b40      	subs	r0, r0, r5
 8001dce:	2864      	cmp	r0, #100	; 0x64
 8001dd0:	d9f6      	bls.n	8001dc0 <HAL_LTDC_DeInit+0x2e>
  __HAL_LTDC_DISABLE(hltdc);
 8001dd2:	6822      	ldr	r2, [r4, #0]
  HAL_LTDC_MspDeInit(hltdc);
 8001dd4:	4620      	mov	r0, r4
  __HAL_LTDC_DISABLE(hltdc);
 8001dd6:	6993      	ldr	r3, [r2, #24]
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6193      	str	r3, [r2, #24]
  HAL_LTDC_MspDeInit(hltdc);
 8001dde:	f7ff ffd7 	bl	8001d90 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001de2:	2000      	movs	r0, #0
 8001de4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 8001de8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001dec:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
 8001df4:	e7fc      	b.n	8001df0 <HAL_LTDC_DeInit+0x5e>

08001df6 <HAL_LTDC_ErrorCallback>:
 8001df6:	4770      	bx	lr

08001df8 <HAL_LTDC_LineEventCallback>:
 8001df8:	4770      	bx	lr

08001dfa <HAL_LTDC_ReloadEventCallback>:
 8001dfa:	4770      	bx	lr

08001dfc <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001dfc:	6803      	ldr	r3, [r0, #0]
{
 8001dfe:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001e00:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8001e02:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001e04:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001e06:	0772      	lsls	r2, r6, #29
 8001e08:	d514      	bpl.n	8001e34 <HAL_LTDC_IRQHandler+0x38>
 8001e0a:	0769      	lsls	r1, r5, #29
 8001e0c:	d512      	bpl.n	8001e34 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e10:	f022 0204 	bic.w	r2, r2, #4
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e16:	2204      	movs	r2, #4
 8001e18:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e1a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8001e26:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e28:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e2c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e30:	f7ff ffe1 	bl	8001df6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001e34:	07b2      	lsls	r2, r6, #30
 8001e36:	d516      	bpl.n	8001e66 <HAL_LTDC_IRQHandler+0x6a>
 8001e38:	07ab      	lsls	r3, r5, #30
 8001e3a:	d514      	bpl.n	8001e66 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e3c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8001e3e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e42:	f022 0202 	bic.w	r2, r2, #2
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e48:	2202      	movs	r2, #2
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e56:	2304      	movs	r3, #4
 8001e58:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e62:	f7ff ffc8 	bl	8001df6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001e66:	07f0      	lsls	r0, r6, #31
 8001e68:	d510      	bpl.n	8001e8c <HAL_LTDC_IRQHandler+0x90>
 8001e6a:	07e9      	lsls	r1, r5, #31
 8001e6c:	d50e      	bpl.n	8001e8c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001e6e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8001e70:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8001e7e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e80:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e84:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001e88:	f7ff ffb6 	bl	8001df8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001e8c:	0732      	lsls	r2, r6, #28
 8001e8e:	d511      	bpl.n	8001eb4 <HAL_LTDC_IRQHandler+0xb8>
 8001e90:	072b      	lsls	r3, r5, #28
 8001e92:	d50f      	bpl.n	8001eb4 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001e94:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001e96:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	f022 0208 	bic.w	r2, r2, #8
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001eb0:	f7ff ffa3 	bl	8001dfa <HAL_LTDC_ReloadEventCallback>
}
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}

08001eb6 <HAL_LTDC_ConfigLayer>:
{
 8001eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8001eba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	460f      	mov	r7, r1
 8001ec2:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f04f 0002 	mov.w	r0, #2
 8001eca:	d01f      	beq.n	8001f0c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ecc:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001ece:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ed2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ed4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ed8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8001edc:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ee0:	3438      	adds	r4, #56	; 0x38
 8001ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eee:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	4662      	mov	r2, ip
 8001ef4:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ef6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001ef8:	f7ff fe5a 	bl	8001bb0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001efc:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001efe:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f00:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001f04:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f08:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f10 <HAL_LTDC_ConfigColorKeying>:
{
 8001f10:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8001f12:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	f04f 0302 	mov.w	r3, #2
 8001f1c:	d013      	beq.n	8001f46 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001f1e:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f20:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8001f24:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8001f28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f34:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8001f36:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f3a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f3c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f40:	2300      	movs	r3, #0
 8001f42:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001f46:	4618      	mov	r0, r3
}
 8001f48:	bd10      	pop	{r4, pc}

08001f4a <HAL_LTDC_ConfigCLUT>:
{
 8001f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001f4c:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8001f50:	2c01      	cmp	r4, #1
 8001f52:	f04f 0402 	mov.w	r4, #2
 8001f56:	d02e      	beq.n	8001fb6 <HAL_LTDC_ConfigCLUT+0x6c>
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001f58:	ea4f 1cc3 	mov.w	ip, r3, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f5c:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001f60:	2434      	movs	r4, #52	; 0x34
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001f62:	2500      	movs	r5, #0
 8001f64:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8001f68:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001f6c:	fb04 0303 	mla	r3, r4, r3, r0
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001f70:	4295      	cmp	r5, r2
 8001f72:	d107      	bne.n	8001f84 <HAL_LTDC_ConfigCLUT+0x3a>
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8001f80:	4618      	mov	r0, r3
}
 8001f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001f84:	6c9f      	ldr	r7, [r3, #72]	; 0x48
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8001f86:	f851 6025 	ldr.w	r6, [r1, r5, lsl #2]
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001f8a:	2f06      	cmp	r7, #6
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8001f8c:	f406 047f 	and.w	r4, r6, #16711680	; 0xff0000
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8001f90:	d10c      	bne.n	8001fac <HAL_LTDC_ConfigCLUT+0x62>
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8001f92:	fb0e f705 	mul.w	r7, lr, r5
 8001f96:	4327      	orrs	r7, r4
 8001f98:	b2f4      	uxtb	r4, r6
 8001f9a:	4327      	orrs	r7, r4
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8001f9c:	f406 447f 	and.w	r4, r6, #65280	; 0xff00
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8001fa0:	433c      	orrs	r4, r7
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001fa2:	6806      	ldr	r6, [r0, #0]
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001fa4:	3501      	adds	r5, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8001fa6:	4466      	add	r6, ip
 8001fa8:	6434      	str	r4, [r6, #64]	; 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
 8001faa:	e7e1      	b.n	8001f70 <HAL_LTDC_ConfigCLUT+0x26>
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8001fac:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001fb0:	b2b6      	uxth	r6, r6
 8001fb2:	4334      	orrs	r4, r6
 8001fb4:	e7f5      	b.n	8001fa2 <HAL_LTDC_ConfigCLUT+0x58>
  __HAL_LOCK(hltdc);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	e7e3      	b.n	8001f82 <HAL_LTDC_ConfigCLUT+0x38>

08001fba <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8001fba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	f04f 0302 	mov.w	r3, #2
 8001fc4:	d00f      	beq.n	8001fe6 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001fc6:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001fc8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8001fcc:	6803      	ldr	r3, [r0, #0]
 8001fce:	3184      	adds	r1, #132	; 0x84
 8001fd0:	585a      	ldr	r2, [r3, r1]
 8001fd2:	f042 0202 	orr.w	r2, r2, #2
 8001fd6:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8001fdc:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001fde:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001fe2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001fe6:	4618      	mov	r0, r3
}
 8001fe8:	4770      	bx	lr

08001fea <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 8001fea:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	f04f 0302 	mov.w	r3, #2
 8001ff4:	d00f      	beq.n	8002016 <HAL_LTDC_DisableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001ff6:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ff8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8001ffc:	6803      	ldr	r3, [r0, #0]
 8001ffe:	3184      	adds	r1, #132	; 0x84
 8002000:	585a      	ldr	r2, [r3, r1]
 8002002:	f022 0202 	bic.w	r2, r2, #2
 8002006:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002008:	2201      	movs	r2, #1
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800200c:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800200e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002012:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002016:	4618      	mov	r0, r3
}
 8002018:	4770      	bx	lr

0800201a <HAL_LTDC_EnableCLUT>:
  __HAL_LOCK(hltdc);
 800201a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800201e:	2b01      	cmp	r3, #1
 8002020:	f04f 0302 	mov.w	r3, #2
 8002024:	d00f      	beq.n	8002046 <HAL_LTDC_EnableCLUT+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002026:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002028:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	3184      	adds	r1, #132	; 0x84
 8002030:	585a      	ldr	r2, [r3, r1]
 8002032:	f042 0210 	orr.w	r2, r2, #16
 8002036:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002038:	2201      	movs	r2, #1
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 800203c:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800203e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002042:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002046:	4618      	mov	r0, r3
}
 8002048:	4770      	bx	lr

0800204a <HAL_LTDC_SetWindowPosition>:
{
 800204a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800204c:	f890 50a0 	ldrb.w	r5, [r0, #160]	; 0xa0
{
 8002050:	4604      	mov	r4, r0
 8002052:	469c      	mov	ip, r3
  __HAL_LOCK(hltdc);
 8002054:	2d01      	cmp	r5, #1
 8002056:	f04f 0502 	mov.w	r5, #2
 800205a:	d01d      	beq.n	8002098 <HAL_LTDC_SetWindowPosition+0x4e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800205c:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
  pLayerCfg->WindowX0 = X0;
 8002060:	2534      	movs	r5, #52	; 0x34
  __HAL_LOCK(hltdc);
 8002062:	2701      	movs	r7, #1
  pLayerCfg->WindowX0 = X0;
 8002064:	435d      	muls	r5, r3
  __HAL_LOCK(hltdc);
 8002066:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 800206a:	1946      	adds	r6, r0, r5
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800206c:	6e33      	ldr	r3, [r6, #96]	; 0x60
  pLayerCfg->WindowX0 = X0;
 800206e:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002070:	4419      	add	r1, r3
  pLayerCfg->WindowY0 = Y0;
 8002072:	e9c6 120f 	strd	r1, r2, [r6, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002076:	6e71      	ldr	r1, [r6, #100]	; 0x64
 8002078:	4411      	add	r1, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800207a:	4662      	mov	r2, ip
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800207c:	6471      	str	r1, [r6, #68]	; 0x44
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800207e:	f105 0138 	add.w	r1, r5, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002082:	4401      	add	r1, r0
 8002084:	f7ff fd94 	bl	8001bb0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002088:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800208a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800208c:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800208e:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002092:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8002098:	4628      	mov	r0, r5
 800209a:	e7fc      	b.n	8002096 <HAL_LTDC_SetWindowPosition+0x4c>

0800209c <HAL_LTDC_SetAlpha>:
{
 800209c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 800209e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80020a2:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f04f 0302 	mov.w	r3, #2
 80020aa:	d015      	beq.n	80020d8 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020ac:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 80020b0:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 80020b2:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
 80020b4:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 80020b6:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 80020ba:	18c5      	adds	r5, r0, r3
 80020bc:	64e9      	str	r1, [r5, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80020be:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80020c2:	4401      	add	r1, r0
 80020c4:	f7ff fd74 	bl	8001bb0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80020c8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80020ca:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80020cc:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80020ce:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80020d2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80020d8:	4618      	mov	r0, r3
 80020da:	e7fc      	b.n	80020d6 <HAL_LTDC_SetAlpha+0x3a>

080020dc <HAL_LTDC_SetAddress>:
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 80020de:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80020e2:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f04f 0302 	mov.w	r3, #2
 80020ea:	d015      	beq.n	8002118 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020ec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 80020f0:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 80020f2:	2601      	movs	r6, #1
  pLayerCfg->FBStartAdress = Address;
 80020f4:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 80020f6:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 80020fa:	18c5      	adds	r5, r0, r3
 80020fc:	65e9      	str	r1, [r5, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80020fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002102:	4401      	add	r1, r0
 8002104:	f7ff fd54 	bl	8001bb0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002108:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800210a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800210c:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800210e:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002112:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8002116:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8002118:	4618      	mov	r0, r3
 800211a:	e7fc      	b.n	8002116 <HAL_LTDC_SetAddress+0x3a>

0800211c <HAL_LTDC_SetPitch>:
{
 800211c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800211e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002122:	2b01      	cmp	r3, #1
 8002124:	f04f 0302 	mov.w	r3, #2
 8002128:	d029      	beq.n	800217e <HAL_LTDC_SetPitch+0x62>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800212a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800212e:	2334      	movs	r3, #52	; 0x34
 8002130:	fb03 0302 	mla	r3, r3, r2, r0
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002136:	b323      	cbz	r3, 8002182 <HAL_LTDC_SetPitch+0x66>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002138:	3b01      	subs	r3, #1
 800213a:	2b06      	cmp	r3, #6
 800213c:	d823      	bhi.n	8002186 <HAL_LTDC_SetPitch+0x6a>
 800213e:	4c13      	ldr	r4, [pc, #76]	; (800218c <HAL_LTDC_SetPitch+0x70>)
 8002140:	5ce4      	ldrb	r4, [r4, r3]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8002142:	01d2      	lsls	r2, r2, #7
 8002144:	6803      	ldr	r3, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8002146:	4361      	muls	r1, r4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8002148:	3284      	adds	r2, #132	; 0x84
 800214a:	4413      	add	r3, r2
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8002152:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_LTDC_SetPitch+0x74>)
 800215a:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800215c:	f045 0501 	orr.w	r5, r5, #1
 8002160:	6255      	str	r5, [r2, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8002162:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002164:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8002168:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800216a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002172:	2301      	movs	r3, #1
 8002174:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002178:	2300      	movs	r3, #0
 800217a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800217e:	4618      	mov	r0, r3
}
 8002180:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8002182:	2404      	movs	r4, #4
 8002184:	e7dd      	b.n	8002142 <HAL_LTDC_SetPitch+0x26>
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002186:	2401      	movs	r4, #1
 8002188:	e7db      	b.n	8002142 <HAL_LTDC_SetPitch+0x26>
 800218a:	bf00      	nop
 800218c:	08009ea1 	.word	0x08009ea1
 8002190:	40016800 	.word	0x40016800

08002194 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002196:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800219a:	4c19      	ldr	r4, [pc, #100]	; (8002200 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b4:	f7fe ff58 	bl	8001068 <HAL_GetTick>
 80021b8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	03da      	lsls	r2, r3, #15
 80021be:	d50c      	bpl.n	80021da <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021c0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021c2:	4d0f      	ldr	r5, [pc, #60]	; (8002200 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021ca:	f7fe ff4d 	bl	8001068 <HAL_GetTick>
 80021ce:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021d0:	686b      	ldr	r3, [r5, #4]
 80021d2:	039b      	lsls	r3, r3, #14
 80021d4:	d50a      	bpl.n	80021ec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80021d6:	2000      	movs	r0, #0
 80021d8:	e006      	b.n	80021e8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021da:	f7fe ff45 	bl	8001068 <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021e4:	d9e9      	bls.n	80021ba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
}
 80021e8:	b003      	add	sp, #12
 80021ea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ec:	f7fe ff3c 	bl	8001068 <HAL_GetTick>
 80021f0:	1b00      	subs	r0, r0, r4
 80021f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80021f6:	d9eb      	bls.n	80021d0 <HAL_PWREx_EnableOverDrive+0x3c>
 80021f8:	e7f5      	b.n	80021e6 <HAL_PWREx_EnableOverDrive+0x52>
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	4604      	mov	r4, r0
 800220a:	b340      	cbz	r0, 800225e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220c:	6803      	ldr	r3, [r0, #0]
 800220e:	07db      	lsls	r3, r3, #31
 8002210:	d410      	bmi.n	8002234 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	079f      	lsls	r7, r3, #30
 8002216:	d461      	bmi.n	80022dc <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	0719      	lsls	r1, r3, #28
 800221c:	f100 80a6 	bmi.w	800236c <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	075a      	lsls	r2, r3, #29
 8002224:	f100 80c7 	bmi.w	80023b6 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002228:	69a2      	ldr	r2, [r4, #24]
 800222a:	2a00      	cmp	r2, #0
 800222c:	f040 8130 	bne.w	8002490 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
 8002232:	e02c      	b.n	800228e <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002234:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	f002 020c 	and.w	r2, r2, #12
 800223c:	2a04      	cmp	r2, #4
 800223e:	d007      	beq.n	8002250 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	f002 020c 	and.w	r2, r2, #12
 8002246:	2a08      	cmp	r2, #8
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	025e      	lsls	r6, r3, #9
 800224e:	d508      	bpl.n	8002262 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	039d      	lsls	r5, r3, #14
 8002256:	d5dc      	bpl.n	8002212 <HAL_RCC_OscConfig+0xe>
 8002258:	6863      	ldr	r3, [r4, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1d9      	bne.n	8002212 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	4d88      	ldr	r5, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d113      	bne.n	8002294 <HAL_RCC_OscConfig+0x90>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002274:	f7fe fef8 	bl	8001068 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002278:	4e83      	ldr	r6, [pc, #524]	; (8002488 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 800227a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	6833      	ldr	r3, [r6, #0]
 800227e:	0398      	lsls	r0, r3, #14
 8002280:	d4c7      	bmi.n	8002212 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002282:	f7fe fef1 	bl	8001068 <HAL_GetTick>
 8002286:	1b40      	subs	r0, r0, r5
 8002288:	2864      	cmp	r0, #100	; 0x64
 800228a:	d9f7      	bls.n	800227c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800228c:	2003      	movs	r0, #3
}
 800228e:	b002      	add	sp, #8
 8002290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	b99b      	cbnz	r3, 80022be <HAL_RCC_OscConfig+0xba>
 8002296:	682b      	ldr	r3, [r5, #0]
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	602b      	str	r3, [r5, #0]
 800229e:	682b      	ldr	r3, [r5, #0]
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022a6:	f7fe fedf 	bl	8001068 <HAL_GetTick>
 80022aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	0399      	lsls	r1, r3, #14
 80022b0:	d5af      	bpl.n	8002212 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b2:	f7fe fed9 	bl	8001068 <HAL_GetTick>
 80022b6:	1b80      	subs	r0, r0, r6
 80022b8:	2864      	cmp	r0, #100	; 0x64
 80022ba:	d9f7      	bls.n	80022ac <HAL_RCC_OscConfig+0xa8>
 80022bc:	e7e6      	b.n	800228c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	d103      	bne.n	80022ce <HAL_RCC_OscConfig+0xca>
 80022c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	e7ce      	b.n	800226c <HAL_RCC_OscConfig+0x68>
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	602b      	str	r3, [r5, #0]
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	e7ca      	b.n	8002272 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	f012 0f0c 	tst.w	r2, #12
 80022e4:	d007      	beq.n	80022f6 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	f002 020c 	and.w	r2, r2, #12
 80022ec:	2a08      	cmp	r2, #8
 80022ee:	d111      	bne.n	8002314 <HAL_RCC_OscConfig+0x110>
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	025a      	lsls	r2, r3, #9
 80022f4:	d40e      	bmi.n	8002314 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4a64      	ldr	r2, [pc, #400]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d502      	bpl.n	8002304 <HAL_RCC_OscConfig+0x100>
 80022fe:	68e3      	ldr	r3, [r4, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1ac      	bne.n	800225e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	6921      	ldr	r1, [r4, #16]
 8002308:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800230c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002310:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e781      	b.n	8002218 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002314:	68e3      	ldr	r3, [r4, #12]
 8002316:	4d5c      	ldr	r5, [pc, #368]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002318:	b1bb      	cbz	r3, 800234a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800231a:	682b      	ldr	r3, [r5, #0]
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002322:	f7fe fea1 	bl	8001068 <HAL_GetTick>
 8002326:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	079f      	lsls	r7, r3, #30
 800232c:	d507      	bpl.n	800233e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	6922      	ldr	r2, [r4, #16]
 8002332:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002336:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800233a:	602b      	str	r3, [r5, #0]
 800233c:	e76c      	b.n	8002218 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fe93 	bl	8001068 <HAL_GetTick>
 8002342:	1b80      	subs	r0, r0, r6
 8002344:	2802      	cmp	r0, #2
 8002346:	d9ef      	bls.n	8002328 <HAL_RCC_OscConfig+0x124>
 8002348:	e7a0      	b.n	800228c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800234a:	682b      	ldr	r3, [r5, #0]
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002352:	f7fe fe89 	bl	8001068 <HAL_GetTick>
 8002356:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	0798      	lsls	r0, r3, #30
 800235c:	f57f af5c 	bpl.w	8002218 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7fe fe82 	bl	8001068 <HAL_GetTick>
 8002364:	1b80      	subs	r0, r0, r6
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f6      	bls.n	8002358 <HAL_RCC_OscConfig+0x154>
 800236a:	e78f      	b.n	800228c <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800236c:	6963      	ldr	r3, [r4, #20]
 800236e:	4d46      	ldr	r5, [pc, #280]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002370:	b183      	cbz	r3, 8002394 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8002372:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800237a:	f7fe fe75 	bl	8001068 <HAL_GetTick>
 800237e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002380:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002382:	079b      	lsls	r3, r3, #30
 8002384:	f53f af4c 	bmi.w	8002220 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fe6e 	bl	8001068 <HAL_GetTick>
 800238c:	1b80      	subs	r0, r0, r6
 800238e:	2802      	cmp	r0, #2
 8002390:	d9f6      	bls.n	8002380 <HAL_RCC_OscConfig+0x17c>
 8002392:	e77b      	b.n	800228c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002394:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800239c:	f7fe fe64 	bl	8001068 <HAL_GetTick>
 80023a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023a4:	079f      	lsls	r7, r3, #30
 80023a6:	f57f af3b 	bpl.w	8002220 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fe5d 	bl	8001068 <HAL_GetTick>
 80023ae:	1b80      	subs	r0, r0, r6
 80023b0:	2802      	cmp	r0, #2
 80023b2:	d9f6      	bls.n	80023a2 <HAL_RCC_OscConfig+0x19e>
 80023b4:	e76a      	b.n	800228c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	00d0      	lsls	r0, r2, #3
 80023bc:	d427      	bmi.n	800240e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80023c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	4d2e      	ldr	r5, [pc, #184]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	05d9      	lsls	r1, r3, #23
 80023d8:	d51b      	bpl.n	8002412 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	4d2a      	ldr	r5, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d127      	bne.n	8002432 <HAL_RCC_OscConfig+0x22e>
 80023e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023ee:	f7fe fe3b 	bl	8001068 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	4e25      	ldr	r6, [pc, #148]	; (8002488 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80023f4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80023f8:	079b      	lsls	r3, r3, #30
 80023fa:	d53f      	bpl.n	800247c <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80023fc:	2f00      	cmp	r7, #0
 80023fe:	f43f af13 	beq.w	8002228 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <HAL_RCC_OscConfig+0x284>)
 8002404:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
 800240c:	e70c      	b.n	8002228 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800240e:	2700      	movs	r7, #0
 8002410:	e7df      	b.n	80023d2 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8002412:	682b      	ldr	r3, [r5, #0]
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800241a:	f7fe fe25 	bl	8001068 <HAL_GetTick>
 800241e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	05da      	lsls	r2, r3, #23
 8002424:	d4d9      	bmi.n	80023da <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fe1f 	bl	8001068 <HAL_GetTick>
 800242a:	1b80      	subs	r0, r0, r6
 800242c:	2864      	cmp	r0, #100	; 0x64
 800242e:	d9f7      	bls.n	8002420 <HAL_RCC_OscConfig+0x21c>
 8002430:	e72c      	b.n	800228c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002432:	b9ab      	cbnz	r3, 8002460 <HAL_RCC_OscConfig+0x25c>
 8002434:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	672b      	str	r3, [r5, #112]	; 0x70
 8002440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002448:	f7fe fe0e 	bl	8001068 <HAL_GetTick>
 800244c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002450:	0798      	lsls	r0, r3, #30
 8002452:	d5d3      	bpl.n	80023fc <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7fe fe08 	bl	8001068 <HAL_GetTick>
 8002458:	1b80      	subs	r0, r0, r6
 800245a:	4540      	cmp	r0, r8
 800245c:	d9f7      	bls.n	800244e <HAL_RCC_OscConfig+0x24a>
 800245e:	e715      	b.n	800228c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	2b05      	cmp	r3, #5
 8002462:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002464:	d103      	bne.n	800246e <HAL_RCC_OscConfig+0x26a>
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	672b      	str	r3, [r5, #112]	; 0x70
 800246c:	e7b9      	b.n	80023e2 <HAL_RCC_OscConfig+0x1de>
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	672b      	str	r3, [r5, #112]	; 0x70
 8002474:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002476:	f023 0304 	bic.w	r3, r3, #4
 800247a:	e7b5      	b.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fdf4 	bl	8001068 <HAL_GetTick>
 8002480:	1b40      	subs	r0, r0, r5
 8002482:	4540      	cmp	r0, r8
 8002484:	d9b7      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f2>
 8002486:	e701      	b.n	800228c <HAL_RCC_OscConfig+0x88>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4d3c      	ldr	r5, [pc, #240]	; (8002584 <HAL_RCC_OscConfig+0x380>)
 8002492:	68ab      	ldr	r3, [r5, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d042      	beq.n	8002522 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 800249c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80024a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a6:	d12f      	bne.n	8002508 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 80024a8:	f7fe fdde 	bl	8001068 <HAL_GetTick>
 80024ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	0199      	lsls	r1, r3, #6
 80024b2:	d423      	bmi.n	80024fc <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024c8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80024cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024ce:	0852      	lsrs	r2, r2, #1
 80024d0:	3a01      	subs	r2, #1
 80024d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024d6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024e0:	f7fe fdc2 	bl	8001068 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e4:	4d27      	ldr	r5, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 80024e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	019a      	lsls	r2, r3, #6
 80024ec:	f53f aea0 	bmi.w	8002230 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fdba 	bl	8001068 <HAL_GetTick>
 80024f4:	1b00      	subs	r0, r0, r4
 80024f6:	2802      	cmp	r0, #2
 80024f8:	d9f6      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2e4>
 80024fa:	e6c7      	b.n	800228c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fdb4 	bl	8001068 <HAL_GetTick>
 8002500:	1b80      	subs	r0, r0, r6
 8002502:	2802      	cmp	r0, #2
 8002504:	d9d3      	bls.n	80024ae <HAL_RCC_OscConfig+0x2aa>
 8002506:	e6c1      	b.n	800228c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8002508:	f7fe fdae 	bl	8001068 <HAL_GetTick>
 800250c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	f57f ae8d 	bpl.w	8002230 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fda7 	bl	8001068 <HAL_GetTick>
 800251a:	1b00      	subs	r0, r0, r4
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f6      	bls.n	800250e <HAL_RCC_OscConfig+0x30a>
 8002520:	e6b4      	b.n	800228c <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002522:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002524:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002526:	f43f ae9a 	beq.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	69e1      	ldr	r1, [r4, #28]
 8002530:	428a      	cmp	r2, r1
 8002532:	f47f ae94 	bne.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	6a21      	ldr	r1, [r4, #32]
 800253c:	428a      	cmp	r2, r1
 800253e:	f47f ae8e 	bne.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002542:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002546:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002548:	401a      	ands	r2, r3
 800254a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800254e:	f47f ae86 	bne.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002552:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002554:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002560:	f47f ae7d 	bne.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002568:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800256a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800256e:	f47f ae76 	bne.w	800225e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002572:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002576:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800257c:	f43f ae58 	beq.w	8002230 <HAL_RCC_OscConfig+0x2c>
 8002580:	e66d      	b.n	800225e <HAL_RCC_OscConfig+0x5a>
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002588:	4913      	ldr	r1, [pc, #76]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800258a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	688b      	ldr	r3, [r1, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d01b      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x46>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11b      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800259c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025a4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80025ac:	bf1a      	itte	ne
 80025ae:	480b      	ldrne	r0, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0x54>)
 80025b0:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	480b      	ldreq	r0, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x58>)
 80025b4:	fba1 0100 	umull	r0, r1, r1, r0
 80025b8:	f7fd fe3e 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025c4:	3301      	adds	r3, #1
 80025c6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80025c8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80025cc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ce:	4803      	ldr	r0, [pc, #12]	; (80025dc <HAL_RCC_GetSysClockFreq+0x54>)
 80025d0:	e7fc      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80025d4:	e7fa      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x44>
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	017d7840 	.word	0x017d7840
 80025e0:	00f42400 	.word	0x00f42400

080025e4 <HAL_RCC_ClockConfig>:
{
 80025e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80025ea:	4604      	mov	r4, r0
 80025ec:	b910      	cbnz	r0, 80025f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
}
 80025f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4a45      	ldr	r2, [pc, #276]	; (800270c <HAL_RCC_ClockConfig+0x128>)
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d328      	bcc.n	8002652 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	6821      	ldr	r1, [r4, #0]
 8002602:	078f      	lsls	r7, r1, #30
 8002604:	d430      	bmi.n	8002668 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	07c8      	lsls	r0, r1, #31
 8002608:	d443      	bmi.n	8002692 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260a:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_RCC_ClockConfig+0x128>)
 800260c:	6813      	ldr	r3, [r2, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	42ab      	cmp	r3, r5
 8002614:	d866      	bhi.n	80026e4 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	0751      	lsls	r1, r2, #29
 800261a:	d46f      	bmi.n	80026fc <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	0713      	lsls	r3, r2, #28
 800261e:	d507      	bpl.n	8002630 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002620:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
 8002622:	6921      	ldr	r1, [r4, #16]
 8002624:	6893      	ldr	r3, [r2, #8]
 8002626:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800262a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800262e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002630:	f7ff ffaa 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
 8002636:	4a37      	ldr	r2, [pc, #220]	; (8002714 <HAL_RCC_ClockConfig+0x130>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	40d8      	lsrs	r0, r3
 8002642:	4b35      	ldr	r3, [pc, #212]	; (8002718 <HAL_RCC_ClockConfig+0x134>)
 8002644:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_RCC_ClockConfig+0x138>)
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	f7fe fcc9 	bl	8000fe0 <HAL_InitTick>
  return HAL_OK;
 800264e:	2000      	movs	r0, #0
 8002650:	e7ce      	b.n	80025f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f023 030f 	bic.w	r3, r3, #15
 8002658:	430b      	orrs	r3, r1
 800265a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	428b      	cmp	r3, r1
 8002664:	d1c3      	bne.n	80025ee <HAL_RCC_ClockConfig+0xa>
 8002666:	e7cb      	b.n	8002600 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	f011 0f04 	tst.w	r1, #4
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
 800266e:	d003      	beq.n	8002678 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002676:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002678:	070e      	lsls	r6, r1, #28
 800267a:	d503      	bpl.n	8002684 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002682:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	68a0      	ldr	r0, [r4, #8]
 8002688:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800268c:	4302      	orrs	r2, r0
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e7b9      	b.n	8002606 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002692:	6861      	ldr	r1, [r4, #4]
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
 8002696:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	d11b      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	d0a5      	beq.n	80025ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a8:	4f19      	ldr	r7, [pc, #100]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	f022 0203 	bic.w	r2, r2, #3
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80026b2:	f7fe fcd9 	bl	8001068 <HAL_GetTick>
 80026b6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6862      	ldr	r2, [r4, #4]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026c4:	d0a1      	beq.n	800260a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe fccf 	bl	8001068 <HAL_GetTick>
 80026ca:	1b80      	subs	r0, r0, r6
 80026cc:	4540      	cmp	r0, r8
 80026ce:	d9f3      	bls.n	80026b8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80026d0:	2003      	movs	r0, #3
 80026d2:	e78d      	b.n	80025f0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	2902      	cmp	r1, #2
 80026d6:	d102      	bne.n	80026de <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80026dc:	e7e0      	b.n	80026a0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	f012 0f02 	tst.w	r2, #2
 80026e2:	e7dd      	b.n	80026a0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	432b      	orrs	r3, r5
 80026ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	42ab      	cmp	r3, r5
 80026f6:	f47f af7a 	bne.w	80025ee <HAL_RCC_ClockConfig+0xa>
 80026fa:	e78c      	b.n	8002616 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_ClockConfig+0x12c>)
 80026fe:	68e0      	ldr	r0, [r4, #12]
 8002700:	688b      	ldr	r3, [r1, #8]
 8002702:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002706:	4303      	orrs	r3, r0
 8002708:	608b      	str	r3, [r1, #8]
 800270a:	e787      	b.n	800261c <HAL_RCC_ClockConfig+0x38>
 800270c:	40023c00 	.word	0x40023c00
 8002710:	40023800 	.word	0x40023800
 8002714:	08009e81 	.word	0x08009e81
 8002718:	20000018 	.word	0x20000018
 800271c:	20000020 	.word	0x20000020

08002720 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002720:	6803      	ldr	r3, [r0, #0]
{
 8002722:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002726:	f013 0601 	ands.w	r6, r3, #1
{
 800272a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800272c:	d00b      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800272e:	4ab1      	ldr	r2, [pc, #708]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002730:	6891      	ldr	r1, [r2, #8]
 8002732:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002736:	6091      	str	r1, [r2, #8]
 8002738:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800273a:	6891      	ldr	r1, [r2, #8]
 800273c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273e:	fab6 f686 	clz	r6, r6
 8002742:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002744:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002746:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800274a:	d012      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800274c:	49a9      	ldr	r1, [pc, #676]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800274e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002750:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002754:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002758:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800275c:	bf08      	it	eq
 800275e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002760:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002764:	bf16      	itet	ne
 8002766:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800276a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800276c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800276e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002772:	02d9      	lsls	r1, r3, #11
 8002774:	d510      	bpl.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002776:	489f      	ldr	r0, [pc, #636]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002778:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800277a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800277e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002782:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002786:	ea42 0201 	orr.w	r2, r2, r1
 800278a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278e:	f000 81aa 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002792:	2900      	cmp	r1, #0
 8002794:	bf08      	it	eq
 8002796:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002798:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800279c:	bf18      	it	ne
 800279e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027a0:	069a      	lsls	r2, r3, #26
 80027a2:	d532      	bpl.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a4:	4b93      	ldr	r3, [pc, #588]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027a6:	4f94      	ldr	r7, [pc, #592]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c2:	f7fe fc51 	bl	8001068 <HAL_GetTick>
 80027c6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	05db      	lsls	r3, r3, #23
 80027cc:	f140 818d 	bpl.w	8002aea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d0:	4f88      	ldr	r7, [pc, #544]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80027da:	f040 8191 	bne.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80027e4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80027e8:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ea:	f040 81ae 	bne.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80027ee:	6891      	ldr	r1, [r2, #8]
 80027f0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80027f4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80027f8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80027fc:	4301      	orrs	r1, r0
 80027fe:	6091      	str	r1, [r2, #8]
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002806:	430b      	orrs	r3, r1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	06da      	lsls	r2, r3, #27
 800280e:	d50c      	bpl.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002810:	4a78      	ldr	r2, [pc, #480]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002812:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002816:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800281a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800281e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002822:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002824:	4301      	orrs	r1, r0
 8002826:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282a:	045f      	lsls	r7, r3, #17
 800282c:	d508      	bpl.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282e:	4971      	ldr	r1, [pc, #452]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002830:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002832:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002836:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800283a:	4302      	orrs	r2, r0
 800283c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002840:	0418      	lsls	r0, r3, #16
 8002842:	d508      	bpl.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002844:	496b      	ldr	r1, [pc, #428]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002846:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002848:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800284c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002850:	4302      	orrs	r2, r0
 8002852:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002856:	03d9      	lsls	r1, r3, #15
 8002858:	d508      	bpl.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800285a:	4966      	ldr	r1, [pc, #408]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800285e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002862:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002866:	4302      	orrs	r2, r0
 8002868:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800286c:	039a      	lsls	r2, r3, #14
 800286e:	d508      	bpl.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002870:	4960      	ldr	r1, [pc, #384]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002872:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002874:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002878:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800287c:	4302      	orrs	r2, r0
 800287e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002882:	065f      	lsls	r7, r3, #25
 8002884:	d508      	bpl.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002886:	495b      	ldr	r1, [pc, #364]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002888:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800288a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800288e:	f022 0203 	bic.w	r2, r2, #3
 8002892:	4302      	orrs	r2, r0
 8002894:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002898:	0618      	lsls	r0, r3, #24
 800289a:	d508      	bpl.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4955      	ldr	r1, [pc, #340]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800289e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028a4:	f022 020c 	bic.w	r2, r2, #12
 80028a8:	4302      	orrs	r2, r0
 80028aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ae:	05d9      	lsls	r1, r3, #23
 80028b0:	d508      	bpl.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028b2:	4950      	ldr	r1, [pc, #320]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80028b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028ba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028be:	4302      	orrs	r2, r0
 80028c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028c4:	059a      	lsls	r2, r3, #22
 80028c6:	d508      	bpl.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c8:	494a      	ldr	r1, [pc, #296]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80028cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028d4:	4302      	orrs	r2, r0
 80028d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028da:	055f      	lsls	r7, r3, #21
 80028dc:	d508      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028de:	4945      	ldr	r1, [pc, #276]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028ea:	4302      	orrs	r2, r0
 80028ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028f0:	0518      	lsls	r0, r3, #20
 80028f2:	d508      	bpl.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028f4:	493f      	ldr	r1, [pc, #252]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002900:	4302      	orrs	r2, r0
 8002902:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002906:	04d9      	lsls	r1, r3, #19
 8002908:	d508      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800290a:	493a      	ldr	r1, [pc, #232]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800290c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800290e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002912:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002916:	4302      	orrs	r2, r0
 8002918:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800291c:	049a      	lsls	r2, r3, #18
 800291e:	d508      	bpl.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002920:	4934      	ldr	r1, [pc, #208]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002922:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002924:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002928:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800292c:	4302      	orrs	r2, r0
 800292e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002932:	025f      	lsls	r7, r3, #9
 8002934:	d508      	bpl.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002936:	492f      	ldr	r1, [pc, #188]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002938:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800293a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800293e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002942:	4302      	orrs	r2, r0
 8002944:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002948:	0298      	lsls	r0, r3, #10
 800294a:	d50c      	bpl.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800294c:	4829      	ldr	r0, [pc, #164]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800294e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002950:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002954:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002958:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800295c:	bf08      	it	eq
 800295e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002960:	430a      	orrs	r2, r1
 8002962:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002966:	f013 0f08 	tst.w	r3, #8
 800296a:	bf18      	it	ne
 800296c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800296e:	0359      	lsls	r1, r3, #13
 8002970:	d508      	bpl.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002972:	4920      	ldr	r1, [pc, #128]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002974:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002976:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800297a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800297e:	4302      	orrs	r2, r0
 8002980:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	d509      	bpl.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002988:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800298a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800298e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002992:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002996:	4302      	orrs	r2, r0
 8002998:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800299c:	015f      	lsls	r7, r3, #5
 800299e:	d509      	bpl.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029a0:	4914      	ldr	r1, [pc, #80]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029a2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80029a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029ae:	4302      	orrs	r2, r0
 80029b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029b4:	0118      	lsls	r0, r3, #4
 80029b6:	d509      	bpl.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029ba:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80029be:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80029c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80029c6:	4302      	orrs	r2, r0
 80029c8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029cc:	00d9      	lsls	r1, r3, #3
 80029ce:	d509      	bpl.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029d0:	4908      	ldr	r1, [pc, #32]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80029d6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80029da:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80029de:	4302      	orrs	r2, r0
 80029e0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029e4:	2e01      	cmp	r6, #1
 80029e6:	f000 80b4 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80029ea:	019a      	lsls	r2, r3, #6
 80029ec:	f100 80b1 	bmi.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80029f0:	e004      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029fc:	2d01      	cmp	r5, #1
 80029fe:	d170      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a00:	4d9d      	ldr	r5, [pc, #628]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a08:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fb2d 	bl	8001068 <HAL_GetTick>
 8002a0e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	009f      	lsls	r7, r3, #2
 8002a14:	f100 8121 	bmi.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a18:	6821      	ldr	r1, [r4, #0]
 8002a1a:	030e      	lsls	r6, r1, #12
 8002a1c:	d501      	bpl.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002a1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a20:	b11b      	cbz	r3, 8002a2a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002a22:	02cd      	lsls	r5, r1, #11
 8002a24:	d51d      	bpl.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a28:	b9db      	cbnz	r3, 8002a62 <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a2a:	4a93      	ldr	r2, [pc, #588]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a30:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a38:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	6960      	ldr	r0, [r4, #20]
 8002a40:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a44:	69a0      	ldr	r0, [r4, #24]
 8002a46:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a4e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a58:	3801      	subs	r0, #1
 8002a5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a62:	0288      	lsls	r0, r1, #10
 8002a64:	d515      	bpl.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002a66:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6c:	d111      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a6e:	4a82      	ldr	r2, [pc, #520]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a74:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a78:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a7c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a80:	4303      	orrs	r3, r0
 8002a82:	6960      	ldr	r0, [r4, #20]
 8002a84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a88:	6a20      	ldr	r0, [r4, #32]
 8002a8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a92:	070a      	lsls	r2, r1, #28
 8002a94:	d519      	bpl.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a96:	4a78      	ldr	r2, [pc, #480]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002a98:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a9c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aa0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6961      	ldr	r1, [r4, #20]
 8002aac:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002ab0:	69e1      	ldr	r1, [r4, #28]
 8002ab2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002abe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ac0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aca:	4c6b      	ldr	r4, [pc, #428]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fac8 	bl	8001068 <HAL_GetTick>
 8002ad8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	f140 80c3 	bpl.w	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	e009      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8002ae6:	2601      	movs	r6, #1
 8002ae8:	e656      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fabd 	bl	8001068 <HAL_GetTick>
 8002aee:	eba0 0008 	sub.w	r0, r0, r8
 8002af2:	2864      	cmp	r0, #100	; 0x64
 8002af4:	f67f ae68 	bls.w	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002af8:	2003      	movs	r0, #3
}
 8002afa:	b003      	add	sp, #12
 8002afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f43f ae6a 	beq.w	80027de <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b16:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	07d8      	lsls	r0, r3, #31
 8002b26:	f57f ae5a 	bpl.w	80027de <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fa9d 	bl	8001068 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002b32:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b36:	0799      	lsls	r1, r3, #30
 8002b38:	f53f ae51 	bmi.w	80027de <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fa94 	bl	8001068 <HAL_GetTick>
 8002b40:	eba0 0008 	sub.w	r0, r0, r8
 8002b44:	4548      	cmp	r0, r9
 8002b46:	d9f5      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002b48:	e7d6      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	6891      	ldr	r1, [r2, #8]
 8002b4c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002b50:	e655      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8002b52:	4e49      	ldr	r6, [pc, #292]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002b54:	6833      	ldr	r3, [r6, #0]
 8002b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b5a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa84 	bl	8001068 <HAL_GetTick>
 8002b60:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b62:	6833      	ldr	r3, [r6, #0]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	d472      	bmi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	07d7      	lsls	r7, r2, #31
 8002b6c:	d512      	bpl.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b70:	b983      	cbnz	r3, 8002b94 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b72:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b76:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6861      	ldr	r1, [r4, #4]
 8002b86:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002b8a:	68a1      	ldr	r1, [r4, #8]
 8002b8c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002b90:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b94:	0316      	lsls	r6, r2, #12
 8002b96:	d503      	bpl.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9e:	d005      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ba0:	02d0      	lsls	r0, r2, #11
 8002ba2:	d51e      	bpl.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d11a      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bac:	4932      	ldr	r1, [pc, #200]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002bae:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bb2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	6860      	ldr	r0, [r4, #4]
 8002bc2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bc6:	68e0      	ldr	r0, [r4, #12]
 8002bc8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bd0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd6:	f020 001f 	bic.w	r0, r0, #31
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	4303      	orrs	r3, r0
 8002bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be2:	01d1      	lsls	r1, r2, #7
 8002be4:	d511      	bpl.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be6:	4924      	ldr	r1, [pc, #144]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002be8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bec:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bf0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002bf4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002bf8:	4303      	orrs	r3, r0
 8002bfa:	6860      	ldr	r0, [r4, #4]
 8002bfc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c00:	6920      	ldr	r0, [r4, #16]
 8002c02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c0a:	0192      	lsls	r2, r2, #6
 8002c0c:	d50d      	bpl.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c0e:	6923      	ldr	r3, [r4, #16]
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c18:	68e2      	ldr	r2, [r4, #12]
 8002c1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c1e:	68a2      	ldr	r2, [r4, #8]
 8002c20:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002c26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002c2a:	4e13      	ldr	r6, [pc, #76]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002c2c:	6833      	ldr	r3, [r6, #0]
 8002c2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c32:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa18 	bl	8001068 <HAL_GetTick>
 8002c38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c3a:	6833      	ldr	r3, [r6, #0]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	f53f aedd 	bmi.w	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c42:	f7fe fa11 	bl	8001068 <HAL_GetTick>
 8002c46:	1bc0      	subs	r0, r0, r7
 8002c48:	2864      	cmp	r0, #100	; 0x64
 8002c4a:	d9f6      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c4c:	e754      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c4e:	f7fe fa0b 	bl	8001068 <HAL_GetTick>
 8002c52:	1bc0      	subs	r0, r0, r7
 8002c54:	2864      	cmp	r0, #100	; 0x64
 8002c56:	d984      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002c58:	e74e      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c5a:	f7fe fa05 	bl	8001068 <HAL_GetTick>
 8002c5e:	1b80      	subs	r0, r0, r6
 8002c60:	2864      	cmp	r0, #100	; 0x64
 8002c62:	f67f aed5 	bls.w	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002c66:	e747      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c68:	f7fe f9fe 	bl	8001068 <HAL_GetTick>
 8002c6c:	1b40      	subs	r0, r0, r5
 8002c6e:	2864      	cmp	r0, #100	; 0x64
 8002c70:	f67f af33 	bls.w	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002c74:	e740      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_SDRAM_Init>:
{
 8002c7e:	b538      	push	{r3, r4, r5, lr}
 8002c80:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8002c82:	4604      	mov	r4, r0
 8002c84:	b1c8      	cbz	r0, 8002cba <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002c86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c8e:	b91b      	cbnz	r3, 8002c98 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8002c90:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002c94:	f7ff fff2 	bl	8002c7c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c98:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002c9a:	1d21      	adds	r1, r4, #4
 8002c9c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002c9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002ca2:	f000 f9ce 	bl	8003042 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002ca6:	6862      	ldr	r2, [r4, #4]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	6820      	ldr	r0, [r4, #0]
 8002cac:	f000 fa01 	bl	80030b2 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002cb0:	2301      	movs	r3, #1
  return HAL_OK;
 8002cb2:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002cb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e7fc      	b.n	8002cb8 <HAL_SDRAM_Init+0x3a>

08002cbe <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8002cbe:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002cc0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8002cc8:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8002cca:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8002ccc:	d010      	beq.n	8002cf0 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8002cce:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8002cd2:	2c01      	cmp	r4, #1
 8002cd4:	d110      	bne.n	8002cf8 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002cd6:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002cd8:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002cda:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002cde:	f000 fa1e 	bl	800311e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002ce2:	6833      	ldr	r3, [r6, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d104      	bne.n	8002cf2 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002ce8:	2305      	movs	r3, #5
 8002cea:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002cee:	2000      	movs	r0, #0
}
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8002cf2:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8002cf6:	e7fa      	b.n	8002cee <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e7f9      	b.n	8002cf0 <HAL_SDRAM_SendCommand+0x32>

08002cfc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002cfc:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002cfe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8002d02:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	b2d8      	uxtb	r0, r3
 8002d08:	d00d      	beq.n	8002d26 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8002d0a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	b2dd      	uxtb	r5, r3
 8002d12:	d109      	bne.n	8002d28 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002d14:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002d16:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002d18:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8002d1c:	f000 fa11 	bl	8003142 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002d20:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002d22:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	e7fc      	b.n	8002d26 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08002d2c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d133      	bne.n	8002d9c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d3a:	6803      	ldr	r3, [r0, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_TIM_Base_Start_IT+0x74>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01a      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d017      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d50:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00f      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d68:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d70:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x54>
 8002d78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_TIM_Base_Start_IT+0x78>)
 8002d84:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	2a06      	cmp	r2, #6
 8002d88:	d006      	beq.n	8002d98 <HAL_TIM_Base_Start_IT+0x6c>
 8002d8a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002d8e:	d003      	beq.n	8002d98 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d98:	2000      	movs	r0, #0
}
 8002d9a:	4770      	bx	lr
    return HAL_ERROR;
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	4770      	bx	lr
 8002da0:	40010000 	.word	0x40010000
 8002da4:	00010007 	.word	0x00010007

08002da8 <HAL_TIM_OC_DelayElapsedCallback>:
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_IC_CaptureCallback>:
 8002daa:	4770      	bx	lr

08002dac <HAL_TIM_PWM_PulseFinishedCallback>:
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_TriggerCallback>:
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db0:	6803      	ldr	r3, [r0, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	0791      	lsls	r1, r2, #30
{
 8002db6:	b510      	push	{r4, lr}
 8002db8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dba:	d50f      	bpl.n	8002ddc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	0792      	lsls	r2, r2, #30
 8002dc0:	d50c      	bpl.n	8002ddc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc2:	f06f 0202 	mvn.w	r2, #2
 8002dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	0799      	lsls	r1, r3, #30
 8002dd0:	f000 8085 	beq.w	8002ede <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dd4:	f7ff ffe9 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	0752      	lsls	r2, r2, #29
 8002de2:	d510      	bpl.n	8002e06 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	0750      	lsls	r0, r2, #29
 8002de8:	d50d      	bpl.n	8002e06 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dea:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df2:	2202      	movs	r2, #2
 8002df4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002dfc:	d075      	beq.n	8002eea <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	f7ff ffd4 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	2300      	movs	r3, #0
 8002e04:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	0711      	lsls	r1, r2, #28
 8002e0c:	d50f      	bpl.n	8002e2e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	0712      	lsls	r2, r2, #28
 8002e12:	d50c      	bpl.n	8002e2e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e14:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	079b      	lsls	r3, r3, #30
 8002e24:	d067      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	f7ff ffc0 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	06d0      	lsls	r0, r2, #27
 8002e34:	d510      	bpl.n	8002e58 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	06d1      	lsls	r1, r2, #27
 8002e3a:	d50d      	bpl.n	8002e58 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e44:	2208      	movs	r2, #8
 8002e46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e4e:	d058      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e50:	f7ff ffab 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e54:	2300      	movs	r3, #0
 8002e56:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	07d2      	lsls	r2, r2, #31
 8002e5e:	d508      	bpl.n	8002e72 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	07d0      	lsls	r0, r2, #31
 8002e64:	d505      	bpl.n	8002e72 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e66:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6e:	f7fd fcb0 	bl	80007d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	0611      	lsls	r1, r2, #24
 8002e78:	d508      	bpl.n	8002e8c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	0612      	lsls	r2, r2, #24
 8002e7e:	d505      	bpl.n	8002e8c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e88:	f000 f8d9 	bl	800303e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	05d0      	lsls	r0, r2, #23
 8002e92:	d508      	bpl.n	8002ea6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	0611      	lsls	r1, r2, #24
 8002e98:	d505      	bpl.n	8002ea6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ea0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002ea2:	f000 f8cd 	bl	8003040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	0652      	lsls	r2, r2, #25
 8002eac:	d508      	bpl.n	8002ec0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	0650      	lsls	r0, r2, #25
 8002eb2:	d505      	bpl.n	8002ec0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ebc:	f7ff ff77 	bl	8002dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	0691      	lsls	r1, r2, #26
 8002ec6:	d522      	bpl.n	8002f0e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	0692      	lsls	r2, r2, #26
 8002ecc:	d51f      	bpl.n	8002f0e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ece:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002eda:	f000 b8af 	b.w	800303c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	f7ff ff63 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff ff62 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ee8:	e776      	b.n	8002dd8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	f7ff ff5d 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff ff5c 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
 8002ef4:	e785      	b.n	8002e02 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	f7ff ff57 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7ff ff56 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
 8002f00:	e793      	b.n	8002e2a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	f7ff ff51 	bl	8002da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff ff50 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
 8002f0c:	e7a2      	b.n	8002e54 <HAL_TIM_IRQHandler+0xa4>
}
 8002f0e:	bd10      	pop	{r4, pc}

08002f10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002f12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	4290      	cmp	r0, r2
 8002f16:	d012      	beq.n	8002f3e <TIM_Base_SetConfig+0x2e>
 8002f18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0x2e>
 8002f1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f22:	4290      	cmp	r0, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0x2e>
 8002f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f2a:	4290      	cmp	r0, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x2e>
 8002f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f32:	4290      	cmp	r0, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x2e>
 8002f36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f3a:	4290      	cmp	r0, r2
 8002f3c:	d119      	bne.n	8002f72 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002f3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f44:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <TIM_Base_SetConfig+0xc4>)
 8002f48:	4290      	cmp	r0, r2
 8002f4a:	d029      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f50:	d026      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f56:	4290      	cmp	r0, r2
 8002f58:	d022      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f5e:	4290      	cmp	r0, r2
 8002f60:	d01e      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f66:	4290      	cmp	r0, r2
 8002f68:	d01a      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f6e:	4290      	cmp	r0, r2
 8002f70:	d016      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <TIM_Base_SetConfig+0xc8>)
 8002f74:	4290      	cmp	r0, r2
 8002f76:	d013      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d00f      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f84:	4290      	cmp	r0, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f88:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002f8c:	4290      	cmp	r0, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f94:	4290      	cmp	r0, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x90>
 8002f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f9c:	4290      	cmp	r0, r2
 8002f9e:	d103      	bne.n	8002fa8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa4:	68ca      	ldr	r2, [r1, #12]
 8002fa6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	694a      	ldr	r2, [r1, #20]
 8002faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002fb0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb2:	688b      	ldr	r3, [r1, #8]
 8002fb4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb6:	680b      	ldr	r3, [r1, #0]
 8002fb8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <TIM_Base_SetConfig+0xc4>)
 8002fbc:	4298      	cmp	r0, r3
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0xb8>
 8002fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc4:	4298      	cmp	r0, r3
 8002fc6:	d101      	bne.n	8002fcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc8:	690b      	ldr	r3, [r1, #16]
 8002fca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6143      	str	r3, [r0, #20]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40014000 	.word	0x40014000

08002fdc <HAL_TIM_Base_Init>:
{
 8002fdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002fde:	4604      	mov	r4, r0
 8002fe0:	b350      	cbz	r0, 8003038 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fea:	b91b      	cbnz	r3, 8002ff4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002fec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ff0:	f7fd fbce 	bl	8000790 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffe:	f7ff ff87 	bl	8002f10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003002:	2301      	movs	r3, #1
  return HAL_OK;
 8003004:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003006:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800300e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003012:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003016:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800301a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800301e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800302a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800302e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003036:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003038:	2001      	movs	r0, #1
 800303a:	e7fc      	b.n	8003036 <HAL_TIM_Base_Init+0x5a>

0800303c <HAL_TIMEx_CommutCallback>:
 800303c:	4770      	bx	lr

0800303e <HAL_TIMEx_BreakCallback>:
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_Break2Callback>:
 8003040:	4770      	bx	lr

08003042 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003046:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800304a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800304e:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8003052:	ea43 0308 	orr.w	r3, r3, r8
 8003056:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800305a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800305e:	6809      	ldr	r1, [r1, #0]
 8003060:	b991      	cbnz	r1, 8003088 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003062:	ea43 030e 	orr.w	r3, r3, lr
 8003066:	6801      	ldr	r1, [r0, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800306e:	ea43 030c 	orr.w	r3, r3, ip
 8003072:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003076:	433b      	orrs	r3, r7
 8003078:	4333      	orrs	r3, r6
 800307a:	432b      	orrs	r3, r5
 800307c:	4323      	orrs	r3, r4
 800307e:	430b      	orrs	r3, r1
 8003080:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003082:	2000      	movs	r0, #0
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	ea43 030e 	orr.w	r3, r3, lr
 800308e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003092:	430b      	orrs	r3, r1
 8003094:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003096:	ea42 030c 	orr.w	r3, r2, ip
 800309a:	6841      	ldr	r1, [r0, #4]
 800309c:	433b      	orrs	r3, r7
 800309e:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 80030a2:	4333      	orrs	r3, r6
 80030a4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80030a8:	432b      	orrs	r3, r5
 80030aa:	4323      	orrs	r3, r4
 80030ac:	4313      	orrs	r3, r2
 80030ae:	6043      	str	r3, [r0, #4]
 80030b0:	e7e7      	b.n	8003082 <FMC_SDRAM_Init+0x40>

080030b2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80030b2:	68cb      	ldr	r3, [r1, #12]
 80030b4:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80030b8:	694b      	ldr	r3, [r1, #20]
{
 80030ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80030bc:	3b01      	subs	r3, #1
 80030be:	680f      	ldr	r7, [r1, #0]
 80030c0:	684c      	ldr	r4, [r1, #4]
 80030c2:	688e      	ldr	r6, [r1, #8]
 80030c4:	051b      	lsls	r3, r3, #20
 80030c6:	690d      	ldr	r5, [r1, #16]
 80030c8:	3c01      	subs	r4, #1
 80030ca:	6989      	ldr	r1, [r1, #24]
 80030cc:	3e01      	subs	r6, #1
 80030ce:	3d01      	subs	r5, #1
 80030d0:	3f01      	subs	r7, #1
 80030d2:	3901      	subs	r1, #1
 80030d4:	0124      	lsls	r4, r4, #4
 80030d6:	0236      	lsls	r6, r6, #8
 80030d8:	042d      	lsls	r5, r5, #16
 80030da:	0609      	lsls	r1, r1, #24
 80030dc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80030e0:	b95a      	cbnz	r2, 80030fa <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80030e2:	433b      	orrs	r3, r7
 80030e4:	6882      	ldr	r2, [r0, #8]
 80030e6:	4323      	orrs	r3, r4
 80030e8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80030ec:	4333      	orrs	r3, r6
 80030ee:	432b      	orrs	r3, r5
 80030f0:	430b      	orrs	r3, r1
 80030f2:	4313      	orrs	r3, r2
 80030f4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80030fa:	6882      	ldr	r2, [r0, #8]
 80030fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003100:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003104:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003106:	ea44 0306 	orr.w	r3, r4, r6
 800310a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800310c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800310e:	68c2      	ldr	r2, [r0, #12]
 8003110:	432b      	orrs	r3, r5
 8003112:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8003116:	430b      	orrs	r3, r1
 8003118:	4313      	orrs	r3, r2
 800311a:	60c3      	str	r3, [r0, #12]
 800311c:	e7eb      	b.n	80030f6 <FMC_SDRAM_Timing_Init+0x44>

0800311e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800311e:	6902      	ldr	r2, [r0, #16]
{
 8003120:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003122:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003126:	0d92      	lsrs	r2, r2, #22
 8003128:	4323      	orrs	r3, r4
 800312a:	68cc      	ldr	r4, [r1, #12]
 800312c:	0592      	lsls	r2, r2, #22
 800312e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8003132:	4313      	orrs	r3, r2
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	3a01      	subs	r2, #1
 8003138:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800313c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800313e:	2000      	movs	r0, #0
 8003140:	bd10      	pop	{r4, pc}

08003142 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003142:	6943      	ldr	r3, [r0, #20]
 8003144:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003148:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800314c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8003150:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8003152:	2000      	movs	r0, #0
 8003154:	4770      	bx	lr
	...

08003158 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8003158:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <GUI_X_Config+0xc>)
 800315e:	f001 bb15 	b.w	800478c <GUI_ALLOC_AssignMemory>
 8003162:	bf00      	nop
 8003164:	2000024c 	.word	0x2000024c

08003168 <_GetBufferSize>:
  */
static U32 _GetBufferSize(int LayerIndex)
{
  U32 BufferSize;

  BufferSize = _axSize[LayerIndex] * _aySize[LayerIndex] * _aBytesPerPixels[LayerIndex];
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <_GetBufferSize+0x14>)
 800316a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800316e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003172:	6851      	ldr	r1, [r2, #4]
 8003174:	6890      	ldr	r0, [r2, #8]
 8003176:	434b      	muls	r3, r1

  return BufferSize;
}
 8003178:	4358      	muls	r0, r3
 800317a:	4770      	bx	lr
 800317c:	2004024c 	.word	0x2004024c

08003180 <_GetPixelformat.part.0>:
  if        (pColorConvAPI == GUICC_M8888I)
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <_GetPixelformat.part.0+0x18>)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <_GetPixelformat.part.0+0x1c>)
 8003184:	4298      	cmp	r0, r3
 8003186:	d005      	beq.n	8003194 <_GetPixelformat.part.0+0x14>
    return LTDC_PIXEL_FORMAT_RGB565;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <_GetPixelformat.part.0+0x20>)
 800318a:	4298      	cmp	r0, r3
 800318c:	bf0c      	ite	eq
 800318e:	2001      	moveq	r0, #1
 8003190:	2002      	movne	r0, #2
 8003192:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8003194:	2000      	movs	r0, #0
}
 8003196:	4770      	bx	lr
 8003198:	08009fc8 	.word	0x08009fc8
 800319c:	08009fb0 	.word	0x08009fb0
 80031a0:	08009fe0 	.word	0x08009fe0

080031a4 <_DMA2D_ExecOperation>:
  if ( TransferInProgress == 0 )
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <_DMA2D_ExecOperation+0xc>)
 80031a6:	7b1a      	ldrb	r2, [r3, #12]
 80031a8:	2a00      	cmp	r2, #0
 80031aa:	d1fc      	bne.n	80031a6 <_DMA2D_ExecOperation+0x2>
}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	2004024c 	.word	0x2004024c

080031b4 <_DMA_Copy>:
{
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80031bc:	4617      	mov	r7, r2
 80031be:	461e      	mov	r6, r3
 80031c0:	e9dd 5908 	ldrd	r5, r9, [sp, #32]
  _DMA2D_ExecOperation();
 80031c4:	f7ff ffee 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <_DMA_Copy+0x58>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	731a      	strb	r2, [r3, #12]
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 80031ce:	b9d0      	cbnz	r0, 8003206 <_DMA_Copy+0x52>
 80031d0:	f7ff ffd6 	bl	8003180 <_GetPixelformat.part.0>
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80031d4:	b2ad      	uxth	r5, r5
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80031d6:	4c0e      	ldr	r4, [pc, #56]	; (8003210 <_DMA_Copy+0x5c>)
 80031d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80031dc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80031e0:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;
 80031e2:	60e1      	str	r1, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;
 80031e4:	63e7      	str	r7, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80031e6:	f8c4 9010 	str.w	r9, [r4, #16]
  DMA2D->OOR     = OffLineDst;
 80031ea:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormat;
 80031ee:	61e0      	str	r0, [r4, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80031f0:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6023      	str	r3, [r4, #0]
}
 80031fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  _DMA2D_ExecOperation();
 8003202:	f7ff bfcf 	b.w	80031a4 <_DMA2D_ExecOperation>
    return 0;
 8003206:	2000      	movs	r0, #0
 8003208:	e7e4      	b.n	80031d4 <_DMA_Copy+0x20>
 800320a:	bf00      	nop
 800320c:	2004024c 	.word	0x2004024c
 8003210:	4002b000 	.word	0x4002b000

08003214 <_LCD_CopyBuffer>:
  * @param  IndexSrc  : Source index
  * @param  IndexDst  : Destination index
  * @retval None
  */
static void _LCD_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst)
{
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	4604      	mov	r4, r0
 800321a:	4615      	mov	r5, r2
 800321c:	460e      	mov	r6, r1
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = _GetBufferSize(LayerIndex);
 800321e:	f7ff ffa3 	bl	8003168 <_GetBufferSize>
  AddrSrc    = _aAddr[LayerIndex] + BufferSize * IndexSrc;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <_LCD_CopyBuffer+0x3c>)
  AddrDst    = _aAddr[LayerIndex] + BufferSize * IndexDst;
  _DMA_Copy(LayerIndex, (void *)AddrSrc, (void *)AddrDst, _axSize[LayerIndex], _aySize[LayerIndex], 0, 0);
 8003224:	2200      	movs	r2, #0
  AddrSrc    = _aAddr[LayerIndex] + BufferSize * IndexSrc;
 8003226:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
  _DMA_Copy(LayerIndex, (void *)AddrSrc, (void *)AddrDst, _axSize[LayerIndex], _aySize[LayerIndex], 0, 0);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <_LCD_CopyBuffer+0x40>)
 800322c:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 8003230:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	9200      	str	r2, [sp, #0]
 8003238:	fb00 1205 	mla	r2, r0, r5, r1
 800323c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003240:	fb00 1106 	mla	r1, r0, r6, r1
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff ffb5 	bl	80031b4 <_DMA_Copy>
  /* After this function has been called all drawing operations are routed to Buffer[IndexDst] */
  _aBufferIndex[LayerIndex] = IndexDst;
 800324a:	613d      	str	r5, [r7, #16]
}
 800324c:	b005      	add	sp, #20
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003250:	08009ea8 	.word	0x08009ea8
 8003254:	2004024c 	.word	0x2004024c

08003258 <_LCD_CopyRect>:
  * @param  xSize     : Rectangle width
  * @param  ySize     : Rectangle height
  * @retval None
  */
static void _LCD_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4605      	mov	r5, r0
 800325e:	4690      	mov	r8, r2
 8003260:	460e      	mov	r6, r1
 8003262:	461c      	mov	r4, r3
  U32 BufferSize, AddrSrc, AddrDst;
  int OffLine;

  BufferSize = _GetBufferSize(LayerIndex);
  AddrSrc = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 8003264:	4f13      	ldr	r7, [pc, #76]	; (80032b4 <_LCD_CopyRect+0x5c>)
  BufferSize = _GetBufferSize(LayerIndex);
 8003266:	f7ff ff7f 	bl	8003168 <_GetBufferSize>
  AddrSrc = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <_LCD_CopyRect+0x60>)
 800326c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8003270:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003274:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8003278:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800327c:	fb08 6603 	mla	r6, r8, r3, r6
 8003280:	693a      	ldr	r2, [r7, #16]
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y1 * _axSize[LayerIndex] + x1) * _aBytesPerPixels[LayerIndex];
 8003282:	9f08      	ldr	r7, [sp, #32]
  AddrSrc = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 8003284:	4350      	muls	r0, r2
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y1 * _axSize[LayerIndex] + x1) * _aBytesPerPixels[LayerIndex];
 8003286:	fb07 4403 	mla	r4, r7, r3, r4
{
 800328a:	e9dd 9a09 	ldrd	r9, sl, [sp, #36]	; 0x24
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y1 * _axSize[LayerIndex] + x1) * _aBytesPerPixels[LayerIndex];
 800328e:	fb0c 1404 	mla	r4, ip, r4, r1
  OffLine = _axSize[LayerIndex] - xSize;
 8003292:	eba3 0209 	sub.w	r2, r3, r9
  AddrSrc = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 8003296:	fb0c 1106 	mla	r1, ip, r6, r1
  _DMA_Copy(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, OffLine, OffLine);
 800329a:	464b      	mov	r3, r9
 800329c:	f8cd a020 	str.w	sl, [sp, #32]
 80032a0:	4401      	add	r1, r0
 80032a2:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
 80032a6:	1822      	adds	r2, r4, r0
 80032a8:	4628      	mov	r0, r5
}
 80032aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _DMA_Copy(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, OffLine, OffLine);
 80032ae:	f7ff bf81 	b.w	80031b4 <_DMA_Copy>
 80032b2:	bf00      	nop
 80032b4:	2004024c 	.word	0x2004024c
 80032b8:	08009ea8 	.word	0x08009ea8

080032bc <_LCD_DrawBitmap32bpp>:
  * @param  ySize       : Vertical bitmap size
  * @param  BytesPerLine: Number of bytes per Line
  * @retval None
  */
static void _LCD_DrawBitmap32bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 80032bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	4605      	mov	r5, r0
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = _GetBufferSize(LayerIndex);
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032c2:	4f15      	ldr	r7, [pc, #84]	; (8003318 <_LCD_DrawBitmap32bpp+0x5c>)
{
 80032c4:	460e      	mov	r6, r1
 80032c6:	4692      	mov	sl, r2
 80032c8:	9301      	str	r3, [sp, #4]
  BufferSize = _GetBufferSize(LayerIndex);
 80032ca:	f7ff ff4d 	bl	8003168 <_GetBufferSize>
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032ce:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80032d2:	eb07 0785 	add.w	r7, r7, r5, lsl #2
{
 80032d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032d8:	fb0a 6203 	mla	r2, sl, r3, r6
 80032dc:	4e0f      	ldr	r6, [pc, #60]	; (800331c <_LCD_DrawBitmap32bpp+0x60>)
 80032de:	68b9      	ldr	r1, [r7, #8]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80032e0:	2c00      	cmp	r4, #0
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032e2:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80032e6:	bfb8      	it	lt
 80032e8:	3403      	addlt	r4, #3
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032ea:	fb01 6202 	mla	r2, r1, r2, r6
 80032ee:	693e      	ldr	r6, [r7, #16]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80032f0:	9901      	ldr	r1, [sp, #4]
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80032f2:	fb06 2200 	mla	r2, r6, r0, r2
  OffLineDst = _axSize[LayerIndex] - xSize;
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80032f6:	4628      	mov	r0, r5
{
 80032f8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  OffLineDst = _axSize[LayerIndex] - xSize;
 80032fc:	eba3 0308 	sub.w	r3, r3, r8
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8003300:	ebc8 04a4 	rsb	r4, r8, r4, asr #2
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003304:	930c      	str	r3, [sp, #48]	; 0x30
 8003306:	4643      	mov	r3, r8
 8003308:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
}
 800330c:	b002      	add	sp, #8
 800330e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003312:	f7ff bf4f 	b.w	80031b4 <_DMA_Copy>
 8003316:	bf00      	nop
 8003318:	2004024c 	.word	0x2004024c
 800331c:	08009ea8 	.word	0x08009ea8

08003320 <_LCD_DrawBitmap16bpp>:
  * @param  ySize       : Vertical bitmap size
  * @param  BytesPerLine: Number of bytes per Line
  * @retval None
  */
static void _LCD_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8003320:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003324:	4604      	mov	r4, r0
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = _GetBufferSize(LayerIndex);
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003326:	4e14      	ldr	r6, [pc, #80]	; (8003378 <_LCD_DrawBitmap16bpp+0x58>)
{
 8003328:	460f      	mov	r7, r1
 800332a:	4692      	mov	sl, r2
 800332c:	9301      	str	r3, [sp, #4]
  BufferSize = _GetBufferSize(LayerIndex);
 800332e:	f7ff ff1b 	bl	8003168 <_GetBufferSize>
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003332:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8003336:	eb06 0684 	add.w	r6, r6, r4, lsl #2
{
 800333a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 800333c:	fb0a 7203 	mla	r2, sl, r3, r7
 8003340:	4f0e      	ldr	r7, [pc, #56]	; (800337c <_LCD_DrawBitmap16bpp+0x5c>)
 8003342:	68b1      	ldr	r1, [r6, #8]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003348:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 800334c:	6936      	ldr	r6, [r6, #16]
 800334e:	fb01 7202 	mla	r2, r1, r2, r7
  OffLineDst = _axSize[LayerIndex] - xSize;
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003352:	9901      	ldr	r1, [sp, #4]
{
 8003354:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003358:	fb06 2200 	mla	r2, r6, r0, r2
 800335c:	4620      	mov	r0, r4
  OffLineDst = _axSize[LayerIndex] - xSize;
 800335e:	eba3 0308 	sub.w	r3, r3, r8
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003362:	ebc8 0565 	rsb	r5, r8, r5, asr #1
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003366:	930c      	str	r3, [sp, #48]	; 0x30
 8003368:	4643      	mov	r3, r8
 800336a:	e9cd 950a 	strd	r9, r5, [sp, #40]	; 0x28
}
 800336e:	b002      	add	sp, #8
 8003370:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _DMA_Copy(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003374:	f7ff bf1e 	b.w	80031b4 <_DMA_Copy>
 8003378:	2004024c 	.word	0x2004024c
 800337c:	08009ea8 	.word	0x08009ea8

08003380 <_LCD_DrawMemdev16bpp>:
  * @param  BytesPerLineDst: Destination number of bytes per Line
  * @param  BytesPerLineSrc: Source number of bytes per Line
  * @retval None
  */
static void _LCD_DrawMemdev16bpp(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc)
{
 8003380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003384:	461d      	mov	r5, r3
 8003386:	4690      	mov	r8, r2
 8003388:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800338c:	b2ad      	uxth	r5, r5
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 2) - xSize;
  OffLineDst = (BytesPerLineDst / 2) - xSize;
 800338e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  OffLineSrc = (BytesPerLineSrc / 2) - xSize;
 8003392:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  OffLineDst = (BytesPerLineDst / 2) - xSize;
 8003396:	ebc2 0663 	rsb	r6, r2, r3, asr #1
  OffLineSrc = (BytesPerLineSrc / 2) - xSize;
 800339a:	ebc2 0764 	rsb	r7, r2, r4, asr #1
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 800339e:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <_LCD_DrawMemdev16bpp+0x54>)
  _DMA2D_ExecOperation();
 80033a0:	f7ff ff00 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <_LCD_DrawMemdev16bpp+0x58>)
 80033a6:	2201      	movs	r2, #1
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80033a8:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  TransferInProgress = 1;
 80033ac:	731a      	strb	r2, [r3, #12]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80033ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b2:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 80033b4:	2302      	movs	r3, #2
  DMA2D->FGMAR   = (U32)pSrc;
 80033b6:	60e1      	str	r1, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;
 80033b8:	63e0      	str	r0, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80033ba:	6127      	str	r7, [r4, #16]
  DMA2D->OOR     = OffLineDst;
 80033bc:	6426      	str	r6, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 80033be:	61e3      	str	r3, [r4, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80033c0:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c8:	4313      	orrs	r3, r2
 80033ca:	6023      	str	r3, [r4, #0]
  _DMA_CopyRGB565(pSrc, pDst, xSize, ySize, OffLineSrc, OffLineDst);
}
 80033cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  _DMA2D_ExecOperation();
 80033d0:	f7ff bee8 	b.w	80031a4 <_DMA2D_ExecOperation>
 80033d4:	4002b000 	.word	0x4002b000
 80033d8:	2004024c 	.word	0x2004024c

080033dc <_DMA_AlphaBlending>:
{
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4616      	mov	r6, r2
 80033e0:	461d      	mov	r5, r3
  _DMA2D_ExecOperation();
 80033e2:	f7ff fedf 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 80033e6:	2201      	movs	r2, #1
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <_DMA_AlphaBlending+0x44>)
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 80033ea:	042d      	lsls	r5, r5, #16
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 80033ec:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <_DMA_AlphaBlending+0x48>)
  TransferInProgress = 1;
 80033ee:	731a      	strb	r2, [r3, #12]
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 80033f0:	4315      	orrs	r5, r2
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <_DMA_AlphaBlending+0x4c>)
 80033f4:	6023      	str	r3, [r4, #0]
  DMA2D->FGOR    = 0;
 80033f6:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pColorFG;
 80033f8:	60e0      	str	r0, [r4, #12]
  DMA2D->BGMAR   = (U32)pColorBG;
 80033fa:	6161      	str	r1, [r4, #20]
  DMA2D->OMAR    = (U32)pColorDst;
 80033fc:	63e6      	str	r6, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;
 80033fe:	6123      	str	r3, [r4, #16]
  DMA2D->BGOR    = 0;
 8003400:	61a3      	str	r3, [r4, #24]
  DMA2D->OOR     = 0;
 8003402:	6423      	str	r3, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 8003404:	61e3      	str	r3, [r4, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 8003406:	6263      	str	r3, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8003408:	6363      	str	r3, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 800340a:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003412:	4313      	orrs	r3, r2
 8003414:	6023      	str	r3, [r4, #0]
}
 8003416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _DMA2D_ExecOperation();
 800341a:	f7ff bec3 	b.w	80031a4 <_DMA2D_ExecOperation>
 800341e:	bf00      	nop
 8003420:	2004024c 	.word	0x2004024c
 8003424:	4002b000 	.word	0x4002b000
 8003428:	00020200 	.word	0x00020200

0800342c <_LCD_MixColorsBulk>:
{
 800342c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003432:	4692      	mov	sl, r2
 8003434:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
  for (y = 0; y < ySize; y++)
 8003438:	f04f 0b00 	mov.w	fp, #0
    pFG  += xSize + OffFG;
 800343c:	442b      	add	r3, r5
    pBG  += xSize + OffBG;
 800343e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
                 | ((U32)Intens << 24);
 8003440:	ea4f 6806 	mov.w	r8, r6, lsl #24
                 | ((U32)(255 - Intens) << 24);
 8003444:	f1c6 06ff 	rsb	r6, r6, #255	; 0xff
    pFG  += xSize + OffFG;
 8003448:	009a      	lsls	r2, r3, #2
    pDst += xSize + OffDest;
 800344a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 800344c:	ea4f 4905 	mov.w	r9, r5, lsl #16
    pBG  += xSize + OffBG;
 8003450:	442f      	add	r7, r5
    pDst += xSize + OffDest;
 8003452:	441d      	add	r5, r3
                 | ((U32)Intens << 24);
 8003454:	f448 3880 	orr.w	r8, r8, #65536	; 0x10000
                 | ((U32)(255 - Intens) << 24);
 8003458:	0636      	lsls	r6, r6, #24
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 800345a:	f049 0901 	orr.w	r9, r9, #1
    pBG  += xSize + OffBG;
 800345e:	00bf      	lsls	r7, r7, #2
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 8003460:	4c15      	ldr	r4, [pc, #84]	; (80034b8 <_LCD_MixColorsBulk+0x8c>)
    pDst += xSize + OffDest;
 8003462:	00ad      	lsls	r5, r5, #2
  for (y = 0; y < ySize; y++)
 8003464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003466:	459b      	cmp	fp, r3
 8003468:	d102      	bne.n	8003470 <_LCD_MixColorsBulk+0x44>
}
 800346a:	b003      	add	sp, #12
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003470:	9201      	str	r2, [sp, #4]
  _DMA2D_ExecOperation();
 8003472:	f7ff fe97 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 8003476:	f04f 0c01 	mov.w	ip, #1
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <_LCD_MixColorsBulk+0x90>)
  for (y = 0; y < ySize; y++)
 800347c:	f10b 0b01 	add.w	fp, fp, #1
  TransferInProgress = 1;
 8003480:	f883 c00c 	strb.w	ip, [r3, #12]
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <_LCD_MixColorsBulk+0x94>)
 8003486:	6023      	str	r3, [r4, #0]
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8003488:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pColorFG;
 800348a:	60e0      	str	r0, [r4, #12]
  DMA2D->BGMAR   = (U32)pColorBG;
 800348c:	6161      	str	r1, [r4, #20]
    pBG  += xSize + OffBG;
 800348e:	4439      	add	r1, r7
  DMA2D->OMAR    = (U32)pColorDst;
 8003490:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
    pDst += xSize + OffDest;
 8003494:	44aa      	add	sl, r5
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8003496:	f8c4 801c 	str.w	r8, [r4, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 800349a:	6266      	str	r6, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 800349c:	6363      	str	r3, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 800349e:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a8:	ea43 030c 	orr.w	r3, r3, ip
 80034ac:	6023      	str	r3, [r4, #0]
  _DMA2D_ExecOperation();
 80034ae:	f7ff fe79 	bl	80031a4 <_DMA2D_ExecOperation>
    pFG  += xSize + OffFG;
 80034b2:	9a01      	ldr	r2, [sp, #4]
 80034b4:	4410      	add	r0, r2
  for (y = 0; y < ySize; y++)
 80034b6:	e7d5      	b.n	8003464 <_LCD_MixColorsBulk+0x38>
 80034b8:	4002b000 	.word	0x4002b000
 80034bc:	2004024c 	.word	0x2004024c
 80034c0:	00020200 	.word	0x00020200

080034c4 <_DMA_ConvertColor>:
{
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	9d06      	ldr	r5, [sp, #24]
 80034c8:	4617      	mov	r7, r2
 80034ca:	461e      	mov	r6, r3
  _DMA2D_ExecOperation();
 80034cc:	f7ff fe6a 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 80034d0:	2201      	movs	r2, #1
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <_DMA_ConvertColor+0x40>)
  DMA2D->CR      = 0x00010000UL | (1 << 9);
 80034d4:	4c0c      	ldr	r4, [pc, #48]	; (8003508 <_DMA_ConvertColor+0x44>)
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 80034d6:	042d      	lsls	r5, r5, #16
  TransferInProgress = 1;
 80034d8:	731a      	strb	r2, [r3, #12]
  DMA2D->CR      = 0x00010000UL | (1 << 9);
 80034da:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 80034de:	4315      	orrs	r5, r2
  DMA2D->CR      = 0x00010000UL | (1 << 9);
 80034e0:	6023      	str	r3, [r4, #0]
  DMA2D->FGOR    = 0;
 80034e2:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;
 80034e4:	60e0      	str	r0, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;
 80034e6:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;
 80034e8:	6123      	str	r3, [r4, #16]
  DMA2D->OOR     = 0;
 80034ea:	6423      	str	r3, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormatSrc;
 80034ec:	61e7      	str	r7, [r4, #28]
  DMA2D->OPFCCR  = PixelFormatDst;
 80034ee:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;
 80034f0:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f8:	4313      	orrs	r3, r2
 80034fa:	6023      	str	r3, [r4, #0]
}
 80034fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _DMA2D_ExecOperation();
 8003500:	f7ff be50 	b.w	80031a4 <_DMA2D_ExecOperation>
 8003504:	2004024c 	.word	0x2004024c
 8003508:	4002b000 	.word	0x4002b000

0800350c <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800350c:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 800350e:	2300      	movs	r3, #0
 8003510:	9200      	str	r2, [sp, #0]
 8003512:	2204      	movs	r2, #4
 8003514:	f7ff ffd6 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8003518:	b003      	add	sp, #12
 800351a:	f85d fb04 	ldr.w	pc, [sp], #4

0800351e <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800351e:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8003520:	2300      	movs	r3, #0
 8003522:	9200      	str	r2, [sp, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	f7ff ffcd 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800352a:	b003      	add	sp, #12
 800352c:	f85d fb04 	ldr.w	pc, [sp], #4

08003530 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8003530:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8003532:	2300      	movs	r3, #0
 8003534:	9200      	str	r2, [sp, #0]
 8003536:	2203      	movs	r2, #3
 8003538:	f7ff ffc4 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800353c:	b003      	add	sp, #12
 800353e:	f85d fb04 	ldr.w	pc, [sp], #4

08003542 <_Color2IndexBulk_M8888I_DMA2D>:
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8003542:	2300      	movs	r3, #0
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8003544:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8003546:	9200      	str	r2, [sp, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	f7ff ffbb 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800354e:	b003      	add	sp, #12
 8003550:	f85d fb04 	ldr.w	pc, [sp], #4

08003554 <_Index2ColorBulk_M8888I_DMA2D>:
 8003554:	f7ff bff5 	b.w	8003542 <_Color2IndexBulk_M8888I_DMA2D>

08003558 <_Color2IndexBulk_M888_DMA2D>:
 8003558:	f7ff bff3 	b.w	8003542 <_Color2IndexBulk_M8888I_DMA2D>

0800355c <_Index2ColorBulk_M888_DMA2D>:
 800355c:	f7ff bff1 	b.w	8003542 <_Color2IndexBulk_M8888I_DMA2D>

08003560 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8003560:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8003562:	2304      	movs	r3, #4
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	f7ff ffac 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800356c:	b003      	add	sp, #12
 800356e:	f85d fb04 	ldr.w	pc, [sp], #4

08003572 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8003572:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8003574:	2302      	movs	r3, #2
 8003576:	9200      	str	r2, [sp, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	f7ff ffa3 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800357e:	b003      	add	sp, #12
 8003580:	f85d fb04 	ldr.w	pc, [sp], #4

08003584 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8003584:	b507      	push	{r0, r1, r2, lr}
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8003586:	2303      	movs	r3, #3
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	f7ff ff9a 	bl	80034c4 <_DMA_ConvertColor>
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8003590:	b003      	add	sp, #12
 8003592:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003598 <_DMA_DrawAlphaBitmap>:
{
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800359e:	4616      	mov	r6, r2
 80035a0:	461d      	mov	r5, r3
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 80035a2:	4c12      	ldr	r4, [pc, #72]	; (80035ec <_DMA_DrawAlphaBitmap+0x54>)
{
 80035a4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
  _DMA2D_ExecOperation();
 80035a8:	f7ff fdfc 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <_DMA_DrawAlphaBitmap+0x58>)
 80035ae:	2201      	movs	r2, #1
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80035b0:	b2ad      	uxth	r5, r5
  TransferInProgress = 1;
 80035b2:	731a      	strb	r2, [r3, #12]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80035b4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  DMA2D->CR      = 0x00020000UL | (1 << 9);
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <_DMA_DrawAlphaBitmap+0x5c>)
 80035ba:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 80035bc:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;
 80035be:	60e1      	str	r1, [r4, #12]
  DMA2D->BGMAR   = (U32)pDst;
 80035c0:	6160      	str	r0, [r4, #20]
  DMA2D->OMAR    = (U32)pDst;
 80035c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80035c4:	f8c4 9010 	str.w	r9, [r4, #16]
  DMA2D->BGOR    = OffLineDst;
 80035c8:	f8c4 8018 	str.w	r8, [r4, #24]
  DMA2D->OOR     = OffLineDst;
 80035cc:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;
 80035d0:	61e3      	str	r3, [r4, #28]
  DMA2D->BGPFCCR = PixelFormat;
 80035d2:	6267      	str	r7, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;
 80035d4:	6367      	str	r7, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80035d6:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035de:	4313      	orrs	r3, r2
 80035e0:	6023      	str	r3, [r4, #0]
}
 80035e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  _DMA2D_ExecOperation();
 80035e6:	f7ff bddd 	b.w	80031a4 <_DMA2D_ExecOperation>
 80035ea:	bf00      	nop
 80035ec:	4002b000 	.word	0x4002b000
 80035f0:	2004024c 	.word	0x2004024c
 80035f4:	00020200 	.word	0x00020200

080035f8 <_LCD_DrawMemdevAlpha>:
  * @param  BytesPerLineDst: Destination number of bytes per Line
  * @param  BytesPerLineSrc: Source number of bytes per Line
  * @retval None
  */
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc)
{
 80035f8:	b530      	push	{r4, r5, lr}
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
  OffLineDst = (BytesPerLineDst / 4) - xSize;
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 80035fa:	2500      	movs	r5, #0
{
 80035fc:	b085      	sub	sp, #20
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 80035fe:	9502      	str	r5, [sp, #8]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003600:	9d08      	ldr	r5, [sp, #32]
{
 8003602:	9c09      	ldr	r4, [sp, #36]	; 0x24
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003604:	2d00      	cmp	r5, #0
 8003606:	bfb8      	it	lt
 8003608:	3503      	addlt	r5, #3
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800360a:	2c00      	cmp	r4, #0
 800360c:	bfb8      	it	lt
 800360e:	3403      	addlt	r4, #3
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003610:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8003614:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8003618:	9501      	str	r5, [sp, #4]
 800361a:	9400      	str	r4, [sp, #0]
 800361c:	f7ff ffbc 	bl	8003598 <_DMA_DrawAlphaBitmap>
}
 8003620:	b005      	add	sp, #20
 8003622:	bd30      	pop	{r4, r5, pc}

08003624 <_LCD_GetpPalConvTable>:
  * @param  pBitmap   : Bitmap
  * @param  LayerIndex: Layer index
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8003624:	b538      	push	{r3, r4, r5, lr}
  void (* pFunc)(void);
  int DoDefault = 0;

  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8)
 8003626:	88cb      	ldrh	r3, [r1, #6]
{
 8003628:	4604      	mov	r4, r0
 800362a:	460d      	mov	r5, r1
 800362c:	4610      	mov	r0, r2
  if (pBitmap->BitsPerPixel == 8)
 800362e:	2b08      	cmp	r3, #8
 8003630:	d107      	bne.n	8003642 <_LCD_GetpPalConvTable+0x1e>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8003632:	2125      	movs	r1, #37	; 0x25
 8003634:	f002 fdf2 	bl	800621c <LCD_GetDevFunc>
    if (pFunc)
 8003638:	b118      	cbz	r0, 8003642 <_LCD_GetpPalConvTable+0x1e>
    {
      if (pBitmap->pPal)
 800363a:	68eb      	ldr	r3, [r5, #12]
 800363c:	b10b      	cbz	r3, 8003642 <_LCD_GetpPalConvTable+0x1e>
      {
        if (pBitmap->pPal->HasTrans)
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	b123      	cbz	r3, 800364c <_LCD_GetpPalConvTable+0x28>

  /* Default palette management for other cases */
  if (DoDefault)
  {
    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8003642:	4620      	mov	r0, r4
  /* Load LUT using DMA2D */
  _DMA_LoadLUT((U32 *)pLogPal->pPalEntries, pLogPal->NumEntries);

  /* Return something not NULL */
  return _pBuffer_DMA2D;
}
 8003644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return LCD_GetpPalConvTable(pLogPal);
 8003648:	f002 bd38 	b.w	80060bc <LCD_GetpPalConvTable>
  _DMA_LoadLUT((U32 *)pLogPal->pPalEntries, pLogPal->NumEntries);
 800364c:	6821      	ldr	r1, [r4, #0]
 800364e:	68a0      	ldr	r0, [r4, #8]
  _DMA2D_ExecOperation();
 8003650:	f7ff fda8 	bl	80031a4 <_DMA2D_ExecOperation>
                  | ((NumItems - 1) & 0xFF) << 8;
 8003654:	3901      	subs	r1, #1
  TransferInProgress = 1;
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <_LCD_GetpPalConvTable+0x5c>)
 8003658:	2201      	movs	r2, #1
                  | ((NumItems - 1) & 0xFF) << 8;
 800365a:	0209      	lsls	r1, r1, #8
  TransferInProgress = 1;
 800365c:	731a      	strb	r2, [r3, #12]
                  | ((NumItems - 1) & 0xFF) << 8;
 800365e:	b289      	uxth	r1, r1
  DMA2D->FGCMAR  = (U32)pColor;
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <_LCD_GetpPalConvTable+0x60>)
 8003662:	62d8      	str	r0, [r3, #44]	; 0x2c
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888
 8003664:	61d9      	str	r1, [r3, #28]
    DMA2D->CR     |= DMA2D_IT_CTC;
 8003666:	681a      	ldr	r2, [r3, #0]
}
 8003668:	4807      	ldr	r0, [pc, #28]	; (8003688 <_LCD_GetpPalConvTable+0x64>)
    DMA2D->CR     |= DMA2D_IT_CTC;
 800366a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800366e:	601a      	str	r2, [r3, #0]
  DMA2D->FGPFCCR |= (1 << 5);
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	f042 0220 	orr.w	r2, r2, #32
 8003676:	61da      	str	r2, [r3, #28]
  _DMA2D_ExecOperation();
 8003678:	f7ff fd94 	bl	80031a4 <_DMA2D_ExecOperation>
}
 800367c:	bd38      	pop	{r3, r4, r5, pc}
 800367e:	bf00      	nop
 8003680:	2004024c 	.word	0x2004024c
 8003684:	4002b000 	.word	0x4002b000
 8003688:	200403b4 	.word	0x200403b4

0800368c <_LCD_DrawBitmap4bpp>:
{
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (x < 0)
 8003690:	1e0c      	subs	r4, r1, #0
{
 8003692:	b085      	sub	sp, #20
 8003694:	4617      	mov	r7, r2
 8003696:	4683      	mov	fp, r0
 8003698:	469a      	mov	sl, r3
 800369a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  if (x < 0)
 800369c:	db7b      	blt.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  if ((x + xSize) >= _axSize[LayerIndex])
 800369e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80037a8 <_LCD_DrawBitmap4bpp+0x11c>
 80036a2:	18a1      	adds	r1, r4, r2
 80036a4:	f859 5020 	ldr.w	r5, [r9, r0, lsl #2]
 80036a8:	42a9      	cmp	r1, r5
 80036aa:	da74      	bge.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  if (y < 0)
 80036ac:	2f00      	cmp	r7, #0
 80036ae:	db72      	blt.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  if ((y + ySize) >= _aySize[LayerIndex])
 80036b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036b2:	eb09 018b 	add.w	r1, r9, fp, lsl #2
 80036b6:	18f8      	adds	r0, r7, r3
 80036b8:	6849      	ldr	r1, [r1, #4]
 80036ba:	4288      	cmp	r0, r1
 80036bc:	da6b      	bge.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 80036be:	f1bb 0f00 	cmp.w	fp, #0
 80036c2:	d165      	bne.n	8003790 <_LCD_DrawBitmap4bpp+0x104>
 80036c4:	f7ff fd5c 	bl	8003180 <_GetPixelformat.part.0>
  if (PixelFormat > LTDC_PIXEL_FORMAT_ARGB4444)
 80036c8:	2804      	cmp	r0, #4
 80036ca:	4680      	mov	r8, r0
 80036cc:	d863      	bhi.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  NumBytes = ((xSize + 1) & ~1) * ySize;
 80036ce:	3201      	adds	r2, #1
 80036d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	435a      	muls	r2, r3
  if ((NumBytes > sizeof(_aBuffer)) || (NumBytes == 0))
 80036d8:	1e50      	subs	r0, r2, #1
 80036da:	9203      	str	r2, [sp, #12]
 80036dc:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
 80036e0:	d259      	bcs.n	8003796 <_LCD_DrawBitmap4bpp+0x10a>
  BufferSize = _GetBufferSize(LayerIndex);
 80036e2:	4658      	mov	r0, fp
 80036e4:	f7ff fd40 	bl	8003168 <_GetBufferSize>
 80036e8:	9002      	str	r0, [sp, #8]
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80036ea:	eb09 0c8b 	add.w	ip, r9, fp, lsl #2
 80036ee:	482b      	ldr	r0, [pc, #172]	; (800379c <_LCD_DrawBitmap4bpp+0x110>)
 80036f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80036f4:	f850 602b 	ldr.w	r6, [r0, fp, lsl #2]
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	f8dc b008 	ldr.w	fp, [ip, #8]
  _DMA2D_ExecOperation();
 80036fe:	f7ff fd51 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 8003702:	9a03      	ldr	r2, [sp, #12]
 8003704:	f04f 0c01 	mov.w	ip, #1
 8003708:	eb0a 0e02 	add.w	lr, sl, r2
  pWR = (U8 *)_aBuffer;
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <_LCD_DrawBitmap4bpp+0x114>)
  TransferInProgress = 1;
 800370e:	f889 c00c 	strb.w	ip, [r9, #12]
    *pWR++ = _aMirror[*pRD++];
 8003712:	f81a cb01 	ldrb.w	ip, [sl], #1
 8003716:	4484      	add	ip, r0
  } while (--NumBytes);
 8003718:	45f2      	cmp	sl, lr
    *pWR++ = _aMirror[*pRD++];
 800371a:	f89c c008 	ldrb.w	ip, [ip, #8]
 800371e:	f802 cb01 	strb.w	ip, [r2], #1
  } while (--NumBytes);
 8003722:	d1f6      	bne.n	8003712 <_LCD_DrawBitmap4bpp+0x86>
  OffLineSrc = (BytesPerLine * 2) - xSize;
 8003724:	9b10      	ldr	r3, [sp, #64]	; 0x40
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003726:	fb07 4405 	mla	r4, r7, r5, r4
  OffLineSrc = (BytesPerLine * 2) - xSize;
 800372a:	ea4f 0943 	mov.w	r9, r3, lsl #1
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 800372e:	fb0b 6604 	mla	r6, fp, r4, r6
  Index = LCD_GetColorIndex();
 8003732:	f002 fd13 	bl	800615c <LCD_GetColorIndex>
  Color = LCD_Index2Color(Index);
 8003736:	f002 fb9b 	bl	8005e70 <LCD_Index2Color>
  DMA2D->CR = 0x00020000UL;
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <_LCD_DrawBitmap4bpp+0x118>)
 800373c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  DMA2D->BGOR    = OffDst - OffSrc;
 8003740:	eba5 0509 	sub.w	r5, r5, r9
  DMA2D->CR = 0x00020000UL;
 8003744:	601a      	str	r2, [r3, #0]
  DMA2D->FGMAR   = (U32)_aBuffer;
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <_LCD_DrawBitmap4bpp+0x114>)
  DMA2D->FGCOLR  = Color;
 8003748:	6218      	str	r0, [r3, #32]
  DMA2D->FGOR    = 0;
 800374a:	2000      	movs	r0, #0
  DMA2D->FGMAR   = (U32)_aBuffer;
 800374c:	60da      	str	r2, [r3, #12]
  DMA2D->FGPFCCR = 0xA;
 800374e:	220a      	movs	r2, #10
  DMA2D->FGOR    = 0;
 8003750:	6118      	str	r0, [r3, #16]
  DMA2D->FGPFCCR = 0xA;
 8003752:	61da      	str	r2, [r3, #28]
  DMA2D->NLR     = (U32)((xSize + OffSrc) << 16) | ySize;
 8003754:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8003758:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 800375e:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8003762:	fb01 6602 	mla	r6, r1, r2, r6
  DMA2D->BGMAR   = (U32)pDst;
 8003766:	615e      	str	r6, [r3, #20]
  DMA2D->BGOR    = OffDst - OffSrc;
 8003768:	619d      	str	r5, [r3, #24]
  DMA2D->BGPFCCR = PixelFormatDst;
 800376a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  DMA2D->OMAR    = DMA2D->BGMAR;
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c
  DMA2D->OOR     = DMA2D->BGOR;
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = DMA2D->BGPFCCR;
 8003776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  _DMA2D_ExecOperation();
 8003786:	f7ff fd0d 	bl	80031a4 <_DMA2D_ExecOperation>
}
 800378a:	b005      	add	sp, #20
 800378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8003790:	f04f 0800 	mov.w	r8, #0
 8003794:	e79b      	b.n	80036ce <_LCD_DrawBitmap4bpp+0x42>
    return 1;
 8003796:	2001      	movs	r0, #1
  return _DMA_DrawBitmapA4((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);;
 8003798:	e7f7      	b.n	800378a <_LCD_DrawBitmap4bpp+0xfe>
 800379a:	bf00      	nop
 800379c:	08009ea8 	.word	0x08009ea8
 80037a0:	200403b4 	.word	0x200403b4
 80037a4:	4002b000 	.word	0x4002b000
 80037a8:	2004024c 	.word	0x2004024c

080037ac <_LCD_DrawBitmapAlpha>:
{
 80037ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80037b2:	468a      	mov	sl, r1
 80037b4:	4693      	mov	fp, r2
 80037b6:	461e      	mov	r6, r3
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 80037b8:	4605      	mov	r5, r0
{
 80037ba:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 80037be:	bb40      	cbnz	r0, 8003812 <_LCD_DrawBitmapAlpha+0x66>
 80037c0:	f7ff fcde 	bl	8003180 <_GetPixelformat.part.0>
 80037c4:	4681      	mov	r9, r0
  BufferSize = _GetBufferSize(LayerIndex);
 80037c6:	4628      	mov	r0, r5
 80037c8:	f7ff fcce 	bl	8003168 <_GetBufferSize>
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <_LCD_DrawBitmapAlpha+0x6c>)
 80037ce:	4913      	ldr	r1, [pc, #76]	; (800381c <_LCD_DrawBitmapAlpha+0x70>)
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80037d0:	2c00      	cmp	r4, #0
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80037d2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80037d6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80037da:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80037de:	bfb8      	it	lt
 80037e0:	3403      	addlt	r4, #3
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	fb0b aa02 	mla	sl, fp, r2, sl
 80037e8:	691b      	ldr	r3, [r3, #16]
  OffLineDst = _axSize[LayerIndex] - xSize;
 80037ea:	eba2 0208 	sub.w	r2, r2, r8
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80037ee:	fb01 550a 	mla	r5, r1, sl, r5
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80037f2:	ebc8 04a4 	rsb	r4, r8, r4, asr #2
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80037f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80037f8:	4631      	mov	r1, r6
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 80037fa:	fb03 5000 	mla	r0, r3, r0, r5
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80037fe:	4642      	mov	r2, r8
 8003800:	463b      	mov	r3, r7
 8003802:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003806:	940a      	str	r4, [sp, #40]	; 0x28
}
 8003808:	b001      	add	sp, #4
 800380a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800380e:	f7ff bec3 	b.w	8003598 <_DMA_DrawAlphaBitmap>
    return 0;
 8003812:	f04f 0900 	mov.w	r9, #0
 8003816:	e7d6      	b.n	80037c6 <_LCD_DrawBitmapAlpha+0x1a>
 8003818:	2004024c 	.word	0x2004024c
 800381c:	08009ea8 	.word	0x08009ea8

08003820 <_LCD_DrawBitmap8bpp>:
{
 8003820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003828:	460d      	mov	r5, r1
 800382a:	4693      	mov	fp, r2
 800382c:	4699      	mov	r9, r3
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 800382e:	4604      	mov	r4, r0
{
 8003830:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 8003834:	2800      	cmp	r0, #0
 8003836:	d138      	bne.n	80038aa <_LCD_DrawBitmap8bpp+0x8a>
 8003838:	f7ff fca2 	bl	8003180 <_GetPixelformat.part.0>
 800383c:	4606      	mov	r6, r0
  BufferSize = _GetBufferSize(LayerIndex);
 800383e:	4620      	mov	r0, r4
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;
 8003840:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  BufferSize = _GetBufferSize(LayerIndex);
 8003844:	f7ff fc90 	bl	8003168 <_GetBufferSize>
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <_LCD_DrawBitmap8bpp+0x90>)
 800384a:	491a      	ldr	r1, [pc, #104]	; (80038b4 <_LCD_DrawBitmap8bpp+0x94>)
 800384c:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 8003850:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 8003854:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8003858:	fb0b 550c 	mla	r5, fp, ip, r5
 800385c:	f8de 2008 	ldr.w	r2, [lr, #8]
  DMA2D->CR      = 0x00010000UL | (1 << 9);
 8003860:	4c15      	ldr	r4, [pc, #84]	; (80038b8 <_LCD_DrawBitmap8bpp+0x98>)
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 8003862:	fb02 1105 	mla	r1, r2, r5, r1
 8003866:	f8de 2010 	ldr.w	r2, [lr, #16]
  OffLineSrc = BytesPerLine - xSize;
 800386a:	ebaa 0508 	sub.w	r5, sl, r8
  AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y * _axSize[LayerIndex] + x) * _aBytesPerPixels[LayerIndex];
 800386e:	fb02 1100 	mla	r1, r2, r0, r1
  OffLineDst = _axSize[LayerIndex] - xSize;
 8003872:	ebac 0008 	sub.w	r0, ip, r8
  _DMA2D_ExecOperation();
 8003876:	f7ff fc95 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 800387a:	2201      	movs	r2, #1
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <_LCD_DrawBitmap8bpp+0x90>)
 800387e:	731a      	strb	r2, [r3, #12]
  DMA2D->CR      = 0x00010000UL | (1 << 9);
 8003880:	f44f 3381 	mov.w	r3, #66048	; 0x10200
 8003884:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;
 8003886:	2305      	movs	r3, #5
  DMA2D->FGMAR   = (U32)pSrc;
 8003888:	f8c4 900c 	str.w	r9, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;
 800388c:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffSrc;
 800388e:	6125      	str	r5, [r4, #16]
  DMA2D->OOR     = OffDst;
 8003890:	6420      	str	r0, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;
 8003892:	61e3      	str	r3, [r4, #28]
  DMA2D->OPFCCR  = PixelFormatDst;
 8003894:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;
 8003896:	6467      	str	r7, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	4313      	orrs	r3, r2
 80038a0:	6023      	str	r3, [r4, #0]
}
 80038a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA2D_ExecOperation();
 80038a6:	f7ff bc7d 	b.w	80031a4 <_DMA2D_ExecOperation>
    return 0;
 80038aa:	2600      	movs	r6, #0
 80038ac:	e7c7      	b.n	800383e <_LCD_DrawBitmap8bpp+0x1e>
 80038ae:	bf00      	nop
 80038b0:	2004024c 	.word	0x2004024c
 80038b4:	08009ea8 	.word	0x08009ea8
 80038b8:	4002b000 	.word	0x4002b000

080038bc <_LCD_FillRect>:
{
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	4606      	mov	r6, r0
 80038c2:	460f      	mov	r7, r1
 80038c4:	4690      	mov	r8, r2
 80038c6:	461d      	mov	r5, r3
 80038c8:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80038cc:	f001 f9c0 	bl	8004c50 <GUI_GetDrawMode>
 80038d0:	2801      	cmp	r0, #1
 80038d2:	d111      	bne.n	80038f8 <_LCD_FillRect+0x3c>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2119      	movs	r1, #25
 80038d8:	4630      	mov	r0, r6
 80038da:	f002 fdb8 	bl	800644e <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80038de:	462a      	mov	r2, r5
 80038e0:	4641      	mov	r1, r8
 80038e2:	4638      	mov	r0, r7
 80038e4:	4623      	mov	r3, r4
 80038e6:	f002 f82b 	bl	8005940 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))_LCD_FillRect);
 80038ea:	4630      	mov	r0, r6
 80038ec:	4a20      	ldr	r2, [pc, #128]	; (8003970 <_LCD_FillRect+0xb4>)
 80038ee:	2119      	movs	r1, #25
}
 80038f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))_LCD_FillRect);
 80038f4:	f002 bdab 	b.w	800644e <LCD_SetDevFunc>
    AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 80038f8:	f8df a084 	ldr.w	sl, [pc, #132]	; 8003980 <_LCD_FillRect+0xc4>
    BufferSize = _GetBufferSize(LayerIndex);
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff fc33 	bl	8003168 <_GetBufferSize>
    AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 8003902:	491c      	ldr	r1, [pc, #112]	; (8003974 <_LCD_FillRect+0xb8>)
 8003904:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
 8003908:	eb0a 0c86 	add.w	ip, sl, r6, lsl #2
    xSize = x1 - x0 + 1;
 800390c:	1bed      	subs	r5, r5, r7
    AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 800390e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8003912:	fb08 7702 	mla	r7, r8, r2, r7
 8003916:	f8dc 3008 	ldr.w	r3, [ip, #8]
    xSize = x1 - x0 + 1;
 800391a:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 800391c:	eba4 0408 	sub.w	r4, r4, r8
    AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 8003920:	fb03 1107 	mla	r1, r3, r7, r1
 8003924:	f8dc 3010 	ldr.w	r3, [ip, #16]
    _DMA_Fill(LayerIndex, (void *)AddrDst, xSize, ySize, _axSize[LayerIndex] - xSize, PixelIndex);
 8003928:	1b57      	subs	r7, r2, r5
    ySize = y1 - y0 + 1;
 800392a:	3401      	adds	r4, #1
    AddrDst = _aAddr[LayerIndex] + BufferSize * _aBufferIndex[LayerIndex] + (y0 * _axSize[LayerIndex] + x0) * _aBytesPerPixels[LayerIndex];
 800392c:	fb03 1100 	mla	r1, r3, r0, r1
  _DMA2D_ExecOperation();
 8003930:	f7ff fc38 	bl	80031a4 <_DMA2D_ExecOperation>
  TransferInProgress = 1;
 8003934:	2301      	movs	r3, #1
 8003936:	f88a 300c 	strb.w	r3, [sl, #12]
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 800393a:	b9be      	cbnz	r6, 800396c <_LCD_FillRect+0xb0>
 800393c:	f7ff fc20 	bl	8003180 <_GetPixelformat.part.0>
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003940:	b2a4      	uxth	r4, r4
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <_LCD_FillRect+0xbc>)
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <_LCD_FillRect+0xc0>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003946:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 800394a:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 800394c:	f8c3 9038 	str.w	r9, [r3, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;
 8003950:	63d9      	str	r1, [r3, #60]	; 0x3c
  DMA2D->OOR     = OffLine;
 8003952:	641f      	str	r7, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;
 8003954:	6358      	str	r0, [r3, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003956:	645c      	str	r4, [r3, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	f042 0201 	orr.w	r2, r2, #1
}
 8003962:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003966:	601a      	str	r2, [r3, #0]
  _DMA2D_ExecOperation();
 8003968:	f7ff bc1c 	b.w	80031a4 <_DMA2D_ExecOperation>
    return 0;
 800396c:	2000      	movs	r0, #0
 800396e:	e7e7      	b.n	8003940 <_LCD_FillRect+0x84>
 8003970:	080038bd 	.word	0x080038bd
 8003974:	08009ea8 	.word	0x08009ea8
 8003978:	4002b000 	.word	0x4002b000
 800397c:	00030200 	.word	0x00030200
 8003980:	2004024c 	.word	0x2004024c

08003984 <DSI_IO_WriteCmd>:
  if(NbrParams <= 1)
 8003984:	2801      	cmp	r0, #1
{
 8003986:	4603      	mov	r3, r0
 8003988:	b507      	push	{r0, r1, r2, lr}
  if(NbrParams <= 1)
 800398a:	d80a      	bhi.n	80039a2 <DSI_IO_WriteCmd+0x1e>
    HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800398c:	784b      	ldrb	r3, [r1, #1]
 800398e:	2215      	movs	r2, #21
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <DSI_IO_WriteCmd+0x30>)
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	780b      	ldrb	r3, [r1, #0]
 8003996:	2100      	movs	r1, #0
 8003998:	f7fd ffa6 	bl	80018e8 <HAL_DSI_ShortWrite>
}
 800399c:	b003      	add	sp, #12
 800399e:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_DSI_LongWrite(&hdsi,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 80039a2:	9101      	str	r1, [sp, #4]
 80039a4:	5c0a      	ldrb	r2, [r1, r0]
 80039a6:	2100      	movs	r1, #0
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <DSI_IO_WriteCmd+0x30>)
 80039aa:	9200      	str	r2, [sp, #0]
 80039ac:	2239      	movs	r2, #57	; 0x39
 80039ae:	f7fd ffac 	bl	800190a <HAL_DSI_LongWrite>
}
 80039b2:	e7f3      	b.n	800399c <DSI_IO_WriteCmd+0x18>
 80039b4:	20040260 	.word	0x20040260

080039b8 <BSP_LCD_MspInit>:
{
 80039b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80039ba:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <BSP_LCD_MspInit+0xac>)
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xF, 0);
 80039bc:	210f      	movs	r1, #15
 80039be:	2058      	movs	r0, #88	; 0x58
  __HAL_RCC_LTDC_CLK_ENABLE();
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80039ce:	9201      	str	r2, [sp, #4]
 80039d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 80039d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80039da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039dc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ec:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80039f0:	9202      	str	r2, [sp, #8]
 80039f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039fa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003a02:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8003a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a06:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003a12:	9203      	str	r2, [sp, #12]
 8003a14:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8003a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a18:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8003a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a20:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xF, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	f7fd fb48 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a2c:	2058      	movs	r0, #88	; 0x58
 8003a2e:	f7fd fb77 	bl	8001120 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0xF, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	210f      	movs	r1, #15
 8003a36:	2062      	movs	r0, #98	; 0x62
 8003a38:	f7fd fb40 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003a3c:	2062      	movs	r0, #98	; 0x62
 8003a3e:	f7fd fb6f 	bl	8001120 <HAL_NVIC_EnableIRQ>
    DMA2D->CR |= DMA2D_IT;
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <BSP_LCD_MspInit+0xb0>)
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0xF, 0x0);
 8003a44:	210f      	movs	r1, #15
 8003a46:	205a      	movs	r0, #90	; 0x5a
    DMA2D->CR |= DMA2D_IT;
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0xF, 0x0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	f7fd fb33 	bl	80010bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003a56:	205a      	movs	r0, #90	; 0x5a
}
 8003a58:	b005      	add	sp, #20
 8003a5a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003a5e:	f7fd bb5f 	b.w	8001120 <HAL_NVIC_EnableIRQ>
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	4002b000 	.word	0x4002b000

08003a6c <DMA2D_IRQHandler>:
  DMA2D->IFCR = (U32)DMA2D_IFSR_CTCIF;
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <DMA2D_IRQHandler+0x14>)
 8003a6e:	2202      	movs	r2, #2
 8003a70:	609a      	str	r2, [r3, #8]
  DMA2D->IFCR = (U32)DMA2D_IFCR_CCTCIF;
 8003a72:	2210      	movs	r2, #16
 8003a74:	609a      	str	r2, [r3, #8]
  TransferInProgress = 0;
 8003a76:	2200      	movs	r2, #0
 8003a78:	4b02      	ldr	r3, [pc, #8]	; (8003a84 <DMA2D_IRQHandler+0x18>)
 8003a7a:	731a      	strb	r2, [r3, #12]
}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	4002b000 	.word	0x4002b000
 8003a84:	2004024c 	.word	0x2004024c

08003a88 <LCD_SetUpdateRegion>:
  * @param  idx: active region index.
  * @retval None
  */
void LCD_SetUpdateRegion(int idx)
{
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8003a88:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <LCD_SetUpdateRegion+0x20>)
{
 8003a8a:	b507      	push	{r0, r1, r2, lr}
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8003a8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a90:	232a      	movs	r3, #42	; 0x2a
 8003a92:	2239      	movs	r2, #57	; 0x39
 8003a94:	2100      	movs	r1, #0
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2304      	movs	r3, #4
 8003a9a:	9001      	str	r0, [sp, #4]
 8003a9c:	4803      	ldr	r0, [pc, #12]	; (8003aac <LCD_SetUpdateRegion+0x24>)
 8003a9e:	f7fd ff34 	bl	800190a <HAL_DSI_LongWrite>
}
 8003aa2:	b003      	add	sp, #12
 8003aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa8:	20000024 	.word	0x20000024
 8003aac:	20040260 	.word	0x20040260

08003ab0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003ab0:	b538      	push	{r3, r4, r5, lr}
  uint32_t index = 0;

  __DSI_MASK_TE();
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <HAL_DSI_TearingEffectCallback+0x30>)
{
 8003ab4:	4604      	mov	r4, r0

  for(index = 0; index < GUI_NUM_LAYERS; index++)
  {
	  if(_aPendingBuffer[index] >= 0)
 8003ab6:	4d0b      	ldr	r5, [pc, #44]	; (8003ae4 <HAL_DSI_TearingEffectCallback+0x34>)
  __DSI_MASK_TE();
 8003ab8:	6a13      	ldr	r3, [r2, #32]
	  if(_aPendingBuffer[index] >= 0)
 8003aba:	68a9      	ldr	r1, [r5, #8]
  __DSI_MASK_TE();
 8003abc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	  if(_aPendingBuffer[index] >= 0)
 8003ac0:	2900      	cmp	r1, #0
  __DSI_MASK_TE();
 8003ac2:	6213      	str	r3, [r2, #32]
	  if(_aPendingBuffer[index] >= 0)
 8003ac4:	db05      	blt.n	8003ad2 <HAL_DSI_TearingEffectCallback+0x22>
      {
        GUI_MULTIBUF_ConfirmEx(index,  _aPendingBuffer[index]);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f001 fd06 	bl	80054d8 <GUI_MULTIBUF_ConfirmEx>
        _aPendingBuffer[index] = -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ad0:	60ab      	str	r3, [r5, #8]
      }
  }
  LCD_ActiveRegion = 1;
 8003ad2:	2301      	movs	r3, #1
  HAL_DSI_Refresh(hdsi);
 8003ad4:	4620      	mov	r0, r4
  LCD_ActiveRegion = 1;
 8003ad6:	612b      	str	r3, [r5, #16]
}
 8003ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_DSI_Refresh(hdsi);
 8003adc:	f7fd bef4 	b.w	80018c8 <HAL_DSI_Refresh>
 8003ae0:	40022400 	.word	0x40022400
 8003ae4:	20000024 	.word	0x20000024

08003ae8 <HAL_DSI_EndOfRefreshCallback>:
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
  uint32_t index = 0;
  static uint32_t TestAdd = 0;
  if(LCD_ActiveRegion < ZONES )
 8003ae8:	4933      	ldr	r1, [pc, #204]	; (8003bb8 <HAL_DSI_EndOfRefreshCallback+0xd0>)
{
 8003aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aec:	4606      	mov	r6, r0
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
    {
      TestAdd = LCD_Addr[index];
      /* Update LTDC configuaration */
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd + LCD_ActiveRegion  * HACT * 2;
 8003aee:	4d33      	ldr	r5, [pc, #204]	; (8003bbc <HAL_DSI_EndOfRefreshCallback+0xd4>)
  if(LCD_ActiveRegion < ZONES )
 8003af0:	6908      	ldr	r0, [r1, #16]
{
 8003af2:	b085      	sub	sp, #20
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd + LCD_ActiveRegion  * HACT * 2;
 8003af4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003af6:	2400      	movs	r4, #0
  if(LCD_ActiveRegion < ZONES )
 8003af8:	2801      	cmp	r0, #1
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003afa:	6833      	ldr	r3, [r6, #0]
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd + LCD_ActiveRegion  * HACT * 2;
 8003afc:	f102 0784 	add.w	r7, r2, #132	; 0x84
  if(LCD_ActiveRegion < ZONES )
 8003b00:	dc31      	bgt.n	8003b66 <HAL_DSI_EndOfRefreshCallback+0x7e>
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003b02:	9400      	str	r4, [sp, #0]
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd + LCD_ActiveRegion  * HACT * 2;
 8003b04:	f44f 7c48 	mov.w	ip, #800	; 0x320
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003b08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8003b0c:	f020 0008 	bic.w	r0, r0, #8
 8003b10:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 8003b14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8003b18:	f000 0008 	and.w	r0, r0, #8
 8003b1c:	9000      	str	r0, [sp, #0]
 8003b1e:	9800      	ldr	r0, [sp, #0]
      TestAdd = LCD_Addr[index];
 8003b20:	6948      	ldr	r0, [r1, #20]
 8003b22:	f8c5 00d8 	str.w	r0, [r5, #216]	; 0xd8
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd + LCD_ActiveRegion  * HACT * 2;
 8003b26:	690d      	ldr	r5, [r1, #16]
 8003b28:	fb0c 0005 	mla	r0, ip, r5, r0
 8003b2c:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8003b2e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003b30:	f040 0001 	orr.w	r0, r0, #1
 8003b34:	6250      	str	r0, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003b36:	9401      	str	r4, [sp, #4]
 8003b38:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003b3c:	f042 0208 	orr.w	r2, r2, #8
 8003b40:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003b44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	9b01      	ldr	r3, [sp, #4]
    LCD_SetUpdateRegion(LCD_ActiveRegion++);
 8003b50:	6908      	ldr	r0, [r1, #16]
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	610b      	str	r3, [r1, #16]
 8003b56:	f7ff ff97 	bl	8003a88 <LCD_SetUpdateRegion>
    /* Refresh the right part of the display */
    HAL_DSI_Refresh(hdsi);
 8003b5a:	4630      	mov	r0, r6
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
    LCD_SetUpdateRegion(0);
    LCD_Refershing = 0;
   }
}
 8003b5c:	b005      	add	sp, #20
 8003b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    HAL_DSI_Refresh(hdsi);
 8003b62:	f7fd beb1 	b.w	80018c8 <HAL_DSI_Refresh>
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003b66:	9402      	str	r4, [sp, #8]
    LCD_SetUpdateRegion(0);
 8003b68:	4620      	mov	r0, r4
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003b6a:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8003b6e:	f021 0108 	bic.w	r1, r1, #8
 8003b72:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8003b76:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8003b7a:	f001 0108 	and.w	r1, r1, #8
 8003b7e:	9102      	str	r1, [sp, #8]
 8003b80:	9902      	ldr	r1, [sp, #8]
      LTDC_LAYER(&hltdc, index)->CFBAR  = TestAdd;
 8003b82:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
 8003b86:	62b9      	str	r1, [r7, #40]	; 0x28
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8003b88:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003b8a:	f041 0101 	orr.w	r1, r1, #1
 8003b8e:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003b90:	9403      	str	r4, [sp, #12]
 8003b92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	9b03      	ldr	r3, [sp, #12]
    LCD_SetUpdateRegion(0);
 8003baa:	f7ff ff6d 	bl	8003a88 <LCD_SetUpdateRegion>
    LCD_Refershing = 0;
 8003bae:	f8c5 40dc 	str.w	r4, [r5, #220]	; 0xdc
}
 8003bb2:	b005      	add	sp, #20
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000024 	.word	0x20000024
 8003bbc:	2004024c 	.word	0x2004024c

08003bc0 <LCD_ReqTear>:
  * @brief  Request TE at scanline.
  * @param  None
  * @retval None
  */
void LCD_ReqTear(void)
{
 8003bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if (ZONES == 4 )
  uint16_t scanline = 283;
#elif (ZONES == 2 )
  uint16_t scanline = 533;
#endif
  ScanLineParams[0] = scanline >> 8;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <LCD_ReqTear+0x38>)
  ScanLineParams[1] = scanline & 0x00FF;
 8003bc6:	2515      	movs	r5, #21

  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8003bc8:	2100      	movs	r1, #0
  ScanLineParams[0] = scanline >> 8;
 8003bca:	f882 30e0 	strb.w	r3, [r2, #224]	; 0xe0
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8003bce:	f102 0414 	add.w	r4, r2, #20
  ScanLineParams[1] = scanline & 0x00FF;
 8003bd2:	f882 50e1 	strb.w	r5, [r2, #225]	; 0xe1
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8003bd6:	32e0      	adds	r2, #224	; 0xe0
 8003bd8:	4620      	mov	r0, r4
 8003bda:	9201      	str	r2, [sp, #4]
 8003bdc:	2244      	movs	r2, #68	; 0x44
 8003bde:	9200      	str	r2, [sp, #0]
 8003be0:	2239      	movs	r2, #57	; 0x39
 8003be2:	f7fd fe92 	bl	800190a <HAL_DSI_LongWrite>
  /* set_tear_on */
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	2335      	movs	r3, #53	; 0x35
 8003bea:	462a      	mov	r2, r5
 8003bec:	4620      	mov	r0, r4
 8003bee:	9100      	str	r1, [sp, #0]
 8003bf0:	f7fd fe7a 	bl	80018e8 <HAL_DSI_ShortWrite>
}
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bd30      	pop	{r4, r5, pc}
 8003bf8:	2004024c 	.word	0x2004024c

08003bfc <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
  int r = 0;
  U32 addr;

  switch (Cmd)
 8003bfc:	3901      	subs	r1, #1
{
 8003bfe:	b570      	push	{r4, r5, r6, lr}
 8003c00:	4604      	mov	r4, r0
 8003c02:	b086      	sub	sp, #24
 8003c04:	4616      	mov	r6, r2
  switch (Cmd)
 8003c06:	290d      	cmp	r1, #13
 8003c08:	d80f      	bhi.n	8003c2a <LCD_X_DisplayDriver+0x2e>
 8003c0a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c0e:	0024      	.short	0x0024
 8003c10:	0013000e 	.word	0x0013000e
 8003c14:	0073006c 	.word	0x0073006c
 8003c18:	00d7007a 	.word	0x00d7007a
 8003c1c:	008000d0 	.word	0x008000d0
 8003c20:	000e00ef 	.word	0x000e00ef
 8003c24:	00ff00f5 	.word	0x00ff00f5
 8003c28:	0026      	.short	0x0026
 8003c2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      r = -1;
      break;
    }

    return r;
}
 8003c2e:	4628      	mov	r0, r5
 8003c30:	b006      	add	sp, #24
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
      addr = _aAddr[LayerIndex] + p->yPos * _axSize[LayerIndex] * _aBytesPerPixels[LayerIndex];
 8003c34:	487d      	ldr	r0, [pc, #500]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
 8003c36:	6853      	ldr	r3, [r2, #4]
 8003c38:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8003c3c:	4353      	muls	r3, r2
 8003c3e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
      HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8003c42:	3030      	adds	r0, #48	; 0x30
      addr = _aAddr[LayerIndex] + p->yPos * _axSize[LayerIndex] * _aBytesPerPixels[LayerIndex];
 8003c44:	6895      	ldr	r5, [r2, #8]
 8003c46:	4a7a      	ldr	r2, [pc, #488]	; (8003e30 <LCD_X_DisplayDriver+0x234>)
 8003c48:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
      HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	fb05 1103 	mla	r1, r5, r3, r1
 8003c52:	f7fe fa43 	bl	80020dc <HAL_LTDC_SetAddress>
  int r = 0;
 8003c56:	2500      	movs	r5, #0
    return r;
 8003c58:	e7e9      	b.n	8003c2e <LCD_X_DisplayDriver+0x32>
      __DSI_UNMASK_TE();
 8003c5a:	4a76      	ldr	r2, [pc, #472]	; (8003e34 <LCD_X_DisplayDriver+0x238>)
 8003c5c:	6a13      	ldr	r3, [r2, #32]
 8003c5e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003c62:	6213      	str	r3, [r2, #32]
      LCD_Refershing = 1;
 8003c64:	2301      	movs	r3, #1
 8003c66:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
 8003c68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
      while(LCD_Refershing);
 8003c6c:	f8d2 50dc 	ldr.w	r5, [r2, #220]	; 0xdc
 8003c70:	2d00      	cmp	r5, #0
 8003c72:	d1fb      	bne.n	8003c6c <LCD_X_DisplayDriver+0x70>
      LCD_Addr[LayerIndex] = _aAddr[LayerIndex] + _axSize[LayerIndex] * _aySize[LayerIndex] * _aBytesPerPixels[LayerIndex] * p->Index;
 8003c74:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003c78:	6830      	ldr	r0, [r6, #0]
 8003c7a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003c7e:	684e      	ldr	r6, [r1, #4]
 8003c80:	6889      	ldr	r1, [r1, #8]
 8003c82:	4373      	muls	r3, r6
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003c84:	9500      	str	r5, [sp, #0]
      LCD_Addr[LayerIndex] = _aAddr[LayerIndex] + _axSize[LayerIndex] * _aySize[LayerIndex] * _aBytesPerPixels[LayerIndex] * p->Index;
 8003c86:	434b      	muls	r3, r1
 8003c88:	4969      	ldr	r1, [pc, #420]	; (8003e30 <LCD_X_DisplayDriver+0x234>)
 8003c8a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8003c8e:	fb00 1103 	mla	r1, r0, r3, r1
 8003c92:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <LCD_X_DisplayDriver+0x23c>)
 8003c94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c98:	6159      	str	r1, [r3, #20]
      _aPendingBuffer[LayerIndex] = p->Index;
 8003c9a:	6098      	str	r0, [r3, #8]
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003c9c:	6953      	ldr	r3, [r2, #20]
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 8003c9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003ca0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8003ca4:	f020 0008 	bic.w	r0, r0, #8
 8003ca8:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
 8003cac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8003cb0:	f000 0008 	and.w	r0, r0, #8
 8003cb4:	9000      	str	r0, [sp, #0]
 8003cb6:	9800      	ldr	r0, [sp, #0]
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 8003cb8:	f102 0084 	add.w	r0, r2, #132	; 0x84
 8003cbc:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8003cc0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8003cc2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003cc4:	f041 0101 	orr.w	r1, r1, #1
 8003cc8:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8003cca:	9501      	str	r5, [sp, #4]
 8003ccc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003cd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9b01      	ldr	r3, [sp, #4]
      break;
 8003ce4:	e7a3      	b.n	8003c2e <LCD_X_DisplayDriver+0x32>
      HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t*)p->Color, p->Pos, LayerIndex);
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	7912      	ldrb	r2, [r2, #4]
 8003cea:	6831      	ldr	r1, [r6, #0]
 8003cec:	4853      	ldr	r0, [pc, #332]	; (8003e3c <LCD_X_DisplayDriver+0x240>)
 8003cee:	f7fe f92c 	bl	8001f4a <HAL_LTDC_ConfigCLUT>
      break;
 8003cf2:	e7b0      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
      __HAL_LTDC_ENABLE(&hltdc);
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf8:	6993      	ldr	r3, [r2, #24]
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
      __HAL_LTDC_DISABLE(&hltdc);
 8003cfe:	6193      	str	r3, [r2, #24]
      break;
 8003d00:	e7a9      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
      __HAL_LTDC_DISABLE(&hltdc);
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
 8003d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d06:	6993      	ldr	r3, [r2, #24]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	e7f7      	b.n	8003cfe <LCD_X_DisplayDriver+0x102>
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 8003d10:	01e4      	lsls	r4, r4, #7
 8003d12:	6b10      	ldr	r0, [r2, #48]	; 0x30
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003d14:	6953      	ldr	r3, [r2, #20]
      if(p->OnOff  == ENABLE )
 8003d16:	6832      	ldr	r2, [r6, #0]
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 8003d18:	f100 0184 	add.w	r1, r0, #132	; 0x84
      if(p->OnOff  == ENABLE )
 8003d1c:	2a01      	cmp	r2, #1
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	d125      	bne.n	8003d70 <LCD_X_DisplayDriver+0x174>
        __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003d24:	9202      	str	r2, [sp, #8]
 8003d26:	f8d3 5404 	ldr.w	r5, [r3, #1028]	; 0x404
 8003d2a:	f025 0508 	bic.w	r5, r5, #8
 8003d2e:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8003d32:	f8d3 5404 	ldr.w	r5, [r3, #1028]	; 0x404
 8003d36:	f005 0508 	and.w	r5, r5, #8
 8003d3a:	9502      	str	r5, [sp, #8]
 8003d3c:	9d02      	ldr	r5, [sp, #8]
        __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 8003d3e:	590d      	ldr	r5, [r1, r4]
 8003d40:	f045 0501 	orr.w	r5, r5, #1
 8003d44:	510d      	str	r5, [r1, r4]
        __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8003d46:	9203      	str	r2, [sp, #12]
 8003d48:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003d4c:	f042 0208 	orr.w	r2, r2, #8
 8003d50:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003d54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	9303      	str	r3, [sp, #12]
 8003d5e:	9b03      	ldr	r3, [sp, #12]
      __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8003d60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6243      	str	r3, [r0, #36]	; 0x24
      HAL_DSI_Refresh(&hdsi);
 8003d68:	4835      	ldr	r0, [pc, #212]	; (8003e40 <LCD_X_DisplayDriver+0x244>)
 8003d6a:	f7fd fdad 	bl	80018c8 <HAL_DSI_Refresh>
      break;
 8003d6e:	e772      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
        __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8003d70:	9204      	str	r2, [sp, #16]
 8003d72:	f8d3 5404 	ldr.w	r5, [r3, #1028]	; 0x404
 8003d76:	f025 0508 	bic.w	r5, r5, #8
 8003d7a:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8003d7e:	f8d3 5404 	ldr.w	r5, [r3, #1028]	; 0x404
 8003d82:	f005 0508 	and.w	r5, r5, #8
 8003d86:	9504      	str	r5, [sp, #16]
 8003d88:	9d04      	ldr	r5, [sp, #16]
        __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 8003d8a:	590d      	ldr	r5, [r1, r4]
 8003d8c:	f025 0501 	bic.w	r5, r5, #1
 8003d90:	510d      	str	r5, [r1, r4]
        __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8003d92:	9205      	str	r2, [sp, #20]
 8003d94:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003da0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	9305      	str	r3, [sp, #20]
 8003daa:	9b05      	ldr	r3, [sp, #20]
 8003dac:	e7d8      	b.n	8003d60 <LCD_X_DisplayDriver+0x164>
      HAL_LTDC_SetWindowPosition(&hltdc, p->xPos, p->yPos, LayerIndex);
 8003dae:	4603      	mov	r3, r0
 8003db0:	e9d2 1200 	ldrd	r1, r2, [r2]
      HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003db4:	4821      	ldr	r0, [pc, #132]	; (8003e3c <LCD_X_DisplayDriver+0x240>)
 8003db6:	f7fe f948 	bl	800204a <HAL_LTDC_SetWindowPosition>
      break;
 8003dba:	e74c      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
      GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8003dbc:	aa05      	add	r2, sp, #20
 8003dbe:	a904      	add	r1, sp, #16
 8003dc0:	f001 fbc2 	bl	8005548 <GUI_GetLayerPosEx>
      if (LCD_GetSwapXYEx(LayerIndex))
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f002 fa03 	bl	80061d0 <LCD_GetSwapXYEx>
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <LCD_X_DisplayDriver+0x230>)
 8003dcc:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003dd0:	b148      	cbz	r0, 8003de6 <LCD_X_DisplayDriver+0x1ea>
        _axSize[LayerIndex] = p->ySize;
 8003dd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        _aySize[LayerIndex] = p->xSize;
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ddc:	605a      	str	r2, [r3, #4]
      HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003dde:	4623      	mov	r3, r4
 8003de0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8003de4:	e7e6      	b.n	8003db4 <LCD_X_DisplayDriver+0x1b8>
        _axSize[LayerIndex] = p->xSize;
 8003de6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
        _aySize[LayerIndex] = p->ySize;
 8003dea:	e7f5      	b.n	8003dd8 <LCD_X_DisplayDriver+0x1dc>
      HAL_LTDC_SetAlpha(&hltdc, p->Alpha, LayerIndex);
 8003dec:	4602      	mov	r2, r0
 8003dee:	6831      	ldr	r1, [r6, #0]
 8003df0:	4812      	ldr	r0, [pc, #72]	; (8003e3c <LCD_X_DisplayDriver+0x240>)
 8003df2:	f7fe f953 	bl	800209c <HAL_LTDC_SetAlpha>
      break;
 8003df6:	e72e      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
      if(p->ChromaMode != 0)
 8003df8:	6815      	ldr	r5, [r2, #0]
        HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	480f      	ldr	r0, [pc, #60]	; (8003e3c <LCD_X_DisplayDriver+0x240>)
      if(p->ChromaMode != 0)
 8003dfe:	b115      	cbz	r5, 8003e06 <LCD_X_DisplayDriver+0x20a>
        HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8003e00:	f7fe f8db 	bl	8001fba <HAL_LTDC_EnableColorKeying>
 8003e04:	e727      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
        HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 8003e06:	f7fe f8f0 	bl	8001fea <HAL_LTDC_DisableColorKeying>
 8003e0a:	e710      	b.n	8003c2e <LCD_X_DisplayDriver+0x32>
      Color = ((p->ChromaMin & 0xFF0000) >> 16) | (p->ChromaMin & 0x00FF00) | ((p->ChromaMin & 0x0000FF) << 16);
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	041a      	lsls	r2, r3, #16
 8003e10:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8003e14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e18:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8003e1c:	4311      	orrs	r1, r2
      HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4806      	ldr	r0, [pc, #24]	; (8003e3c <LCD_X_DisplayDriver+0x240>)
 8003e22:	4319      	orrs	r1, r3
 8003e24:	f7fe f874 	bl	8001f10 <HAL_LTDC_ConfigColorKeying>
      break;
 8003e28:	e715      	b.n	8003c56 <LCD_X_DisplayDriver+0x5a>
 8003e2a:	bf00      	nop
 8003e2c:	2004024c 	.word	0x2004024c
 8003e30:	08009ea8 	.word	0x08009ea8
 8003e34:	40022400 	.word	0x40022400
 8003e38:	20000024 	.word	0x20000024
 8003e3c:	2004027c 	.word	0x2004027c
 8003e40:	20040260 	.word	0x20040260

08003e44 <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++)
  {
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8003e48:	2102      	movs	r1, #2
{
 8003e4a:	b0af      	sub	sp, #188	; 0xbc
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f001 fb57 	bl	8005500 <GUI_MULTIBUF_ConfigEx>
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8003e52:	2300      	movs	r3, #0
 8003e54:	4928      	ldr	r1, [pc, #160]	; (8003ef8 <LCD_X_Config+0xb4>)
 8003e56:	461a      	mov	r2, r3
 8003e58:	4828      	ldr	r0, [pc, #160]	; (8003efc <LCD_X_Config+0xb8>)
 8003e5a:	f001 fa0f 	bl	800527c <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0))
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f002 f9b6 	bl	80061d0 <LCD_GetSwapXYEx>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d03b      	beq.n	8003ee0 <LCD_X_Config+0x9c>
  {
    LCD_SetSizeEx (0, YSIZE_0, XSIZE_0);
 8003e68:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e6c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003e70:	2000      	movs	r0, #0
 8003e72:	f002 fb1c 	bl	80064ae <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_0 * NUM_VSCREENS, XSIZE_0);
 8003e76:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e7a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f002 fb43 	bl	800650a <LCD_SetVSizeEx>
#endif
  /* Setting up VRam address and get the pixel size */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
  {
    /* Setting up VRam address */
    LCD_SetVRAMAddrEx(i, (void *)(_aAddr[i]));
 8003e84:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f002 fb28 	bl	80064de <LCD_SetVRAMAddrEx>
    /* Get the pixel size */
    _aBytesPerPixels[i] = LCD_GetBitsPerPixelEx(i) >> 3;
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f002 f992 	bl	80061b8 <LCD_GetBitsPerPixelEx>
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <LCD_X_Config+0xbc>)
 8003e96:	10c0      	asrs	r0, r0, #3
  /* Setting up custom functions */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
  {
    PixelFormat = _GetPixelformat(i);
    /* Set custom function for copying complete buffers (used by multiple buffering) using DMA2D */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))_LCD_CopyBuffer);
 8003e98:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <LCD_X_Config+0xc0>)
 8003e9a:	2121      	movs	r1, #33	; 0x21
    _aBytesPerPixels[i] = LCD_GetBitsPerPixelEx(i) >> 3;
 8003e9c:	6098      	str	r0, [r3, #8]
  if (LayerIndex >= GUI_COUNTOF(_apColorConvAPI))
 8003e9e:	f7ff f96f 	bl	8003180 <_GetPixelformat.part.0>
 8003ea2:	4606      	mov	r6, r0
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))_LCD_CopyBuffer);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f002 fad2 	bl	800644e <LCD_SetDevFunc>
    if (PixelFormat <= LTDC_PIXEL_FORMAT_ARGB4444)
 8003eaa:	2e04      	cmp	r6, #4
 8003eac:	d804      	bhi.n	8003eb8 <LCD_X_Config+0x74>
    {
      /* Set custom function for filling operations using DMA2D */
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))_LCD_FillRect);
 8003eae:	4a16      	ldr	r2, [pc, #88]	; (8003f08 <LCD_X_Config+0xc4>)
 8003eb0:	2119      	movs	r1, #25
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f002 facb 	bl	800644e <LCD_SetDevFunc>
    }
    if (_aOrientation[i] == ROTATION_0)
    {
      /* Set custom function for copy recxtangle areas (used by GUI_CopyRect()) using DMA2D */
      LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT, (void(*)(void))_LCD_CopyRect);
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <LCD_X_Config+0xc8>)
 8003eba:	2123      	movs	r1, #35	; 0x23
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f002 fac6 	bl	800644e <LCD_SetDevFunc>

      /* Set functions for direct color mode layers. Won't work with indexed color modes because of missing LUT for DMA2D destination */
      if (PixelFormat <= LTDC_PIXEL_FORMAT_ARGB4444)
 8003ec2:	2e04      	cmp	r6, #4
 8003ec4:	d82b      	bhi.n	8003f1e <LCD_X_Config+0xda>
      {
        /* Set up custom drawing routine for index based bitmaps using DMA2D */
        LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))_LCD_DrawBitmap8bpp);
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <LCD_X_Config+0xcc>)
 8003ec8:	2125      	movs	r1, #37	; 0x25
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f002 fabf 	bl	800644e <LCD_SetDevFunc>
      }

      /* Set up drawing routine for 16bpp bitmap using DMA2D */
      if (PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003ed0:	2e02      	cmp	r6, #2
 8003ed2:	d121      	bne.n	8003f18 <LCD_X_Config+0xd4>
      {
        /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
        LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))_LCD_DrawBitmap16bpp);
 8003ed4:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <LCD_X_Config+0xd0>)
 8003ed6:	2124      	movs	r1, #36	; 0x24
 8003ed8:	2000      	movs	r0, #0

      /* Set up drawing routine for 32bpp bitmap using DMA2D */
      if (PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
      {
        /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
        LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))_LCD_DrawBitmap32bpp);
 8003eda:	f002 fab8 	bl	800644e <LCD_SetDevFunc>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8003ede:	e01e      	b.n	8003f1e <LCD_X_Config+0xda>
    LCD_SetSizeEx (0, XSIZE_0, YSIZE_0);
 8003ee0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ee4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003ee8:	f002 fae1 	bl	80064ae <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_0, YSIZE_0 * NUM_VSCREENS);
 8003eec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ef0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003ef4:	e7c3      	b.n	8003e7e <LCD_X_Config+0x3a>
 8003ef6:	bf00      	nop
 8003ef8:	08009fc8 	.word	0x08009fc8
 8003efc:	0800a39c 	.word	0x0800a39c
 8003f00:	2004024c 	.word	0x2004024c
 8003f04:	08003215 	.word	0x08003215
 8003f08:	080038bd 	.word	0x080038bd
 8003f0c:	08003259 	.word	0x08003259
 8003f10:	08003821 	.word	0x08003821
 8003f14:	08003321 	.word	0x08003321
      if (PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	f000 8198 	beq.w	800424e <LCD_X_Config+0x40a>
  }

  /* Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination */

  /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D);
 8003f1e:	49ce      	ldr	r1, [pc, #824]	; (8004258 <LCD_X_Config+0x414>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003f20:	2701      	movs	r7, #1
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D);
 8003f22:	48ce      	ldr	r0, [pc, #824]	; (800425c <LCD_X_Config+0x418>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003f24:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D);
 8003f28:	f000 fa4e 	bl	80043c8 <GUICC_M1555I_SetCustColorConv>

  /* Set up custom bulk color conversion using DMA2D for RGB565 */
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);
 8003f2c:	49cc      	ldr	r1, [pc, #816]	; (8004260 <LCD_X_Config+0x41c>)
 8003f2e:	48cd      	ldr	r0, [pc, #820]	; (8004264 <LCD_X_Config+0x420>)
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003f30:	2500      	movs	r5, #0
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);
 8003f32:	f000 fafb 	bl	800452c <GUICC_M565_SetCustColorConv>

  /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D);
 8003f36:	49cc      	ldr	r1, [pc, #816]	; (8004268 <LCD_X_Config+0x424>)
 8003f38:	48cc      	ldr	r0, [pc, #816]	; (800426c <LCD_X_Config+0x428>)
  hdsi.Init.TXEscapeCkdiv = 0x4;
 8003f3a:	f04f 0b04 	mov.w	fp, #4
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D);
 8003f3e:	f000 fa49 	bl	80043d4 <GUICC_M4444I_SetCustColorConv>

  /* Set up custom bulk color conversion using DMA2D for RGB888 */
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);
 8003f42:	49cb      	ldr	r1, [pc, #812]	; (8004270 <LCD_X_Config+0x42c>)
 8003f44:	48cb      	ldr	r0, [pc, #812]	; (8004274 <LCD_X_Config+0x430>)
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8003f46:	f44f 7ac8 	mov.w	sl, #400	; 0x190
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);
 8003f4a:	f000 fb0f 	bl	800456c <GUICC_M888_SetCustColorConv>

  /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D);
 8003f4e:	49ca      	ldr	r1, [pc, #808]	; (8004278 <LCD_X_Config+0x434>)
 8003f50:	48ca      	ldr	r0, [pc, #808]	; (800427c <LCD_X_Config+0x438>)
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8003f52:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D);
 8003f56:	f000 fa57 	bl	8004408 <GUICC_M8888I_SetCustColorConv>

  /* Set up custom alpha blending function using DMA2D */
  GUI_SetFuncAlphaBlending(_DMA_AlphaBlending);
 8003f5a:	48c9      	ldr	r0, [pc, #804]	; (8004280 <LCD_X_Config+0x43c>)
 8003f5c:	f001 fbb4 	bl	80056c8 <GUI_SetFuncAlphaBlending>

  /* Set up custom function for translating a bitmap palette into index values.
   * Required to load a bitmap palette into DMA2D CLUT in case of a 8bpp indexed bitmap
   */
  GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 8003f60:	48c8      	ldr	r0, [pc, #800]	; (8004284 <LCD_X_Config+0x440>)
 8003f62:	f000 ff7d 	bl	8004e60 <GUI_SetFuncGetpPalConvTable>

  /* Set up custom function for mixing up arrays of colors using DMA2D */
  GUI_SetFuncMixColorsBulk(_LCD_MixColorsBulk);
 8003f66:	48c8      	ldr	r0, [pc, #800]	; (8004288 <LCD_X_Config+0x444>)
 8003f68:	f001 fbb6 	bl	80056d8 <GUI_SetFuncMixColorsBulk>

  /* Set up custom function for drawing AA4 characters */
  GUI_AA_SetpfDrawCharAA4(_LCD_DrawBitmap4bpp);
 8003f6c:	48c7      	ldr	r0, [pc, #796]	; (800428c <LCD_X_Config+0x448>)
 8003f6e:	f000 fa19 	bl	80043a4 <GUI_AA_SetpfDrawCharAA4>
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f72:	f8df 8348 	ldr.w	r8, [pc, #840]	; 80042bc <LCD_X_Config+0x478>

#if GUI_SUPPORT_MEMDEV
  /* Set up custom function for drawing 16bpp memory devices */
  GUI_MEMDEV_SetDrawMemdev16bppFunc(_LCD_DrawMemdev16bpp);
 8003f76:	48c6      	ldr	r0, [pc, #792]	; (8004290 <LCD_X_Config+0x44c>)
 8003f78:	f003 ff10 	bl	8007d9c <GUI_MEMDEV_SetDrawMemdev16bppFunc>

  /* Set up custom function for Alpha drawing operations */
  GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8003f7c:	49c5      	ldr	r1, [pc, #788]	; (8004294 <LCD_X_Config+0x450>)
 8003f7e:	48c6      	ldr	r0, [pc, #792]	; (8004298 <LCD_X_Config+0x454>)
 8003f80:	f001 fbb2 	bl	80056e8 <GUI_SetFuncDrawAlpha>
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f84:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003f88:	a90a      	add	r1, sp, #40	; 0x28
 8003f8a:	48c4      	ldr	r0, [pc, #784]	; (800429c <LCD_X_Config+0x458>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f90:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8003f94:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8003f98:	970c      	str	r7, [sp, #48]	; 0x30
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003fa2:	2303      	movs	r3, #3
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003fa4:	e9cd 470a 	strd	r4, r7, [sp, #40]	; 0x28
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003fa8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003faa:	f7fd fd11 	bl	80019d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8003fae:	4621      	mov	r1, r4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	48ba      	ldr	r0, [pc, #744]	; (800429c <LCD_X_Config+0x458>)
 8003fb4:	f7fd fdee 	bl	8001b94 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8003fb8:	2014      	movs	r0, #20
 8003fba:	f7fd f85b 	bl	8001074 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8003fbe:	463a      	mov	r2, r7
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	48b6      	ldr	r0, [pc, #728]	; (800429c <LCD_X_Config+0x458>)
 8003fc4:	f7fd fde6 	bl	8001b94 <HAL_GPIO_WritePin>
  HAL_Delay(10); /* wait 10 ms */
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f7fd f853 	bl	8001074 <HAL_Delay>
  hdsi.Instance = DSI;
 8003fce:	4cb4      	ldr	r4, [pc, #720]	; (80042a0 <LCD_X_Config+0x45c>)
  BSP_LCD_MspInit();
 8003fd0:	f7ff fcf2 	bl	80039b8 <BSP_LCD_MspInit>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fd4:	2308      	movs	r3, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003fd6:	a80a      	add	r0, sp, #40	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003fd8:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fda:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 417;
 8003fdc:	f240 13a1 	movw	r3, #417	; 0x1a1
 8003fe0:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8003fe2:	2307      	movs	r3, #7
 8003fe4:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003fe6:	f7fe fb9b 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
  hdsi.Instance = DSI;
 8003fea:	4bae      	ldr	r3, [pc, #696]	; (80042a4 <LCD_X_Config+0x460>)
 8003fec:	4620      	mov	r0, r4
 8003fee:	f840 3f14 	str.w	r3, [r0, #20]!
  HAL_DSI_DeInit(&(hdsi));
 8003ff2:	f7fd fa96 	bl	8001522 <HAL_DSI_DeInit>
  PLLInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	2064      	movs	r0, #100	; 0x64
  HAL_DSI_Init(&(hdsi), &(PLLInit));
 8003ffa:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
  PLLInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8003ffe:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8004002:	6227      	str	r7, [r4, #32]
  hdsi.Init.TXEscapeCkdiv = 0x4;
 8004004:	f8c4 b01c 	str.w	fp, [r4, #28]
  PLLInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8004008:	e9c4 0339 	strd	r0, r3, [r4, #228]	; 0xe4
  HAL_DSI_Init(&(hdsi), &(PLLInit));
 800400c:	f104 0014 	add.w	r0, r4, #20
 8004010:	f7fd f9d2 	bl	80013b8 <HAL_DSI_Init>
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8004014:	2310      	movs	r3, #16
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg);
 8004016:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800401a:	f104 0014 	add.w	r0, r4, #20
  CmdCfg.VirtualChannelID      = 0;
 800401e:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8004022:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
  CmdCfg.ColorCoding           = DSI_RGB565;
 8004026:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800402a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 800402e:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
  CmdCfg.TearingEffectSource   = DSI_TE_EXTERNAL;
 8004032:	e9c4 a33e 	strd	sl, r3, [r4, #248]	; 0xf8
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 8004036:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 800403a:	e9c4 5544 	strd	r5, r5, [r4, #272]	; 0x110
  HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg);
 800403e:	f7fd fb2d 	bl	800169c <HAL_DSI_ConfigAdaptedCommandMode>
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8004042:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8004046:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 800404a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 800404e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8004052:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004056:	f104 0014 	add.w	r0, r4, #20
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 800405a:	e9c4 c347 	strd	ip, r3, [r4, #284]	; 0x11c
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 800405e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004062:	e9c4 e349 	strd	lr, r3, [r4, #292]	; 0x124
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8004066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800406a:	e9c4 934b 	strd	r9, r3, [r4, #300]	; 0x12c
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 800406e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hltdc.Init.AccumulatedHBP = HSYNC+HBP;
 8004072:	f04f 0902 	mov.w	r9, #2
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8004076:	e9c4 234d 	strd	r2, r3, [r4, #308]	; 0x134
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 800407a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800407e:	e9c4 134f 	strd	r1, r3, [r4, #316]	; 0x13c
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 8004082:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004086:	f504 718e 	add.w	r1, r4, #284	; 0x11c
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 800408a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800408e:	f7fd fb77 	bl	8001780 <HAL_DSI_ConfigCommand>
  PhyTimings.ClockLaneHS2LPTime = 35;
 8004092:	2323      	movs	r3, #35	; 0x23
  HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings);
 8004094:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 8004098:	f104 0014 	add.w	r0, r4, #20
  PhyTimings.DataLaneMaxReadTime = 0;
 800409c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  PhyTimings.ClockLaneLP2HSTime = 35;
 80040a0:	e9c4 3354 	strd	r3, r3, [r4, #336]	; 0x150
  PhyTimings.DataLaneLP2HSTime = 35;
 80040a4:	e9c4 3356 	strd	r3, r3, [r4, #344]	; 0x158
  PhyTimings.StopWaitTime = 10;
 80040a8:	230a      	movs	r3, #10
 80040aa:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings);
 80040ae:	f7fd fbac 	bl	800180a <HAL_DSI_ConfigPhyTimer>
  HAL_LTDC_DeInit(&hltdc);
 80040b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80040b6:	f7fd fe6c 	bl	8001d92 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 80040ba:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <LCD_X_Config+0x464>)
  hltdc.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 80040bc:	f44f 70c9 	mov.w	r0, #402	; 0x192
  hltdc.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 80040c0:	f240 1c93 	movw	ip, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 80040c4:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
  hltdc.Init.VerticalSync = VSYNC;
 80040c8:	64a7      	str	r7, [r4, #72]	; 0x48
  hltdc.Init.Backcolor.Red = 0;
 80040ca:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040ce:	e9c4 350c 	strd	r3, r5, [r4, #48]	; 0x30
  hltdc.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 80040d2:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80040d6:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  hltdc.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 80040da:	f240 13e3 	movw	r3, #483	; 0x1e3
  HAL_LTDC_Init(&hltdc);
 80040de:	f104 0030 	add.w	r0, r4, #48	; 0x30
  hltdc.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 80040e2:	e9c4 c317 	strd	ip, r3, [r4, #92]	; 0x5c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80040e6:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  hltdc.Init.HorizontalSync = HSYNC;
 80040ea:	e9c4 5710 	strd	r5, r7, [r4, #64]	; 0x40
  hltdc.Init.AccumulatedVBP = VSYNC+VBP;
 80040ee:	e9c4 9913 	strd	r9, r9, [r4, #76]	; 0x4c
  HAL_LTDC_Init(&hltdc);
 80040f2:	f7fd fde1 	bl	8001cb8 <HAL_LTDC_Init>
  HAL_DSI_Start(&(hdsi));
 80040f6:	f104 0014 	add.w	r0, r4, #20
 80040fa:	f7fd fbc2 	bl	8001882 <HAL_DSI_Start>
  HAL_DSI_ShortWrite(&(hdsi),
 80040fe:	2215      	movs	r2, #21
 8004100:	2328      	movs	r3, #40	; 0x28
 8004102:	4629      	mov	r1, r5
 8004104:	f104 0014 	add.w	r0, r4, #20
 8004108:	9500      	str	r5, [sp, #0]
 800410a:	f7fd fbed 	bl	80018e8 <HAL_DSI_ShortWrite>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 800410e:	4639      	mov	r1, r7
 8004110:	4648      	mov	r0, r9
 8004112:	f7fc fb7d 	bl	8000810 <OTM8009A_Init>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004116:	f504 718e 	add.w	r1, r4, #284	; 0x11c
 800411a:	f104 0014 	add.w	r0, r4, #20
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 800411e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8004122:	e9c4 5547 	strd	r5, r5, [r4, #284]	; 0x11c
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 8004126:	e9c4 5549 	strd	r5, r5, [r4, #292]	; 0x124
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 800412a:	e9c4 554b 	strd	r5, r5, [r4, #300]	; 0x12c
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 800412e:	e9c4 554d 	strd	r5, r5, [r4, #308]	; 0x134
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 8004132:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8004136:	f7fd fb23 	bl	8001780 <HAL_DSI_ConfigCommand>
  HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA);
 800413a:	4659      	mov	r1, fp
 800413c:	f104 0014 	add.w	r0, r4, #20
 8004140:	f7fd fb52 	bl	80017e8 <HAL_DSI_ConfigFlowControl>
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004144:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 8004148:	f04f 0e03 	mov.w	lr, #3
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800414c:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800414e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8004152:	4852      	ldr	r0, [pc, #328]	; (800429c <LCD_X_Config+0x458>)
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004154:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8004158:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800415c:	f44f 68c0 	mov.w	r8, #1536	; 0x600
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
 8004160:	9507      	str	r5, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b03      	ldr	r3, [sp, #12]
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 800416a:	230d      	movs	r3, #13
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800416c:	e9cd b905 	strd	fp, r9, [sp, #20]
  GPIO_Init_Structure.Alternate = GPIO_AF13_DSI;
 8004170:	e9cd e308 	strd	lr, r3, [sp, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8004174:	f7fd fc2c 	bl	80019d0 <HAL_GPIO_Init>
#endif

  /* Complete the initialisation */
  LCD_LL_Init ();

  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8004178:	6963      	ldr	r3, [r4, #20]
 800417a:	9505      	str	r5, [sp, #20]
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 800417c:	a90a      	add	r1, sp, #40	; 0x28
  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800417e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 8004182:	f104 0030 	add.w	r0, r4, #48	; 0x30
  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8004186:	f022 0208 	bic.w	r2, r2, #8
 800418a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    Layercfg.Alpha = 255;
 800418e:	22ff      	movs	r2, #255	; 0xff
  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8004190:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    Layercfg.WindowY0 = 0;
 8004194:	950c      	str	r5, [sp, #48]	; 0x30
  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8004196:	f003 0308 	and.w	r3, r3, #8
    Layercfg.Backcolor.Blue = 0;
 800419a:	f8ad 5058 	strh.w	r5, [sp, #88]	; 0x58
    Layercfg.Backcolor.Red = 0;
 800419e:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
  __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80041a2:	9305      	str	r3, [sp, #20]
 80041a4:	9b05      	ldr	r3, [sp, #20]
    Layercfg.WindowY1 = YSIZE_PHYS;
 80041a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    Layercfg.Alpha0 = 0;
 80041aa:	e9cd 250f 	strd	r2, r5, [sp, #60]	; 0x3c
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80041ae:	2207      	movs	r2, #7
    Layercfg.ImageHeight = YSIZE_PHYS;
 80041b0:	9315      	str	r3, [sp, #84]	; 0x54
    Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80041b2:	e9cd 8211 	strd	r8, r2, [sp, #68]	; 0x44
    Layercfg.FBStartAdress = address;
 80041b6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    Layercfg.ImageWidth = HACT;
 80041ba:	e9cd 2a13 	strd	r2, sl, [sp, #76]	; 0x4c
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 80041be:	462a      	mov	r2, r5
    Layercfg.PixelFormat = _GetPixelformat(LayerIndex);
 80041c0:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
    Layercfg.WindowX1 = HACT;
 80041c4:	e9cd 5a0a 	strd	r5, sl, [sp, #40]	; 0x28
    HAL_LTDC_ConfigLayer(&hltdc, &Layercfg, LayerIndex);
 80041c8:	f7fd fe75 	bl	8001eb6 <HAL_LTDC_ConfigLayer>
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 80041cc:	4628      	mov	r0, r5
 80041ce:	f001 fff3 	bl	80061b8 <LCD_GetBitsPerPixelEx>
 80041d2:	2808      	cmp	r0, #8
 80041d4:	dc04      	bgt.n	80041e0 <LCD_X_Config+0x39c>
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80041d6:	4629      	mov	r1, r5
 80041d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80041dc:	f7fd ff1d 	bl	800201a <HAL_LTDC_EnableCLUT>

  LCD_LL_LayerInit(0, _aAddr[0]);
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80041e6:	4831      	ldr	r0, [pc, #196]	; (80042ac <LCD_X_Config+0x468>)
 80041e8:	f7fd ff98 	bl	800211c <HAL_LTDC_SetPitch>
#if (GUI_NUM_LAYERS > 1)
  LCD_LL_LayerInit(1, _aAddr[1]);
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 1);
#endif

  __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	2100      	movs	r1, #0

  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 80041f0:	4c2f      	ldr	r4, [pc, #188]	; (80042b0 <LCD_X_Config+0x46c>)
 80041f2:	4830      	ldr	r0, [pc, #192]	; (80042b4 <LCD_X_Config+0x470>)
  __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 80041f4:	910a      	str	r1, [sp, #40]	; 0x28
 80041f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 8004202:	2239      	movs	r2, #57	; 0x39
  __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8004204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 8004208:	9401      	str	r4, [sp, #4]
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 800420a:	341c      	adds	r4, #28
  __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	930a      	str	r3, [sp, #40]	; 0x28
 8004212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 8004214:	232a      	movs	r3, #42	; 0x2a
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2304      	movs	r3, #4
 800421a:	f7fd fb76 	bl	800190a <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 800421e:	232b      	movs	r3, #43	; 0x2b
 8004220:	2239      	movs	r2, #57	; 0x39
 8004222:	2100      	movs	r1, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2304      	movs	r3, #4
 8004228:	9401      	str	r4, [sp, #4]
 800422a:	4822      	ldr	r0, [pc, #136]	; (80042b4 <LCD_X_Config+0x470>)
 800422c:	f7fd fb6d 	bl	800190a <HAL_DSI_LongWrite>

  HAL_Delay(20);
 8004230:	2014      	movs	r0, #20
 8004232:	f7fc ff1f 	bl	8001074 <HAL_Delay>

  LCD_ReqTear();
 8004236:	f7ff fcc3 	bl	8003bc0 <LCD_ReqTear>
  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi),
 800423a:	2100      	movs	r1, #0
 800423c:	2329      	movs	r3, #41	; 0x29
 800423e:	2215      	movs	r2, #21
 8004240:	9100      	str	r1, [sp, #0]
 8004242:	481c      	ldr	r0, [pc, #112]	; (80042b4 <LCD_X_Config+0x470>)
 8004244:	f7fd fb50 	bl	80018e8 <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);

}
 8004248:	b02f      	add	sp, #188	; 0xbc
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))_LCD_DrawBitmap32bpp);
 800424e:	4a1a      	ldr	r2, [pc, #104]	; (80042b8 <LCD_X_Config+0x474>)
 8004250:	2128      	movs	r1, #40	; 0x28
 8004252:	4630      	mov	r0, r6
 8004254:	e641      	b.n	8003eda <LCD_X_Config+0x96>
 8004256:	bf00      	nop
 8004258:	08003531 	.word	0x08003531
 800425c:	08003585 	.word	0x08003585
 8004260:	0800351f 	.word	0x0800351f
 8004264:	08003573 	.word	0x08003573
 8004268:	0800350d 	.word	0x0800350d
 800426c:	08003561 	.word	0x08003561
 8004270:	0800355d 	.word	0x0800355d
 8004274:	08003559 	.word	0x08003559
 8004278:	08003555 	.word	0x08003555
 800427c:	08003543 	.word	0x08003543
 8004280:	080033dd 	.word	0x080033dd
 8004284:	08003625 	.word	0x08003625
 8004288:	0800342d 	.word	0x0800342d
 800428c:	0800368d 	.word	0x0800368d
 8004290:	08003381 	.word	0x08003381
 8004294:	080037ad 	.word	0x080037ad
 8004298:	080035f9 	.word	0x080035f9
 800429c:	40022400 	.word	0x40022400
 80042a0:	2004024c 	.word	0x2004024c
 80042a4:	40016c00 	.word	0x40016c00
 80042a8:	40016800 	.word	0x40016800
 80042ac:	2004027c 	.word	0x2004027c
 80042b0:	20000024 	.word	0x20000024
 80042b4:	20040260 	.word	0x20040260
 80042b8:	080032bd 	.word	0x080032bd
 80042bc:	40023800 	.word	0x40023800

080042c0 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hdsi);
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <DSI_IRQHandler+0x8>)
 80042c2:	f7fd b979 	b.w	80015b8 <HAL_DSI_IRQHandler>
 80042c6:	bf00      	nop
 80042c8:	20040260 	.word	0x20040260

080042cc <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80042cc:	4770      	bx	lr

080042ce <_DrawCharAA4_Trans>:
 80042ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d2:	4680      	mov	r8, r0
 80042d4:	4693      	mov	fp, r2
 80042d6:	461f      	mov	r7, r3
 80042d8:	2500      	movs	r5, #0
 80042da:	9100      	str	r1, [sp, #0]
 80042dc:	42bd      	cmp	r5, r7
 80042de:	da2a      	bge.n	8004336 <_DrawCharAA4_Trans+0x68>
 80042e0:	9b00      	ldr	r3, [sp, #0]
 80042e2:	4644      	mov	r4, r8
 80042e4:	465e      	mov	r6, fp
 80042e6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80042ea:	eb05 0903 	add.w	r9, r5, r3
 80042ee:	2e01      	cmp	r6, #1
 80042f0:	ebc8 0004 	rsb	r0, r8, r4
 80042f4:	dd11      	ble.n	800431a <_DrawCharAA4_Trans+0x4c>
 80042f6:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80042fa:	4620      	mov	r0, r4
 80042fc:	4649      	mov	r1, r9
 80042fe:	3e02      	subs	r6, #2
 8004300:	091a      	lsrs	r2, r3, #4
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	f001 fe28 	bl	8005f58 <LCD_SetPixelAA4_Trans>
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	1c60      	adds	r0, r4, #1
 800430c:	4649      	mov	r1, r9
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	3402      	adds	r4, #2
 8004314:	f001 fe20 	bl	8005f58 <LCD_SetPixelAA4_Trans>
 8004318:	e7e9      	b.n	80042ee <_DrawCharAA4_Trans+0x20>
 800431a:	b136      	cbz	r6, 800432a <_DrawCharAA4_Trans+0x5c>
 800431c:	f89a 2000 	ldrb.w	r2, [sl]
 8004320:	4649      	mov	r1, r9
 8004322:	4440      	add	r0, r8
 8004324:	0912      	lsrs	r2, r2, #4
 8004326:	f001 fe17 	bl	8005f58 <LCD_SetPixelAA4_Trans>
 800432a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800432c:	3501      	adds	r5, #1
 800432e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004330:	4413      	add	r3, r2
 8004332:	930d      	str	r3, [sp, #52]	; 0x34
 8004334:	e7d2      	b.n	80042dc <_DrawCharAA4_Trans+0xe>
 8004336:	b003      	add	sp, #12
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800433c <_DrawCharAA4_TransCust>:
 800433c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	4699      	mov	r9, r3
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_DrawCharAA4_TransCust+0x5c>)
 8004344:	4605      	mov	r5, r0
 8004346:	460e      	mov	r6, r1
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4690      	mov	r8, r2
 800434c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004350:	7c58      	ldrb	r0, [r3, #17]
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <_DrawCharAA4_TransCust+0x60>)
 8004354:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004356:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b15b      	cbz	r3, 8004378 <_DrawCharAA4_TransCust+0x3c>
 8004360:	464b      	mov	r3, r9
 8004362:	4642      	mov	r2, r8
 8004364:	4631      	mov	r1, r6
 8004366:	4628      	mov	r0, r5
 8004368:	970d      	str	r7, [sp, #52]	; 0x34
 800436a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800436e:	b004      	add	sp, #16
 8004370:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	f7ff bfab 	b.w	80042ce <_DrawCharAA4_Trans>
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <_DrawCharAA4_TransCust+0x64>)
 800437a:	681c      	ldr	r4, [r3, #0]
 800437c:	2c00      	cmp	r4, #0
 800437e:	d0ef      	beq.n	8004360 <_DrawCharAA4_TransCust+0x24>
 8004380:	460a      	mov	r2, r1
 8004382:	463b      	mov	r3, r7
 8004384:	4629      	mov	r1, r5
 8004386:	e88d 0700 	stmia.w	sp, {r8, r9, sl}
 800438a:	47a0      	blx	r4
 800438c:	2800      	cmp	r0, #0
 800438e:	d1e7      	bne.n	8004360 <_DrawCharAA4_TransCust+0x24>
 8004390:	b004      	add	sp, #16
 8004392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004396:	bf00      	nop
 8004398:	20000080 	.word	0x20000080
 800439c:	20049cf4 	.word	0x20049cf4
 80043a0:	200499b8 	.word	0x200499b8

080043a4 <GUI_AA_SetpfDrawCharAA4>:
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <GUI_AA_SetpfDrawCharAA4+0x14>)
 80043a6:	b120      	cbz	r0, 80043b2 <GUI_AA_SetpfDrawCharAA4+0xe>
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <GUI_AA_SetpfDrawCharAA4+0x18>)
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <GUI_AA_SetpfDrawCharAA4+0x1c>)
 80043ae:	6018      	str	r0, [r3, #0]
 80043b0:	4770      	bx	lr
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <GUI_AA_SetpfDrawCharAA4+0x20>)
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	4770      	bx	lr
 80043b8:	20000044 	.word	0x20000044
 80043bc:	0800433d 	.word	0x0800433d
 80043c0:	200499b8 	.word	0x200499b8
 80043c4:	080042cf 	.word	0x080042cf

080043c8 <GUICC_M1555I_SetCustColorConv>:
 80043c8:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <GUICC_M1555I_SetCustColorConv+0x8>)
 80043ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80043ce:	4770      	bx	lr
 80043d0:	20049a04 	.word	0x20049a04

080043d4 <GUICC_M4444I_SetCustColorConv>:
 80043d4:	4b01      	ldr	r3, [pc, #4]	; (80043dc <GUICC_M4444I_SetCustColorConv+0x8>)
 80043d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80043da:	4770      	bx	lr
 80043dc:	20049a0c 	.word	0x20049a0c

080043e0 <_Color2Index_M8888I>:
 80043e0:	4770      	bx	lr

080043e2 <_GetIndexMask_M8888I>:
 80043e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043e6:	4770      	bx	lr

080043e8 <_Color2IndexBulk_M8888I>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	f850 4b04 	ldr.w	r4, [r0], #4
 80043ee:	3a01      	subs	r2, #1
 80043f0:	600c      	str	r4, [r1, #0]
 80043f2:	4419      	add	r1, r3
 80043f4:	d1f9      	bne.n	80043ea <_Color2IndexBulk_M8888I+0x2>
 80043f6:	bd10      	pop	{r4, pc}

080043f8 <_Index2ColorBulk_M8888I>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	6804      	ldr	r4, [r0, #0]
 80043fc:	3a01      	subs	r2, #1
 80043fe:	4418      	add	r0, r3
 8004400:	f841 4b04 	str.w	r4, [r1], #4
 8004404:	d1f9      	bne.n	80043fa <_Index2ColorBulk_M8888I+0x2>
 8004406:	bd10      	pop	{r4, pc}

08004408 <GUICC_M8888I_SetCustColorConv>:
 8004408:	4770      	bx	lr
	...

0800440c <LCD_Index2Color_M565>:
 800440c:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8004410:	4a07      	ldr	r2, [pc, #28]	; (8004430 <LCD_Index2Color_M565+0x24>)
 8004412:	5cd1      	ldrb	r1, [r2, r3]
 8004414:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8004418:	4a06      	ldr	r2, [pc, #24]	; (8004434 <LCD_Index2Color_M565+0x28>)
 800441a:	f000 001f 	and.w	r0, r0, #31
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	5c10      	ldrb	r0, [r2, r0]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004428:	4418      	add	r0, r3
 800442a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800442e:	4770      	bx	lr
 8004430:	0800a320 	.word	0x0800a320
 8004434:	0800a360 	.word	0x0800a360

08004438 <_Color2Index_M565>:
 8004438:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800443c:	4a06      	ldr	r2, [pc, #24]	; (8004458 <_Color2Index_M565+0x20>)
 800443e:	5cd1      	ldrb	r1, [r2, r3]
 8004440:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8004444:	4a05      	ldr	r2, [pc, #20]	; (800445c <_Color2Index_M565+0x24>)
 8004446:	b2c0      	uxtb	r0, r0
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	5c10      	ldrb	r0, [r2, r0]
 800444c:	02db      	lsls	r3, r3, #11
 800444e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004452:	4418      	add	r0, r3
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	0800a020 	.word	0x0800a020
 800445c:	0800a120 	.word	0x0800a120

08004460 <_GetIndexMask_M565>:
 8004460:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004464:	4770      	bx	lr
	...

08004468 <_Color2IndexBulk>:
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	f8df e050 	ldr.w	lr, [pc, #80]	; 80044bc <_Color2IndexBulk+0x54>
 800446e:	4606      	mov	r6, r0
 8004470:	460d      	mov	r5, r1
 8004472:	4614      	mov	r4, r2
 8004474:	f8de e000 	ldr.w	lr, [lr]
 8004478:	461f      	mov	r7, r3
 800447a:	f1be 0f00 	cmp.w	lr, #0
 800447e:	d003      	beq.n	8004488 <_Color2IndexBulk+0x20>
 8004480:	46f4      	mov	ip, lr
 8004482:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004486:	4760      	bx	ip
 8004488:	f8df e034 	ldr.w	lr, [pc, #52]	; 80044c0 <_Color2IndexBulk+0x58>
 800448c:	490a      	ldr	r1, [pc, #40]	; (80044b8 <_Color2IndexBulk+0x50>)
 800448e:	f856 2b04 	ldr.w	r2, [r6], #4
 8004492:	3c01      	subs	r4, #1
 8004494:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004498:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800449c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	5c8a      	ldrb	r2, [r1, r2]
 80044a6:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 80044aa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80044ae:	4413      	add	r3, r2
 80044b0:	802b      	strh	r3, [r5, #0]
 80044b2:	443d      	add	r5, r7
 80044b4:	d1eb      	bne.n	800448e <_Color2IndexBulk+0x26>
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b8:	0800a120 	.word	0x0800a120
 80044bc:	20049a14 	.word	0x20049a14
 80044c0:	0800a020 	.word	0x0800a020

080044c4 <_Index2ColorBulk>:
 80044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c6:	4e16      	ldr	r6, [pc, #88]	; (8004520 <_Index2ColorBulk+0x5c>)
 80044c8:	4686      	mov	lr, r0
 80044ca:	460f      	mov	r7, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	6876      	ldr	r6, [r6, #4]
 80044d0:	461d      	mov	r5, r3
 80044d2:	b11e      	cbz	r6, 80044dc <_Index2ColorBulk+0x18>
 80044d4:	46b4      	mov	ip, r6
 80044d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80044da:	4760      	bx	ip
 80044dc:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 80044e0:	1e50      	subs	r0, r2, #1
 80044e2:	4e10      	ldr	r6, [pc, #64]	; (8004524 <_Index2ColorBulk+0x60>)
 80044e4:	3901      	subs	r1, #1
 80044e6:	fb03 e000 	mla	r0, r3, r0, lr
 80044ea:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80044ee:	4f0e      	ldr	r7, [pc, #56]	; (8004528 <_Index2ColorBulk+0x64>)
 80044f0:	8802      	ldrh	r2, [r0, #0]
 80044f2:	3c01      	subs	r4, #1
 80044f4:	eba0 0005 	sub.w	r0, r0, r5
 80044f8:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 80044fc:	f816 e003 	ldrb.w	lr, [r6, r3]
 8004500:	f002 031f 	and.w	r3, r2, #31
 8004504:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004508:	5cf3      	ldrb	r3, [r6, r3]
 800450a:	5cba      	ldrb	r2, [r7, r2]
 800450c:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 8004510:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f841 3904 	str.w	r3, [r1], #-4
 800451c:	d1e8      	bne.n	80044f0 <_Index2ColorBulk+0x2c>
 800451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004520:	20049a14 	.word	0x20049a14
 8004524:	0800a360 	.word	0x0800a360
 8004528:	0800a320 	.word	0x0800a320

0800452c <GUICC_M565_SetCustColorConv>:
 800452c:	4b01      	ldr	r3, [pc, #4]	; (8004534 <GUICC_M565_SetCustColorConv+0x8>)
 800452e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004532:	4770      	bx	lr
 8004534:	20049a14 	.word	0x20049a14

08004538 <_Color2Index_M888>:
 8004538:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800453c:	4770      	bx	lr

0800453e <_GetIndexMask_M888>:
 800453e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004542:	4770      	bx	lr

08004544 <_Color2IndexBulk>:
 8004544:	b510      	push	{r4, lr}
 8004546:	f850 4b04 	ldr.w	r4, [r0], #4
 800454a:	3a01      	subs	r2, #1
 800454c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004550:	600c      	str	r4, [r1, #0]
 8004552:	4419      	add	r1, r3
 8004554:	d1f7      	bne.n	8004546 <_Color2IndexBulk+0x2>
 8004556:	bd10      	pop	{r4, pc}

08004558 <_Index2ColorBulk>:
 8004558:	b510      	push	{r4, lr}
 800455a:	6804      	ldr	r4, [r0, #0]
 800455c:	3a01      	subs	r2, #1
 800455e:	4418      	add	r0, r3
 8004560:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8004564:	f841 4b04 	str.w	r4, [r1], #4
 8004568:	d1f7      	bne.n	800455a <_Index2ColorBulk+0x2>
 800456a:	bd10      	pop	{r4, pc}

0800456c <GUICC_M888_SetCustColorConv>:
 800456c:	4770      	bx	lr

0800456e <LCD_Index2Color_M8888I>:
 800456e:	4770      	bx	lr

08004570 <LCD_Index2Color_M888>:
 8004570:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8004574:	4770      	bx	lr
	...

08004578 <_PushFreeBlock>:
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <_PushFreeBlock+0x20>)
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	3201      	adds	r2, #1
 800457e:	b510      	push	{r4, lr}
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004586:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800458a:	604c      	str	r4, [r1, #4]
 800458c:	2100      	movs	r1, #0
 800458e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8004592:	6258      	str	r0, [r3, #36]	; 0x24
 8004594:	bd10      	pop	{r4, pc}
 8004596:	bf00      	nop
 8004598:	20049be4 	.word	0x20049be4

0800459c <_RemoveFreeBlock>:
 800459c:	b510      	push	{r4, lr}
 800459e:	230f      	movs	r3, #15
 80045a0:	6844      	ldr	r4, [r0, #4]
 80045a2:	490d      	ldr	r1, [pc, #52]	; (80045d8 <_RemoveFreeBlock+0x3c>)
 80045a4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80045a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045aa:	4294      	cmp	r4, r2
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <_RemoveFreeBlock+0x3c>)
 80045ae:	d203      	bcs.n	80045b8 <_RemoveFreeBlock+0x1c>
 80045b0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80045b4:	d2f6      	bcs.n	80045a4 <_RemoveFreeBlock+0x8>
 80045b6:	bd10      	pop	{r4, pc}
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d80c      	bhi.n	80045d6 <_RemoveFreeBlock+0x3a>
 80045bc:	6811      	ldr	r1, [r2, #0]
 80045be:	1b09      	subs	r1, r1, r4
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	6881      	ldr	r1, [r0, #8]
 80045c4:	68c0      	ldr	r0, [r0, #12]
 80045c6:	b101      	cbz	r1, 80045ca <_RemoveFreeBlock+0x2e>
 80045c8:	6048      	str	r0, [r1, #4]
 80045ca:	b108      	cbz	r0, 80045d0 <_RemoveFreeBlock+0x34>
 80045cc:	6001      	str	r1, [r0, #0]
 80045ce:	bd10      	pop	{r4, pc}
 80045d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045d4:	6459      	str	r1, [r3, #68]	; 0x44
 80045d6:	bd10      	pop	{r4, pc}
 80045d8:	20049be4 	.word	0x20049be4

080045dc <_AddFreeMemory>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	4e27      	ldr	r6, [pc, #156]	; (800467c <_AddFreeMemory+0xa0>)
 80045e0:	4605      	mov	r5, r0
 80045e2:	1808      	adds	r0, r1, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	68f3      	ldr	r3, [r6, #12]
 80045e8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4413      	add	r3, r2
 80045ee:	4283      	cmp	r3, r0
 80045f0:	d305      	bcc.n	80045fe <_AddFreeMemory+0x22>
 80045f2:	594b      	ldr	r3, [r1, r5]
 80045f4:	b91b      	cbnz	r3, 80045fe <_AddFreeMemory+0x22>
 80045f6:	6843      	ldr	r3, [r0, #4]
 80045f8:	441d      	add	r5, r3
 80045fa:	f7ff ffcf 	bl	800459c <_RemoveFreeBlock>
 80045fe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004600:	429c      	cmp	r4, r3
 8004602:	d90a      	bls.n	800461a <_AddFreeMemory+0x3e>
 8004604:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8004608:	1be7      	subs	r7, r4, r7
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b92b      	cbnz	r3, 800461a <_AddFreeMemory+0x3e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	463c      	mov	r4, r7
 8004612:	4638      	mov	r0, r7
 8004614:	441d      	add	r5, r3
 8004616:	f7ff ffc1 	bl	800459c <_RemoveFreeBlock>
 800461a:	230f      	movs	r3, #15
 800461c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8004620:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004622:	4295      	cmp	r5, r2
 8004624:	d203      	bcs.n	800462e <_AddFreeMemory+0x52>
 8004626:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800462a:	d2f7      	bcs.n	800461c <_AddFreeMemory+0x40>
 800462c:	e023      	b.n	8004676 <_AddFreeMemory+0x9a>
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d821      	bhi.n	8004676 <_AddFreeMemory+0x9a>
 8004632:	3308      	adds	r3, #8
 8004634:	1960      	adds	r0, r4, r5
 8004636:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800463a:	6851      	ldr	r1, [r2, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	6124      	str	r4, [r4, #16]
 8004640:	60a1      	str	r1, [r4, #8]
 8004642:	e884 0024 	stmia.w	r4, {r2, r5}
 8004646:	f840 5c04 	str.w	r5, [r0, #-4]
 800464a:	f104 0008 	add.w	r0, r4, #8
 800464e:	b101      	cbz	r1, 8004652 <_AddFreeMemory+0x76>
 8004650:	6048      	str	r0, [r1, #4]
 8004652:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8004656:	60a1      	str	r1, [r4, #8]
 8004658:	60e2      	str	r2, [r4, #12]
 800465a:	6058      	str	r0, [r3, #4]
 800465c:	6833      	ldr	r3, [r6, #0]
 800465e:	4907      	ldr	r1, [pc, #28]	; (800467c <_AddFreeMemory+0xa0>)
 8004660:	18ea      	adds	r2, r5, r3
 8004662:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8004666:	6032      	str	r2, [r6, #0]
 8004668:	b92b      	cbnz	r3, 8004676 <_AddFreeMemory+0x9a>
 800466a:	68cb      	ldr	r3, [r1, #12]
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	688a      	ldr	r2, [r1, #8]
 8004670:	4293      	cmp	r3, r2
 8004672:	bf88      	it	hi
 8004674:	608b      	strhi	r3, [r1, #8]
 8004676:	4628      	mov	r0, r5
 8004678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800467a:	bf00      	nop
 800467c:	20049be4 	.word	0x20049be4

08004680 <_RemoveHoles>:
 8004680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	4f23      	ldr	r7, [pc, #140]	; (8004714 <_RemoveHoles+0x94>)
 8004686:	4683      	mov	fp, r0
 8004688:	68fe      	ldr	r6, [r7, #12]
 800468a:	46b8      	mov	r8, r7
 800468c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800468e:	3e01      	subs	r6, #1
 8004690:	4426      	add	r6, r4
 8004692:	e894 0028 	ldmia.w	r4, {r3, r5}
 8004696:	bb9b      	cbnz	r3, 8004700 <_RemoveHoles+0x80>
 8004698:	1961      	adds	r1, r4, r5
 800469a:	428e      	cmp	r6, r1
 800469c:	d930      	bls.n	8004700 <_RemoveHoles+0x80>
 800469e:	f854 a005 	ldr.w	sl, [r4, r5]
 80046a2:	f1ba 0f00 	cmp.w	sl, #0
 80046a6:	d02b      	beq.n	8004700 <_RemoveHoles+0x80>
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d126      	bne.n	8004700 <_RemoveHoles+0x80>
 80046b2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80046b6:	4620      	mov	r0, r4
 80046b8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	9101      	str	r1, [sp, #4]
 80046c0:	f7ff ff6c 	bl	800459c <_RemoveFreeBlock>
 80046c4:	9901      	ldr	r1, [sp, #4]
 80046c6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80046ca:	6808      	ldr	r0, [r1, #0]
 80046cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80046d0:	4620      	mov	r0, r4
 80046d2:	6054      	str	r4, [r2, #4]
 80046d4:	464a      	mov	r2, r9
 80046d6:	f005 faa9 	bl	8009c2c <memmove>
 80046da:	9b00      	ldr	r3, [sp, #0]
 80046dc:	eb04 0109 	add.w	r1, r4, r9
 80046e0:	4628      	mov	r0, r5
 80046e2:	459a      	cmp	sl, r3
 80046e4:	bf02      	ittt	eq
 80046e6:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 80046ea:	1b5b      	subeq	r3, r3, r5
 80046ec:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 80046f0:	f7ff ff74 	bl	80045dc <_AddFreeMemory>
 80046f4:	f1bb 0f00 	cmp.w	fp, #0
 80046f8:	d001      	beq.n	80046fe <_RemoveHoles+0x7e>
 80046fa:	4558      	cmp	r0, fp
 80046fc:	d205      	bcs.n	800470a <_RemoveHoles+0x8a>
 80046fe:	464d      	mov	r5, r9
 8004700:	442c      	add	r4, r5
 8004702:	42a6      	cmp	r6, r4
 8004704:	d8c5      	bhi.n	8004692 <_RemoveHoles+0x12>
 8004706:	2001      	movs	r0, #1
 8004708:	e000      	b.n	800470c <_RemoveHoles+0x8c>
 800470a:	2000      	movs	r0, #0
 800470c:	b003      	add	sp, #12
 800470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004712:	bf00      	nop
 8004714:	20049be4 	.word	0x20049be4

08004718 <GUI_ALLOC_FreeFixedBlock>:
 8004718:	b128      	cbz	r0, 8004726 <GUI_ALLOC_FreeFixedBlock+0xe>
 800471a:	4b03      	ldr	r3, [pc, #12]	; (8004728 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800471c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471e:	6002      	str	r2, [r0, #0]
 8004720:	b102      	cbz	r2, 8004724 <GUI_ALLOC_FreeFixedBlock+0xc>
 8004722:	6050      	str	r0, [r2, #4]
 8004724:	63d8      	str	r0, [r3, #60]	; 0x3c
 8004726:	4770      	bx	lr
 8004728:	20049be4 	.word	0x20049be4

0800472c <GUI_ALLOC_h2p>:
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <GUI_ALLOC_h2p+0x10>)
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004734:	6840      	ldr	r0, [r0, #4]
 8004736:	3008      	adds	r0, #8
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20049be4 	.word	0x20049be4

08004740 <GUI_ALLOC_LockH>:
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <GUI_ALLOC_LockH+0x18>)
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	3201      	adds	r2, #1
 8004746:	61da      	str	r2, [r3, #28]
 8004748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 800474e:	3301      	adds	r3, #1
 8004750:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 8004754:	f7ff bfea 	b.w	800472c <GUI_ALLOC_h2p>
 8004758:	20049be4 	.word	0x20049be4

0800475c <GUI_ALLOC_UnlockH>:
 800475c:	6803      	ldr	r3, [r0, #0]
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <GUI_ALLOC_UnlockH+0x2c>)
 8004760:	b530      	push	{r4, r5, lr}
 8004762:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004766:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8004768:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d903      	bls.n	8004778 <GUI_ALLOC_UnlockH+0x1c>
 8004770:	69ca      	ldr	r2, [r1, #28]
 8004772:	b10a      	cbz	r2, 8004778 <GUI_ALLOC_UnlockH+0x1c>
 8004774:	3a01      	subs	r2, #1
 8004776:	61ca      	str	r2, [r1, #28]
 8004778:	3b01      	subs	r3, #1
 800477a:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 800477e:	2300      	movs	r3, #0
 8004780:	6003      	str	r3, [r0, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	bd30      	pop	{r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	20049be4 	.word	0x20049be4

0800478c <GUI_ALLOC_AssignMemory>:
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <GUI_ALLOC_AssignMemory+0xc>)
 800478e:	f021 0103 	bic.w	r1, r1, #3
 8004792:	6018      	str	r0, [r3, #0]
 8004794:	6059      	str	r1, [r3, #4]
 8004796:	4770      	bx	lr
 8004798:	20049a1c 	.word	0x20049a1c

0800479c <GUI_ALLOC_Free>:
 800479c:	b510      	push	{r4, lr}
 800479e:	4604      	mov	r4, r0
 80047a0:	b160      	cbz	r0, 80047bc <GUI_ALLOC_Free+0x20>
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <GUI_ALLOC_Free+0x24>)
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	6848      	ldr	r0, [r1, #4]
 80047ae:	f7ff ff15 	bl	80045dc <_AddFreeMemory>
 80047b2:	4620      	mov	r0, r4
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b8:	f7ff bede 	b.w	8004578 <_PushFreeBlock>
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	bf00      	nop
 80047c0:	20049be4 	.word	0x20049be4

080047c4 <_EnlargeBlocks>:
 80047c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	4c22      	ldr	r4, [pc, #136]	; (8004854 <_EnlargeBlocks+0x90>)
 80047ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047cc:	b93b      	cbnz	r3, 80047de <_EnlargeBlocks+0x1a>
 80047ce:	4b22      	ldr	r3, [pc, #136]	; (8004858 <_EnlargeBlocks+0x94>)
 80047d0:	689d      	ldr	r5, [r3, #8]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	3508      	adds	r5, #8
 80047d6:	fbb3 f5f5 	udiv	r5, r3, r5
 80047da:	3502      	adds	r5, #2
 80047dc:	e003      	b.n	80047e6 <_EnlargeBlocks+0x22>
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	1d1d      	adds	r5, r3, #4
 80047e2:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80047e6:	00e8      	lsls	r0, r5, #3
 80047e8:	f000 f8c0 	bl	800496c <_Alloc>
 80047ec:	4680      	mov	r8, r0
 80047ee:	b360      	cbz	r0, 800484a <_EnlargeBlocks+0x86>
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	6922      	ldr	r2, [r4, #16]
 80047f4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80047f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80047fa:	00d2      	lsls	r2, r2, #3
 80047fc:	685e      	ldr	r6, [r3, #4]
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <_EnlargeBlocks+0x98>)
 8004800:	3608      	adds	r6, #8
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4630      	mov	r0, r6
 8004806:	4798      	blx	r3
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	1e69      	subs	r1, r5, #1
 800480c:	6366      	str	r6, [r4, #52]	; 0x34
 800480e:	4613      	mov	r3, r2
 8004810:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8004814:	428b      	cmp	r3, r1
 8004816:	d205      	bcs.n	8004824 <_EnlargeBlocks+0x60>
 8004818:	3301      	adds	r3, #1
 800481a:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800481e:	f840 3c04 	str.w	r3, [r0, #-4]
 8004822:	e7f7      	b.n	8004814 <_EnlargeBlocks+0x50>
 8004824:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8004828:	f04f 0800 	mov.w	r8, #0
 800482c:	4638      	mov	r0, r7
 800482e:	f8c6 8004 	str.w	r8, [r6, #4]
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	6262      	str	r2, [r4, #36]	; 0x24
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	6125      	str	r5, [r4, #16]
 800483a:	442b      	add	r3, r5
 800483c:	6063      	str	r3, [r4, #4]
 800483e:	b13f      	cbz	r7, 8004850 <_EnlargeBlocks+0x8c>
 8004840:	f7ff ffac 	bl	800479c <GUI_ALLOC_Free>
 8004844:	4640      	mov	r0, r8
 8004846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800484a:	2001      	movs	r0, #1
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004854:	20049be4 	.word	0x20049be4
 8004858:	20049a1c 	.word	0x20049a1c
 800485c:	2000008c 	.word	0x2000008c

08004860 <_InitOnce>:
 8004860:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <_InitOnce+0x60>)
 8004862:	b570      	push	{r4, r5, r6, lr}
 8004864:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004868:	bb43      	cbnz	r3, 80048bc <_InitOnce+0x5c>
 800486a:	2301      	movs	r3, #1
 800486c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <_InitOnce+0x64>)
 8004872:	6899      	ldr	r1, [r3, #8]
 8004874:	b911      	cbnz	r1, 800487c <_InitOnce+0x1c>
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	0889      	lsrs	r1, r1, #2
 800487a:	6099      	str	r1, [r3, #8]
 800487c:	215a      	movs	r1, #90	; 0x5a
 800487e:	2610      	movs	r6, #16
 8004880:	6211      	str	r1, [r2, #32]
 8004882:	2100      	movs	r1, #0
 8004884:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8004888:	fa06 f501 	lsl.w	r5, r6, r1
 800488c:	3101      	adds	r1, #1
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <_InitOnce+0x60>)
 8004890:	6405      	str	r5, [r0, #64]	; 0x40
 8004892:	2910      	cmp	r1, #16
 8004894:	d1f6      	bne.n	8004884 <_InitOnce+0x24>
 8004896:	6819      	ldr	r1, [r3, #0]
 8004898:	2501      	movs	r5, #1
 800489a:	6858      	ldr	r0, [r3, #4]
 800489c:	2302      	movs	r3, #2
 800489e:	63a1      	str	r1, [r4, #56]	; 0x38
 80048a0:	6123      	str	r3, [r4, #16]
 80048a2:	f1a0 0314 	sub.w	r3, r0, #20
 80048a6:	60e0      	str	r0, [r4, #12]
 80048a8:	440b      	add	r3, r1
 80048aa:	6363      	str	r3, [r4, #52]	; 0x34
 80048ac:	605d      	str	r5, [r3, #4]
 80048ae:	6265      	str	r5, [r4, #36]	; 0x24
 80048b0:	6065      	str	r5, [r4, #4]
 80048b2:	f7ff fe93 	bl	80045dc <_AddFreeMemory>
 80048b6:	f7ff ff85 	bl	80047c4 <_EnlargeBlocks>
 80048ba:	6325      	str	r5, [r4, #48]	; 0x30
 80048bc:	bd70      	pop	{r4, r5, r6, pc}
 80048be:	bf00      	nop
 80048c0:	20049be4 	.word	0x20049be4
 80048c4:	20049a1c 	.word	0x20049a1c

080048c8 <GUI_ALLOC_GetFixedBlock>:
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	4607      	mov	r7, r0
 80048ce:	4e26      	ldr	r6, [pc, #152]	; (8004968 <GUI_ALLOC_GetFixedBlock+0xa0>)
 80048d0:	f7ff ffc6 	bl	8004860 <_InitOnce>
 80048d4:	3703      	adds	r7, #3
 80048d6:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80048d8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80048da:	f027 0703 	bic.w	r7, r7, #3
 80048de:	4614      	mov	r4, r2
 80048e0:	3704      	adds	r7, #4
 80048e2:	4287      	cmp	r7, r0
 80048e4:	bf38      	it	cc
 80048e6:	4607      	movcc	r7, r0
 80048e8:	b134      	cbz	r4, 80048f8 <GUI_ALLOC_GetFixedBlock+0x30>
 80048ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80048ee:	429f      	cmp	r7, r3
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	d02c      	beq.n	800494e <GUI_ALLOC_GetFixedBlock+0x86>
 80048f4:	461c      	mov	r4, r3
 80048f6:	e7f7      	b.n	80048e8 <GUI_ALLOC_GetFixedBlock+0x20>
 80048f8:	68f3      	ldr	r3, [r6, #12]
 80048fa:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80048fc:	eb02 0803 	add.w	r8, r2, r3
 8004900:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8004904:	ebc5 0508 	rsb	r5, r5, r8
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b133      	cbz	r3, 800491a <GUI_ALLOC_GetFixedBlock+0x52>
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff feb7 	bl	8004680 <_RemoveHoles>
 8004912:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8004916:	ebc5 0508 	rsb	r5, r5, r8
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	bb0b      	cbnz	r3, 8004962 <GUI_ALLOC_GetFixedBlock+0x9a>
 800491e:	686b      	ldr	r3, [r5, #4]
 8004920:	429f      	cmp	r7, r3
 8004922:	dc1e      	bgt.n	8004962 <GUI_ALLOC_GetFixedBlock+0x9a>
 8004924:	4628      	mov	r0, r5
 8004926:	1d1c      	adds	r4, r3, #4
 8004928:	f7ff fe38 	bl	800459c <_RemoveFreeBlock>
 800492c:	68f3      	ldr	r3, [r6, #12]
 800492e:	6868      	ldr	r0, [r5, #4]
 8004930:	1be4      	subs	r4, r4, r7
 8004932:	1bdb      	subs	r3, r3, r7
 8004934:	1bc0      	subs	r0, r0, r7
 8004936:	442c      	add	r4, r5
 8004938:	60f3      	str	r3, [r6, #12]
 800493a:	6973      	ldr	r3, [r6, #20]
 800493c:	443b      	add	r3, r7
 800493e:	6173      	str	r3, [r6, #20]
 8004940:	d002      	beq.n	8004948 <GUI_ALLOC_GetFixedBlock+0x80>
 8004942:	4629      	mov	r1, r5
 8004944:	f7ff fe4a 	bl	80045dc <_AddFreeMemory>
 8004948:	f844 7c04 	str.w	r7, [r4, #-4]
 800494c:	e009      	b.n	8004962 <GUI_ALLOC_GetFixedBlock+0x9a>
 800494e:	b10b      	cbz	r3, 8004954 <GUI_ALLOC_GetFixedBlock+0x8c>
 8004950:	6861      	ldr	r1, [r4, #4]
 8004952:	6059      	str	r1, [r3, #4]
 8004954:	6861      	ldr	r1, [r4, #4]
 8004956:	b101      	cbz	r1, 800495a <GUI_ALLOC_GetFixedBlock+0x92>
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	42a2      	cmp	r2, r4
 800495c:	d101      	bne.n	8004962 <GUI_ALLOC_GetFixedBlock+0x9a>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004962:	4620      	mov	r0, r4
 8004964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004968:	20049be4 	.word	0x20049be4

0800496c <_Alloc>:
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	4e39      	ldr	r6, [pc, #228]	; (8004a58 <_Alloc+0xec>)
 8004972:	4604      	mov	r4, r0
 8004974:	f7ff ff74 	bl	8004860 <_InitOnce>
 8004978:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800497a:	6833      	ldr	r3, [r6, #0]
 800497c:	42ac      	cmp	r4, r5
 800497e:	bf24      	itt	cs
 8004980:	3403      	addcs	r4, #3
 8004982:	f024 0503 	biccs.w	r5, r4, #3
 8004986:	4c34      	ldr	r4, [pc, #208]	; (8004a58 <_Alloc+0xec>)
 8004988:	350c      	adds	r5, #12
 800498a:	42ab      	cmp	r3, r5
 800498c:	d33e      	bcc.n	8004a0c <_Alloc+0xa0>
 800498e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004990:	6862      	ldr	r2, [r4, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90f      	bls.n	80049b6 <_Alloc+0x4a>
 8004996:	6873      	ldr	r3, [r6, #4]
 8004998:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800499a:	3b01      	subs	r3, #1
 800499c:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80049a0:	6073      	str	r3, [r6, #4]
 80049a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80049a4:	eb03 0208 	add.w	r2, r3, r8
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	6272      	str	r2, [r6, #36]	; 0x24
 80049ac:	2201      	movs	r2, #1
 80049ae:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 80049b2:	b957      	cbnz	r7, 80049ca <_Alloc+0x5e>
 80049b4:	e02a      	b.n	8004a0c <_Alloc+0xa0>
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6323      	str	r3, [r4, #48]	; 0x30
 80049ba:	f7ff ff03 	bl	80047c4 <_EnlargeBlocks>
 80049be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049c0:	3301      	adds	r3, #1
 80049c2:	6323      	str	r3, [r4, #48]	; 0x30
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d0e6      	beq.n	8004996 <_Alloc+0x2a>
 80049c8:	e020      	b.n	8004a0c <_Alloc+0xa0>
 80049ca:	230f      	movs	r3, #15
 80049cc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80049d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049d2:	4295      	cmp	r5, r2
 80049d4:	d20c      	bcs.n	80049f0 <_Alloc+0x84>
 80049d6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80049da:	d2f7      	bcs.n	80049cc <_Alloc+0x60>
 80049dc:	e008      	b.n	80049f0 <_Alloc+0x84>
 80049de:	6894      	ldr	r4, [r2, #8]
 80049e0:	b12c      	cbz	r4, 80049ee <_Alloc+0x82>
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	4295      	cmp	r5, r2
 80049e6:	d914      	bls.n	8004a12 <_Alloc+0xa6>
 80049e8:	68a2      	ldr	r2, [r4, #8]
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	d1f7      	bne.n	80049de <_Alloc+0x72>
 80049ee:	3301      	adds	r3, #1
 80049f0:	2b0f      	cmp	r3, #15
 80049f2:	d803      	bhi.n	80049fc <_Alloc+0x90>
 80049f4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80049f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80049fa:	e7f6      	b.n	80049ea <_Alloc+0x7e>
 80049fc:	4628      	mov	r0, r5
 80049fe:	f7ff fe3f 	bl	8004680 <_RemoveHoles>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d0e1      	beq.n	80049ca <_Alloc+0x5e>
 8004a06:	4638      	mov	r0, r7
 8004a08:	f7ff fdb6 	bl	8004578 <_PushFreeBlock>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8004a16:	4620      	mov	r0, r4
 8004a18:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004a1a:	ebc5 0209 	rsb	r2, r5, r9
 8004a1e:	330c      	adds	r3, #12
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bf38      	it	cc
 8004a24:	464d      	movcc	r5, r9
 8004a26:	f7ff fdb9 	bl	800459c <_RemoveFreeBlock>
 8004a2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004a2c:	1961      	adds	r1, r4, r5
 8004a2e:	454d      	cmp	r5, r9
 8004a30:	4498      	add	r8, r3
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	f8c8 4004 	str.w	r4, [r8, #4]
 8004a3a:	6027      	str	r7, [r4, #0]
 8004a3c:	6065      	str	r5, [r4, #4]
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	6124      	str	r4, [r4, #16]
 8004a42:	f841 5c04 	str.w	r5, [r1, #-4]
 8004a46:	da03      	bge.n	8004a50 <_Alloc+0xe4>
 8004a48:	ebc5 0009 	rsb	r0, r5, r9
 8004a4c:	f7ff fdc6 	bl	80045dc <_AddFreeMemory>
 8004a50:	4638      	mov	r0, r7
 8004a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a56:	bf00      	nop
 8004a58:	20049be4 	.word	0x20049be4

08004a5c <GUI_ALLOC_AllocNoInit>:
 8004a5c:	b108      	cbz	r0, 8004a62 <GUI_ALLOC_AllocNoInit+0x6>
 8004a5e:	f7ff bf85 	b.w	800496c <_Alloc>
 8004a62:	4770      	bx	lr

08004a64 <GUI_ALLOC_AllocZero>:
 8004a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a66:	4606      	mov	r6, r0
 8004a68:	f7ff fff8 	bl	8004a5c <GUI_ALLOC_AllocNoInit>
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	b160      	cbz	r0, 8004a8a <GUI_ALLOC_AllocZero+0x26>
 8004a70:	f7ff fe66 	bl	8004740 <GUI_ALLOC_LockH>
 8004a74:	ac02      	add	r4, sp, #8
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <GUI_ALLOC_AllocZero+0x2c>)
 8004a78:	4632      	mov	r2, r6
 8004a7a:	f844 0d04 	str.w	r0, [r4, #-4]!
 8004a7e:	2100      	movs	r1, #0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4798      	blx	r3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fe69 	bl	800475c <GUI_ALLOC_UnlockH>
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	20000090 	.word	0x20000090

08004a94 <GUIPROP__FindChar>:
 8004a94:	b138      	cbz	r0, 8004aa6 <GUIPROP__FindChar+0x12>
 8004a96:	8803      	ldrh	r3, [r0, #0]
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	d802      	bhi.n	8004aa2 <GUIPROP__FindChar+0xe>
 8004a9c:	8843      	ldrh	r3, [r0, #2]
 8004a9e:	428b      	cmp	r3, r1
 8004aa0:	d201      	bcs.n	8004aa6 <GUIPROP__FindChar+0x12>
 8004aa2:	6880      	ldr	r0, [r0, #8]
 8004aa4:	e7f6      	b.n	8004a94 <GUIPROP__FindChar>
 8004aa6:	4770      	bx	lr

08004aa8 <GUIPROP_DispChar>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	4c38      	ldr	r4, [pc, #224]	; (8004b90 <GUIPROP_DispChar+0xe8>)
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	69d8      	ldr	r0, [r3, #28]
 8004abe:	f7ff ffe9 	bl	8004a94 <GUIPROP__FindChar>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d060      	beq.n	8004b88 <GUIPROP_DispChar+0xe0>
 8004ac6:	8805      	ldrh	r5, [r0, #0]
 8004ac8:	6847      	ldr	r7, [r0, #4]
 8004aca:	4640      	mov	r0, r8
 8004acc:	1b75      	subs	r5, r6, r5
 8004ace:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8004ad2:	f896 a002 	ldrb.w	sl, [r6, #2]
 8004ad6:	f000 fed5 	bl	8005884 <LCD_SetDrawMode>
 8004ada:	f8d4 c000 	ldr.w	ip, [r4]
 8004ade:	4681      	mov	r9, r0
 8004ae0:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8004ae4:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8004ae8:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8004aec:	f89e b018 	ldrb.w	fp, [lr, #24]
 8004af0:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8004af4:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8004af8:	f04f 0c01 	mov.w	ip, #1
 8004afc:	9305      	str	r3, [sp, #20]
 8004afe:	6873      	ldr	r3, [r6, #4]
 8004b00:	f8cd a00c 	str.w	sl, [sp, #12]
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	465b      	mov	r3, fp
 8004b08:	f8cd c008 	str.w	ip, [sp, #8]
 8004b0c:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8004b10:	f8cd c004 	str.w	ip, [sp, #4]
 8004b14:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8004b18:	f8cd e000 	str.w	lr, [sp]
 8004b1c:	f001 f828 	bl	8005b70 <LCD_DrawBitmap>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	7e59      	ldrb	r1, [r3, #25]
 8004b26:	f893 a018 	ldrb.w	sl, [r3, #24]
 8004b2a:	9107      	str	r1, [sp, #28]
 8004b2c:	4551      	cmp	r1, sl
 8004b2e:	d920      	bls.n	8004b72 <GUIPROP_DispChar+0xca>
 8004b30:	f1b8 0f02 	cmp.w	r8, #2
 8004b34:	d01d      	beq.n	8004b72 <GUIPROP_DispChar+0xca>
 8004b36:	f893 b01b 	ldrb.w	fp, [r3, #27]
 8004b3a:	f000 f882 	bl	8004c42 <GUI_GetColor>
 8004b3e:	4680      	mov	r8, r0
 8004b40:	f000 f878 	bl	8004c34 <GUI_GetBkColor>
 8004b44:	f000 f902 	bl	8004d4c <GUI_SetColor>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	9907      	ldr	r1, [sp, #28]
 8004b4c:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8004b50:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 8004b5a:	7eda      	ldrb	r2, [r3, #27]
 8004b5c:	fb0b e301 	mla	r3, fp, r1, lr
 8004b60:	fb0b e10a 	mla	r1, fp, sl, lr
 8004b64:	fb05 0202 	mla	r2, r5, r2, r0
 8004b68:	f000 feea 	bl	8005940 <LCD_FillRect>
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	f000 f8ed 	bl	8004d4c <GUI_SetColor>
 8004b72:	4648      	mov	r0, r9
 8004b74:	f000 fe86 	bl	8005884 <LCD_SetDrawMode>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	7871      	ldrb	r1, [r6, #1]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	7e90      	ldrb	r0, [r2, #26]
 8004b80:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004b82:	fb00 2201 	mla	r2, r0, r1, r2
 8004b86:	845a      	strh	r2, [r3, #34]	; 0x22
 8004b88:	b009      	add	sp, #36	; 0x24
 8004b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000080 	.word	0x20000080

08004b94 <GUIPROP_GetCharDistX>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <GUIPROP_GetCharDistX+0x38>)
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69dd      	ldr	r5, [r3, #28]
 8004ba2:	69e8      	ldr	r0, [r5, #28]
 8004ba4:	f7ff ff76 	bl	8004a94 <GUIPROP__FindChar>
 8004ba8:	b170      	cbz	r0, 8004bc8 <GUIPROP_GetCharDistX+0x34>
 8004baa:	8803      	ldrh	r3, [r0, #0]
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	6843      	ldr	r3, [r0, #4]
 8004bb0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004bb4:	7848      	ldrb	r0, [r1, #1]
 8004bb6:	7ea9      	ldrb	r1, [r5, #26]
 8004bb8:	fb10 f001 	smulbb	r0, r0, r1
 8004bbc:	b124      	cbz	r4, 8004bc8 <GUIPROP_GetCharDistX+0x34>
 8004bbe:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8004bc2:	fb11 f303 	smulbb	r3, r1, r3
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000080 	.word	0x20000080

08004bd0 <GUIPROP_GetFontInfo>:
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	800b      	strh	r3, [r1, #0]
 8004bd4:	4770      	bx	lr

08004bd6 <GUIPROP_IsInFont>:
 8004bd6:	b508      	push	{r3, lr}
 8004bd8:	69c0      	ldr	r0, [r0, #28]
 8004bda:	f7ff ff5b 	bl	8004a94 <GUIPROP__FindChar>
 8004bde:	3000      	adds	r0, #0
 8004be0:	bf18      	it	ne
 8004be2:	2001      	movne	r0, #1
 8004be4:	bd08      	pop	{r3, pc}

08004be6 <GUI_CalcColorDist>:
 8004be6:	b2c3      	uxtb	r3, r0
 8004be8:	b2ca      	uxtb	r2, r1
 8004bea:	1a9a      	subs	r2, r3, r2
 8004bec:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	b214      	sxth	r4, r2
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	bfbc      	itt	lt
 8004bfa:	4252      	neglt	r2, r2
 8004bfc:	b214      	sxthlt	r4, r2
 8004bfe:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004c02:	0c09      	lsrs	r1, r1, #16
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b289      	uxth	r1, r1
 8004c0e:	b21a      	sxth	r2, r3
 8004c10:	b208      	sxth	r0, r1
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	bfbc      	itt	lt
 8004c16:	425b      	neglt	r3, r3
 8004c18:	b21a      	sxthlt	r2, r3
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	bfb8      	it	lt
 8004c1e:	4249      	neglt	r1, r1
 8004c20:	fb02 f202 	mul.w	r2, r2, r2
 8004c24:	bfb8      	it	lt
 8004c26:	b208      	sxthlt	r0, r1
 8004c28:	fb04 2204 	mla	r2, r4, r4, r2
 8004c2c:	b280      	uxth	r0, r0
 8004c2e:	fb00 2000 	mla	r0, r0, r0, r2
 8004c32:	bd10      	pop	{r4, pc}

08004c34 <GUI_GetBkColor>:
 8004c34:	b508      	push	{r3, lr}
 8004c36:	f001 fa89 	bl	800614c <LCD_GetBkColorIndex>
 8004c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c3e:	f001 b917 	b.w	8005e70 <LCD_Index2Color>

08004c42 <GUI_GetColor>:
 8004c42:	b508      	push	{r3, lr}
 8004c44:	f001 fa8a 	bl	800615c <LCD_GetColorIndex>
 8004c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4c:	f001 b910 	b.w	8005e70 <LCD_Index2Color>

08004c50 <GUI_GetDrawMode>:
 8004c50:	4b01      	ldr	r3, [pc, #4]	; (8004c58 <GUI_GetDrawMode+0x8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	7c18      	ldrb	r0, [r3, #16]
 8004c56:	4770      	bx	lr
 8004c58:	20000080 	.word	0x20000080

08004c5c <GUI_GetVersionString>:
 8004c5c:	4804      	ldr	r0, [pc, #16]	; (8004c70 <GUI_GetVersionString+0x14>)
 8004c5e:	2335      	movs	r3, #53	; 0x35
 8004c60:	7003      	strb	r3, [r0, #0]
 8004c62:	2334      	movs	r3, #52	; 0x34
 8004c64:	7083      	strb	r3, [r0, #2]
 8004c66:	70c3      	strb	r3, [r0, #3]
 8004c68:	2361      	movs	r3, #97	; 0x61
 8004c6a:	7103      	strb	r3, [r0, #4]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000068 	.word	0x20000068

08004c74 <GUI_MergeRect>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	b338      	cbz	r0, 8004cc8 <GUI_MergeRect+0x54>
 8004c78:	b309      	cbz	r1, 8004cbe <GUI_MergeRect+0x4a>
 8004c7a:	b30a      	cbz	r2, 8004cc0 <GUI_MergeRect+0x4c>
 8004c7c:	f9b2 4000 	ldrsh.w	r4, [r2]
 8004c80:	f9b1 3000 	ldrsh.w	r3, [r1]
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	bfa8      	it	ge
 8004c88:	4623      	movge	r3, r4
 8004c8a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8004c8e:	8003      	strh	r3, [r0, #0]
 8004c90:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	bfa8      	it	ge
 8004c98:	4623      	movge	r3, r4
 8004c9a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8004c9e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004ca2:	8043      	strh	r3, [r0, #2]
 8004ca4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	bfb8      	it	lt
 8004cac:	4623      	movlt	r3, r4
 8004cae:	8083      	strh	r3, [r0, #4]
 8004cb0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bfb8      	it	lt
 8004cb8:	4613      	movlt	r3, r2
 8004cba:	80c3      	strh	r3, [r0, #6]
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	680b      	ldr	r3, [r1, #0]
 8004cc2:	6003      	str	r3, [r0, #0]
 8004cc4:	684b      	ldr	r3, [r1, #4]
 8004cc6:	6043      	str	r3, [r0, #4]
 8004cc8:	bd10      	pop	{r4, pc}

08004cca <GUI_MoveRect>:
 8004cca:	b168      	cbz	r0, 8004ce8 <GUI_MoveRect+0x1e>
 8004ccc:	b289      	uxth	r1, r1
 8004cce:	8803      	ldrh	r3, [r0, #0]
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	8003      	strh	r3, [r0, #0]
 8004cd6:	8883      	ldrh	r3, [r0, #4]
 8004cd8:	4419      	add	r1, r3
 8004cda:	8843      	ldrh	r3, [r0, #2]
 8004cdc:	4413      	add	r3, r2
 8004cde:	8081      	strh	r1, [r0, #4]
 8004ce0:	8043      	strh	r3, [r0, #2]
 8004ce2:	88c3      	ldrh	r3, [r0, #6]
 8004ce4:	441a      	add	r2, r3
 8004ce6:	80c2      	strh	r2, [r0, #6]
 8004ce8:	4770      	bx	lr
	...

08004cec <GUI_GotoXY>:
 8004cec:	4b02      	ldr	r3, [pc, #8]	; (8004cf8 <GUI_GotoXY+0xc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	8458      	strh	r0, [r3, #34]	; 0x22
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	8499      	strh	r1, [r3, #36]	; 0x24
 8004cf6:	4770      	bx	lr
 8004cf8:	20000080 	.word	0x20000080

08004cfc <GUI_RectsIntersect>:
 8004cfc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8004d00:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dc14      	bgt.n	8004d32 <GUI_RectsIntersect+0x36>
 8004d08:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8004d0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	dc0e      	bgt.n	8004d32 <GUI_RectsIntersect+0x36>
 8004d14:	f9b0 2000 	ldrsh.w	r2, [r0]
 8004d18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	dc08      	bgt.n	8004d32 <GUI_RectsIntersect+0x36>
 8004d20:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8004d24:	f9b1 3000 	ldrsh.w	r3, [r1]
 8004d28:	4283      	cmp	r3, r0
 8004d2a:	bfcc      	ite	gt
 8004d2c:	2000      	movgt	r0, #0
 8004d2e:	2001      	movle	r0, #1
 8004d30:	4770      	bx	lr
 8004d32:	2000      	movs	r0, #0
 8004d34:	4770      	bx	lr

08004d36 <GUI_SelectLCD>:
 8004d36:	b508      	push	{r3, lr}
 8004d38:	f001 fb50 	bl	80063dc <LCD_SelectLCD>
 8004d3c:	f001 fbfe 	bl	800653c <LCD_UpdateColorIndices>
 8004d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d44:	f004 b9b8 	b.w	80090b8 <WM_Activate>

08004d48 <GUI_SetBkColor>:
 8004d48:	f001 b8d8 	b.w	8005efc <LCD_SetBkColor>

08004d4c <GUI_SetColor>:
 8004d4c:	f001 b8dc 	b.w	8005f08 <LCD_SetColor>

08004d50 <GUI_SetFont>:
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <GUI_SetFont+0x10>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	b100      	cbz	r0, 8004d5a <GUI_SetFont+0xa>
 8004d58:	61d8      	str	r0, [r3, #28]
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000080 	.word	0x20000080

08004d64 <GUI_SetOrg>:
 8004d64:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <GUI_SetOrg+0x28>)
 8004d66:	460a      	mov	r2, r1
 8004d68:	b410      	push	{r4}
 8004d6a:	8018      	strh	r0, [r3, #0]
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <GUI_SetOrg+0x2c>)
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <GUI_SetOrg+0x30>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	7c59      	ldrb	r1, [r3, #17]
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <GUI_SetOrg+0x34>)
 8004d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	6a0c      	ldr	r4, [r1, #32]
 8004d80:	4601      	mov	r1, r0
 8004d82:	4618      	mov	r0, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d8a:	4718      	bx	r3
 8004d8c:	20049ccc 	.word	0x20049ccc
 8004d90:	20049cbc 	.word	0x20049cbc
 8004d94:	20000080 	.word	0x20000080
 8004d98:	20049cf4 	.word	0x20049cf4

08004d9c <_InitContext>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d19      	ldr	r5, [pc, #100]	; (8004e04 <_InitContext+0x68>)
 8004da0:	4604      	mov	r4, r0
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <_InitContext+0x6c>)
 8004da4:	f104 0108 	add.w	r1, r4, #8
 8004da8:	6703      	str	r3, [r0, #112]	; 0x70
 8004daa:	692b      	ldr	r3, [r5, #16]
 8004dac:	1d1a      	adds	r2, r3, #4
 8004dae:	639b      	str	r3, [r3, #56]	; 0x38
 8004db0:	641b      	str	r3, [r3, #64]	; 0x40
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004db4:	f103 0208 	add.w	r2, r3, #8
 8004db8:	6142      	str	r2, [r0, #20]
 8004dba:	7c5a      	ldrb	r2, [r3, #17]
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <_InitContext+0x70>)
 8004dbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004dc2:	68c3      	ldr	r3, [r0, #12]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4798      	blx	r3
 8004dc8:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <_InitContext+0x74>)
 8004dca:	6663      	str	r3, [r4, #100]	; 0x64
 8004dcc:	686b      	ldr	r3, [r5, #4]
 8004dce:	61e3      	str	r3, [r4, #28]
 8004dd0:	692b      	ldr	r3, [r5, #16]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	6163      	str	r3, [r4, #20]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	7623      	strb	r3, [r4, #24]
 8004dda:	76e3      	strb	r3, [r4, #27]
 8004ddc:	f004 fa44 	bl	8009268 <WM_GetDesktopWindow>
 8004de0:	2303      	movs	r3, #3
 8004de2:	64a0      	str	r0, [r4, #72]	; 0x48
 8004de4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8004de8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004dec:	68e8      	ldr	r0, [r5, #12]
 8004dee:	6323      	str	r3, [r4, #48]	; 0x30
 8004df0:	6363      	str	r3, [r4, #52]	; 0x34
 8004df2:	f001 f883 	bl	8005efc <LCD_SetBkColor>
 8004df6:	68a8      	ldr	r0, [r5, #8]
 8004df8:	f001 f886 	bl	8005f08 <LCD_SetColor>
 8004dfc:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <_InitContext+0x78>)
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <_InitContext+0x7c>)
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000070 	.word	0x20000070
 8004e08:	20049ab0 	.word	0x20049ab0
 8004e0c:	20049cf4 	.word	0x20049cf4
 8004e10:	08009ff8 	.word	0x08009ff8
 8004e14:	0800a010 	.word	0x0800a010
 8004e18:	20049cec 	.word	0x20049cec

08004e1c <_OnExit>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	2400      	movs	r4, #0
 8004e20:	4d09      	ldr	r5, [pc, #36]	; (8004e48 <_OnExit+0x2c>)
 8004e22:	4e0a      	ldr	r6, [pc, #40]	; (8004e4c <_OnExit+0x30>)
 8004e24:	2274      	movs	r2, #116	; 0x74
 8004e26:	4621      	mov	r1, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	6833      	ldr	r3, [r6, #0]
 8004e2c:	67ec      	str	r4, [r5, #124]	; 0x7c
 8004e2e:	4798      	blx	r3
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	2208      	movs	r2, #8
 8004e34:	4621      	mov	r1, r4
 8004e36:	4806      	ldr	r0, [pc, #24]	; (8004e50 <_OnExit+0x34>)
 8004e38:	4798      	blx	r3
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <_OnExit+0x38>)
 8004e3c:	611d      	str	r5, [r3, #16]
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <_OnExit+0x3c>)
 8004e40:	701c      	strb	r4, [r3, #0]
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <_OnExit+0x40>)
 8004e44:	601c      	str	r4, [r3, #0]
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	20049a30 	.word	0x20049a30
 8004e4c:	20000090 	.word	0x20000090
 8004e50:	20049cf4 	.word	0x20049cf4
 8004e54:	20000070 	.word	0x20000070
 8004e58:	20049cdc 	.word	0x20049cdc
 8004e5c:	20049cb8 	.word	0x20049cb8

08004e60 <GUI_SetFuncGetpPalConvTable>:
 8004e60:	4b01      	ldr	r3, [pc, #4]	; (8004e68 <GUI_SetFuncGetpPalConvTable+0x8>)
 8004e62:	6018      	str	r0, [r3, #0]
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000070 	.word	0x20000070

08004e6c <GUI_ClearRect>:
 8004e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e70:	4604      	mov	r4, r0
 8004e72:	2004      	movs	r0, #4
 8004e74:	4616      	mov	r6, r2
 8004e76:	461f      	mov	r7, r3
 8004e78:	460d      	mov	r5, r1
 8004e7a:	f000 fd03 	bl	8005884 <LCD_SetDrawMode>
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <GUI_ClearRect+0x60>)
 8004e80:	4680      	mov	r8, r0
 8004e82:	4668      	mov	r0, sp
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	4414      	add	r4, r2
 8004e8c:	4416      	add	r6, r2
 8004e8e:	441d      	add	r5, r3
 8004e90:	441f      	add	r7, r3
 8004e92:	f8ad 4000 	strh.w	r4, [sp]
 8004e96:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004e9a:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004e9e:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004ea2:	f004 f889 	bl	8008fb8 <WM__InitIVRSearch>
 8004ea6:	b928      	cbnz	r0, 8004eb4 <GUI_ClearRect+0x48>
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	f000 fceb 	bl	8005884 <LCD_SetDrawMode>
 8004eae:	b002      	add	sp, #8
 8004eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fd40 	bl	8005940 <LCD_FillRect>
 8004ec0:	f003 ffb8 	bl	8008e34 <WM__GetNextIVR>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1f5      	bne.n	8004eb4 <GUI_ClearRect+0x48>
 8004ec8:	e7ee      	b.n	8004ea8 <GUI_ClearRect+0x3c>
 8004eca:	bf00      	nop
 8004ecc:	20000070 	.word	0x20000070

08004ed0 <GUI_Clear>:
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	f7ff ff09 	bl	8004cec <GUI_GotoXY>
 8004eda:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004ede:	4903      	ldr	r1, [pc, #12]	; (8004eec <GUI_Clear+0x1c>)
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee8:	f7ff bfc0 	b.w	8004e6c <GUI_ClearRect>
 8004eec:	ffffc001 	.word	0xffffc001

08004ef0 <GUI__Config>:
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	4d1f      	ldr	r5, [pc, #124]	; (8004f70 <GUI__Config+0x80>)
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d136      	bne.n	8004f6a <GUI__Config+0x7a>
 8004efc:	2301      	movs	r3, #1
 8004efe:	466a      	mov	r2, sp
 8004f00:	466e      	mov	r6, sp
 8004f02:	67eb      	str	r3, [r5, #124]	; 0x7c
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <GUI__Config+0x84>)
 8004f06:	f103 0708 	add.w	r7, r3, #8
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004f12:	4614      	mov	r4, r2
 8004f14:	42bb      	cmp	r3, r7
 8004f16:	c403      	stmia	r4!, {r0, r1}
 8004f18:	4622      	mov	r2, r4
 8004f1a:	d1f6      	bne.n	8004f0a <GUI__Config+0x1a>
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	8899      	ldrh	r1, [r3, #4]
 8004f20:	799b      	ldrb	r3, [r3, #6]
 8004f22:	6020      	str	r0, [r4, #0]
 8004f24:	71a3      	strb	r3, [r4, #6]
 8004f26:	4633      	mov	r3, r6
 8004f28:	80a1      	strh	r1, [r4, #4]
 8004f2a:	4c13      	ldr	r4, [pc, #76]	; (8004f78 <GUI__Config+0x88>)
 8004f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f30:	f804 2b01 	strb.w	r2, [r4], #1
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	d1f8      	bne.n	8004f2c <GUI__Config+0x3c>
 8004f3a:	f7ff fe8f 	bl	8004c5c <GUI_GetVersionString>
 8004f3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004f42:	4622      	mov	r2, r4
 8004f44:	f804 3b01 	strb.w	r3, [r4], #1
 8004f48:	7803      	ldrb	r3, [r0, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f7      	bne.n	8004f3e <GUI__Config+0x4e>
 8004f4e:	7053      	strb	r3, [r2, #1]
 8004f50:	f7fe f902 	bl	8003158 <GUI_X_Config>
 8004f54:	f7fe ff76 	bl	8003e44 <LCD_X_Config>
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <GUI__Config+0x8c>)
 8004f5a:	4809      	ldr	r0, [pc, #36]	; (8004f80 <GUI__Config+0x90>)
 8004f5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8004f60:	b005      	add	sp, #20
 8004f62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004f66:	f000 b8d1 	b.w	800510c <GUI__RegisterExit>
 8004f6a:	b005      	add	sp, #20
 8004f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20049a30 	.word	0x20049a30
 8004f74:	0800a000 	.word	0x0800a000
 8004f78:	20049ab0 	.word	0x20049ab0
 8004f7c:	08004e1d 	.word	0x08004e1d
 8004f80:	20049ac4 	.word	0x20049ac4

08004f84 <GUI_Init>:
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4a53      	ldr	r2, [pc, #332]	; (80050d8 <GUI_Init+0x154>)
 8004f8c:	4b52      	ldr	r3, [pc, #328]	; (80050d8 <GUI_Init+0x154>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b51      	ldr	r3, [pc, #324]	; (80050dc <GUI_Init+0x158>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9e:	f240 4249 	movw	r2, #1097	; 0x449
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <GUI_Init+0x158>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fb4:	f240 4151 	movw	r1, #1105	; 0x451
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4b44      	ldr	r3, [pc, #272]	; (80050dc <GUI_Init+0x158>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd0:	f240 4252 	movw	r2, #1106	; 0x452
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <GUI_Init+0x82>
 8004fe4:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <GUI_Init+0x15c>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	bf00      	nop
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <GUI_Init+0x15c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1fb      	bne.n	8004fec <GUI_Init+0x68>
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <GUI_Init+0x160>)
 8004ff6:	4a3c      	ldr	r2, [pc, #240]	; (80050e8 <GUI_Init+0x164>)
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	4b3a      	ldr	r3, [pc, #232]	; (80050e4 <GUI_Init+0x160>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <GUI_Init+0x168>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d018      	beq.n	8005036 <GUI_Init+0xb2>
 8005004:	e7fe      	b.n	8005004 <GUI_Init+0x80>
 8005006:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <GUI_Init+0x16c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800500e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005012:	d110      	bne.n	8005036 <GUI_Init+0xb2>
 8005014:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <GUI_Init+0x170>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	bf00      	nop
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <GUI_Init+0x170>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1fb      	bne.n	800501c <GUI_Init+0x98>
 8005024:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <GUI_Init+0x174>)
 8005026:	4a30      	ldr	r2, [pc, #192]	; (80050e8 <GUI_Init+0x164>)
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <GUI_Init+0x174>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <GUI_Init+0x168>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d000      	beq.n	8005036 <GUI_Init+0xb2>
 8005034:	e7fe      	b.n	8005034 <GUI_Init+0xb0>
 8005036:	f7ff ff5b 	bl	8004ef0 <GUI__Config>
 800503a:	4b30      	ldr	r3, [pc, #192]	; (80050fc <GUI_Init+0x178>)
 800503c:	222e      	movs	r2, #46	; 0x2e
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	f7ff f944 	bl	80042cc <GUI_X_Init>
 8005044:	482e      	ldr	r0, [pc, #184]	; (8005100 <GUI_Init+0x17c>)
 8005046:	f7ff fea9 	bl	8004d9c <_InitContext>
 800504a:	f000 feb1 	bl	8005db0 <emWin_LCD_Init>
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	f001 f91e 	bl	8006290 <LCD_GetXSizeDisplay>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2dc      	uxtb	r4, r3
 8005060:	f001 f91c 	bl	800629c <LCD_GetYSizeDisplay>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	4323      	orrs	r3, r4
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <GUI_Init+0x108>
 8005078:	f001 f8fe 	bl	8006278 <LCD_GetXSizeMax>
 800507c:	4604      	mov	r4, r0
 800507e:	f001 f8fe 	bl	800627e <LCD_GetYSizeMax>
 8005082:	4603      	mov	r3, r0
 8005084:	4619      	mov	r1, r3
 8005086:	4620      	mov	r0, r4
 8005088:	f001 f8fc 	bl	8006284 <LCD_SetDisplaySize>
 800508c:	2100      	movs	r1, #0
 800508e:	2000      	movs	r0, #0
 8005090:	f7ff fe68 	bl	8004d64 <GUI_SetOrg>
 8005094:	f004 f870 	bl	8009178 <WM_Init>
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <GUI_Init+0x180>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d012      	beq.n	80050c6 <GUI_Init+0x142>
 80050a0:	e00d      	b.n	80050be <GUI_Init+0x13a>
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <GUI_Init+0x180>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <GUI_Init+0x130>
 80050ac:	4b15      	ldr	r3, [pc, #84]	; (8005104 <GUI_Init+0x180>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4798      	blx	r3
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <GUI_Init+0x180>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <GUI_Init+0x180>)
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <GUI_Init+0x180>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ed      	bne.n	80050a2 <GUI_Init+0x11e>
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <GUI_Init+0x184>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e0002000 	.word	0xe0002000
 80050dc:	e0042000 	.word	0xe0042000
 80050e0:	40023008 	.word	0x40023008
 80050e4:	40023000 	.word	0x40023000
 80050e8:	f407a5c2 	.word	0xf407a5c2
 80050ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80050f0:	5c001000 	.word	0x5c001000
 80050f4:	58024c08 	.word	0x58024c08
 80050f8:	58024c00 	.word	0x58024c00
 80050fc:	20049cac 	.word	0x20049cac
 8005100:	20049a30 	.word	0x20049a30
 8005104:	20049aa8 	.word	0x20049aa8
 8005108:	20049cd4 	.word	0x20049cd4

0800510c <GUI__RegisterExit>:
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <GUI__RegisterExit+0x24>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <GUI__RegisterExit+0x24>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20049aa4 	.word	0x20049aa4

08005134 <GUI_DCACHE_Clear>:
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <GUI_DCACHE_Clear+0x20>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <GUI_DCACHE_Clear+0x18>
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <GUI_DCACHE_Clear+0x20>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20049cb8 	.word	0x20049cb8

08005158 <GUI_DEVICE__GetpDriver>:
 8005158:	2801      	cmp	r0, #1
 800515a:	dc09      	bgt.n	8005170 <GUI_DEVICE__GetpDriver+0x18>
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <GUI_DEVICE__GetpDriver+0x1c>)
 800515e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005162:	b120      	cbz	r0, 800516e <GUI_DEVICE__GetpDriver+0x16>
 8005164:	68c3      	ldr	r3, [r0, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b11b      	cbz	r3, 8005172 <GUI_DEVICE__GetpDriver+0x1a>
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	e7f9      	b.n	8005162 <GUI_DEVICE__GetpDriver+0xa>
 800516e:	4770      	bx	lr
 8005170:	2000      	movs	r0, #0
 8005172:	4770      	bx	lr
 8005174:	20049cf4 	.word	0x20049cf4

08005178 <GUI_DEVICE_Delete>:
 8005178:	f7ff bace 	b.w	8004718 <GUI_ALLOC_FreeFixedBlock>

0800517c <GUI_DEVICE_Create>:
 800517c:	2b01      	cmp	r3, #1
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005180:	4606      	mov	r6, r0
 8005182:	460d      	mov	r5, r1
 8005184:	4617      	mov	r7, r2
 8005186:	461c      	mov	r4, r3
 8005188:	dd01      	ble.n	800518e <GUI_DEVICE_Create+0x12>
 800518a:	2000      	movs	r0, #0
 800518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800518e:	201c      	movs	r0, #28
 8005190:	f7ff fb9a 	bl	80048c8 <GUI_ALLOC_GetFixedBlock>
 8005194:	2800      	cmp	r0, #0
 8005196:	d0f8      	beq.n	800518a <GUI_DEVICE_Create+0xe>
 8005198:	b10d      	cbz	r5, 800519e <GUI_DEVICE_Create+0x22>
 800519a:	6105      	str	r5, [r0, #16]
 800519c:	e009      	b.n	80051b2 <GUI_DEVICE_Create+0x36>
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <GUI_DEVICE_Create+0x48>)
 80051a0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80051a4:	b129      	cbz	r1, 80051b2 <GUI_DEVICE_Create+0x36>
 80051a6:	680b      	ldr	r3, [r1, #0]
 80051a8:	b10b      	cbz	r3, 80051ae <GUI_DEVICE_Create+0x32>
 80051aa:	4619      	mov	r1, r3
 80051ac:	e7fb      	b.n	80051a6 <GUI_DEVICE_Create+0x2a>
 80051ae:	690b      	ldr	r3, [r1, #16]
 80051b0:	6103      	str	r3, [r0, #16]
 80051b2:	2300      	movs	r3, #0
 80051b4:	6184      	str	r4, [r0, #24]
 80051b6:	8287      	strh	r7, [r0, #20]
 80051b8:	60c6      	str	r6, [r0, #12]
 80051ba:	6003      	str	r3, [r0, #0]
 80051bc:	6043      	str	r3, [r0, #4]
 80051be:	6083      	str	r3, [r0, #8]
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20049cf4 	.word	0x20049cf4

080051c8 <GUI_DEVICE_Unlink>:
 80051c8:	6981      	ldr	r1, [r0, #24]
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <GUI_DEVICE_Unlink+0x2c>)
 80051cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051d0:	4298      	cmp	r0, r3
 80051d2:	6803      	ldr	r3, [r0, #0]
 80051d4:	d104      	bne.n	80051e0 <GUI_DEVICE_Unlink+0x18>
 80051d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80051da:	b10b      	cbz	r3, 80051e0 <GUI_DEVICE_Unlink+0x18>
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	6842      	ldr	r2, [r0, #4]
 80051e2:	b102      	cbz	r2, 80051e6 <GUI_DEVICE_Unlink+0x1e>
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	6803      	ldr	r3, [r0, #0]
 80051e8:	b103      	cbz	r3, 80051ec <GUI_DEVICE_Unlink+0x24>
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	2300      	movs	r3, #0
 80051ee:	6003      	str	r3, [r0, #0]
 80051f0:	6043      	str	r3, [r0, #4]
 80051f2:	4770      	bx	lr
 80051f4:	20049cf4 	.word	0x20049cf4

080051f8 <GUI_DEVICE_Link>:
 80051f8:	b530      	push	{r4, r5, lr}
 80051fa:	b908      	cbnz	r0, 8005200 <GUI_DEVICE_Link+0x8>
 80051fc:	2001      	movs	r0, #1
 80051fe:	bd30      	pop	{r4, r5, pc}
 8005200:	6984      	ldr	r4, [r0, #24]
 8005202:	2c01      	cmp	r4, #1
 8005204:	dcfa      	bgt.n	80051fc <GUI_DEVICE_Link+0x4>
 8005206:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <GUI_DEVICE_Link+0x7c>)
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	4294      	cmp	r4, r2
 800520c:	bfa4      	itt	ge
 800520e:	1c62      	addge	r2, r4, #1
 8005210:	701a      	strbge	r2, [r3, #0]
 8005212:	4a19      	ldr	r2, [pc, #100]	; (8005278 <GUI_DEVICE_Link+0x80>)
 8005214:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8005218:	4615      	mov	r5, r2
 800521a:	b91b      	cbnz	r3, 8005224 <GUI_DEVICE_Link+0x2c>
 800521c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8005220:	4618      	mov	r0, r3
 8005222:	bd30      	pop	{r4, r5, pc}
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	b10a      	cbz	r2, 800522c <GUI_DEVICE_Link+0x34>
 8005228:	4613      	mov	r3, r2
 800522a:	e7fb      	b.n	8005224 <GUI_DEVICE_Link+0x2c>
 800522c:	68c2      	ldr	r2, [r0, #12]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	6809      	ldr	r1, [r1, #0]
 8005234:	4291      	cmp	r1, r2
 8005236:	dd03      	ble.n	8005240 <GUI_DEVICE_Link+0x48>
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f8      	bne.n	8005230 <GUI_DEVICE_Link+0x38>
 800523e:	e7dd      	b.n	80051fc <GUI_DEVICE_Link+0x4>
 8005240:	d109      	bne.n	8005256 <GUI_DEVICE_Link+0x5e>
 8005242:	8a81      	ldrh	r1, [r0, #20]
 8005244:	2901      	cmp	r1, #1
 8005246:	d106      	bne.n	8005256 <GUI_DEVICE_Link+0x5e>
 8005248:	6819      	ldr	r1, [r3, #0]
 800524a:	b121      	cbz	r1, 8005256 <GUI_DEVICE_Link+0x5e>
 800524c:	460b      	mov	r3, r1
 800524e:	68c9      	ldr	r1, [r1, #12]
 8005250:	6809      	ldr	r1, [r1, #0]
 8005252:	428a      	cmp	r2, r1
 8005254:	ddf8      	ble.n	8005248 <GUI_DEVICE_Link+0x50>
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	b112      	cbz	r2, 8005260 <GUI_DEVICE_Link+0x68>
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	6042      	str	r2, [r0, #4]
 800525e:	e001      	b.n	8005264 <GUI_DEVICE_Link+0x6c>
 8005260:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8005264:	6058      	str	r0, [r3, #4]
 8005266:	4298      	cmp	r0, r3
 8005268:	bf08      	it	eq
 800526a:	2300      	moveq	r3, #0
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	2000      	movs	r0, #0
 8005270:	bd30      	pop	{r4, r5, pc}
 8005272:	bf00      	nop
 8005274:	20049ca6 	.word	0x20049ca6
 8005278:	20049cf4 	.word	0x20049cf4

0800527c <GUI_DEVICE_CreateAndLink>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	461d      	mov	r5, r3
 8005280:	f7ff ff7c 	bl	800517c <GUI_DEVICE_Create>
 8005284:	4604      	mov	r4, r0
 8005286:	b148      	cbz	r0, 800529c <GUI_DEVICE_CreateAndLink+0x20>
 8005288:	f7ff ffb6 	bl	80051f8 <GUI_DEVICE_Link>
 800528c:	68e3      	ldr	r3, [r4, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b923      	cbnz	r3, 800529c <GUI_DEVICE_CreateAndLink+0x20>
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <GUI_DEVICE_CreateAndLink+0x24>)
 8005294:	3516      	adds	r5, #22
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800529c:	4620      	mov	r0, r4
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20000080 	.word	0x20000080

080052a4 <GUI_DispString>:
 80052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	4605      	mov	r5, r0
 80052aa:	b085      	sub	sp, #20
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d07f      	beq.n	80053b0 <GUI_DispString+0x10c>
 80052b0:	4c41      	ldr	r4, [pc, #260]	; (80053b8 <GUI_DispString+0x114>)
 80052b2:	f004 f94f 	bl	8009554 <GUI_GetFontDistY>
 80052b6:	4607      	mov	r7, r0
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	46a1      	mov	r9, r4
 80052bc:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 80052c0:	f004 f930 	bl	8009524 <GUI_GetYAdjust>
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	b286      	uxth	r6, r0
 80052c8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 80052ca:	1b9b      	subs	r3, r3, r6
 80052cc:	8493      	strh	r3, [r2, #36]	; 0x24
 80052ce:	782b      	ldrb	r3, [r5, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d061      	beq.n	8005398 <GUI_DispString+0xf4>
 80052d4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80052d8:	4628      	mov	r0, r5
 80052da:	f004 f9a3 	bl	8009624 <GUI__GetLineNumChars>
 80052de:	4601      	mov	r1, r0
 80052e0:	4682      	mov	sl, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f004 f9c8 	bl	8009678 <GUI__GetLineDistX>
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d004      	beq.n	80052fe <GUI_DispString+0x5a>
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d104      	bne.n	8005302 <GUI_DispString+0x5e>
 80052f8:	fb90 f3f3 	sdiv	r3, r0, r3
 80052fc:	e002      	b.n	8005304 <GUI_DispString+0x60>
 80052fe:	4603      	mov	r3, r0
 8005300:	e000      	b.n	8005304 <GUI_DispString+0x60>
 8005302:	2300      	movs	r3, #0
 8005304:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8005306:	fa1f fb80 	uxth.w	fp, r0
 800530a:	4628      	mov	r0, r5
 800530c:	1acb      	subs	r3, r1, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	b219      	sxth	r1, r3
 8005312:	8451      	strh	r1, [r2, #34]	; 0x22
 8005314:	f8ad 1008 	strh.w	r1, [sp, #8]
 8005318:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 800531c:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8005320:	440b      	add	r3, r1
 8005322:	4651      	mov	r1, sl
 8005324:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005328:	3a01      	subs	r2, #1
 800532a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800532e:	b2bb      	uxth	r3, r7
 8005330:	441a      	add	r2, r3
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f8ad 200e 	strh.w	r2, [sp, #14]
 8005338:	aa02      	add	r2, sp, #8
 800533a:	f004 f9cd 	bl	80096d8 <GUI__DispLine>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005344:	4628      	mov	r0, r5
 8005346:	8491      	strh	r1, [r2, #36]	; 0x24
 8005348:	4651      	mov	r1, sl
 800534a:	f000 f931 	bl	80055b0 <GUI_UC__NumChars2NumBytes>
 800534e:	5c2a      	ldrb	r2, [r5, r0]
 8005350:	eb05 0e00 	add.w	lr, r5, r0
 8005354:	9b01      	ldr	r3, [sp, #4]
 8005356:	2a0a      	cmp	r2, #10
 8005358:	d001      	beq.n	800535e <GUI_DispString+0xba>
 800535a:	2a0d      	cmp	r2, #13
 800535c:	d112      	bne.n	8005384 <GUI_DispString+0xe0>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005362:	f001 0103 	and.w	r1, r1, #3
 8005366:	3901      	subs	r1, #1
 8005368:	2901      	cmp	r1, #1
 800536a:	bf8a      	itet	hi
 800536c:	8c11      	ldrhhi	r1, [r2, #32]
 800536e:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 8005372:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8005374:	f89e 1000 	ldrb.w	r1, [lr]
 8005378:	290a      	cmp	r1, #10
 800537a:	d10a      	bne.n	8005392 <GUI_DispString+0xee>
 800537c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800537e:	440b      	add	r3, r1
 8005380:	8493      	strh	r3, [r2, #36]	; 0x24
 8005382:	e006      	b.n	8005392 <GUI_DispString+0xee>
 8005384:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8005388:	f8d9 3000 	ldr.w	r3, [r9]
 800538c:	4483      	add	fp, r0
 800538e:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 8005392:	f89e 3000 	ldrb.w	r3, [lr]
 8005396:	b943      	cbnz	r3, 80053aa <GUI_DispString+0x106>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800539c:	4416      	add	r6, r2
 800539e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053a0:	f022 0203 	bic.w	r2, r2, #3
 80053a4:	849e      	strh	r6, [r3, #36]	; 0x24
 80053a6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80053a8:	e002      	b.n	80053b0 <GUI_DispString+0x10c>
 80053aa:	f10e 0501 	add.w	r5, lr, #1
 80053ae:	e78e      	b.n	80052ce <GUI_DispString+0x2a>
 80053b0:	b005      	add	sp, #20
 80053b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b6:	bf00      	nop
 80053b8:	20000080 	.word	0x20000080

080053bc <GUI_DispStringAt>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <GUI_DispStringAt+0xc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	8459      	strh	r1, [r3, #34]	; 0x22
 80053c2:	849a      	strh	r2, [r3, #36]	; 0x24
 80053c4:	f7ff bf6e 	b.w	80052a4 <GUI_DispString>
 80053c8:	20000080 	.word	0x20000080

080053cc <_OnExit>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4c0e      	ldr	r4, [pc, #56]	; (8005408 <_OnExit+0x3c>)
 80053d0:	2208      	movs	r2, #8
 80053d2:	4d0e      	ldr	r5, [pc, #56]	; (800540c <_OnExit+0x40>)
 80053d4:	2100      	movs	r1, #0
 80053d6:	4620      	mov	r0, r4
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	4798      	blx	r3
 80053dc:	2208      	movs	r2, #8
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	2100      	movs	r1, #0
 80053e2:	18a0      	adds	r0, r4, r2
 80053e4:	4798      	blx	r3
 80053e6:	682b      	ldr	r3, [r5, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	2100      	movs	r1, #0
 80053ec:	f104 0010 	add.w	r0, r4, #16
 80053f0:	4798      	blx	r3
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	2208      	movs	r2, #8
 80053f6:	2100      	movs	r1, #0
 80053f8:	f104 0018 	add.w	r0, r4, #24
 80053fc:	4798      	blx	r3
 80053fe:	2200      	movs	r2, #0
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <_OnExit+0x44>)
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	bd38      	pop	{r3, r4, r5, pc}
 8005406:	bf00      	nop
 8005408:	20049acc 	.word	0x20049acc
 800540c:	20000090 	.word	0x20000090
 8005410:	20049ca8 	.word	0x20049ca8

08005414 <GUI_MULTIBUF_BeginEx>:
 8005414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005416:	4917      	ldr	r1, [pc, #92]	; (8005474 <GUI_MULTIBUF_BeginEx+0x60>)
 8005418:	6a0b      	ldr	r3, [r1, #32]
 800541a:	2b00      	cmp	r3, #0
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <GUI_MULTIBUF_BeginEx+0x64>)
 800541e:	bf0c      	ite	eq
 8005420:	4606      	moveq	r6, r0
 8005422:	2600      	movne	r6, #0
 8005424:	579d      	ldrsb	r5, [r3, r6]
 8005426:	2d01      	cmp	r5, #1
 8005428:	dd21      	ble.n	800546e <GUI_MULTIBUF_BeginEx+0x5a>
 800542a:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	1c54      	adds	r4, r2, #1
 8005432:	611c      	str	r4, [r3, #16]
 8005434:	b9da      	cbnz	r2, 800546e <GUI_MULTIBUF_BeginEx+0x5a>
 8005436:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 800543a:	4611      	mov	r1, r2
 800543c:	689c      	ldr	r4, [r3, #8]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	3201      	adds	r2, #1
 8005442:	42aa      	cmp	r2, r5
 8005444:	bf08      	it	eq
 8005446:	460a      	moveq	r2, r1
 8005448:	42ba      	cmp	r2, r7
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	4616      	mov	r6, r2
 800544e:	d0f6      	beq.n	800543e <GUI_MULTIBUF_BeginEx+0x2a>
 8005450:	f7ff fe82 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8005454:	9001      	str	r0, [sp, #4]
 8005456:	b150      	cbz	r0, 800546e <GUI_MULTIBUF_BeginEx+0x5a>
 8005458:	68c3      	ldr	r3, [r0, #12]
 800545a:	2121      	movs	r1, #33	; 0x21
 800545c:	a801      	add	r0, sp, #4
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	4798      	blx	r3
 8005462:	4603      	mov	r3, r0
 8005464:	b118      	cbz	r0, 800546e <GUI_MULTIBUF_BeginEx+0x5a>
 8005466:	4632      	mov	r2, r6
 8005468:	4621      	mov	r1, r4
 800546a:	9801      	ldr	r0, [sp, #4]
 800546c:	4798      	blx	r3
 800546e:	b003      	add	sp, #12
 8005470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005472:	bf00      	nop
 8005474:	20049acc 	.word	0x20049acc
 8005478:	20049ca4 	.word	0x20049ca4

0800547c <GUI_MULTIBUF_EndEx>:
 800547c:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <GUI_MULTIBUF_EndEx+0x54>)
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	2a00      	cmp	r2, #0
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <GUI_MULTIBUF_EndEx+0x58>)
 8005484:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005486:	bf0c      	ite	eq
 8005488:	4604      	moveq	r4, r0
 800548a:	2400      	movne	r4, #0
 800548c:	4605      	mov	r5, r0
 800548e:	5712      	ldrsb	r2, [r2, r4]
 8005490:	2a01      	cmp	r2, #1
 8005492:	dd1a      	ble.n	80054ca <GUI_MULTIBUF_EndEx+0x4e>
 8005494:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	3b01      	subs	r3, #1
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	b9a3      	cbnz	r3, 80054ca <GUI_MULTIBUF_EndEx+0x4e>
 80054a0:	2001      	movs	r0, #1
 80054a2:	40a8      	lsls	r0, r5
 80054a4:	f7ff fe46 	bl	8005134 <GUI_DCACHE_Clear>
 80054a8:	68a6      	ldr	r6, [r4, #8]
 80054aa:	4628      	mov	r0, r5
 80054ac:	61a6      	str	r6, [r4, #24]
 80054ae:	f7ff fe53 	bl	8005158 <GUI_DEVICE__GetpDriver>
 80054b2:	9001      	str	r0, [sp, #4]
 80054b4:	b148      	cbz	r0, 80054ca <GUI_MULTIBUF_EndEx+0x4e>
 80054b6:	68c3      	ldr	r3, [r0, #12]
 80054b8:	2122      	movs	r1, #34	; 0x22
 80054ba:	a801      	add	r0, sp, #4
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	4798      	blx	r3
 80054c0:	4603      	mov	r3, r0
 80054c2:	b110      	cbz	r0, 80054ca <GUI_MULTIBUF_EndEx+0x4e>
 80054c4:	4631      	mov	r1, r6
 80054c6:	9801      	ldr	r0, [sp, #4]
 80054c8:	4798      	blx	r3
 80054ca:	b002      	add	sp, #8
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
 80054ce:	bf00      	nop
 80054d0:	20049acc 	.word	0x20049acc
 80054d4:	20049ca4 	.word	0x20049ca4

080054d8 <GUI_MULTIBUF_ConfirmEx>:
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <GUI_MULTIBUF_ConfirmEx+0x24>)
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	2a00      	cmp	r2, #0
 80054de:	bf18      	it	ne
 80054e0:	2000      	movne	r0, #0
 80054e2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80054e6:	b510      	push	{r4, lr}
 80054e8:	6994      	ldr	r4, [r2, #24]
 80054ea:	2c00      	cmp	r4, #0
 80054ec:	bfa2      	ittt	ge
 80054ee:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 80054f2:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 80054f6:	6193      	strge	r3, [r2, #24]
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	bf00      	nop
 80054fc:	20049acc 	.word	0x20049acc

08005500 <GUI_MULTIBUF_ConfigEx>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4c0a      	ldr	r4, [pc, #40]	; (800552c <GUI_MULTIBUF_ConfigEx+0x2c>)
 8005504:	4605      	mov	r5, r0
 8005506:	460e      	mov	r6, r1
 8005508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800550a:	b92b      	cbnz	r3, 8005518 <GUI_MULTIBUF_ConfigEx+0x18>
 800550c:	4620      	mov	r0, r4
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <GUI_MULTIBUF_ConfigEx+0x30>)
 8005510:	f840 3f24 	str.w	r3, [r0, #36]!
 8005514:	f7ff fdfa 	bl	800510c <GUI__RegisterExit>
 8005518:	6a23      	ldr	r3, [r4, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <GUI_MULTIBUF_ConfigEx+0x34>)
 800551e:	bf18      	it	ne
 8005520:	2500      	movne	r5, #0
 8005522:	2e01      	cmp	r6, #1
 8005524:	bfb8      	it	lt
 8005526:	2601      	movlt	r6, #1
 8005528:	555e      	strb	r6, [r3, r5]
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	20049acc 	.word	0x20049acc
 8005530:	080053cd 	.word	0x080053cd
 8005534:	20049ca4 	.word	0x20049ca4

08005538 <GUI_StoreKey>:
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <GUI_StoreKey+0xc>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	b902      	cbnz	r2, 8005540 <GUI_StoreKey+0x8>
 800553e:	6018      	str	r0, [r3, #0]
 8005540:	f000 b852 	b.w	80055e8 <GUI_SignalEvent>
 8005544:	20049af8 	.word	0x20049af8

08005548 <GUI_GetLayerPosEx>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	460d      	mov	r5, r1
 800554c:	4614      	mov	r4, r2
 800554e:	f000 ff65 	bl	800641c <LCD_GetPosEx>
 8005552:	b110      	cbz	r0, 800555a <GUI_GetLayerPosEx+0x12>
 8005554:	2300      	movs	r3, #0
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}

0800555c <GUI_SelectLayer>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d08      	ldr	r5, [pc, #32]	; (8005580 <GUI_SelectLayer+0x24>)
 8005560:	2801      	cmp	r0, #1
 8005562:	4604      	mov	r4, r0
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	7c5e      	ldrb	r6, [r3, #17]
 8005568:	d808      	bhi.n	800557c <GUI_SelectLayer+0x20>
 800556a:	f7ff fdf5 	bl	8005158 <GUI_DEVICE__GetpDriver>
 800556e:	b128      	cbz	r0, 800557c <GUI_SelectLayer+0x20>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	745c      	strb	r4, [r3, #17]
 8005574:	f7ff fbdf 	bl	8004d36 <GUI_SelectLCD>
 8005578:	4b02      	ldr	r3, [pc, #8]	; (8005584 <GUI_SelectLayer+0x28>)
 800557a:	601c      	str	r4, [r3, #0]
 800557c:	4630      	mov	r0, r6
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	20000080 	.word	0x20000080
 8005584:	20049d38 	.word	0x20049d38

08005588 <GUI_UC__GetCharCodeInc>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	4e08      	ldr	r6, [pc, #32]	; (80055ac <GUI_UC__GetCharCodeInc+0x24>)
 800558c:	4605      	mov	r5, r0
 800558e:	6804      	ldr	r4, [r0, #0]
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	4620      	mov	r0, r4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4798      	blx	r3
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	4607      	mov	r7, r0
 800559c:	4620      	mov	r0, r4
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4798      	blx	r3
 80055a2:	4420      	add	r0, r4
 80055a4:	6028      	str	r0, [r5, #0]
 80055a6:	4638      	mov	r0, r7
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20049cec 	.word	0x20049cec

080055b0 <GUI_UC__NumChars2NumBytes>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	4606      	mov	r6, r0
 80055b4:	460d      	mov	r5, r1
 80055b6:	2400      	movs	r4, #0
 80055b8:	4f05      	ldr	r7, [pc, #20]	; (80055d0 <GUI_UC__NumChars2NumBytes+0x20>)
 80055ba:	b13d      	cbz	r5, 80055cc <GUI_UC__NumChars2NumBytes+0x1c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4630      	mov	r0, r6
 80055c0:	3d01      	subs	r5, #1
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4798      	blx	r3
 80055c6:	4406      	add	r6, r0
 80055c8:	4404      	add	r4, r0
 80055ca:	e7f6      	b.n	80055ba <GUI_UC__NumChars2NumBytes+0xa>
 80055cc:	4620      	mov	r0, r4
 80055ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d0:	20049cec 	.word	0x20049cec

080055d4 <_GetCharCode>:
 80055d4:	7800      	ldrb	r0, [r0, #0]
 80055d6:	4770      	bx	lr

080055d8 <_GetCharSize>:
 80055d8:	2001      	movs	r0, #1
 80055da:	4770      	bx	lr

080055dc <_CalcSizeOfChar>:
 80055dc:	2001      	movs	r0, #1
 80055de:	4770      	bx	lr

080055e0 <_Encode>:
 80055e0:	7001      	strb	r1, [r0, #0]
 80055e2:	2001      	movs	r0, #1
 80055e4:	4770      	bx	lr
	...

080055e8 <GUI_SignalEvent>:
 80055e8:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <GUI_SignalEvent+0xc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	b103      	cbz	r3, 80055f0 <GUI_SignalEvent+0x8>
 80055ee:	4718      	bx	r3
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20049b58 	.word	0x20049b58

080055f8 <GUI__MixColorsBulk>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	b087      	sub	sp, #28
 80055fe:	4606      	mov	r6, r0
 8005600:	460f      	mov	r7, r1
 8005602:	4690      	mov	r8, r2
 8005604:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800560c:	009d      	lsls	r5, r3, #2
 800560e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005610:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	2300      	movs	r3, #0
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <GUI__MixColorsBulk+0x80>)
 800561c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800561e:	9901      	ldr	r1, [sp, #4]
 8005620:	4291      	cmp	r1, r2
 8005622:	d026      	beq.n	8005672 <GUI__MixColorsBulk+0x7a>
 8005624:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8005628:	46c2      	mov	sl, r8
 800562a:	46b3      	mov	fp, r6
 800562c:	9702      	str	r7, [sp, #8]
 800562e:	f85b 0b04 	ldr.w	r0, [fp], #4
 8005632:	9904      	ldr	r1, [sp, #16]
 8005634:	0e02      	lsrs	r2, r0, #24
 8005636:	9c02      	ldr	r4, [sp, #8]
 8005638:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	434a      	muls	r2, r1
 8005640:	21ff      	movs	r1, #255	; 0xff
 8005642:	fbb2 f2f1 	udiv	r2, r2, r1
 8005646:	f854 1b04 	ldr.w	r1, [r4], #4
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	9402      	str	r4, [sp, #8]
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	47a0      	blx	r4
 8005652:	f1b9 0901 	subs.w	r9, r9, #1
 8005656:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800565a:	9b05      	ldr	r3, [sp, #20]
 800565c:	f84a 0b04 	str.w	r0, [sl], #4
 8005660:	d1e5      	bne.n	800562e <GUI__MixColorsBulk+0x36>
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	442e      	add	r6, r5
 8005666:	44a8      	add	r8, r5
 8005668:	4417      	add	r7, r2
 800566a:	9a01      	ldr	r2, [sp, #4]
 800566c:	3201      	adds	r2, #1
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	e7d4      	b.n	800561c <GUI__MixColorsBulk+0x24>
 8005672:	b007      	add	sp, #28
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	20000084 	.word	0x20000084

0800567c <GUI__MixColors>:
 800567c:	0e0b      	lsrs	r3, r1, #24
 800567e:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8005682:	fb02 f203 	mul.w	r2, r2, r3
 8005686:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800568a:	bf08      	it	eq
 800568c:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8005690:	fbb2 f2f3 	udiv	r2, r2, r3
 8005694:	b530      	push	{r4, r5, lr}
 8005696:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800569a:	1a9d      	subs	r5, r3, r2
 800569c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80056a0:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 80056a4:	0a0c      	lsrs	r4, r1, #8
 80056a6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80056aa:	436c      	muls	r4, r5
 80056ac:	fb02 4403 	mla	r4, r2, r3, r4
 80056b0:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80056b4:	4342      	muls	r2, r0
 80056b6:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 80056ba:	fb05 2103 	mla	r1, r5, r3, r2
 80056be:	0a09      	lsrs	r1, r1, #8
 80056c0:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80056c4:	4320      	orrs	r0, r4
 80056c6:	bd30      	pop	{r4, r5, pc}

080056c8 <GUI_SetFuncAlphaBlending>:
 80056c8:	4b02      	ldr	r3, [pc, #8]	; (80056d4 <GUI_SetFuncAlphaBlending+0xc>)
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	61d8      	str	r0, [r3, #28]
 80056ce:	4610      	mov	r0, r2
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20049b60 	.word	0x20049b60

080056d8 <GUI_SetFuncMixColorsBulk>:
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <GUI_SetFuncMixColorsBulk+0xc>)
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	6058      	str	r0, [r3, #4]
 80056de:	4610      	mov	r0, r2
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000084 	.word	0x20000084

080056e8 <GUI_SetFuncDrawAlpha>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <GUI_SetFuncDrawAlpha+0x1c>)
 80056ec:	4c06      	ldr	r4, [pc, #24]	; (8005708 <GUI_SetFuncDrawAlpha+0x20>)
 80056ee:	b120      	cbz	r0, 80056fa <GUI_SetFuncDrawAlpha+0x12>
 80056f0:	b119      	cbz	r1, 80056fa <GUI_SetFuncDrawAlpha+0x12>
 80056f2:	6020      	str	r0, [r4, #0]
 80056f4:	2000      	movs	r0, #0
 80056f6:	6019      	str	r1, [r3, #0]
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	2200      	movs	r2, #0
 80056fc:	2001      	movs	r0, #1
 80056fe:	6022      	str	r2, [r4, #0]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	bd10      	pop	{r4, pc}
 8005704:	20049d04 	.word	0x20049d04
 8005708:	20049d08 	.word	0x20049d08

0800570c <GUI__IntersectRect>:
 800570c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005710:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005714:	429a      	cmp	r2, r3
 8005716:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800571a:	bfb8      	it	lt
 800571c:	8003      	strhlt	r3, [r0, #0]
 800571e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005722:	429a      	cmp	r2, r3
 8005724:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005728:	bfb8      	it	lt
 800572a:	8043      	strhlt	r3, [r0, #2]
 800572c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8005736:	bfc8      	it	gt
 8005738:	8083      	strhgt	r3, [r0, #4]
 800573a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800573e:	429a      	cmp	r2, r3
 8005740:	bfc8      	it	gt
 8005742:	80c3      	strhgt	r3, [r0, #6]
 8005744:	4770      	bx	lr

08005746 <GUI__IntersectRects>:
 8005746:	b570      	push	{r4, r5, r6, lr}
 8005748:	f9b1 3000 	ldrsh.w	r3, [r1]
 800574c:	4606      	mov	r6, r0
 800574e:	f9b2 5000 	ldrsh.w	r5, [r2]
 8005752:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8005756:	429d      	cmp	r5, r3
 8005758:	bfb8      	it	lt
 800575a:	461d      	movlt	r5, r3
 800575c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005760:	8005      	strh	r5, [r0, #0]
 8005762:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8005766:	4283      	cmp	r3, r0
 8005768:	bfb8      	it	lt
 800576a:	4603      	movlt	r3, r0
 800576c:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8005770:	4284      	cmp	r4, r0
 8005772:	8073      	strh	r3, [r6, #2]
 8005774:	bfa8      	it	ge
 8005776:	4604      	movge	r4, r0
 8005778:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800577c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8005780:	80b4      	strh	r4, [r6, #4]
 8005782:	4282      	cmp	r2, r0
 8005784:	bfa8      	it	ge
 8005786:	4602      	movge	r2, r0
 8005788:	42a5      	cmp	r5, r4
 800578a:	80f2      	strh	r2, [r6, #6]
 800578c:	dc04      	bgt.n	8005798 <GUI__IntersectRects+0x52>
 800578e:	4293      	cmp	r3, r2
 8005790:	bfcc      	ite	gt
 8005792:	2000      	movgt	r0, #0
 8005794:	2001      	movle	r0, #1
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	2000      	movs	r0, #0
 800579a:	bd70      	pop	{r4, r5, r6, pc}

0800579c <GUI__memset>:
 800579c:	b2c9      	uxtb	r1, r1
 800579e:	4603      	mov	r3, r0
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	b12a      	cbz	r2, 80057b0 <GUI__memset+0x14>
 80057a4:	079c      	lsls	r4, r3, #30
 80057a6:	d003      	beq.n	80057b0 <GUI__memset+0x14>
 80057a8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ac:	3a01      	subs	r2, #1
 80057ae:	e7f8      	b.n	80057a2 <GUI__memset+0x6>
 80057b0:	0895      	lsrs	r5, r2, #2
 80057b2:	d101      	bne.n	80057b8 <GUI__memset+0x1c>
 80057b4:	441a      	add	r2, r3
 80057b6:	e01a      	b.n	80057ee <GUI__memset+0x52>
 80057b8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 80057bc:	f002 0203 	and.w	r2, r2, #3
 80057c0:	434c      	muls	r4, r1
 80057c2:	2d03      	cmp	r5, #3
 80057c4:	461e      	mov	r6, r3
 80057c6:	f103 0310 	add.w	r3, r3, #16
 80057ca:	dd09      	ble.n	80057e0 <GUI__memset+0x44>
 80057cc:	f843 4c10 	str.w	r4, [r3, #-16]
 80057d0:	3d04      	subs	r5, #4
 80057d2:	f843 4c0c 	str.w	r4, [r3, #-12]
 80057d6:	f843 4c08 	str.w	r4, [r3, #-8]
 80057da:	f843 4c04 	str.w	r4, [r3, #-4]
 80057de:	e7f0      	b.n	80057c2 <GUI__memset+0x26>
 80057e0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80057e4:	429e      	cmp	r6, r3
 80057e6:	d0e5      	beq.n	80057b4 <GUI__memset+0x18>
 80057e8:	f846 4b04 	str.w	r4, [r6], #4
 80057ec:	e7fa      	b.n	80057e4 <GUI__memset+0x48>
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d002      	beq.n	80057f8 <GUI__memset+0x5c>
 80057f2:	f803 1b01 	strb.w	r1, [r3], #1
 80057f6:	e7fa      	b.n	80057ee <GUI__memset+0x52>
 80057f8:	bd70      	pop	{r4, r5, r6, pc}

080057fa <GUI__memset16>:
 80057fa:	b570      	push	{r4, r5, r6, lr}
 80057fc:	0784      	lsls	r4, r0, #30
 80057fe:	bf42      	ittt	mi
 8005800:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8005804:	8001      	strhmi	r1, [r0, #0]
 8005806:	3002      	addmi	r0, #2
 8005808:	0854      	lsrs	r4, r2, #1
 800580a:	d023      	beq.n	8005854 <GUI__memset16+0x5a>
 800580c:	2c03      	cmp	r4, #3
 800580e:	4623      	mov	r3, r4
 8005810:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8005814:	d802      	bhi.n	800581c <GUI__memset16+0x22>
 8005816:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800581a:	e016      	b.n	800584a <GUI__memset16+0x50>
 800581c:	f100 0310 	add.w	r3, r0, #16
 8005820:	4626      	mov	r6, r4
 8005822:	3e04      	subs	r6, #4
 8005824:	f843 5c10 	str.w	r5, [r3, #-16]
 8005828:	f843 5c0c 	str.w	r5, [r3, #-12]
 800582c:	3310      	adds	r3, #16
 800582e:	2e03      	cmp	r6, #3
 8005830:	f843 5c18 	str.w	r5, [r3, #-24]
 8005834:	f843 5c14 	str.w	r5, [r3, #-20]
 8005838:	dcf3      	bgt.n	8005822 <GUI__memset16+0x28>
 800583a:	3c04      	subs	r4, #4
 800583c:	08a3      	lsrs	r3, r4, #2
 800583e:	1c5e      	adds	r6, r3, #1
 8005840:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8005844:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8005848:	e7e5      	b.n	8005816 <GUI__memset16+0x1c>
 800584a:	4298      	cmp	r0, r3
 800584c:	d002      	beq.n	8005854 <GUI__memset16+0x5a>
 800584e:	f840 5b04 	str.w	r5, [r0], #4
 8005852:	e7fa      	b.n	800584a <GUI__memset16+0x50>
 8005854:	07d3      	lsls	r3, r2, #31
 8005856:	bf48      	it	mi
 8005858:	8001      	strhmi	r1, [r0, #0]
 800585a:	bd70      	pop	{r4, r5, r6, pc}

0800585c <_SetDrawMode>:
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <_SetDrawMode+0x24>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	7c1a      	ldrb	r2, [r3, #16]
 8005864:	ea82 0100 	eor.w	r1, r2, r0
 8005868:	0749      	lsls	r1, r1, #29
 800586a:	d505      	bpl.n	8005878 <_SetDrawMode+0x1c>
 800586c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800586e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005870:	6825      	ldr	r5, [r4, #0]
 8005872:	680e      	ldr	r6, [r1, #0]
 8005874:	6026      	str	r6, [r4, #0]
 8005876:	600d      	str	r5, [r1, #0]
 8005878:	7418      	strb	r0, [r3, #16]
 800587a:	4610      	mov	r0, r2
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	bf00      	nop
 8005880:	20000080 	.word	0x20000080

08005884 <LCD_SetDrawMode>:
 8005884:	4b01      	ldr	r3, [pc, #4]	; (800588c <LCD_SetDrawMode+0x8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4718      	bx	r3
 800588c:	20000094 	.word	0x20000094

08005890 <LCD_DrawPixel>:
 8005890:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <LCD_DrawPixel+0x58>)
 8005892:	460a      	mov	r2, r1
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800589a:	4291      	cmp	r1, r2
 800589c:	b430      	push	{r4, r5}
 800589e:	4604      	mov	r4, r0
 80058a0:	dc20      	bgt.n	80058e4 <LCD_DrawPixel+0x54>
 80058a2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80058a6:	428a      	cmp	r2, r1
 80058a8:	dc1c      	bgt.n	80058e4 <LCD_DrawPixel+0x54>
 80058aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80058ae:	4281      	cmp	r1, r0
 80058b0:	dc18      	bgt.n	80058e4 <LCD_DrawPixel+0x54>
 80058b2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80058b6:	4288      	cmp	r0, r1
 80058b8:	dc14      	bgt.n	80058e4 <LCD_DrawPixel+0x54>
 80058ba:	7c19      	ldrb	r1, [r3, #16]
 80058bc:	7c58      	ldrb	r0, [r3, #17]
 80058be:	f011 0f01 	tst.w	r1, #1
 80058c2:	490a      	ldr	r1, [pc, #40]	; (80058ec <LCD_DrawPixel+0x5c>)
 80058c4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80058c8:	d004      	beq.n	80058d4 <LCD_DrawPixel+0x44>
 80058ca:	68c3      	ldr	r3, [r0, #12]
 80058cc:	4621      	mov	r1, r4
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	bc30      	pop	{r4, r5}
 80058d2:	4718      	bx	r3
 80058d4:	68c1      	ldr	r1, [r0, #12]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d8:	698d      	ldr	r5, [r1, #24]
 80058da:	4621      	mov	r1, r4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	46ac      	mov	ip, r5
 80058e0:	bc30      	pop	{r4, r5}
 80058e2:	4760      	bx	ip
 80058e4:	bc30      	pop	{r4, r5}
 80058e6:	4770      	bx	lr
 80058e8:	20000080 	.word	0x20000080
 80058ec:	20049cf4 	.word	0x20049cf4

080058f0 <LCD_DrawHLine>:
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <LCD_DrawHLine+0x48>)
 80058f2:	b430      	push	{r4, r5}
 80058f4:	681c      	ldr	r4, [r3, #0]
 80058f6:	460d      	mov	r5, r1
 80058f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80058fc:	428b      	cmp	r3, r1
 80058fe:	dc19      	bgt.n	8005934 <LCD_DrawHLine+0x44>
 8005900:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005904:	4299      	cmp	r1, r3
 8005906:	dc15      	bgt.n	8005934 <LCD_DrawHLine+0x44>
 8005908:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800590c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005910:	4281      	cmp	r1, r0
 8005912:	bfb8      	it	lt
 8005914:	4601      	movlt	r1, r0
 8005916:	4293      	cmp	r3, r2
 8005918:	bfa8      	it	ge
 800591a:	4613      	movge	r3, r2
 800591c:	4299      	cmp	r1, r3
 800591e:	dc09      	bgt.n	8005934 <LCD_DrawHLine+0x44>
 8005920:	7c60      	ldrb	r0, [r4, #17]
 8005922:	4a06      	ldr	r2, [pc, #24]	; (800593c <LCD_DrawHLine+0x4c>)
 8005924:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005928:	68c2      	ldr	r2, [r0, #12]
 800592a:	6894      	ldr	r4, [r2, #8]
 800592c:	462a      	mov	r2, r5
 800592e:	46a4      	mov	ip, r4
 8005930:	bc30      	pop	{r4, r5}
 8005932:	4760      	bx	ip
 8005934:	bc30      	pop	{r4, r5}
 8005936:	4770      	bx	lr
 8005938:	20000080 	.word	0x20000080
 800593c:	20049cf4 	.word	0x20049cf4

08005940 <LCD_FillRect>:
 8005940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005942:	4c13      	ldr	r4, [pc, #76]	; (8005990 <LCD_FillRect+0x50>)
 8005944:	6824      	ldr	r4, [r4, #0]
 8005946:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 800594a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800594e:	4285      	cmp	r5, r0
 8005950:	bfb8      	it	lt
 8005952:	4605      	movlt	r5, r0
 8005954:	4296      	cmp	r6, r2
 8005956:	bfa8      	it	ge
 8005958:	4616      	movge	r6, r2
 800595a:	42ae      	cmp	r6, r5
 800595c:	db15      	blt.n	800598a <LCD_FillRect+0x4a>
 800595e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8005962:	428a      	cmp	r2, r1
 8005964:	bfb8      	it	lt
 8005966:	460a      	movlt	r2, r1
 8005968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596c:	428b      	cmp	r3, r1
 800596e:	bfa8      	it	ge
 8005970:	460b      	movge	r3, r1
 8005972:	429a      	cmp	r2, r3
 8005974:	dc09      	bgt.n	800598a <LCD_FillRect+0x4a>
 8005976:	7c60      	ldrb	r0, [r4, #17]
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <LCD_FillRect+0x54>)
 800597a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800597e:	68c1      	ldr	r1, [r0, #12]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	4633      	mov	r3, r6
 8005984:	690c      	ldr	r4, [r1, #16]
 8005986:	4629      	mov	r1, r5
 8005988:	47a0      	blx	r4
 800598a:	b002      	add	sp, #8
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	bf00      	nop
 8005990:	20000080 	.word	0x20000080
 8005994:	20049cf4 	.word	0x20049cf4

08005998 <LCD__DrawBitmap_1bpp>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	b08f      	sub	sp, #60	; 0x3c
 800599e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8005b6c <LCD__DrawBitmap_1bpp+0x1d4>
 80059a2:	460c      	mov	r4, r1
 80059a4:	4617      	mov	r7, r2
 80059a6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80059a8:	f8de e000 	ldr.w	lr, [lr]
 80059ac:	9502      	str	r5, [sp, #8]
 80059ae:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80059b0:	9007      	str	r0, [sp, #28]
 80059b2:	9508      	str	r5, [sp, #32]
 80059b4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	9503      	str	r5, [sp, #12]
 80059ba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80059be:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80059c0:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80059c4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80059c6:	f1be 0f00 	cmp.w	lr, #0
 80059ca:	d002      	beq.n	80059d2 <LCD__DrawBitmap_1bpp+0x3a>
 80059cc:	f8de 4000 	ldr.w	r4, [lr]
 80059d0:	e054      	b.n	8005a7c <LCD__DrawBitmap_1bpp+0xe4>
 80059d2:	9b02      	ldr	r3, [sp, #8]
 80059d4:	9a08      	ldr	r2, [sp, #32]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d154      	bne.n	8005a86 <LCD__DrawBitmap_1bpp+0xee>
 80059dc:	4b61      	ldr	r3, [pc, #388]	; (8005b64 <LCD__DrawBitmap_1bpp+0x1cc>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80059e4:	1a53      	subs	r3, r2, r1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd0a      	ble.n	8005a00 <LCD__DrawBitmap_1bpp+0x68>
 80059ea:	9901      	ldr	r1, [sp, #4]
 80059ec:	ebc3 0e01 	rsb	lr, r3, r1
 80059f0:	f1be 0f00 	cmp.w	lr, #0
 80059f4:	f340 80b2 	ble.w	8005b5c <LCD__DrawBitmap_1bpp+0x1c4>
 80059f8:	9903      	ldr	r1, [sp, #12]
 80059fa:	fb01 6603 	mla	r6, r1, r3, r6
 80059fe:	e002      	b.n	8005a06 <LCD__DrawBitmap_1bpp+0x6e>
 8005a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005a04:	460a      	mov	r2, r1
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	441c      	add	r4, r3
 8005a0a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	1ae4      	subs	r4, r4, r3
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	dd05      	ble.n	8005a22 <LCD__DrawBitmap_1bpp+0x8a>
 8005a16:	ebc4 0e0e 	rsb	lr, r4, lr
 8005a1a:	f1be 0f00 	cmp.w	lr, #0
 8005a1e:	f340 809d 	ble.w	8005b5c <LCD__DrawBitmap_1bpp+0x1c4>
 8005a22:	9b07      	ldr	r3, [sp, #28]
 8005a24:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8005a28:	443b      	add	r3, r7
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	1a5b      	subs	r3, r3, r1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bfc8      	it	gt
 8005a32:	1aff      	subgt	r7, r7, r3
 8005a34:	9b07      	ldr	r3, [sp, #28]
 8005a36:	1b59      	subs	r1, r3, r5
 8005a38:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	da09      	bge.n	8005a54 <LCD__DrawBitmap_1bpp+0xbc>
 8005a40:	1a5b      	subs	r3, r3, r1
 8005a42:	441d      	add	r5, r3
 8005a44:	1aff      	subs	r7, r7, r3
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8005a4e:	f005 0507 	and.w	r5, r5, #7
 8005a52:	4419      	add	r1, r3
 8005a54:	2f00      	cmp	r7, #0
 8005a56:	f340 8081 	ble.w	8005b5c <LCD__DrawBitmap_1bpp+0x1c4>
 8005a5a:	7c40      	ldrb	r0, [r0, #17]
 8005a5c:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <LCD__DrawBitmap_1bpp+0x1d0>)
 8005a5e:	9c03      	ldr	r4, [sp, #12]
 8005a60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005a64:	68c3      	ldr	r3, [r0, #12]
 8005a66:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8005a6a:	951c      	str	r5, [sp, #112]	; 0x70
 8005a6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a6e:	941a      	str	r4, [sp, #104]	; 0x68
 8005a70:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8005a74:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8005a78:	685c      	ldr	r4, [r3, #4]
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	46a4      	mov	ip, r4
 8005a7e:	b00f      	add	sp, #60	; 0x3c
 8005a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4760      	bx	ip
 8005a86:	f1ca 0308 	rsb	r3, sl, #8
 8005a8a:	4675      	mov	r5, lr
 8005a8c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8005b64 <LCD__DrawBitmap_1bpp+0x1cc>
 8005a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a92:	9b02      	ldr	r3, [sp, #8]
 8005a94:	f8cd e014 	str.w	lr, [sp, #20]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	9a01      	ldr	r2, [sp, #4]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	da5b      	bge.n	8005b5c <LCD__DrawBitmap_1bpp+0x1c4>
 8005aa4:	9b08      	ldr	r3, [sp, #32]
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	930a      	str	r3, [sp, #40]	; 0x28
 8005aae:	f8d9 3000 	ldr.w	r3, [r9]
 8005ab2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ab4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	dc48      	bgt.n	8005b4e <LCD__DrawBitmap_1bpp+0x1b6>
 8005abc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	dc44      	bgt.n	8005b4e <LCD__DrawBitmap_1bpp+0x1b6>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	9606      	str	r6, [sp, #24]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	42bb      	cmp	r3, r7
 8005ad6:	da3a      	bge.n	8005b4e <LCD__DrawBitmap_1bpp+0x1b6>
 8005ad8:	f1b8 0f00 	cmp.w	r8, #0
 8005adc:	d105      	bne.n	8005aea <LCD__DrawBitmap_1bpp+0x152>
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	f04f 0808 	mov.w	r8, #8
 8005ae4:	781d      	ldrb	r5, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	9306      	str	r3, [sp, #24]
 8005aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aec:	ebca 0808 	rsb	r8, sl, r8
 8005af0:	fa45 f303 	asr.w	r3, r5, r3
 8005af4:	fa05 f50a 	lsl.w	r5, r5, sl
 8005af8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8005afc:	b2ed      	uxtb	r5, r5
 8005afe:	d104      	bne.n	8005b0a <LCD__DrawBitmap_1bpp+0x172>
 8005b00:	f8d9 2000 	ldr.w	r2, [r9]
 8005b04:	7c12      	ldrb	r2, [r2, #16]
 8005b06:	0792      	lsls	r2, r2, #30
 8005b08:	d419      	bmi.n	8005b3e <LCD__DrawBitmap_1bpp+0x1a6>
 8005b0a:	f8d9 2000 	ldr.w	r2, [r9]
 8005b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b10:	6810      	ldr	r0, [r2, #0]
 8005b12:	900c      	str	r0, [sp, #48]	; 0x30
 8005b14:	f1bb 0f00 	cmp.w	fp, #0
 8005b18:	d002      	beq.n	8005b20 <LCD__DrawBitmap_1bpp+0x188>
 8005b1a:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8005b1e:	e000      	b.n	8005b22 <LCD__DrawBitmap_1bpp+0x18a>
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	9900      	ldr	r1, [sp, #0]
 8005b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2a:	440a      	add	r2, r1
 8005b2c:	9800      	ldr	r0, [sp, #0]
 8005b2e:	4621      	mov	r1, r4
 8005b30:	f7ff ff06 	bl	8005940 <LCD_FillRect>
 8005b34:	f8d9 3000 	ldr.w	r3, [r9]
 8005b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	9a02      	ldr	r2, [sp, #8]
 8005b42:	3301      	adds	r3, #1
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	4413      	add	r3, r2
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	e7c1      	b.n	8005ad2 <LCD__DrawBitmap_1bpp+0x13a>
 8005b4e:	9b05      	ldr	r3, [sp, #20]
 8005b50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005b52:	3301      	adds	r3, #1
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	441e      	add	r6, r3
 8005b5a:	e79f      	b.n	8005a9c <LCD__DrawBitmap_1bpp+0x104>
 8005b5c:	b00f      	add	sp, #60	; 0x3c
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	bf00      	nop
 8005b64:	20000080 	.word	0x20000080
 8005b68:	20049cf4 	.word	0x20049cf4
 8005b6c:	20049cb0 	.word	0x20049cb0

08005b70 <LCD_DrawBitmap>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	b08f      	sub	sp, #60	; 0x3c
 8005b76:	f8df e218 	ldr.w	lr, [pc, #536]	; 8005d90 <LCD_DrawBitmap+0x220>
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	4690      	mov	r8, r2
 8005b7e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005b80:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005b82:	9402      	str	r4, [sp, #8]
 8005b84:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005b86:	f8de e000 	ldr.w	lr, [lr]
 8005b8a:	9408      	str	r4, [sp, #32]
 8005b8c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005b8e:	9100      	str	r1, [sp, #0]
 8005b90:	9403      	str	r4, [sp, #12]
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005b96:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005b98:	9604      	str	r6, [sp, #16]
 8005b9a:	f1be 0f00 	cmp.w	lr, #0
 8005b9e:	d002      	beq.n	8005ba6 <LCD_DrawBitmap+0x36>
 8005ba0:	f8de 4000 	ldr.w	r4, [lr]
 8005ba4:	e07a      	b.n	8005c9c <LCD_DrawBitmap+0x12c>
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	9a08      	ldr	r2, [sp, #32]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d17a      	bne.n	8005ca6 <LCD_DrawBitmap+0x136>
 8005bb0:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <LCD_DrawBitmap+0x218>)
 8005bb2:	9901      	ldr	r1, [sp, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	dd07      	ble.n	8005bd2 <LCD_DrawBitmap+0x62>
 8005bc2:	1ac9      	subs	r1, r1, r3
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	f340 80db 	ble.w	8005d80 <LCD_DrawBitmap+0x210>
 8005bca:	9e03      	ldr	r6, [sp, #12]
 8005bcc:	fb06 4403 	mla	r4, r6, r3, r4
 8005bd0:	e000      	b.n	8005bd4 <LCD_DrawBitmap+0x64>
 8005bd2:	9a00      	ldr	r2, [sp, #0]
 8005bd4:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8005bd8:	441e      	add	r6, r3
 8005bda:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8005bde:	3e01      	subs	r6, #1
 8005be0:	1af6      	subs	r6, r6, r3
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	dd03      	ble.n	8005bee <LCD_DrawBitmap+0x7e>
 8005be6:	1b89      	subs	r1, r1, r6
 8005be8:	2900      	cmp	r1, #0
 8005bea:	f340 80c9 	ble.w	8005d80 <LCD_DrawBitmap+0x210>
 8005bee:	eb05 0308 	add.w	r3, r5, r8
 8005bf2:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	1b9b      	subs	r3, r3, r6
 8005bfa:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfc8      	it	gt
 8005c02:	ebc3 0808 	rsbgt	r8, r3, r8
 8005c06:	42b5      	cmp	r5, r6
 8005c08:	da31      	bge.n	8005c6e <LCD_DrawBitmap+0xfe>
 8005c0a:	1b73      	subs	r3, r6, r5
 8005c0c:	2f08      	cmp	r7, #8
 8005c0e:	ebc3 0808 	rsb	r8, r3, r8
 8005c12:	d027      	beq.n	8005c64 <LCD_DrawBitmap+0xf4>
 8005c14:	dc0d      	bgt.n	8005c32 <LCD_DrawBitmap+0xc2>
 8005c16:	2f02      	cmp	r7, #2
 8005c18:	d014      	beq.n	8005c44 <LCD_DrawBitmap+0xd4>
 8005c1a:	2f04      	cmp	r7, #4
 8005c1c:	d01a      	beq.n	8005c54 <LCD_DrawBitmap+0xe4>
 8005c1e:	2f01      	cmp	r7, #1
 8005c20:	d126      	bne.n	8005c70 <LCD_DrawBitmap+0x100>
 8005c22:	f023 0607 	bic.w	r6, r3, #7
 8005c26:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	4435      	add	r5, r6
 8005c30:	e01e      	b.n	8005c70 <LCD_DrawBitmap+0x100>
 8005c32:	2f18      	cmp	r7, #24
 8005c34:	d018      	beq.n	8005c68 <LCD_DrawBitmap+0xf8>
 8005c36:	2f20      	cmp	r7, #32
 8005c38:	d016      	beq.n	8005c68 <LCD_DrawBitmap+0xf8>
 8005c3a:	2f10      	cmp	r7, #16
 8005c3c:	d118      	bne.n	8005c70 <LCD_DrawBitmap+0x100>
 8005c3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8005c42:	e013      	b.n	8005c6c <LCD_DrawBitmap+0xfc>
 8005c44:	f023 0603 	bic.w	r6, r3, #3
 8005c48:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	4435      	add	r5, r6
 8005c52:	e00d      	b.n	8005c70 <LCD_DrawBitmap+0x100>
 8005c54:	f023 0601 	bic.w	r6, r3, #1
 8005c58:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	4435      	add	r5, r6
 8005c62:	e005      	b.n	8005c70 <LCD_DrawBitmap+0x100>
 8005c64:	441c      	add	r4, r3
 8005c66:	e001      	b.n	8005c6c <LCD_DrawBitmap+0xfc>
 8005c68:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005c6c:	4635      	mov	r5, r6
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f1b8 0f00 	cmp.w	r8, #0
 8005c74:	f340 8084 	ble.w	8005d80 <LCD_DrawBitmap+0x210>
 8005c78:	7c46      	ldrb	r6, [r0, #17]
 8005c7a:	4844      	ldr	r0, [pc, #272]	; (8005d8c <LCD_DrawBitmap+0x21c>)
 8005c7c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8005c80:	9e04      	ldr	r6, [sp, #16]
 8005c82:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8005c86:	931c      	str	r3, [sp, #112]	; 0x70
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	9118      	str	r1, [sp, #96]	; 0x60
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c90:	4643      	mov	r3, r8
 8005c92:	961d      	str	r6, [sp, #116]	; 0x74
 8005c94:	941b      	str	r4, [sp, #108]	; 0x6c
 8005c96:	9719      	str	r7, [sp, #100]	; 0x64
 8005c98:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005c9c:	46a4      	mov	ip, r4
 8005c9e:	b00f      	add	sp, #60	; 0x3c
 8005ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4760      	bx	ip
 8005ca6:	f1c7 0308 	rsb	r3, r7, #8
 8005caa:	46f3      	mov	fp, lr
 8005cac:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d88 <LCD_DrawBitmap+0x218>
 8005cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	f8cd e018 	str.w	lr, [sp, #24]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	930d      	str	r3, [sp, #52]	; 0x34
 8005cbc:	9b06      	ldr	r3, [sp, #24]
 8005cbe:	9a01      	ldr	r2, [sp, #4]
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	da5d      	bge.n	8005d80 <LCD_DrawBitmap+0x210>
 8005cc4:	9a00      	ldr	r2, [sp, #0]
 8005cc6:	9b08      	ldr	r3, [sp, #32]
 8005cc8:	4413      	add	r3, r2
 8005cca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd0:	f8da 3000 	ldr.w	r3, [sl]
 8005cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cd6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8005cda:	428a      	cmp	r2, r1
 8005cdc:	dc48      	bgt.n	8005d70 <LCD_DrawBitmap+0x200>
 8005cde:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005ce2:	9a00      	ldr	r2, [sp, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	dc43      	bgt.n	8005d70 <LCD_DrawBitmap+0x200>
 8005ce8:	f04f 0900 	mov.w	r9, #0
 8005cec:	462e      	mov	r6, r5
 8005cee:	9407      	str	r4, [sp, #28]
 8005cf0:	f8cd 9014 	str.w	r9, [sp, #20]
 8005cf4:	9b05      	ldr	r3, [sp, #20]
 8005cf6:	4543      	cmp	r3, r8
 8005cf8:	da3a      	bge.n	8005d70 <LCD_DrawBitmap+0x200>
 8005cfa:	f1b9 0f00 	cmp.w	r9, #0
 8005cfe:	d106      	bne.n	8005d0e <LCD_DrawBitmap+0x19e>
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	f04f 0908 	mov.w	r9, #8
 8005d06:	f893 b000 	ldrb.w	fp, [r3]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	9307      	str	r3, [sp, #28]
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d10:	fa0b f207 	lsl.w	r2, fp, r7
 8005d14:	ebc7 0909 	rsb	r9, r7, r9
 8005d18:	fa4b f303 	asr.w	r3, fp, r3
 8005d1c:	fa5f fb82 	uxtb.w	fp, r2
 8005d20:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8005d24:	d104      	bne.n	8005d30 <LCD_DrawBitmap+0x1c0>
 8005d26:	f8da 2000 	ldr.w	r2, [sl]
 8005d2a:	7c12      	ldrb	r2, [r2, #16]
 8005d2c:	0792      	lsls	r2, r2, #30
 8005d2e:	d417      	bmi.n	8005d60 <LCD_DrawBitmap+0x1f0>
 8005d30:	f8da 2000 	ldr.w	r2, [sl]
 8005d34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d36:	6810      	ldr	r0, [r2, #0]
 8005d38:	900c      	str	r0, [sp, #48]	; 0x30
 8005d3a:	9804      	ldr	r0, [sp, #16]
 8005d3c:	b110      	cbz	r0, 8005d44 <LCD_DrawBitmap+0x1d4>
 8005d3e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005d42:	e000      	b.n	8005d46 <LCD_DrawBitmap+0x1d6>
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4630      	mov	r0, r6
 8005d4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4e:	4432      	add	r2, r6
 8005d50:	9900      	ldr	r1, [sp, #0]
 8005d52:	f7ff fdf5 	bl	8005940 <LCD_FillRect>
 8005d56:	f8da 3000 	ldr.w	r3, [sl]
 8005d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	9a02      	ldr	r2, [sp, #8]
 8005d64:	3301      	adds	r3, #1
 8005d66:	9305      	str	r3, [sp, #20]
 8005d68:	4633      	mov	r3, r6
 8005d6a:	4413      	add	r3, r2
 8005d6c:	461e      	mov	r6, r3
 8005d6e:	e7c1      	b.n	8005cf4 <LCD_DrawBitmap+0x184>
 8005d70:	9b06      	ldr	r3, [sp, #24]
 8005d72:	3301      	adds	r3, #1
 8005d74:	9306      	str	r3, [sp, #24]
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	441c      	add	r4, r3
 8005d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	e79d      	b.n	8005cbc <LCD_DrawBitmap+0x14c>
 8005d80:	b00f      	add	sp, #60	; 0x3c
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	bf00      	nop
 8005d88:	20000080 	.word	0x20000080
 8005d8c:	20049cf4 	.word	0x20049cf4
 8005d90:	20049cb0 	.word	0x20049cb0

08005d94 <LCD_SetClipRectMax>:
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <LCD_SetClipRectMax+0x14>)
 8005d96:	6819      	ldr	r1, [r3, #0]
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <LCD_SetClipRectMax+0x18>)
 8005d9a:	7c4a      	ldrb	r2, [r1, #17]
 8005d9c:	3108      	adds	r1, #8
 8005d9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005da2:	68c3      	ldr	r3, [r0, #12]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4718      	bx	r3
 8005da8:	20000080 	.word	0x20000080
 8005dac:	20049cf4 	.word	0x20049cf4

08005db0 <emWin_LCD_Init>:
 8005db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005db2:	f7ff ffef 	bl	8005d94 <LCD_SetClipRectMax>
 8005db6:	f000 f92d 	bl	8006014 <LCD_InitColors>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d144      	bne.n	8005e4a <emWin_LCD_Init+0x9a>
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7ff f9c8 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8005dc8:	9001      	str	r0, [sp, #4]
 8005dca:	b150      	cbz	r0, 8005de2 <emWin_LCD_Init+0x32>
 8005dcc:	68c3      	ldr	r3, [r0, #12]
 8005dce:	210c      	movs	r1, #12
 8005dd0:	a801      	add	r0, sp, #4
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	4798      	blx	r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d034      	beq.n	8005e46 <emWin_LCD_Init+0x96>
 8005ddc:	9801      	ldr	r0, [sp, #4]
 8005dde:	4798      	blx	r3
 8005de0:	4304      	orrs	r4, r0
 8005de2:	3501      	adds	r5, #1
 8005de4:	2d02      	cmp	r5, #2
 8005de6:	d1ec      	bne.n	8005dc2 <emWin_LCD_Init+0x12>
 8005de8:	bb7c      	cbnz	r4, 8005e4a <emWin_LCD_Init+0x9a>
 8005dea:	f000 f96b 	bl	80060c4 <LCD_InitLUT>
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <emWin_LCD_Init+0xa0>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d101      	bne.n	8005dfe <emWin_LCD_Init+0x4e>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e026      	b.n	8005e4c <emWin_LCD_Init+0x9c>
 8005dfe:	2401      	movs	r4, #1
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff f9a9 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8005e06:	9001      	str	r0, [sp, #4]
 8005e08:	b1c8      	cbz	r0, 8005e3e <emWin_LCD_Init+0x8e>
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fba6 	bl	800555c <GUI_SelectLayer>
 8005e10:	2004      	movs	r0, #4
 8005e12:	f7ff fd37 	bl	8005884 <LCD_SetDrawMode>
 8005e16:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4608      	mov	r0, r1
 8005e20:	f7ff fd8e 	bl	8005940 <LCD_FillRect>
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7ff fd2d 	bl	8005884 <LCD_SetDrawMode>
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	210e      	movs	r1, #14
 8005e2e:	a801      	add	r0, sp, #4
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	b108      	cbz	r0, 8005e3e <emWin_LCD_Init+0x8e>
 8005e3a:	9801      	ldr	r0, [sp, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8005e42:	d2dd      	bcs.n	8005e00 <emWin_LCD_Init+0x50>
 8005e44:	e7d9      	b.n	8005dfa <emWin_LCD_Init+0x4a>
 8005e46:	2001      	movs	r0, #1
 8005e48:	e000      	b.n	8005e4c <emWin_LCD_Init+0x9c>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	b003      	add	sp, #12
 8005e4e:	bd30      	pop	{r4, r5, pc}
 8005e50:	2000007c 	.word	0x2000007c

08005e54 <LCD_Color2Index>:
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <LCD_Color2Index+0x14>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	7c5a      	ldrb	r2, [r3, #17]
 8005e5a:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <LCD_Color2Index+0x18>)
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4718      	bx	r3
 8005e66:	bf00      	nop
 8005e68:	20000080 	.word	0x20000080
 8005e6c:	20049cf4 	.word	0x20049cf4

08005e70 <LCD_Index2Color>:
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <LCD_Index2Color+0x14>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	7c5a      	ldrb	r2, [r3, #17]
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <LCD_Index2Color+0x18>)
 8005e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4718      	bx	r3
 8005e82:	bf00      	nop
 8005e84:	20000080 	.word	0x20000080
 8005e88:	20049cf4 	.word	0x20049cf4

08005e8c <LCD_SetColorIndex>:
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <LCD_SetColorIndex+0x14>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	7c1a      	ldrb	r2, [r3, #16]
 8005e92:	0752      	lsls	r2, r2, #29
 8005e94:	bf4c      	ite	mi
 8005e96:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8005e98:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8005e9a:	6018      	str	r0, [r3, #0]
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000080 	.word	0x20000080

08005ea4 <_SetColor>:
 8005ea4:	b508      	push	{r3, lr}
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <_SetColor+0x1c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eac:	4281      	cmp	r1, r0
 8005eae:	d006      	beq.n	8005ebe <_SetColor+0x1a>
 8005eb0:	6318      	str	r0, [r3, #48]	; 0x30
 8005eb2:	f7ff ffcf 	bl	8005e54 <LCD_Color2Index>
 8005eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eba:	f7ff bfe7 	b.w	8005e8c <LCD_SetColorIndex>
 8005ebe:	bd08      	pop	{r3, pc}
 8005ec0:	20000080 	.word	0x20000080

08005ec4 <LCD_SetBkColorIndex>:
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <LCD_SetBkColorIndex+0x14>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	7c1a      	ldrb	r2, [r3, #16]
 8005eca:	0752      	lsls	r2, r2, #29
 8005ecc:	bf4c      	ite	mi
 8005ece:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8005ed0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000080 	.word	0x20000080

08005edc <_SetBkColor>:
 8005edc:	b508      	push	{r3, lr}
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <_SetBkColor+0x1c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ee4:	4281      	cmp	r1, r0
 8005ee6:	d006      	beq.n	8005ef6 <_SetBkColor+0x1a>
 8005ee8:	6358      	str	r0, [r3, #52]	; 0x34
 8005eea:	f7ff ffb3 	bl	8005e54 <LCD_Color2Index>
 8005eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005ef2:	f7ff bfe7 	b.w	8005ec4 <LCD_SetBkColorIndex>
 8005ef6:	bd08      	pop	{r3, pc}
 8005ef8:	20000080 	.word	0x20000080

08005efc <LCD_SetBkColor>:
 8005efc:	4b01      	ldr	r3, [pc, #4]	; (8005f04 <LCD_SetBkColor+0x8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4718      	bx	r3
 8005f04:	20000094 	.word	0x20000094

08005f08 <LCD_SetColor>:
 8005f08:	4b01      	ldr	r3, [pc, #4]	; (8005f10 <LCD_SetColor+0x8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4718      	bx	r3
 8005f10:	20000094 	.word	0x20000094

08005f14 <LCD_AA_MixColors16>:
 8005f14:	0e0b      	lsrs	r3, r1, #24
 8005f16:	b510      	push	{r4, lr}
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <LCD_AA_MixColors16+0x3c>)
 8005f1a:	d110      	bne.n	8005f3e <LCD_AA_MixColors16+0x2a>
 8005f1c:	0e03      	lsrs	r3, r0, #24
 8005f1e:	2bff      	cmp	r3, #255	; 0xff
 8005f20:	d108      	bne.n	8005f34 <LCD_AA_MixColors16+0x20>
 8005f22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8005f2c:	4303      	orrs	r3, r0
 8005f2e:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 8005f32:	bd10      	pop	{r4, pc}
 8005f34:	b91b      	cbnz	r3, 8005f3e <LCD_AA_MixColors16+0x2a>
 8005f36:	6862      	ldr	r2, [r4, #4]
 8005f38:	ea41 0002 	orr.w	r0, r1, r2
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8005f42:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <LCD_AA_MixColors16+0x40>)
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4798      	blx	r3
 8005f4a:	6861      	ldr	r1, [r4, #4]
 8005f4c:	4308      	orrs	r0, r1
 8005f4e:	bd10      	pop	{r4, pc}
 8005f50:	20000098 	.word	0x20000098
 8005f54:	20000084 	.word	0x20000084

08005f58 <LCD_SetPixelAA4_Trans>:
 8005f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4616      	mov	r6, r2
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d040      	beq.n	8005fe8 <LCD_SetPixelAA4_Trans+0x90>
 8005f66:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005ff4 <LCD_SetPixelAA4_Trans+0x9c>
 8005f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f6e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8005f72:	4291      	cmp	r1, r2
 8005f74:	db38      	blt.n	8005fe8 <LCD_SetPixelAA4_Trans+0x90>
 8005f76:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	dc34      	bgt.n	8005fe8 <LCD_SetPixelAA4_Trans+0x90>
 8005f7e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005f82:	4290      	cmp	r0, r2
 8005f84:	db30      	blt.n	8005fe8 <LCD_SetPixelAA4_Trans+0x90>
 8005f86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005f8a:	4290      	cmp	r0, r2
 8005f8c:	dc2c      	bgt.n	8005fe8 <LCD_SetPixelAA4_Trans+0x90>
 8005f8e:	2e0e      	cmp	r6, #14
 8005f90:	4f16      	ldr	r7, [pc, #88]	; (8005fec <LCD_SetPixelAA4_Trans+0x94>)
 8005f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f94:	d909      	bls.n	8005faa <LCD_SetPixelAA4_Trans+0x52>
 8005f96:	7c5b      	ldrb	r3, [r3, #17]
 8005f98:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8005f9c:	68c3      	ldr	r3, [r0, #12]
 8005f9e:	699e      	ldr	r6, [r3, #24]
 8005fa0:	6813      	ldr	r3, [r2, #0]
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	46b4      	mov	ip, r6
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	e01b      	b.n	8005fe2 <LCD_SetPixelAA4_Trans+0x8a>
 8005faa:	6810      	ldr	r0, [r2, #0]
 8005fac:	f7ff ff60 	bl	8005e70 <LCD_Index2Color>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4681      	mov	r9, r0
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 fa09 	bl	80063cc <LCD_GetPixelColor>
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <LCD_SetPixelAA4_Trans+0x98>)
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4648      	mov	r0, r9
 8005fc4:	4798      	blx	r3
 8005fc6:	f7ff ff45 	bl	8005e54 <LCD_Color2Index>
 8005fca:	f8d8 3000 	ldr.w	r3, [r8]
 8005fce:	462a      	mov	r2, r5
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	7c5b      	ldrb	r3, [r3, #17]
 8005fd4:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8005fd8:	68f3      	ldr	r3, [r6, #12]
 8005fda:	699f      	ldr	r7, [r3, #24]
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	46bc      	mov	ip, r7
 8005fe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe6:	4760      	bx	ip
 8005fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fec:	20049cf4 	.word	0x20049cf4
 8005ff0:	20000098 	.word	0x20000098
 8005ff4:	20000080 	.word	0x20000080

08005ff8 <_OnExit>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4c04      	ldr	r4, [pc, #16]	; (800600c <_OnExit+0x14>)
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	f7fe fb8b 	bl	8004718 <GUI_ALLOC_FreeFixedBlock>
 8006002:	2300      	movs	r3, #0
 8006004:	4a02      	ldr	r2, [pc, #8]	; (8006010 <_OnExit+0x18>)
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	bd10      	pop	{r4, pc}
 800600c:	20049d0c 	.word	0x20049d0c
 8006010:	20049b80 	.word	0x20049b80

08006014 <LCD_InitColors>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d0a      	ldr	r5, [pc, #40]	; (8006040 <LCD_InitColors+0x2c>)
 8006018:	682c      	ldr	r4, [r5, #0]
 800601a:	b964      	cbnz	r4, 8006036 <LCD_InitColors+0x22>
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <LCD_InitColors+0x30>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	0080      	lsls	r0, r0, #2
 8006022:	f7fe fc51 	bl	80048c8 <GUI_ALLOC_GetFixedBlock>
 8006026:	6028      	str	r0, [r5, #0]
 8006028:	b138      	cbz	r0, 800603a <LCD_InitColors+0x26>
 800602a:	4807      	ldr	r0, [pc, #28]	; (8006048 <LCD_InitColors+0x34>)
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <LCD_InitColors+0x38>)
 800602e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006032:	f7ff f86b 	bl	800510c <GUI__RegisterExit>
 8006036:	2000      	movs	r0, #0
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	2001      	movs	r0, #1
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	20049d0c 	.word	0x20049d0c
 8006044:	200000b0 	.word	0x200000b0
 8006048:	20049b80 	.word	0x20049b80
 800604c:	08005ff9 	.word	0x08005ff9

08006050 <LCD_GetpPalConvTableUncached>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	b318      	cbz	r0, 80060a0 <LCD_GetpPalConvTableUncached+0x50>
 8006058:	6887      	ldr	r7, [r0, #8]
 800605a:	b31f      	cbz	r7, 80060a4 <LCD_GetpPalConvTableUncached+0x54>
 800605c:	4d14      	ldr	r5, [pc, #80]	; (80060b0 <LCD_GetpPalConvTableUncached+0x60>)
 800605e:	6828      	ldr	r0, [r5, #0]
 8006060:	b320      	cbz	r0, 80060ac <LCD_GetpPalConvTableUncached+0x5c>
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006068:	dc1f      	bgt.n	80060aa <LCD_GetpPalConvTableUncached+0x5a>
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <LCD_GetpPalConvTableUncached+0x64>)
 800606c:	2600      	movs	r6, #0
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	bfa8      	it	ge
 8006074:	461a      	movge	r2, r3
 8006076:	4690      	mov	r8, r2
 8006078:	4546      	cmp	r6, r8
 800607a:	da09      	bge.n	8006090 <LCD_GetpPalConvTableUncached+0x40>
 800607c:	f8d5 9000 	ldr.w	r9, [r5]
 8006080:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8006084:	f7ff fee6 	bl	8005e54 <LCD_Color2Index>
 8006088:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 800608c:	3601      	adds	r6, #1
 800608e:	e7f3      	b.n	8006078 <LCD_GetpPalConvTableUncached+0x28>
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <LCD_GetpPalConvTableUncached+0x68>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	b10b      	cbz	r3, 800609a <LCD_GetpPalConvTableUncached+0x4a>
 8006096:	4620      	mov	r0, r4
 8006098:	4798      	blx	r3
 800609a:	6828      	ldr	r0, [r5, #0]
 800609c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a4:	4638      	mov	r0, r7
 80060a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060aa:	2000      	movs	r0, #0
 80060ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b0:	20049d0c 	.word	0x20049d0c
 80060b4:	200000b0 	.word	0x200000b0
 80060b8:	20049b80 	.word	0x20049b80

080060bc <LCD_GetpPalConvTable>:
 80060bc:	f7ff bfc8 	b.w	8006050 <LCD_GetpPalConvTableUncached>

080060c0 <LCD_GetpPalConvTableBM>:
 80060c0:	f7ff bfc6 	b.w	8006050 <LCD_GetpPalConvTableUncached>

080060c4 <LCD_InitLUT>:
 80060c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4e1d      	ldr	r6, [pc, #116]	; (8006140 <LCD_InitLUT+0x7c>)
 80060ca:	f000 f942 	bl	8006352 <LCD_GetNumLayers>
 80060ce:	2400      	movs	r4, #0
 80060d0:	4680      	mov	r8, r0
 80060d2:	46b1      	mov	r9, r6
 80060d4:	f8df a070 	ldr.w	sl, [pc, #112]	; 8006148 <LCD_InitLUT+0x84>
 80060d8:	4544      	cmp	r4, r8
 80060da:	da2d      	bge.n	8006138 <LCD_InitLUT+0x74>
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff f83b 	bl	8005158 <GUI_DEVICE__GetpDriver>
 80060e2:	b338      	cbz	r0, 8006134 <LCD_InitLUT+0x70>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f893 b011 	ldrb.w	fp, [r3, #17]
 80060ec:	745c      	strb	r4, [r3, #17]
 80060ee:	f000 f863 	bl	80061b8 <LCD_GetBitsPerPixelEx>
 80060f2:	2808      	cmp	r0, #8
 80060f4:	dd04      	ble.n	8006100 <LCD_InitLUT+0x3c>
 80060f6:	f8d9 3000 	ldr.w	r3, [r9]
 80060fa:	f883 b011 	strb.w	fp, [r3, #17]
 80060fe:	e019      	b.n	8006134 <LCD_InitLUT+0x70>
 8006100:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <LCD_InitLUT+0x80>)
 8006108:	429a      	cmp	r2, r3
 800610a:	d0f4      	beq.n	80060f6 <LCD_InitLUT+0x32>
 800610c:	4620      	mov	r0, r4
 800610e:	2500      	movs	r5, #0
 8006110:	f000 f855 	bl	80061be <LCD_GetNumColorsEx>
 8006114:	4603      	mov	r3, r0
 8006116:	429d      	cmp	r5, r3
 8006118:	daed      	bge.n	80060f6 <LCD_InitLUT+0x32>
 800611a:	b2ef      	uxtb	r7, r5
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	3501      	adds	r5, #1
 8006120:	4638      	mov	r0, r7
 8006122:	f7ff fea5 	bl	8005e70 <LCD_Index2Color>
 8006126:	4639      	mov	r1, r7
 8006128:	4602      	mov	r2, r0
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f9a7 	bl	800647e <LCD_SetLUTEntryEx>
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	e7f0      	b.n	8006116 <LCD_InitLUT+0x52>
 8006134:	3401      	adds	r4, #1
 8006136:	e7cf      	b.n	80060d8 <LCD_InitLUT+0x14>
 8006138:	b003      	add	sp, #12
 800613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613e:	bf00      	nop
 8006140:	20000080 	.word	0x20000080
 8006144:	0800e600 	.word	0x0800e600
 8006148:	20049cf4 	.word	0x20049cf4

0800614c <LCD_GetBkColorIndex>:
 800614c:	4b02      	ldr	r3, [pc, #8]	; (8006158 <LCD_GetBkColorIndex+0xc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000080 	.word	0x20000080

0800615c <LCD_GetColorIndex>:
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <LCD_GetColorIndex+0xc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000080 	.word	0x20000080

0800616c <_GetDevProp>:
 800616c:	2801      	cmp	r0, #1
 800616e:	b510      	push	{r4, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	dc08      	bgt.n	8006186 <_GetDevProp+0x1a>
 8006174:	f7fe fff0 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006178:	b128      	cbz	r0, 8006186 <_GetDevProp+0x1a>
 800617a:	68c3      	ldr	r3, [r0, #12]
 800617c:	4621      	mov	r1, r4
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	4718      	bx	r3
 8006186:	2000      	movs	r0, #0
 8006188:	bd10      	pop	{r4, pc}

0800618a <_GetMaxValue>:
 800618a:	b538      	push	{r3, r4, r5, lr}
 800618c:	4601      	mov	r1, r0
 800618e:	4605      	mov	r5, r0
 8006190:	2001      	movs	r0, #1
 8006192:	f7ff ffeb 	bl	800616c <_GetDevProp>
 8006196:	4604      	mov	r4, r0
 8006198:	4629      	mov	r1, r5
 800619a:	2000      	movs	r0, #0
 800619c:	f7ff ffe6 	bl	800616c <_GetDevProp>
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	bfb8      	it	lt
 80061a4:	4620      	movlt	r0, r4
 80061a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80061aa:	bd38      	pop	{r3, r4, r5, pc}

080061ac <LCD_GetXSizeEx>:
 80061ac:	2101      	movs	r1, #1
 80061ae:	f7ff bfdd 	b.w	800616c <_GetDevProp>

080061b2 <LCD_GetYSizeEx>:
 80061b2:	2102      	movs	r1, #2
 80061b4:	f7ff bfda 	b.w	800616c <_GetDevProp>

080061b8 <LCD_GetBitsPerPixelEx>:
 80061b8:	2108      	movs	r1, #8
 80061ba:	f7ff bfd7 	b.w	800616c <_GetDevProp>

080061be <LCD_GetNumColorsEx>:
 80061be:	2109      	movs	r1, #9
 80061c0:	f7ff bfd4 	b.w	800616c <_GetDevProp>

080061c4 <LCD_GetMirrorXEx>:
 80061c4:	210c      	movs	r1, #12
 80061c6:	f7ff bfd1 	b.w	800616c <_GetDevProp>

080061ca <LCD_GetMirrorYEx>:
 80061ca:	210d      	movs	r1, #13
 80061cc:	f7ff bfce 	b.w	800616c <_GetDevProp>

080061d0 <LCD_GetSwapXYEx>:
 80061d0:	210e      	movs	r1, #14
 80061d2:	f7ff bfcb 	b.w	800616c <_GetDevProp>
	...

080061d8 <LCD_GetXSize>:
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <LCD_GetXSize+0xc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	7c58      	ldrb	r0, [r3, #17]
 80061de:	f7ff bfe5 	b.w	80061ac <LCD_GetXSizeEx>
 80061e2:	bf00      	nop
 80061e4:	20000080 	.word	0x20000080

080061e8 <LCD_GetYSize>:
 80061e8:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <LCD_GetYSize+0xc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	7c58      	ldrb	r0, [r3, #17]
 80061ee:	f7ff bfe0 	b.w	80061b2 <LCD_GetYSizeEx>
 80061f2:	bf00      	nop
 80061f4:	20000080 	.word	0x20000080

080061f8 <LCD_GetNumColors>:
 80061f8:	4b02      	ldr	r3, [pc, #8]	; (8006204 <LCD_GetNumColors+0xc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	7c58      	ldrb	r0, [r3, #17]
 80061fe:	f7ff bfde 	b.w	80061be <LCD_GetNumColorsEx>
 8006202:	bf00      	nop
 8006204:	20000080 	.word	0x20000080

08006208 <GUI_GetBitsPerPixelEx>:
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <GUI_GetBitsPerPixelEx+0x10>)
 800620a:	2108      	movs	r1, #8
 800620c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006210:	68c3      	ldr	r3, [r0, #12]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	4718      	bx	r3
 8006216:	bf00      	nop
 8006218:	20049cf4 	.word	0x20049cf4

0800621c <LCD_GetDevFunc>:
 800621c:	4b03      	ldr	r3, [pc, #12]	; (800622c <LCD_GetDevFunc+0x10>)
 800621e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8006222:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800622a:	4710      	bx	r2
 800622c:	20049cf4 	.word	0x20049cf4

08006230 <LCD_GetPaletteEx>:
 8006230:	b510      	push	{r4, lr}
 8006232:	f7fe ff91 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006236:	b128      	cbz	r0, 8006244 <LCD_GetPaletteEx+0x14>
 8006238:	68c3      	ldr	r3, [r0, #12]
 800623a:	2102      	movs	r1, #2
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006242:	4718      	bx	r3
 8006244:	bd10      	pop	{r4, pc}
	...

08006248 <LCD_GetPalette>:
 8006248:	4b02      	ldr	r3, [pc, #8]	; (8006254 <LCD_GetPalette+0xc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	7c58      	ldrb	r0, [r3, #17]
 800624e:	f7ff bfef 	b.w	8006230 <LCD_GetPaletteEx>
 8006252:	bf00      	nop
 8006254:	20000080 	.word	0x20000080

08006258 <GUI_GetpfIndex2ColorEx>:
 8006258:	4b02      	ldr	r3, [pc, #8]	; (8006264 <GUI_GetpfIndex2ColorEx+0xc>)
 800625a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	6858      	ldr	r0, [r3, #4]
 8006262:	4770      	bx	lr
 8006264:	20049cf4 	.word	0x20049cf4

08006268 <GUI_GetpfColor2IndexEx>:
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <GUI_GetpfColor2IndexEx+0xc>)
 800626a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	4770      	bx	lr
 8006274:	20049cf4 	.word	0x20049cf4

08006278 <LCD_GetXSizeMax>:
 8006278:	2001      	movs	r0, #1
 800627a:	f7ff bf86 	b.w	800618a <_GetMaxValue>

0800627e <LCD_GetYSizeMax>:
 800627e:	2002      	movs	r0, #2
 8006280:	f7ff bf83 	b.w	800618a <_GetMaxValue>

08006284 <LCD_SetDisplaySize>:
 8006284:	4b01      	ldr	r3, [pc, #4]	; (800628c <LCD_SetDisplaySize+0x8>)
 8006286:	e883 0003 	stmia.w	r3, {r0, r1}
 800628a:	4770      	bx	lr
 800628c:	20049b8c 	.word	0x20049b8c

08006290 <LCD_GetXSizeDisplay>:
 8006290:	4b01      	ldr	r3, [pc, #4]	; (8006298 <LCD_GetXSizeDisplay+0x8>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20049b8c 	.word	0x20049b8c

0800629c <LCD_GetYSizeDisplay>:
 800629c:	4b01      	ldr	r3, [pc, #4]	; (80062a4 <LCD_GetYSizeDisplay+0x8>)
 800629e:	6858      	ldr	r0, [r3, #4]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20049b8c 	.word	0x20049b8c

080062a8 <LCD__GetBPP>:
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d03b      	beq.n	8006324 <LCD__GetBPP+0x7c>
 80062ac:	f030 0301 	bics.w	r3, r0, #1
 80062b0:	d029      	beq.n	8006306 <LCD__GetBPP+0x5e>
 80062b2:	f030 0303 	bics.w	r3, r0, #3
 80062b6:	d028      	beq.n	800630a <LCD__GetBPP+0x62>
 80062b8:	f030 0307 	bics.w	r3, r0, #7
 80062bc:	d027      	beq.n	800630e <LCD__GetBPP+0x66>
 80062be:	f030 030f 	bics.w	r3, r0, #15
 80062c2:	d026      	beq.n	8006312 <LCD__GetBPP+0x6a>
 80062c4:	f030 031f 	bics.w	r3, r0, #31
 80062c8:	d025      	beq.n	8006316 <LCD__GetBPP+0x6e>
 80062ca:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80062ce:	d024      	beq.n	800631a <LCD__GetBPP+0x72>
 80062d0:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	b30b      	cbz	r3, 800631e <LCD__GetBPP+0x76>
 80062da:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80062de:	f023 030f 	bic.w	r3, r3, #15
 80062e2:	b1e3      	cbz	r3, 800631e <LCD__GetBPP+0x76>
 80062e4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80062e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ec:	b1bb      	cbz	r3, 800631e <LCD__GetBPP+0x76>
 80062ee:	0c03      	lsrs	r3, r0, #16
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	b1a3      	cbz	r3, 800631e <LCD__GetBPP+0x76>
 80062f4:	0c83      	lsrs	r3, r0, #18
 80062f6:	049b      	lsls	r3, r3, #18
 80062f8:	b19b      	cbz	r3, 8006322 <LCD__GetBPP+0x7a>
 80062fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062fe:	bf0c      	ite	eq
 8006300:	2018      	moveq	r0, #24
 8006302:	2020      	movne	r0, #32
 8006304:	4770      	bx	lr
 8006306:	2001      	movs	r0, #1
 8006308:	4770      	bx	lr
 800630a:	2002      	movs	r0, #2
 800630c:	4770      	bx	lr
 800630e:	2003      	movs	r0, #3
 8006310:	4770      	bx	lr
 8006312:	2004      	movs	r0, #4
 8006314:	4770      	bx	lr
 8006316:	2005      	movs	r0, #5
 8006318:	4770      	bx	lr
 800631a:	2008      	movs	r0, #8
 800631c:	4770      	bx	lr
 800631e:	2010      	movs	r0, #16
 8006320:	4770      	bx	lr
 8006322:	2012      	movs	r0, #18
 8006324:	4770      	bx	lr

08006326 <LCD__GetBPPDevice>:
 8006326:	b508      	push	{r3, lr}
 8006328:	f7ff ffbe 	bl	80062a8 <LCD__GetBPP>
 800632c:	2801      	cmp	r0, #1
 800632e:	d00f      	beq.n	8006350 <LCD__GetBPPDevice+0x2a>
 8006330:	1e83      	subs	r3, r0, #2
 8006332:	2b06      	cmp	r3, #6
 8006334:	d909      	bls.n	800634a <LCD__GetBPPDevice+0x24>
 8006336:	f1a0 0309 	sub.w	r3, r0, #9
 800633a:	2b07      	cmp	r3, #7
 800633c:	d907      	bls.n	800634e <LCD__GetBPPDevice+0x28>
 800633e:	3811      	subs	r0, #17
 8006340:	280f      	cmp	r0, #15
 8006342:	bf8c      	ite	hi
 8006344:	2000      	movhi	r0, #0
 8006346:	2020      	movls	r0, #32
 8006348:	bd08      	pop	{r3, pc}
 800634a:	2008      	movs	r0, #8
 800634c:	bd08      	pop	{r3, pc}
 800634e:	2010      	movs	r0, #16
 8006350:	bd08      	pop	{r3, pc}

08006352 <LCD_GetNumLayers>:
 8006352:	b510      	push	{r4, lr}
 8006354:	2000      	movs	r0, #0
 8006356:	f7fe feff 	bl	8005158 <GUI_DEVICE__GetpDriver>
 800635a:	1c04      	adds	r4, r0, #0
 800635c:	f04f 0001 	mov.w	r0, #1
 8006360:	bf18      	it	ne
 8006362:	2401      	movne	r4, #1
 8006364:	f7fe fef8 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006368:	b100      	cbz	r0, 800636c <LCD_GetNumLayers+0x1a>
 800636a:	3401      	adds	r4, #1
 800636c:	4620      	mov	r0, r4
 800636e:	bd10      	pop	{r4, pc}

08006370 <LCD_GetPixelIndex>:
 8006370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006372:	4f14      	ldr	r7, [pc, #80]	; (80063c4 <LCD_GetPixelIndex+0x54>)
 8006374:	4604      	mov	r4, r0
 8006376:	4e14      	ldr	r6, [pc, #80]	; (80063c8 <LCD_GetPixelIndex+0x58>)
 8006378:	460d      	mov	r5, r1
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4669      	mov	r1, sp
 800637e:	7c5b      	ldrb	r3, [r3, #17]
 8006380:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8006384:	68c3      	ldr	r3, [r0, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	4798      	blx	r3
 800638a:	f9bd 3000 	ldrsh.w	r3, [sp]
 800638e:	42a3      	cmp	r3, r4
 8006390:	dc15      	bgt.n	80063be <LCD_GetPixelIndex+0x4e>
 8006392:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006396:	429c      	cmp	r4, r3
 8006398:	dc11      	bgt.n	80063be <LCD_GetPixelIndex+0x4e>
 800639a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800639e:	42ab      	cmp	r3, r5
 80063a0:	dc0d      	bgt.n	80063be <LCD_GetPixelIndex+0x4e>
 80063a2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80063a6:	429d      	cmp	r5, r3
 80063a8:	dc09      	bgt.n	80063be <LCD_GetPixelIndex+0x4e>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	462a      	mov	r2, r5
 80063ae:	4621      	mov	r1, r4
 80063b0:	7c5b      	ldrb	r3, [r3, #17]
 80063b2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80063b6:	68c3      	ldr	r3, [r0, #12]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4798      	blx	r3
 80063bc:	e000      	b.n	80063c0 <LCD_GetPixelIndex+0x50>
 80063be:	2000      	movs	r0, #0
 80063c0:	b003      	add	sp, #12
 80063c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c4:	20000080 	.word	0x20000080
 80063c8:	20049cf4 	.word	0x20049cf4

080063cc <LCD_GetPixelColor>:
 80063cc:	b508      	push	{r3, lr}
 80063ce:	f7ff ffcf 	bl	8006370 <LCD_GetPixelIndex>
 80063d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063d6:	f7ff bd4b 	b.w	8005e70 <LCD_Index2Color>
	...

080063dc <LCD_SelectLCD>:
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <LCD_SelectLCD+0x38>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	b510      	push	{r4, lr}
 80063e2:	7c51      	ldrb	r1, [r2, #17]
 80063e4:	461c      	mov	r4, r3
 80063e6:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <LCD_SelectLCD+0x3c>)
 80063e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80063ec:	b140      	cbz	r0, 8006400 <LCD_SelectLCD+0x24>
 80063ee:	68c3      	ldr	r3, [r0, #12]
 80063f0:	b113      	cbz	r3, 80063f8 <LCD_SelectLCD+0x1c>
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d001      	beq.n	80063fc <LCD_SelectLCD+0x20>
 80063f8:	6800      	ldr	r0, [r0, #0]
 80063fa:	e7f7      	b.n	80063ec <LCD_SelectLCD+0x10>
 80063fc:	f7fe fee4 	bl	80051c8 <GUI_DEVICE_Unlink>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	661a      	str	r2, [r3, #96]	; 0x60
 8006406:	f103 0208 	add.w	r2, r3, #8
 800640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640e:	615a      	str	r2, [r3, #20]
 8006410:	f7ff bcc0 	b.w	8005d94 <LCD_SetClipRectMax>
 8006414:	20000080 	.word	0x20000080
 8006418:	20049cf4 	.word	0x20049cf4

0800641c <LCD_GetPosEx>:
 800641c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641e:	460c      	mov	r4, r1
 8006420:	4615      	mov	r5, r2
 8006422:	f7fe fe99 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006426:	9001      	str	r0, [sp, #4]
 8006428:	b908      	cbnz	r0, 800642e <LCD_GetPosEx+0x12>
 800642a:	2001      	movs	r0, #1
 800642c:	e00d      	b.n	800644a <LCD_GetPosEx+0x2e>
 800642e:	68c3      	ldr	r3, [r0, #12]
 8006430:	2104      	movs	r1, #4
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	eb0d 0001 	add.w	r0, sp, r1
 8006438:	4798      	blx	r3
 800643a:	4603      	mov	r3, r0
 800643c:	2800      	cmp	r0, #0
 800643e:	d0f4      	beq.n	800642a <LCD_GetPosEx+0xe>
 8006440:	9801      	ldr	r0, [sp, #4]
 8006442:	462a      	mov	r2, r5
 8006444:	4621      	mov	r1, r4
 8006446:	4798      	blx	r3
 8006448:	2000      	movs	r0, #0
 800644a:	b003      	add	sp, #12
 800644c:	bd30      	pop	{r4, r5, pc}

0800644e <LCD_SetDevFunc>:
 800644e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006450:	460c      	mov	r4, r1
 8006452:	4615      	mov	r5, r2
 8006454:	f7fe fe80 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006458:	9001      	str	r0, [sp, #4]
 800645a:	b908      	cbnz	r0, 8006460 <LCD_SetDevFunc+0x12>
 800645c:	2001      	movs	r0, #1
 800645e:	e00c      	b.n	800647a <LCD_SetDevFunc+0x2c>
 8006460:	68c3      	ldr	r3, [r0, #12]
 8006462:	2116      	movs	r1, #22
 8006464:	a801      	add	r0, sp, #4
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	4798      	blx	r3
 800646a:	4603      	mov	r3, r0
 800646c:	2800      	cmp	r0, #0
 800646e:	d0f5      	beq.n	800645c <LCD_SetDevFunc+0xe>
 8006470:	9801      	ldr	r0, [sp, #4]
 8006472:	462a      	mov	r2, r5
 8006474:	4621      	mov	r1, r4
 8006476:	4798      	blx	r3
 8006478:	2000      	movs	r0, #0
 800647a:	b003      	add	sp, #12
 800647c:	bd30      	pop	{r4, r5, pc}

0800647e <LCD_SetLUTEntryEx>:
 800647e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006480:	460c      	mov	r4, r1
 8006482:	4615      	mov	r5, r2
 8006484:	f7fe fe68 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006488:	9001      	str	r0, [sp, #4]
 800648a:	b908      	cbnz	r0, 8006490 <LCD_SetLUTEntryEx+0x12>
 800648c:	2001      	movs	r0, #1
 800648e:	e00c      	b.n	80064aa <LCD_SetLUTEntryEx+0x2c>
 8006490:	68c3      	ldr	r3, [r0, #12]
 8006492:	2110      	movs	r1, #16
 8006494:	a801      	add	r0, sp, #4
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	d0f5      	beq.n	800648c <LCD_SetLUTEntryEx+0xe>
 80064a0:	9801      	ldr	r0, [sp, #4]
 80064a2:	462a      	mov	r2, r5
 80064a4:	4621      	mov	r1, r4
 80064a6:	4798      	blx	r3
 80064a8:	2000      	movs	r0, #0
 80064aa:	b003      	add	sp, #12
 80064ac:	bd30      	pop	{r4, r5, pc}

080064ae <LCD_SetSizeEx>:
 80064ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064b0:	460c      	mov	r4, r1
 80064b2:	4615      	mov	r5, r2
 80064b4:	f7fe fe50 	bl	8005158 <GUI_DEVICE__GetpDriver>
 80064b8:	9001      	str	r0, [sp, #4]
 80064ba:	b908      	cbnz	r0, 80064c0 <LCD_SetSizeEx+0x12>
 80064bc:	2001      	movs	r0, #1
 80064be:	e00c      	b.n	80064da <LCD_SetSizeEx+0x2c>
 80064c0:	68c3      	ldr	r3, [r0, #12]
 80064c2:	210b      	movs	r1, #11
 80064c4:	a801      	add	r0, sp, #4
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	4798      	blx	r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d0f5      	beq.n	80064bc <LCD_SetSizeEx+0xe>
 80064d0:	9801      	ldr	r0, [sp, #4]
 80064d2:	462a      	mov	r2, r5
 80064d4:	4621      	mov	r1, r4
 80064d6:	4798      	blx	r3
 80064d8:	2000      	movs	r0, #0
 80064da:	b003      	add	sp, #12
 80064dc:	bd30      	pop	{r4, r5, pc}

080064de <LCD_SetVRAMAddrEx>:
 80064de:	b513      	push	{r0, r1, r4, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	f7fe fe39 	bl	8005158 <GUI_DEVICE__GetpDriver>
 80064e6:	9001      	str	r0, [sp, #4]
 80064e8:	b908      	cbnz	r0, 80064ee <LCD_SetVRAMAddrEx+0x10>
 80064ea:	2001      	movs	r0, #1
 80064ec:	e00b      	b.n	8006506 <LCD_SetVRAMAddrEx+0x28>
 80064ee:	68c3      	ldr	r3, [r0, #12]
 80064f0:	2109      	movs	r1, #9
 80064f2:	a801      	add	r0, sp, #4
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	4798      	blx	r3
 80064f8:	4603      	mov	r3, r0
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0f5      	beq.n	80064ea <LCD_SetVRAMAddrEx+0xc>
 80064fe:	9801      	ldr	r0, [sp, #4]
 8006500:	4621      	mov	r1, r4
 8006502:	4798      	blx	r3
 8006504:	2000      	movs	r0, #0
 8006506:	b002      	add	sp, #8
 8006508:	bd10      	pop	{r4, pc}

0800650a <LCD_SetVSizeEx>:
 800650a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	4615      	mov	r5, r2
 8006510:	f7fe fe22 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8006514:	9001      	str	r0, [sp, #4]
 8006516:	b908      	cbnz	r0, 800651c <LCD_SetVSizeEx+0x12>
 8006518:	2001      	movs	r0, #1
 800651a:	e00c      	b.n	8006536 <LCD_SetVSizeEx+0x2c>
 800651c:	68c3      	ldr	r3, [r0, #12]
 800651e:	210a      	movs	r1, #10
 8006520:	a801      	add	r0, sp, #4
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	d0f5      	beq.n	8006518 <LCD_SetVSizeEx+0xe>
 800652c:	9801      	ldr	r0, [sp, #4]
 800652e:	462a      	mov	r2, r5
 8006530:	4621      	mov	r1, r4
 8006532:	4798      	blx	r3
 8006534:	2000      	movs	r0, #0
 8006536:	b003      	add	sp, #12
 8006538:	bd30      	pop	{r4, r5, pc}
	...

0800653c <LCD_UpdateColorIndices>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4c07      	ldr	r4, [pc, #28]	; (800655c <LCD_UpdateColorIndices+0x20>)
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006544:	f7ff fc86 	bl	8005e54 <LCD_Color2Index>
 8006548:	f7ff fca0 	bl	8005e8c <LCD_SetColorIndex>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006550:	f7ff fc80 	bl	8005e54 <LCD_Color2Index>
 8006554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006558:	f7ff bcb4 	b.w	8005ec4 <LCD_SetBkColorIndex>
 800655c:	20000080 	.word	0x20000080

08006560 <_GetRect>:
 8006560:	6882      	ldr	r2, [r0, #8]
 8006562:	2300      	movs	r3, #0
 8006564:	800b      	strh	r3, [r1, #0]
 8006566:	804b      	strh	r3, [r1, #2]
 8006568:	6993      	ldr	r3, [r2, #24]
 800656a:	3b01      	subs	r3, #1
 800656c:	808b      	strh	r3, [r1, #4]
 800656e:	69d3      	ldr	r3, [r2, #28]
 8006570:	3b01      	subs	r3, #1
 8006572:	80cb      	strh	r3, [r1, #6]
 8006574:	4770      	bx	lr

08006576 <_SetPixelIndex>:
 8006576:	b510      	push	{r4, lr}
 8006578:	6884      	ldr	r4, [r0, #8]
 800657a:	6a20      	ldr	r0, [r4, #32]
 800657c:	fb00 1202 	mla	r2, r0, r2, r1
 8006580:	6821      	ldr	r1, [r4, #0]
 8006582:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8006586:	bd10      	pop	{r4, pc}

08006588 <_GetPixelIndex>:
 8006588:	6880      	ldr	r0, [r0, #8]
 800658a:	6a03      	ldr	r3, [r0, #32]
 800658c:	fb03 1202 	mla	r2, r3, r2, r1
 8006590:	6803      	ldr	r3, [r0, #0]
 8006592:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006596:	4770      	bx	lr

08006598 <_XorPixel>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	4616      	mov	r6, r2
 80065a2:	f7ff fff1 	bl	8006588 <_GetPixelIndex>
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	4607      	mov	r7, r0
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4798      	blx	r3
 80065ae:	4632      	mov	r2, r6
 80065b0:	ea87 0300 	eor.w	r3, r7, r0
 80065b4:	4629      	mov	r1, r5
 80065b6:	4620      	mov	r0, r4
 80065b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	f7ff bfdb 	b.w	8006576 <_SetPixelIndex>

080065c0 <_GetDevProp>:
 80065c0:	3901      	subs	r1, #1
 80065c2:	6883      	ldr	r3, [r0, #8]
 80065c4:	290d      	cmp	r1, #13
 80065c6:	d814      	bhi.n	80065f2 <_GetDevProp+0x32>
 80065c8:	e8df f001 	tbb	[pc, r1]
 80065cc:	0f0d0b09 	.word	0x0f0d0b09
 80065d0:	16131313 	.word	0x16131313
 80065d4:	07111107 	.word	0x07111107
 80065d8:	0707      	.short	0x0707
 80065da:	2000      	movs	r0, #0
 80065dc:	4770      	bx	lr
 80065de:	6918      	ldr	r0, [r3, #16]
 80065e0:	4770      	bx	lr
 80065e2:	6958      	ldr	r0, [r3, #20]
 80065e4:	4770      	bx	lr
 80065e6:	6998      	ldr	r0, [r3, #24]
 80065e8:	4770      	bx	lr
 80065ea:	69d8      	ldr	r0, [r3, #28]
 80065ec:	4770      	bx	lr
 80065ee:	2001      	movs	r0, #1
 80065f0:	4770      	bx	lr
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f6:	4770      	bx	lr
 80065f8:	2010      	movs	r0, #16
 80065fa:	4770      	bx	lr

080065fc <_GetDevData>:
 80065fc:	2901      	cmp	r1, #1
 80065fe:	4802      	ldr	r0, [pc, #8]	; (8006608 <_GetDevData+0xc>)
 8006600:	bf18      	it	ne
 8006602:	2000      	movne	r0, #0
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	0800e584 	.word	0x0800e584

0800660c <_ReadRect>:
 800660c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006610:	6886      	ldr	r6, [r0, #8]
 8006612:	9d07      	ldr	r5, [sp, #28]
 8006614:	6a30      	ldr	r0, [r6, #32]
 8006616:	6836      	ldr	r6, [r6, #0]
 8006618:	0047      	lsls	r7, r0, #1
 800661a:	fb00 1002 	mla	r0, r0, r2, r1
 800661e:	9c08      	ldr	r4, [sp, #32]
 8006620:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8006624:	07c8      	lsls	r0, r1, #31
 8006626:	1a41      	subs	r1, r0, r1
 8006628:	18c8      	adds	r0, r1, r3
 800662a:	3301      	adds	r3, #1
 800662c:	4419      	add	r1, r3
 800662e:	0040      	lsls	r0, r0, #1
 8006630:	2300      	movs	r3, #0
 8006632:	0049      	lsls	r1, r1, #1
 8006634:	eb03 0c06 	add.w	ip, r3, r6
 8006638:	f1a4 0e02 	sub.w	lr, r4, #2
 800663c:	eb04 0800 	add.w	r8, r4, r0
 8006640:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8006644:	f82e 9f02 	strh.w	r9, [lr, #2]!
 8006648:	45c6      	cmp	lr, r8
 800664a:	d1f9      	bne.n	8006640 <_ReadRect+0x34>
 800664c:	3201      	adds	r2, #1
 800664e:	440c      	add	r4, r1
 8006650:	443b      	add	r3, r7
 8006652:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 8006656:	45ae      	cmp	lr, r5
 8006658:	dbec      	blt.n	8006634 <_ReadRect+0x28>
 800665a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006660 <_GetDevFunc>:
 8006660:	3901      	subs	r1, #1
 8006662:	2928      	cmp	r1, #40	; 0x28
 8006664:	d848      	bhi.n	80066f8 <_GetDevFunc+0x98>
 8006666:	e8df f001 	tbb	[pc, r1]
 800666a:	1f45      	.short	0x1f45
 800666c:	21471d1b 	.word	0x21471d1b
 8006670:	17494747 	.word	0x17494747
 8006674:	25472319 	.word	0x25472319
 8006678:	47474727 	.word	0x47474727
 800667c:	332d2b29 	.word	0x332d2b29
 8006680:	47354747 	.word	0x47354747
 8006684:	47474747 	.word	0x47474747
 8006688:	312f3947 	.word	0x312f3947
 800668c:	473d4741 	.word	0x473d4741
 8006690:	4747      	.short	0x4747
 8006692:	15          	.byte	0x15
 8006693:	00          	.byte	0x00
 8006694:	481a      	ldr	r0, [pc, #104]	; (8006700 <_GetDevFunc+0xa0>)
 8006696:	4770      	bx	lr
 8006698:	481a      	ldr	r0, [pc, #104]	; (8006704 <_GetDevFunc+0xa4>)
 800669a:	4770      	bx	lr
 800669c:	481a      	ldr	r0, [pc, #104]	; (8006708 <_GetDevFunc+0xa8>)
 800669e:	4770      	bx	lr
 80066a0:	481a      	ldr	r0, [pc, #104]	; (800670c <_GetDevFunc+0xac>)
 80066a2:	4770      	bx	lr
 80066a4:	481a      	ldr	r0, [pc, #104]	; (8006710 <_GetDevFunc+0xb0>)
 80066a6:	4770      	bx	lr
 80066a8:	481a      	ldr	r0, [pc, #104]	; (8006714 <_GetDevFunc+0xb4>)
 80066aa:	4770      	bx	lr
 80066ac:	481a      	ldr	r0, [pc, #104]	; (8006718 <_GetDevFunc+0xb8>)
 80066ae:	4770      	bx	lr
 80066b0:	481a      	ldr	r0, [pc, #104]	; (800671c <_GetDevFunc+0xbc>)
 80066b2:	4770      	bx	lr
 80066b4:	481a      	ldr	r0, [pc, #104]	; (8006720 <_GetDevFunc+0xc0>)
 80066b6:	4770      	bx	lr
 80066b8:	481a      	ldr	r0, [pc, #104]	; (8006724 <_GetDevFunc+0xc4>)
 80066ba:	4770      	bx	lr
 80066bc:	481a      	ldr	r0, [pc, #104]	; (8006728 <_GetDevFunc+0xc8>)
 80066be:	4770      	bx	lr
 80066c0:	481a      	ldr	r0, [pc, #104]	; (800672c <_GetDevFunc+0xcc>)
 80066c2:	4770      	bx	lr
 80066c4:	481a      	ldr	r0, [pc, #104]	; (8006730 <_GetDevFunc+0xd0>)
 80066c6:	4770      	bx	lr
 80066c8:	481a      	ldr	r0, [pc, #104]	; (8006734 <_GetDevFunc+0xd4>)
 80066ca:	4770      	bx	lr
 80066cc:	481a      	ldr	r0, [pc, #104]	; (8006738 <_GetDevFunc+0xd8>)
 80066ce:	4770      	bx	lr
 80066d0:	481a      	ldr	r0, [pc, #104]	; (800673c <_GetDevFunc+0xdc>)
 80066d2:	4770      	bx	lr
 80066d4:	6803      	ldr	r3, [r0, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066da:	4770      	bx	lr
 80066dc:	6803      	ldr	r3, [r0, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066e2:	4770      	bx	lr
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80066ea:	4770      	bx	lr
 80066ec:	6803      	ldr	r3, [r0, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80066f2:	4770      	bx	lr
 80066f4:	4812      	ldr	r0, [pc, #72]	; (8006740 <_GetDevFunc+0xe0>)
 80066f6:	4770      	bx	lr
 80066f8:	2000      	movs	r0, #0
 80066fa:	4770      	bx	lr
 80066fc:	4811      	ldr	r0, [pc, #68]	; (8006744 <_GetDevFunc+0xe4>)
 80066fe:	4770      	bx	lr
 8006700:	08007125 	.word	0x08007125
 8006704:	08007333 	.word	0x08007333
 8006708:	080072f1 	.word	0x080072f1
 800670c:	080071f7 	.word	0x080071f7
 8006710:	08007109 	.word	0x08007109
 8006714:	080071a5 	.word	0x080071a5
 8006718:	0800717d 	.word	0x0800717d
 800671c:	08007163 	.word	0x08007163
 8006720:	08006795 	.word	0x08006795
 8006724:	0800678b 	.word	0x0800678b
 8006728:	08006775 	.word	0x08006775
 800672c:	0800675f 	.word	0x0800675f
 8006730:	08006749 	.word	0x08006749
 8006734:	080070a5 	.word	0x080070a5
 8006738:	0800713d 	.word	0x0800713d
 800673c:	08007057 	.word	0x08007057
 8006740:	0800660d 	.word	0x0800660d
 8006744:	080071cd 	.word	0x080071cd

08006748 <_SetChroma>:
 8006748:	b507      	push	{r0, r1, r2, lr}
 800674a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800674e:	466a      	mov	r2, sp
 8006750:	210d      	movs	r1, #13
 8006752:	6980      	ldr	r0, [r0, #24]
 8006754:	f7fd fa52 	bl	8003bfc <LCD_X_DisplayDriver>
 8006758:	b003      	add	sp, #12
 800675a:	f85d fb04 	ldr.w	pc, [sp], #4

0800675e <_SetChromaMode>:
 800675e:	b507      	push	{r0, r1, r2, lr}
 8006760:	aa02      	add	r2, sp, #8
 8006762:	6980      	ldr	r0, [r0, #24]
 8006764:	f842 1d04 	str.w	r1, [r2, #-4]!
 8006768:	210c      	movs	r1, #12
 800676a:	f7fd fa47 	bl	8003bfc <LCD_X_DisplayDriver>
 800676e:	b003      	add	sp, #12
 8006770:	f85d fb04 	ldr.w	pc, [sp], #4

08006774 <_SetAlphaMode>:
 8006774:	b507      	push	{r0, r1, r2, lr}
 8006776:	aa02      	add	r2, sp, #8
 8006778:	6980      	ldr	r0, [r0, #24]
 800677a:	f842 1d04 	str.w	r1, [r2, #-4]!
 800677e:	210b      	movs	r1, #11
 8006780:	f7fd fa3c 	bl	8003bfc <LCD_X_DisplayDriver>
 8006784:	b003      	add	sp, #12
 8006786:	f85d fb04 	ldr.w	pc, [sp], #4

0800678a <_Off>:
 800678a:	2200      	movs	r2, #0
 800678c:	2106      	movs	r1, #6
 800678e:	6980      	ldr	r0, [r0, #24]
 8006790:	f7fd ba34 	b.w	8003bfc <LCD_X_DisplayDriver>

08006794 <_On>:
 8006794:	2200      	movs	r2, #0
 8006796:	2105      	movs	r1, #5
 8006798:	6980      	ldr	r0, [r0, #24]
 800679a:	f7fd ba2f 	b.w	8003bfc <LCD_X_DisplayDriver>

0800679e <_SetOrg>:
 800679e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067a2:	2300      	movs	r3, #0
 80067a4:	4607      	mov	r7, r0
 80067a6:	6884      	ldr	r4, [r0, #8]
 80067a8:	460d      	mov	r5, r1
 80067aa:	6980      	ldr	r0, [r0, #24]
 80067ac:	4616      	mov	r6, r2
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	f7ff fd07 	bl	80061c4 <LCD_GetMirrorXEx>
 80067b6:	4680      	mov	r8, r0
 80067b8:	69b8      	ldr	r0, [r7, #24]
 80067ba:	f7ff fd06 	bl	80061ca <LCD_GetMirrorYEx>
 80067be:	4681      	mov	r9, r0
 80067c0:	69b8      	ldr	r0, [r7, #24]
 80067c2:	f7ff fd05 	bl	80061d0 <LCD_GetSwapXYEx>
 80067c6:	0080      	lsls	r0, r0, #2
 80067c8:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 80067cc:	ea40 0008 	orr.w	r0, r0, r8
 80067d0:	2807      	cmp	r0, #7
 80067d2:	d826      	bhi.n	8006822 <_SetOrg+0x84>
 80067d4:	e8df f000 	tbb	[pc, r0]
 80067d8:	0b0f0408 	.word	0x0b0f0408
 80067dc:	1b1f1519 	.word	0x1b1f1519
 80067e0:	69a3      	ldr	r3, [r4, #24]
 80067e2:	6921      	ldr	r1, [r4, #16]
 80067e4:	1a59      	subs	r1, r3, r1
 80067e6:	1b4d      	subs	r5, r1, r5
 80067e8:	9500      	str	r5, [sp, #0]
 80067ea:	9601      	str	r6, [sp, #4]
 80067ec:	e019      	b.n	8006822 <_SetOrg+0x84>
 80067ee:	69a3      	ldr	r3, [r4, #24]
 80067f0:	6921      	ldr	r1, [r4, #16]
 80067f2:	1a5b      	subs	r3, r3, r1
 80067f4:	1b5d      	subs	r5, r3, r5
 80067f6:	69e3      	ldr	r3, [r4, #28]
 80067f8:	6962      	ldr	r2, [r4, #20]
 80067fa:	9500      	str	r5, [sp, #0]
 80067fc:	1a9a      	subs	r2, r3, r2
 80067fe:	1b96      	subs	r6, r2, r6
 8006800:	e7f3      	b.n	80067ea <_SetOrg+0x4c>
 8006802:	69e3      	ldr	r3, [r4, #28]
 8006804:	6962      	ldr	r2, [r4, #20]
 8006806:	1a9a      	subs	r2, r3, r2
 8006808:	1b96      	subs	r6, r2, r6
 800680a:	9600      	str	r6, [sp, #0]
 800680c:	e008      	b.n	8006820 <_SetOrg+0x82>
 800680e:	69e3      	ldr	r3, [r4, #28]
 8006810:	6962      	ldr	r2, [r4, #20]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	1b9e      	subs	r6, r3, r6
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	6921      	ldr	r1, [r4, #16]
 800681a:	9600      	str	r6, [sp, #0]
 800681c:	1a59      	subs	r1, r3, r1
 800681e:	1b4d      	subs	r5, r1, r5
 8006820:	9501      	str	r5, [sp, #4]
 8006822:	466a      	mov	r2, sp
 8006824:	2103      	movs	r1, #3
 8006826:	69b8      	ldr	r0, [r7, #24]
 8006828:	f7fd f9e8 	bl	8003bfc <LCD_X_DisplayDriver>
 800682c:	b003      	add	sp, #12
 800682e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006834 <_FillRect>:
 8006834:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	6885      	ldr	r5, [r0, #8]
 800683a:	469c      	mov	ip, r3
 800683c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006840:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8006844:	4e6c      	ldr	r6, [pc, #432]	; (80069f8 <_FillRect+0x1c4>)
 8006846:	f1b9 0f00 	cmp.w	r9, #0
 800684a:	d008      	beq.n	800685e <_FillRect+0x2a>
 800684c:	6834      	ldr	r4, [r6, #0]
 800684e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8006850:	6824      	ldr	r4, [r4, #0]
 8006852:	f8cd 8000 	str.w	r8, [sp]
 8006856:	9401      	str	r4, [sp, #4]
 8006858:	6980      	ldr	r0, [r0, #24]
 800685a:	47c8      	blx	r9
 800685c:	e0c8      	b.n	80069f0 <_FillRect+0x1bc>
 800685e:	f8d6 e000 	ldr.w	lr, [r6]
 8006862:	0848      	lsrs	r0, r1, #1
 8006864:	6a2e      	ldr	r6, [r5, #32]
 8006866:	ebc1 0c0c 	rsb	ip, r1, ip
 800686a:	f001 0101 	and.w	r1, r1, #1
 800686e:	1076      	asrs	r6, r6, #1
 8006870:	fb06 0302 	mla	r3, r6, r2, r0
 8006874:	6828      	ldr	r0, [r5, #0]
 8006876:	ebc2 0208 	rsb	r2, r2, r8
 800687a:	f10c 0501 	add.w	r5, ip, #1
 800687e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006882:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8006886:	1c57      	adds	r7, r2, #1
 8006888:	f013 0f01 	tst.w	r3, #1
 800688c:	d03d      	beq.n	800690a <_FillRect+0xd6>
 800688e:	b181      	cbz	r1, 80068b2 <_FillRect+0x7e>
 8006890:	00b1      	lsls	r1, r6, #2
 8006892:	463d      	mov	r5, r7
 8006894:	4604      	mov	r4, r0
 8006896:	b145      	cbz	r5, 80068aa <_FillRect+0x76>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	3d01      	subs	r5, #1
 800689c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80068a0:	f483 037f 	eor.w	r3, r3, #16711680	; 0xff0000
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	440c      	add	r4, r1
 80068a8:	e7f5      	b.n	8006896 <_FillRect+0x62>
 80068aa:	fb01 0107 	mla	r1, r1, r7, r0
 80068ae:	4665      	mov	r5, ip
 80068b0:	3004      	adds	r0, #4
 80068b2:	2d01      	cmp	r5, #1
 80068b4:	dd1b      	ble.n	80068ee <_FillRect+0xba>
 80068b6:	1eab      	subs	r3, r5, #2
 80068b8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80068bc:	463c      	mov	r4, r7
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	fb0e 0202 	mla	r2, lr, r2, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	3301      	adds	r3, #1
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	b174      	cbz	r4, 80068ea <_FillRect+0xb6>
 80068cc:	3c01      	subs	r4, #1
 80068ce:	4628      	mov	r0, r5
 80068d0:	4694      	mov	ip, r2
 80068d2:	f8dc 1000 	ldr.w	r1, [ip]
 80068d6:	3802      	subs	r0, #2
 80068d8:	43c9      	mvns	r1, r1
 80068da:	2801      	cmp	r0, #1
 80068dc:	f84c 1b04 	str.w	r1, [ip], #4
 80068e0:	dcf7      	bgt.n	80068d2 <_FillRect+0x9e>
 80068e2:	18d0      	adds	r0, r2, r3
 80068e4:	ebce 0202 	rsb	r2, lr, r2
 80068e8:	e7ef      	b.n	80068ca <_FillRect+0x96>
 80068ea:	f005 0501 	and.w	r5, r5, #1
 80068ee:	2d01      	cmp	r5, #1
 80068f0:	d17e      	bne.n	80069f0 <_FillRect+0x1bc>
 80068f2:	00b6      	lsls	r6, r6, #2
 80068f4:	2f00      	cmp	r7, #0
 80068f6:	d07b      	beq.n	80069f0 <_FillRect+0x1bc>
 80068f8:	6803      	ldr	r3, [r0, #0]
 80068fa:	3f01      	subs	r7, #1
 80068fc:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8006900:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	4430      	add	r0, r6
 8006908:	e7f4      	b.n	80068f4 <_FillRect+0xc0>
 800690a:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 800690e:	f8d3 e000 	ldr.w	lr, [r3]
 8006912:	ea4f 480e 	mov.w	r8, lr, lsl #16
 8006916:	b171      	cbz	r1, 8006936 <_FillRect+0x102>
 8006918:	00b1      	lsls	r1, r6, #2
 800691a:	463d      	mov	r5, r7
 800691c:	4604      	mov	r4, r0
 800691e:	b135      	cbz	r5, 800692e <_FillRect+0xfa>
 8006920:	8823      	ldrh	r3, [r4, #0]
 8006922:	3d01      	subs	r5, #1
 8006924:	ea43 0308 	orr.w	r3, r3, r8
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	440c      	add	r4, r1
 800692c:	e7f7      	b.n	800691e <_FillRect+0xea>
 800692e:	fb01 0107 	mla	r1, r1, r7, r0
 8006932:	4665      	mov	r5, ip
 8006934:	3004      	adds	r0, #4
 8006936:	2d0f      	cmp	r5, #15
 8006938:	eb08 030e 	add.w	r3, r8, lr
 800693c:	dd2f      	ble.n	800699e <_FillRect+0x16a>
 800693e:	f1a5 0910 	sub.w	r9, r5, #16
 8006942:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006946:	46b8      	mov	r8, r7
 8006948:	ea4f 1419 	mov.w	r4, r9, lsr #4
 800694c:	fb0a 0c02 	mla	ip, sl, r2, r0
 8006950:	4608      	mov	r0, r1
 8006952:	3401      	adds	r4, #1
 8006954:	0164      	lsls	r4, r4, #5
 8006956:	f1b8 0f00 	cmp.w	r8, #0
 800695a:	d01d      	beq.n	8006998 <_FillRect+0x164>
 800695c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006960:	f10c 0120 	add.w	r1, ip, #32
 8006964:	4648      	mov	r0, r9
 8006966:	3810      	subs	r0, #16
 8006968:	f841 3c20 	str.w	r3, [r1, #-32]
 800696c:	f841 3c1c 	str.w	r3, [r1, #-28]
 8006970:	f101 0120 	add.w	r1, r1, #32
 8006974:	f841 3c38 	str.w	r3, [r1, #-56]
 8006978:	f841 3c34 	str.w	r3, [r1, #-52]
 800697c:	f841 3c30 	str.w	r3, [r1, #-48]
 8006980:	f841 3c2c 	str.w	r3, [r1, #-44]
 8006984:	f841 3c28 	str.w	r3, [r1, #-40]
 8006988:	f841 3c24 	str.w	r3, [r1, #-36]
 800698c:	d5eb      	bpl.n	8006966 <_FillRect+0x132>
 800698e:	eb0c 0004 	add.w	r0, ip, r4
 8006992:	ebca 0c0c 	rsb	ip, sl, ip
 8006996:	e7de      	b.n	8006956 <_FillRect+0x122>
 8006998:	f005 050f 	and.w	r5, r5, #15
 800699c:	4601      	mov	r1, r0
 800699e:	2d01      	cmp	r5, #1
 80069a0:	dd1b      	ble.n	80069da <_FillRect+0x1a6>
 80069a2:	1eac      	subs	r4, r5, #2
 80069a4:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 80069a8:	46b8      	mov	r8, r7
 80069aa:	0864      	lsrs	r4, r4, #1
 80069ac:	fb0c 0202 	mla	r2, ip, r2, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	3401      	adds	r4, #1
 80069b4:	00a4      	lsls	r4, r4, #2
 80069b6:	f1b8 0f00 	cmp.w	r8, #0
 80069ba:	d00c      	beq.n	80069d6 <_FillRect+0x1a2>
 80069bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80069c0:	4629      	mov	r1, r5
 80069c2:	4610      	mov	r0, r2
 80069c4:	3902      	subs	r1, #2
 80069c6:	f840 3b04 	str.w	r3, [r0], #4
 80069ca:	2901      	cmp	r1, #1
 80069cc:	dcfa      	bgt.n	80069c4 <_FillRect+0x190>
 80069ce:	1910      	adds	r0, r2, r4
 80069d0:	ebcc 0202 	rsb	r2, ip, r2
 80069d4:	e7ef      	b.n	80069b6 <_FillRect+0x182>
 80069d6:	f005 0501 	and.w	r5, r5, #1
 80069da:	2d01      	cmp	r5, #1
 80069dc:	d108      	bne.n	80069f0 <_FillRect+0x1bc>
 80069de:	00b6      	lsls	r6, r6, #2
 80069e0:	b137      	cbz	r7, 80069f0 <_FillRect+0x1bc>
 80069e2:	8843      	ldrh	r3, [r0, #2]
 80069e4:	3f01      	subs	r7, #1
 80069e6:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 80069ea:	6003      	str	r3, [r0, #0]
 80069ec:	4430      	add	r0, r6
 80069ee:	e7f7      	b.n	80069e0 <_FillRect+0x1ac>
 80069f0:	b002      	add	sp, #8
 80069f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f6:	bf00      	nop
 80069f8:	20000080 	.word	0x20000080

080069fc <_DrawHLine>:
 80069fc:	b507      	push	{r0, r1, r2, lr}
 80069fe:	9200      	str	r2, [sp, #0]
 8006a00:	f7ff ff18 	bl	8006834 <_FillRect>
 8006a04:	b003      	add	sp, #12
 8006a06:	f85d fb04 	ldr.w	pc, [sp], #4

08006a0a <_DrawVLine>:
 8006a0a:	b507      	push	{r0, r1, r2, lr}
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	f7ff ff10 	bl	8006834 <_FillRect>
 8006a14:	b003      	add	sp, #12
 8006a16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006a1c <_DrawBitmap>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	b08b      	sub	sp, #44	; 0x2c
 8006a22:	4683      	mov	fp, r0
 8006a24:	4688      	mov	r8, r1
 8006a26:	6887      	ldr	r7, [r0, #8]
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a2c:	9203      	str	r2, [sp, #12]
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a32:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006a34:	9305      	str	r3, [sp, #20]
 8006a36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006a38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006a3a:	9302      	str	r3, [sp, #8]
 8006a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	2b0f      	cmp	r3, #15
 8006a42:	f200 82f3 	bhi.w	800702c <_DrawBitmap+0x610>
 8006a46:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006a4a:	0023      	.short	0x0023
 8006a4c:	02f10019 	.word	0x02f10019
 8006a50:	02f10010 	.word	0x02f10010
 8006a54:	02f102f1 	.word	0x02f102f1
 8006a58:	02f10210 	.word	0x02f10210
 8006a5c:	02f102f1 	.word	0x02f102f1
 8006a60:	02f102f1 	.word	0x02f102f1
 8006a64:	02f102f1 	.word	0x02f102f1
 8006a68:	02bd      	.short	0x02bd
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9a01      	ldr	r2, [sp, #4]
 8006a6e:	9306      	str	r3, [sp, #24]
 8006a70:	9b02      	ldr	r3, [sp, #8]
 8006a72:	18cb      	adds	r3, r1, r3
 8006a74:	9308      	str	r3, [sp, #32]
 8006a76:	4413      	add	r3, r2
 8006a78:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7a:	e169      	b.n	8006d50 <_DrawBitmap+0x334>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9306      	str	r3, [sp, #24]
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	18cb      	adds	r3, r1, r3
 8006a84:	9308      	str	r3, [sp, #32]
 8006a86:	9a08      	ldr	r2, [sp, #32]
 8006a88:	9b01      	ldr	r3, [sp, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8e:	e0bc      	b.n	8006c0a <_DrawBitmap+0x1ee>
 8006a90:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8006a92:	b126      	cbz	r6, 8006a9e <_DrawBitmap+0x82>
 8006a94:	4ba3      	ldr	r3, [pc, #652]	; (8006d24 <_DrawBitmap+0x308>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	7c1b      	ldrb	r3, [r3, #16]
 8006a9a:	07d9      	lsls	r1, r3, #31
 8006a9c:	d502      	bpl.n	8006aa4 <_DrawBitmap+0x88>
 8006a9e:	f04f 0900 	mov.w	r9, #0
 8006aa2:	e061      	b.n	8006b68 <_DrawBitmap+0x14c>
 8006aa4:	9b05      	ldr	r3, [sp, #20]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	9518      	str	r5, [sp, #96]	; 0x60
 8006aaa:	46b4      	mov	ip, r6
 8006aac:	9317      	str	r3, [sp, #92]	; 0x5c
 8006aae:	9b04      	ldr	r3, [sp, #16]
 8006ab0:	9a03      	ldr	r2, [sp, #12]
 8006ab2:	9316      	str	r3, [sp, #88]	; 0x58
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	9315      	str	r3, [sp, #84]	; 0x54
 8006ab8:	9b02      	ldr	r3, [sp, #8]
 8006aba:	9314      	str	r3, [sp, #80]	; 0x50
 8006abc:	4623      	mov	r3, r4
 8006abe:	6980      	ldr	r0, [r0, #24]
 8006ac0:	b00b      	add	sp, #44	; 0x2c
 8006ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac6:	4760      	bx	ip
 8006ac8:	686b      	ldr	r3, [r5, #4]
 8006aca:	f8db a008 	ldr.w	sl, [fp, #8]
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	9902      	ldr	r1, [sp, #8]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	f8da 2020 	ldr.w	r2, [sl, #32]
 8006ad8:	4441      	add	r1, r8
 8006ada:	444b      	add	r3, r9
 8006adc:	fb02 1303 	mla	r3, r2, r3, r1
 8006ae0:	9a02      	ldr	r2, [sp, #8]
 8006ae2:	4991      	ldr	r1, [pc, #580]	; (8006d28 <_DrawBitmap+0x30c>)
 8006ae4:	f1c2 0708 	rsb	r7, r2, #8
 8006ae8:	7822      	ldrb	r2, [r4, #0]
 8006aea:	5c8e      	ldrb	r6, [r1, r2]
 8006aec:	0059      	lsls	r1, r3, #1
 8006aee:	9a02      	ldr	r2, [sp, #8]
 8006af0:	4116      	asrs	r6, r2
 8006af2:	4a8c      	ldr	r2, [pc, #560]	; (8006d24 <_DrawBitmap+0x308>)
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f002 0203 	and.w	r2, r2, #3
 8006afc:	2a02      	cmp	r2, #2
 8006afe:	d037      	beq.n	8006b70 <_DrawBitmap+0x154>
 8006b00:	2a03      	cmp	r2, #3
 8006b02:	d04e      	beq.n	8006ba2 <_DrawBitmap+0x186>
 8006b04:	2a01      	cmp	r2, #1
 8006b06:	d04c      	beq.n	8006ba2 <_DrawBitmap+0x186>
 8006b08:	682a      	ldr	r2, [r5, #0]
 8006b0a:	9901      	ldr	r1, [sp, #4]
 8006b0c:	9208      	str	r2, [sp, #32]
 8006b0e:	f8da 2000 	ldr.w	r2, [sl]
 8006b12:	9406      	str	r4, [sp, #24]
 8006b14:	9209      	str	r2, [sp, #36]	; 0x24
 8006b16:	42b9      	cmp	r1, r7
 8006b18:	460a      	mov	r2, r1
 8006b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b1c:	bf28      	it	cs
 8006b1e:	463a      	movcs	r2, r7
 8006b20:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8006b24:	4696      	mov	lr, r2
 8006b26:	9808      	ldr	r0, [sp, #32]
 8006b28:	f016 0f01 	tst.w	r6, #1
 8006b2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b30:	4682      	mov	sl, r0
 8006b32:	9807      	ldr	r0, [sp, #28]
 8006b34:	bf18      	it	ne
 8006b36:	4682      	movne	sl, r0
 8006b38:	f1be 0e01 	subs.w	lr, lr, #1
 8006b3c:	f82c ab02 	strh.w	sl, [ip], #2
 8006b40:	d1f1      	bne.n	8006b26 <_DrawBitmap+0x10a>
 8006b42:	1abf      	subs	r7, r7, r2
 8006b44:	4413      	add	r3, r2
 8006b46:	eba1 0102 	sub.w	r1, r1, r2
 8006b4a:	d107      	bne.n	8006b5c <_DrawBitmap+0x140>
 8006b4c:	9a06      	ldr	r2, [sp, #24]
 8006b4e:	2708      	movs	r7, #8
 8006b50:	4875      	ldr	r0, [pc, #468]	; (8006d28 <_DrawBitmap+0x30c>)
 8006b52:	7852      	ldrb	r2, [r2, #1]
 8006b54:	5c86      	ldrb	r6, [r0, r2]
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	3201      	adds	r2, #1
 8006b5a:	9206      	str	r2, [sp, #24]
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d1da      	bne.n	8006b16 <_DrawBitmap+0xfa>
 8006b60:	9b05      	ldr	r3, [sp, #20]
 8006b62:	f109 0901 	add.w	r9, r9, #1
 8006b66:	441c      	add	r4, r3
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	4599      	cmp	r9, r3
 8006b6c:	dbac      	blt.n	8006ac8 <_DrawBitmap+0xac>
 8006b6e:	e25d      	b.n	800702c <_DrawBitmap+0x610>
 8006b70:	460b      	mov	r3, r1
 8006b72:	4620      	mov	r0, r4
 8006b74:	9901      	ldr	r1, [sp, #4]
 8006b76:	07f2      	lsls	r2, r6, #31
 8006b78:	bf42      	ittt	mi
 8006b7a:	f8da 2000 	ldrmi.w	r2, [sl]
 8006b7e:	f8bd e01c 	ldrhmi.w	lr, [sp, #28]
 8006b82:	f822 e003 	strhmi.w	lr, [r2, r3]
 8006b86:	3f01      	subs	r7, #1
 8006b88:	f103 0302 	add.w	r3, r3, #2
 8006b8c:	bf09      	itett	eq
 8006b8e:	7842      	ldrbeq	r2, [r0, #1]
 8006b90:	0876      	lsrne	r6, r6, #1
 8006b92:	4e65      	ldreq	r6, [pc, #404]	; (8006d28 <_DrawBitmap+0x30c>)
 8006b94:	3001      	addeq	r0, #1
 8006b96:	bf04      	itt	eq
 8006b98:	2708      	moveq	r7, #8
 8006b9a:	5cb6      	ldrbeq	r6, [r6, r2]
 8006b9c:	3901      	subs	r1, #1
 8006b9e:	d1ea      	bne.n	8006b76 <_DrawBitmap+0x15a>
 8006ba0:	e7de      	b.n	8006b60 <_DrawBitmap+0x144>
 8006ba2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006ba6:	9106      	str	r1, [sp, #24]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4798      	blx	r3
 8006bac:	9906      	ldr	r1, [sp, #24]
 8006bae:	9a01      	ldr	r2, [sp, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	f016 0f01 	tst.w	r6, #1
 8006bb8:	bf1f      	itttt	ne
 8006bba:	f8da c000 	ldrne.w	ip, [sl]
 8006bbe:	f833 e00c 	ldrhne.w	lr, [r3, ip]
 8006bc2:	ea80 0e0e 	eorne.w	lr, r0, lr
 8006bc6:	f823 e00c 	strhne.w	lr, [r3, ip]
 8006bca:	3f01      	subs	r7, #1
 8006bcc:	f103 0302 	add.w	r3, r3, #2
 8006bd0:	bf09      	itett	eq
 8006bd2:	784e      	ldrbeq	r6, [r1, #1]
 8006bd4:	0876      	lsrne	r6, r6, #1
 8006bd6:	4f54      	ldreq	r7, [pc, #336]	; (8006d28 <_DrawBitmap+0x30c>)
 8006bd8:	3101      	addeq	r1, #1
 8006bda:	bf04      	itt	eq
 8006bdc:	5dbe      	ldrbeq	r6, [r7, r6]
 8006bde:	2708      	moveq	r7, #8
 8006be0:	3a01      	subs	r2, #1
 8006be2:	d1e7      	bne.n	8006bb4 <_DrawBitmap+0x198>
 8006be4:	e7bc      	b.n	8006b60 <_DrawBitmap+0x144>
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	9a03      	ldr	r2, [sp, #12]
 8006bea:	7826      	ldrb	r6, [r4, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	9307      	str	r3, [sp, #28]
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <_DrawBitmap+0x308>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	7c1b      	ldrb	r3, [r3, #16]
 8006bf6:	f013 0303 	ands.w	r3, r3, #3
 8006bfa:	d00b      	beq.n	8006c14 <_DrawBitmap+0x1f8>
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d04c      	beq.n	8006c9a <_DrawBitmap+0x27e>
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	441c      	add	r4, r3
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	3301      	adds	r3, #1
 8006c08:	9306      	str	r3, [sp, #24]
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	9a04      	ldr	r2, [sp, #16]
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	dbe9      	blt.n	8006be6 <_DrawBitmap+0x1ca>
 8006c12:	e20b      	b.n	800702c <_DrawBitmap+0x610>
 8006c14:	9f02      	ldr	r7, [sp, #8]
 8006c16:	46a0      	mov	r8, r4
 8006c18:	9908      	ldr	r1, [sp, #32]
 8006c1a:	b305      	cbz	r5, 8006c5e <_DrawBitmap+0x242>
 8006c1c:	9a01      	ldr	r2, [sp, #4]
 8006c1e:	eb01 0902 	add.w	r9, r1, r2
 8006c22:	f1c7 0303 	rsb	r3, r7, #3
 8006c26:	20c0      	movs	r0, #192	; 0xc0
 8006c28:	3701      	adds	r7, #1
 8006c2a:	f101 0a01 	add.w	sl, r1, #1
 8006c2e:	005a      	lsls	r2, r3, #1
 8006c30:	f1c2 0306 	rsb	r3, r2, #6
 8006c34:	fa40 f303 	asr.w	r3, r0, r3
 8006c38:	4658      	mov	r0, fp
 8006c3a:	4033      	ands	r3, r6
 8006c3c:	40d3      	lsrs	r3, r2
 8006c3e:	9a07      	ldr	r2, [sp, #28]
 8006c40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006c44:	f7ff fc97 	bl	8006576 <_SetPixelIndex>
 8006c48:	2f04      	cmp	r7, #4
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	bf02      	ittt	eq
 8006c4e:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8006c52:	2700      	moveq	r7, #0
 8006c54:	f108 0801 	addeq.w	r8, r8, #1
 8006c58:	45ca      	cmp	sl, r9
 8006c5a:	d1e2      	bne.n	8006c22 <_DrawBitmap+0x206>
 8006c5c:	e7d0      	b.n	8006c00 <_DrawBitmap+0x1e4>
 8006c5e:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8006c62:	f1c7 0203 	rsb	r2, r7, #3
 8006c66:	3701      	adds	r7, #1
 8006c68:	4658      	mov	r0, fp
 8006c6a:	f101 0901 	add.w	r9, r1, #1
 8006c6e:	0052      	lsls	r2, r2, #1
 8006c70:	f1c2 0306 	rsb	r3, r2, #6
 8006c74:	fa4a f303 	asr.w	r3, sl, r3
 8006c78:	4033      	ands	r3, r6
 8006c7a:	40d3      	lsrs	r3, r2
 8006c7c:	9a07      	ldr	r2, [sp, #28]
 8006c7e:	f7ff fc7a 	bl	8006576 <_SetPixelIndex>
 8006c82:	2f04      	cmp	r7, #4
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	4649      	mov	r1, r9
 8006c88:	bf02      	ittt	eq
 8006c8a:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8006c8e:	2700      	moveq	r7, #0
 8006c90:	f108 0801 	addeq.w	r8, r8, #1
 8006c94:	4599      	cmp	r9, r3
 8006c96:	d1e4      	bne.n	8006c62 <_DrawBitmap+0x246>
 8006c98:	e7b2      	b.n	8006c00 <_DrawBitmap+0x1e4>
 8006c9a:	9f02      	ldr	r7, [sp, #8]
 8006c9c:	46a1      	mov	r9, r4
 8006c9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ca2:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 8006ca6:	b355      	cbz	r5, 8006cfe <_DrawBitmap+0x2e2>
 8006ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006caa:	ebc8 0103 	rsb	r1, r8, r3
 8006cae:	f1c7 0303 	rsb	r3, r7, #3
 8006cb2:	0058      	lsls	r0, r3, #1
 8006cb4:	f1c0 0206 	rsb	r2, r0, #6
 8006cb8:	fa4a f202 	asr.w	r2, sl, r2
 8006cbc:	ea02 0306 	and.w	r3, r2, r6
 8006cc0:	40c3      	lsrs	r3, r0
 8006cc2:	d005      	beq.n	8006cd0 <_DrawBitmap+0x2b4>
 8006cc4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006cc8:	4658      	mov	r0, fp
 8006cca:	9a07      	ldr	r2, [sp, #28]
 8006ccc:	f7ff fc53 	bl	8006576 <_SetPixelIndex>
 8006cd0:	3701      	adds	r7, #1
 8006cd2:	2f04      	cmp	r7, #4
 8006cd4:	bf02      	ittt	eq
 8006cd6:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8006cda:	2700      	moveq	r7, #0
 8006cdc:	f109 0901 	addeq.w	r9, r9, #1
 8006ce0:	f1b8 0801 	subs.w	r8, r8, #1
 8006ce4:	d1e0      	bne.n	8006ca8 <_DrawBitmap+0x28c>
 8006ce6:	e78b      	b.n	8006c00 <_DrawBitmap+0x1e4>
 8006ce8:	3701      	adds	r7, #1
 8006cea:	2f04      	cmp	r7, #4
 8006cec:	bf02      	ittt	eq
 8006cee:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8006cf2:	2700      	moveq	r7, #0
 8006cf4:	f109 0901 	addeq.w	r9, r9, #1
 8006cf8:	f1b8 0801 	subs.w	r8, r8, #1
 8006cfc:	d080      	beq.n	8006c00 <_DrawBitmap+0x1e4>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	ebc8 0103 	rsb	r1, r8, r3
 8006d04:	f1c7 0303 	rsb	r3, r7, #3
 8006d08:	0058      	lsls	r0, r3, #1
 8006d0a:	f1c0 0206 	rsb	r2, r0, #6
 8006d0e:	fa4a f202 	asr.w	r2, sl, r2
 8006d12:	ea02 0306 	and.w	r3, r2, r6
 8006d16:	40c3      	lsrs	r3, r0
 8006d18:	d0e6      	beq.n	8006ce8 <_DrawBitmap+0x2cc>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f7ff fc2a 	bl	8006576 <_SetPixelIndex>
 8006d22:	e7e1      	b.n	8006ce8 <_DrawBitmap+0x2cc>
 8006d24:	20000080 	.word	0x20000080
 8006d28:	0800e618 	.word	0x0800e618
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	9a06      	ldr	r2, [sp, #24]
 8006d30:	7826      	ldrb	r6, [r4, #0]
 8006d32:	4413      	add	r3, r2
 8006d34:	9307      	str	r3, [sp, #28]
 8006d36:	4bbb      	ldr	r3, [pc, #748]	; (8007024 <_DrawBitmap+0x608>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	f013 0303 	ands.w	r3, r3, #3
 8006d40:	d00b      	beq.n	8006d5a <_DrawBitmap+0x33e>
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d049      	beq.n	8006dda <_DrawBitmap+0x3be>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	441c      	add	r4, r3
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	9306      	str	r3, [sp, #24]
 8006d50:	9b06      	ldr	r3, [sp, #24]
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	dbe9      	blt.n	8006d2c <_DrawBitmap+0x310>
 8006d58:	e168      	b.n	800702c <_DrawBitmap+0x610>
 8006d5a:	9f02      	ldr	r7, [sp, #8]
 8006d5c:	46a0      	mov	r8, r4
 8006d5e:	9908      	ldr	r1, [sp, #32]
 8006d60:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8006d64:	b1ed      	cbz	r5, 8006da2 <_DrawBitmap+0x386>
 8006d66:	f1c7 0301 	rsb	r3, r7, #1
 8006d6a:	3701      	adds	r7, #1
 8006d6c:	4658      	mov	r0, fp
 8006d6e:	f101 0901 	add.w	r9, r1, #1
 8006d72:	009a      	lsls	r2, r3, #2
 8006d74:	f1c2 0304 	rsb	r3, r2, #4
 8006d78:	fa4a f303 	asr.w	r3, sl, r3
 8006d7c:	4033      	ands	r3, r6
 8006d7e:	40d3      	lsrs	r3, r2
 8006d80:	9a07      	ldr	r2, [sp, #28]
 8006d82:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006d86:	f7ff fbf6 	bl	8006576 <_SetPixelIndex>
 8006d8a:	2f02      	cmp	r7, #2
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	4649      	mov	r1, r9
 8006d90:	bf02      	ittt	eq
 8006d92:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8006d96:	2700      	moveq	r7, #0
 8006d98:	f108 0801 	addeq.w	r8, r8, #1
 8006d9c:	4599      	cmp	r9, r3
 8006d9e:	d1e2      	bne.n	8006d66 <_DrawBitmap+0x34a>
 8006da0:	e7d1      	b.n	8006d46 <_DrawBitmap+0x32a>
 8006da2:	f1c7 0201 	rsb	r2, r7, #1
 8006da6:	3701      	adds	r7, #1
 8006da8:	4658      	mov	r0, fp
 8006daa:	f101 0901 	add.w	r9, r1, #1
 8006dae:	0092      	lsls	r2, r2, #2
 8006db0:	f1c2 0304 	rsb	r3, r2, #4
 8006db4:	fa4a f303 	asr.w	r3, sl, r3
 8006db8:	4033      	ands	r3, r6
 8006dba:	40d3      	lsrs	r3, r2
 8006dbc:	9a07      	ldr	r2, [sp, #28]
 8006dbe:	f7ff fbda 	bl	8006576 <_SetPixelIndex>
 8006dc2:	2f02      	cmp	r7, #2
 8006dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	bf02      	ittt	eq
 8006dca:	f898 6001 	ldrbeq.w	r6, [r8, #1]
 8006dce:	2700      	moveq	r7, #0
 8006dd0:	f108 0801 	addeq.w	r8, r8, #1
 8006dd4:	4599      	cmp	r9, r3
 8006dd6:	d1e4      	bne.n	8006da2 <_DrawBitmap+0x386>
 8006dd8:	e7b5      	b.n	8006d46 <_DrawBitmap+0x32a>
 8006dda:	9f02      	ldr	r7, [sp, #8]
 8006ddc:	46a1      	mov	r9, r4
 8006dde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006de2:	b315      	cbz	r5, 8006e2a <_DrawBitmap+0x40e>
 8006de4:	9a08      	ldr	r2, [sp, #32]
 8006de6:	eb08 0a02 	add.w	sl, r8, r2
 8006dea:	f1c7 0301 	rsb	r3, r7, #1
 8006dee:	ebc8 010a 	rsb	r1, r8, sl
 8006df2:	0098      	lsls	r0, r3, #2
 8006df4:	23f0      	movs	r3, #240	; 0xf0
 8006df6:	f1c0 0204 	rsb	r2, r0, #4
 8006dfa:	fa43 f202 	asr.w	r2, r3, r2
 8006dfe:	ea02 0306 	and.w	r3, r2, r6
 8006e02:	40c3      	lsrs	r3, r0
 8006e04:	d005      	beq.n	8006e12 <_DrawBitmap+0x3f6>
 8006e06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	9a07      	ldr	r2, [sp, #28]
 8006e0e:	f7ff fbb2 	bl	8006576 <_SetPixelIndex>
 8006e12:	3701      	adds	r7, #1
 8006e14:	2f02      	cmp	r7, #2
 8006e16:	bf02      	ittt	eq
 8006e18:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8006e1c:	2700      	moveq	r7, #0
 8006e1e:	f109 0901 	addeq.w	r9, r9, #1
 8006e22:	f1b8 0801 	subs.w	r8, r8, #1
 8006e26:	d1e0      	bne.n	8006dea <_DrawBitmap+0x3ce>
 8006e28:	e78d      	b.n	8006d46 <_DrawBitmap+0x32a>
 8006e2a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	ebc8 0103 	rsb	r1, r8, r3
 8006e34:	f1c7 0301 	rsb	r3, r7, #1
 8006e38:	0098      	lsls	r0, r3, #2
 8006e3a:	f1c0 0204 	rsb	r2, r0, #4
 8006e3e:	fa4a f202 	asr.w	r2, sl, r2
 8006e42:	ea02 0306 	and.w	r3, r2, r6
 8006e46:	40c3      	lsrs	r3, r0
 8006e48:	d003      	beq.n	8006e52 <_DrawBitmap+0x436>
 8006e4a:	9a07      	ldr	r2, [sp, #28]
 8006e4c:	4658      	mov	r0, fp
 8006e4e:	f7ff fb92 	bl	8006576 <_SetPixelIndex>
 8006e52:	3701      	adds	r7, #1
 8006e54:	2f02      	cmp	r7, #2
 8006e56:	bf02      	ittt	eq
 8006e58:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 8006e5c:	2700      	moveq	r7, #0
 8006e5e:	f109 0901 	addeq.w	r9, r9, #1
 8006e62:	f1b8 0801 	subs.w	r8, r8, #1
 8006e66:	d1e2      	bne.n	8006e2e <_DrawBitmap+0x412>
 8006e68:	e76d      	b.n	8006d46 <_DrawBitmap+0x32a>
 8006e6a:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8006e6c:	4b6d      	ldr	r3, [pc, #436]	; (8007024 <_DrawBitmap+0x608>)
 8006e6e:	b926      	cbnz	r6, 8006e7a <_DrawBitmap+0x45e>
 8006e70:	f8d3 c000 	ldr.w	ip, [r3]
 8006e74:	f04f 0e00 	mov.w	lr, #0
 8006e78:	e019      	b.n	8006eae <_DrawBitmap+0x492>
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	7c12      	ldrb	r2, [r2, #16]
 8006e7e:	0792      	lsls	r2, r2, #30
 8006e80:	d4f6      	bmi.n	8006e70 <_DrawBitmap+0x454>
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	d0f4      	beq.n	8006e70 <_DrawBitmap+0x454>
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	46b4      	mov	ip, r6
 8006e8a:	9517      	str	r5, [sp, #92]	; 0x5c
 8006e8c:	9316      	str	r3, [sp, #88]	; 0x58
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	9a03      	ldr	r2, [sp, #12]
 8006e92:	9315      	str	r3, [sp, #84]	; 0x54
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	9314      	str	r3, [sp, #80]	; 0x50
 8006e98:	4623      	mov	r3, r4
 8006e9a:	6980      	ldr	r0, [r0, #24]
 8006e9c:	b00b      	add	sp, #44	; 0x2c
 8006e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea2:	4760      	bx	ip
 8006ea4:	b93d      	cbnz	r5, 8006eb6 <_DrawBitmap+0x49a>
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	f10e 0e01 	add.w	lr, lr, #1
 8006eac:	441c      	add	r4, r3
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	459e      	cmp	lr, r3
 8006eb2:	dbf7      	blt.n	8006ea4 <_DrawBitmap+0x488>
 8006eb4:	e0ba      	b.n	800702c <_DrawBitmap+0x610>
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	6a3a      	ldr	r2, [r7, #32]
 8006eba:	4473      	add	r3, lr
 8006ebc:	fb02 8303 	mla	r3, r2, r3, r8
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006ec6:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8006eca:	f012 0203 	ands.w	r2, r2, #3
 8006ece:	d003      	beq.n	8006ed8 <_DrawBitmap+0x4bc>
 8006ed0:	2a02      	cmp	r2, #2
 8006ed2:	d1e8      	bne.n	8006ea6 <_DrawBitmap+0x48a>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	e070      	b.n	8006fba <_DrawBitmap+0x59e>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	2a07      	cmp	r2, #7
 8006ede:	f101 0608 	add.w	r6, r1, #8
 8006ee2:	f103 0010 	add.w	r0, r3, #16
 8006ee6:	dd33      	ble.n	8006f50 <_DrawBitmap+0x534>
 8006ee8:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 8006eec:	3a08      	subs	r2, #8
 8006eee:	4631      	mov	r1, r6
 8006ef0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006ef4:	f820 3c10 	strh.w	r3, [r0, #-16]
 8006ef8:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 8006efc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f00:	f820 3c0e 	strh.w	r3, [r0, #-14]
 8006f04:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 8006f08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f0c:	f820 3c0c 	strh.w	r3, [r0, #-12]
 8006f10:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 8006f14:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f18:	f820 3c0a 	strh.w	r3, [r0, #-10]
 8006f1c:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8006f20:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f24:	f820 3c08 	strh.w	r3, [r0, #-8]
 8006f28:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8006f2c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f30:	f820 3c06 	strh.w	r3, [r0, #-6]
 8006f34:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 8006f38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f3c:	f820 3c04 	strh.w	r3, [r0, #-4]
 8006f40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f44:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006f48:	f820 3c02 	strh.w	r3, [r0, #-2]
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e7c5      	b.n	8006edc <_DrawBitmap+0x4c0>
 8006f50:	2a03      	cmp	r2, #3
 8006f52:	4618      	mov	r0, r3
 8006f54:	460e      	mov	r6, r1
 8006f56:	f103 0308 	add.w	r3, r3, #8
 8006f5a:	f101 0104 	add.w	r1, r1, #4
 8006f5e:	dd19      	ble.n	8006f94 <_DrawBitmap+0x578>
 8006f60:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8006f64:	3a04      	subs	r2, #4
 8006f66:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8006f6a:	f823 0c08 	strh.w	r0, [r3, #-8]
 8006f6e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8006f72:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8006f76:	f823 0c06 	strh.w	r0, [r3, #-6]
 8006f7a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8006f7e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8006f82:	f823 0c04 	strh.w	r0, [r3, #-4]
 8006f86:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8006f8a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8006f8e:	f823 0c02 	strh.w	r0, [r3, #-2]
 8006f92:	e7dd      	b.n	8006f50 <_DrawBitmap+0x534>
 8006f94:	3e01      	subs	r6, #1
 8006f96:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006f9a:	4282      	cmp	r2, r0
 8006f9c:	d083      	beq.n	8006ea6 <_DrawBitmap+0x48a>
 8006f9e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8006fa2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006fa6:	f820 3b02 	strh.w	r3, [r0], #2
 8006faa:	e7f6      	b.n	8006f9a <_DrawBitmap+0x57e>
 8006fac:	5ca1      	ldrb	r1, [r4, r2]
 8006fae:	b119      	cbz	r1, 8006fb8 <_DrawBitmap+0x59c>
 8006fb0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8006fb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8006fb8:	3201      	adds	r2, #1
 8006fba:	9901      	ldr	r1, [sp, #4]
 8006fbc:	1a89      	subs	r1, r1, r2
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	dcf4      	bgt.n	8006fac <_DrawBitmap+0x590>
 8006fc2:	e770      	b.n	8006ea6 <_DrawBitmap+0x48a>
 8006fc4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8006fc6:	b925      	cbnz	r5, 8006fd2 <_DrawBitmap+0x5b6>
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	2600      	movs	r6, #0
 8006fcc:	4f16      	ldr	r7, [pc, #88]	; (8007028 <_DrawBitmap+0x60c>)
 8006fce:	005d      	lsls	r5, r3, #1
 8006fd0:	e012      	b.n	8006ff8 <_DrawBitmap+0x5dc>
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <_DrawBitmap+0x608>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	7c1b      	ldrb	r3, [r3, #16]
 8006fd8:	07db      	lsls	r3, r3, #31
 8006fda:	d4f5      	bmi.n	8006fc8 <_DrawBitmap+0x5ac>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	46ac      	mov	ip, r5
 8006fe0:	9a03      	ldr	r2, [sp, #12]
 8006fe2:	9316      	str	r3, [sp, #88]	; 0x58
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	9315      	str	r3, [sp, #84]	; 0x54
 8006fe8:	9b01      	ldr	r3, [sp, #4]
 8006fea:	9314      	str	r3, [sp, #80]	; 0x50
 8006fec:	4623      	mov	r3, r4
 8006fee:	6980      	ldr	r0, [r0, #24]
 8006ff0:	b00b      	add	sp, #44	; 0x2c
 8006ff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff6:	4760      	bx	ip
 8006ff8:	9b04      	ldr	r3, [sp, #16]
 8006ffa:	429e      	cmp	r6, r3
 8006ffc:	da16      	bge.n	800702c <_DrawBitmap+0x610>
 8006ffe:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007002:	4621      	mov	r1, r4
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	18f0      	adds	r0, r6, r3
 8007008:	6a13      	ldr	r3, [r2, #32]
 800700a:	3601      	adds	r6, #1
 800700c:	fb03 8300 	mla	r3, r3, r0, r8
 8007010:	6810      	ldr	r0, [r2, #0]
 8007012:	462a      	mov	r2, r5
 8007014:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4798      	blx	r3
 800701c:	9b05      	ldr	r3, [sp, #20]
 800701e:	441c      	add	r4, r3
 8007020:	e7ea      	b.n	8006ff8 <_DrawBitmap+0x5dc>
 8007022:	bf00      	nop
 8007024:	20000080 	.word	0x20000080
 8007028:	2000008c 	.word	0x2000008c
 800702c:	b00b      	add	sp, #44	; 0x2c
 800702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007032:	bf00      	nop

08007034 <_InitOnce.isra.3>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	6805      	ldr	r5, [r0, #0]
 8007038:	4604      	mov	r4, r0
 800703a:	b93d      	cbnz	r5, 800704c <_InitOnce.isra.3+0x18>
 800703c:	2050      	movs	r0, #80	; 0x50
 800703e:	f7fd fc43 	bl	80048c8 <GUI_ALLOC_GetFixedBlock>
 8007042:	2250      	movs	r2, #80	; 0x50
 8007044:	6020      	str	r0, [r4, #0]
 8007046:	4629      	mov	r1, r5
 8007048:	f7fe fba8 	bl	800579c <GUI__memset>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	fab0 f080 	clz	r0, r0
 8007052:	0940      	lsrs	r0, r0, #5
 8007054:	bd38      	pop	{r3, r4, r5, pc}

08007056 <_SetDevFunc>:
 8007056:	b570      	push	{r4, r5, r6, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	3008      	adds	r0, #8
 800705c:	460d      	mov	r5, r1
 800705e:	4614      	mov	r4, r2
 8007060:	f7ff ffe8 	bl	8007034 <_InitOnce.isra.3>
 8007064:	68b3      	ldr	r3, [r6, #8]
 8007066:	b1db      	cbz	r3, 80070a0 <_SetDevFunc+0x4a>
 8007068:	2d21      	cmp	r5, #33	; 0x21
 800706a:	d012      	beq.n	8007092 <_SetDevFunc+0x3c>
 800706c:	dc07      	bgt.n	800707e <_SetDevFunc+0x28>
 800706e:	2d19      	cmp	r5, #25
 8007070:	d00d      	beq.n	800708e <_SetDevFunc+0x38>
 8007072:	2d20      	cmp	r5, #32
 8007074:	d00f      	beq.n	8007096 <_SetDevFunc+0x40>
 8007076:	2d03      	cmp	r5, #3
 8007078:	d112      	bne.n	80070a0 <_SetDevFunc+0x4a>
 800707a:	649c      	str	r4, [r3, #72]	; 0x48
 800707c:	bd70      	pop	{r4, r5, r6, pc}
 800707e:	2d24      	cmp	r5, #36	; 0x24
 8007080:	d00d      	beq.n	800709e <_SetDevFunc+0x48>
 8007082:	2d25      	cmp	r5, #37	; 0x25
 8007084:	d009      	beq.n	800709a <_SetDevFunc+0x44>
 8007086:	2d23      	cmp	r5, #35	; 0x23
 8007088:	d10a      	bne.n	80070a0 <_SetDevFunc+0x4a>
 800708a:	645c      	str	r4, [r3, #68]	; 0x44
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	635c      	str	r4, [r3, #52]	; 0x34
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	639c      	str	r4, [r3, #56]	; 0x38
 8007094:	bd70      	pop	{r4, r5, r6, pc}
 8007096:	63dc      	str	r4, [r3, #60]	; 0x3c
 8007098:	bd70      	pop	{r4, r5, r6, pc}
 800709a:	641c      	str	r4, [r3, #64]	; 0x40
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	64dc      	str	r4, [r3, #76]	; 0x4c
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080070a4 <_CopyBuffer>:
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	4606      	mov	r6, r0
 80070aa:	3008      	adds	r0, #8
 80070ac:	460f      	mov	r7, r1
 80070ae:	4690      	mov	r8, r2
 80070b0:	f7ff ffc0 	bl	8007034 <_InitOnce.isra.3>
 80070b4:	68b4      	ldr	r4, [r6, #8]
 80070b6:	b31c      	cbz	r4, 8007100 <_CopyBuffer+0x5c>
 80070b8:	4547      	cmp	r7, r8
 80070ba:	d021      	beq.n	8007100 <_CopyBuffer+0x5c>
 80070bc:	68f3      	ldr	r3, [r6, #12]
 80070be:	2108      	movs	r1, #8
 80070c0:	4630      	mov	r0, r6
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	4798      	blx	r3
 80070c6:	69a2      	ldr	r2, [r4, #24]
 80070c8:	6963      	ldr	r3, [r4, #20]
 80070ca:	4353      	muls	r3, r2
 80070cc:	4358      	muls	r0, r3
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	08c2      	lsrs	r2, r0, #3
 80070d2:	b123      	cbz	r3, 80070de <_CopyBuffer+0x3a>
 80070d4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80070d8:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 80070dc:	e004      	b.n	80070e8 <_CopyBuffer+0x44>
 80070de:	6865      	ldr	r5, [r4, #4]
 80070e0:	fb02 5107 	mla	r1, r2, r7, r5
 80070e4:	fb02 5508 	mla	r5, r2, r8, r5
 80070e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070ea:	b123      	cbz	r3, 80070f6 <_CopyBuffer+0x52>
 80070ec:	4642      	mov	r2, r8
 80070ee:	4639      	mov	r1, r7
 80070f0:	69b0      	ldr	r0, [r6, #24]
 80070f2:	4798      	blx	r3
 80070f4:	e003      	b.n	80070fe <_CopyBuffer+0x5a>
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <_CopyBuffer+0x60>)
 80070f8:	4628      	mov	r0, r5
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4798      	blx	r3
 80070fe:	6025      	str	r5, [r4, #0]
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	2000008c 	.word	0x2000008c

08007108 <_GetPos>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	3008      	adds	r0, #8
 800710e:	460e      	mov	r6, r1
 8007110:	4615      	mov	r5, r2
 8007112:	f7ff ff8f 	bl	8007034 <_InitOnce.isra.3>
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	b11b      	cbz	r3, 8007122 <_GetPos+0x1a>
 800711a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800711c:	6032      	str	r2, [r6, #0]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	bd70      	pop	{r4, r5, r6, pc}

08007124 <_SetVRAM_BufferPTR>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4605      	mov	r5, r0
 8007128:	3008      	adds	r0, #8
 800712a:	460c      	mov	r4, r1
 800712c:	f7ff ff82 	bl	8007034 <_InitOnce.isra.3>
 8007130:	68ab      	ldr	r3, [r5, #8]
 8007132:	b113      	cbz	r3, 800713a <_SetVRAM_BufferPTR+0x16>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	609c      	str	r4, [r3, #8]
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}

0800713c <_ShowBuffer>:
 800713c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800713e:	2300      	movs	r3, #0
 8007140:	4604      	mov	r4, r0
 8007142:	3008      	adds	r0, #8
 8007144:	460d      	mov	r5, r1
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f7ff ff74 	bl	8007034 <_InitOnce.isra.3>
 800714c:	68a3      	ldr	r3, [r4, #8]
 800714e:	b133      	cbz	r3, 800715e <_ShowBuffer+0x22>
 8007150:	aa02      	add	r2, sp, #8
 8007152:	210e      	movs	r1, #14
 8007154:	69a0      	ldr	r0, [r4, #24]
 8007156:	f842 5d04 	str.w	r5, [r2, #-4]!
 800715a:	f7fc fd4f 	bl	8003bfc <LCD_X_DisplayDriver>
 800715e:	b003      	add	sp, #12
 8007160:	bd30      	pop	{r4, r5, pc}

08007162 <_Init>:
 8007162:	b538      	push	{r3, r4, r5, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	3008      	adds	r0, #8
 8007168:	f7ff ff64 	bl	8007034 <_InitOnce.isra.3>
 800716c:	4605      	mov	r5, r0
 800716e:	2200      	movs	r2, #0
 8007170:	2101      	movs	r1, #1
 8007172:	69a0      	ldr	r0, [r4, #24]
 8007174:	f7fc fd42 	bl	8003bfc <LCD_X_DisplayDriver>
 8007178:	4328      	orrs	r0, r5
 800717a:	bd38      	pop	{r3, r4, r5, pc}

0800717c <_SetVis>:
 800717c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800717e:	2300      	movs	r3, #0
 8007180:	4604      	mov	r4, r0
 8007182:	3008      	adds	r0, #8
 8007184:	460d      	mov	r5, r1
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	f7ff ff54 	bl	8007034 <_InitOnce.isra.3>
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	b13b      	cbz	r3, 80071a0 <_SetVis+0x24>
 8007190:	aa02      	add	r2, sp, #8
 8007192:	631d      	str	r5, [r3, #48]	; 0x30
 8007194:	2109      	movs	r1, #9
 8007196:	69a0      	ldr	r0, [r4, #24]
 8007198:	f842 5d04 	str.w	r5, [r2, #-4]!
 800719c:	f7fc fd2e 	bl	8003bfc <LCD_X_DisplayDriver>
 80071a0:	b003      	add	sp, #12
 80071a2:	bd30      	pop	{r4, r5, pc}

080071a4 <_SetAlpha>:
 80071a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071a6:	2300      	movs	r3, #0
 80071a8:	4604      	mov	r4, r0
 80071aa:	3008      	adds	r0, #8
 80071ac:	460d      	mov	r5, r1
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	f7ff ff40 	bl	8007034 <_InitOnce.isra.3>
 80071b4:	68a3      	ldr	r3, [r4, #8]
 80071b6:	b13b      	cbz	r3, 80071c8 <_SetAlpha+0x24>
 80071b8:	aa02      	add	r2, sp, #8
 80071ba:	62dd      	str	r5, [r3, #44]	; 0x2c
 80071bc:	210a      	movs	r1, #10
 80071be:	69a0      	ldr	r0, [r4, #24]
 80071c0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80071c4:	f7fc fd1a 	bl	8003bfc <LCD_X_DisplayDriver>
 80071c8:	b003      	add	sp, #12
 80071ca:	bd30      	pop	{r4, r5, pc}

080071cc <_SetVRAMAddr>:
 80071cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4604      	mov	r4, r0
 80071d2:	3008      	adds	r0, #8
 80071d4:	460d      	mov	r5, r1
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f7ff ff2c 	bl	8007034 <_InitOnce.isra.3>
 80071dc:	68a3      	ldr	r3, [r4, #8]
 80071de:	b143      	cbz	r3, 80071f2 <_SetVRAMAddr+0x26>
 80071e0:	aa02      	add	r2, sp, #8
 80071e2:	601d      	str	r5, [r3, #0]
 80071e4:	605d      	str	r5, [r3, #4]
 80071e6:	2102      	movs	r1, #2
 80071e8:	f842 5d04 	str.w	r5, [r2, #-4]!
 80071ec:	69a0      	ldr	r0, [r4, #24]
 80071ee:	f7fc fd05 	bl	8003bfc <LCD_X_DisplayDriver>
 80071f2:	b003      	add	sp, #12
 80071f4:	bd30      	pop	{r4, r5, pc}

080071f6 <_SetPos>:
 80071f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	b089      	sub	sp, #36	; 0x24
 80071fc:	4606      	mov	r6, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	4614      	mov	r4, r2
 8007202:	2100      	movs	r1, #0
 8007204:	2218      	movs	r2, #24
 8007206:	a802      	add	r0, sp, #8
 8007208:	f002 fd2a 	bl	8009c60 <memset>
 800720c:	f106 0008 	add.w	r0, r6, #8
 8007210:	f7ff ff10 	bl	8007034 <_InitOnce.isra.3>
 8007214:	68b7      	ldr	r7, [r6, #8]
 8007216:	2f00      	cmp	r7, #0
 8007218:	d067      	beq.n	80072ea <_SetPos+0xf4>
 800721a:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 800721e:	f1bb 0f00 	cmp.w	fp, #0
 8007222:	d004      	beq.n	800722e <_SetPos+0x38>
 8007224:	4622      	mov	r2, r4
 8007226:	4629      	mov	r1, r5
 8007228:	69b0      	ldr	r0, [r6, #24]
 800722a:	47d8      	blx	fp
 800722c:	e05d      	b.n	80072ea <_SetPos+0xf4>
 800722e:	627d      	str	r5, [r7, #36]	; 0x24
 8007230:	62bc      	str	r4, [r7, #40]	; 0x28
 8007232:	f7ff f82d 	bl	8006290 <LCD_GetXSizeDisplay>
 8007236:	4681      	mov	r9, r0
 8007238:	f7ff f830 	bl	800629c <LCD_GetYSizeDisplay>
 800723c:	68f2      	ldr	r2, [r6, #12]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2108      	movs	r1, #8
 8007242:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007244:	4680      	mov	r8, r0
 8007246:	4630      	mov	r0, r6
 8007248:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	4790      	blx	r2
 8007250:	2208      	movs	r2, #8
 8007252:	3007      	adds	r0, #7
 8007254:	2d00      	cmp	r5, #0
 8007256:	eb05 010a 	add.w	r1, r5, sl
 800725a:	9b01      	ldr	r3, [sp, #4]
 800725c:	fb90 f0f2 	sdiv	r0, r0, r2
 8007260:	9006      	str	r0, [sp, #24]
 8007262:	da07      	bge.n	8007274 <_SetPos+0x7e>
 8007264:	9a07      	ldr	r2, [sp, #28]
 8007266:	f8cd b008 	str.w	fp, [sp, #8]
 800726a:	fb00 2015 	mls	r0, r0, r5, r2
 800726e:	9104      	str	r1, [sp, #16]
 8007270:	9007      	str	r0, [sp, #28]
 8007272:	e007      	b.n	8007284 <_SetPos+0x8e>
 8007274:	4589      	cmp	r9, r1
 8007276:	9502      	str	r5, [sp, #8]
 8007278:	bfb6      	itet	lt
 800727a:	ebc5 0509 	rsblt	r5, r5, r9
 800727e:	f8cd a010 	strge.w	sl, [sp, #16]
 8007282:	9504      	strlt	r5, [sp, #16]
 8007284:	2c00      	cmp	r4, #0
 8007286:	eb04 0203 	add.w	r2, r4, r3
 800728a:	da09      	bge.n	80072a0 <_SetPos+0xaa>
 800728c:	9b06      	ldr	r3, [sp, #24]
 800728e:	9205      	str	r2, [sp, #20]
 8007290:	435c      	muls	r4, r3
 8007292:	9b07      	ldr	r3, [sp, #28]
 8007294:	fb0a 3414 	mls	r4, sl, r4, r3
 8007298:	2300      	movs	r3, #0
 800729a:	9407      	str	r4, [sp, #28]
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	e006      	b.n	80072ae <_SetPos+0xb8>
 80072a0:	4590      	cmp	r8, r2
 80072a2:	9403      	str	r4, [sp, #12]
 80072a4:	bfb6      	itet	lt
 80072a6:	ebc4 0408 	rsblt	r4, r4, r8
 80072aa:	9305      	strge	r3, [sp, #20]
 80072ac:	9405      	strlt	r4, [sp, #20]
 80072ae:	9b04      	ldr	r3, [sp, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	dd08      	ble.n	80072c8 <_SetPos+0xd2>
 80072b6:	9a05      	ldr	r2, [sp, #20]
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	dd05      	ble.n	80072c8 <_SetPos+0xd2>
 80072bc:	9a02      	ldr	r2, [sp, #8]
 80072be:	4591      	cmp	r9, r2
 80072c0:	dd02      	ble.n	80072c8 <_SetPos+0xd2>
 80072c2:	9a03      	ldr	r2, [sp, #12]
 80072c4:	4590      	cmp	r8, r2
 80072c6:	dc06      	bgt.n	80072d6 <_SetPos+0xe0>
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10e      	bne.n	80072ea <_SetPos+0xf4>
 80072cc:	2100      	movs	r1, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ff54 	bl	800717c <_SetVis>
 80072d4:	e009      	b.n	80072ea <_SetPos+0xf4>
 80072d6:	b91b      	cbnz	r3, 80072e0 <_SetPos+0xea>
 80072d8:	2101      	movs	r1, #1
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff ff4e 	bl	800717c <_SetVis>
 80072e0:	aa02      	add	r2, sp, #8
 80072e2:	2108      	movs	r1, #8
 80072e4:	69b0      	ldr	r0, [r6, #24]
 80072e6:	f7fc fc89 	bl	8003bfc <LCD_X_DisplayDriver>
 80072ea:	b009      	add	sp, #36	; 0x24
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072f0 <_SetSize>:
 80072f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f2:	2300      	movs	r3, #0
 80072f4:	4605      	mov	r5, r0
 80072f6:	3008      	adds	r0, #8
 80072f8:	460f      	mov	r7, r1
 80072fa:	4616      	mov	r6, r2
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	f7ff fe98 	bl	8007034 <_InitOnce.isra.3>
 8007304:	68ac      	ldr	r4, [r5, #8]
 8007306:	b194      	cbz	r4, 800732e <_SetSize+0x3e>
 8007308:	6a23      	ldr	r3, [r4, #32]
 800730a:	b93b      	cbnz	r3, 800731c <_SetSize+0x2c>
 800730c:	69a8      	ldr	r0, [r5, #24]
 800730e:	f7fe ff5f 	bl	80061d0 <LCD_GetSwapXYEx>
 8007312:	2800      	cmp	r0, #0
 8007314:	bf0c      	ite	eq
 8007316:	4638      	moveq	r0, r7
 8007318:	4630      	movne	r0, r6
 800731a:	6220      	str	r0, [r4, #32]
 800731c:	6127      	str	r7, [r4, #16]
 800731e:	466a      	mov	r2, sp
 8007320:	6166      	str	r6, [r4, #20]
 8007322:	2107      	movs	r1, #7
 8007324:	69a8      	ldr	r0, [r5, #24]
 8007326:	9700      	str	r7, [sp, #0]
 8007328:	9601      	str	r6, [sp, #4]
 800732a:	f7fc fc67 	bl	8003bfc <LCD_X_DisplayDriver>
 800732e:	b003      	add	sp, #12
 8007330:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007332 <_SetVSize>:
 8007332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007334:	4607      	mov	r7, r0
 8007336:	3008      	adds	r0, #8
 8007338:	460d      	mov	r5, r1
 800733a:	4616      	mov	r6, r2
 800733c:	f7ff fe7a 	bl	8007034 <_InitOnce.isra.3>
 8007340:	68bc      	ldr	r4, [r7, #8]
 8007342:	b144      	cbz	r4, 8007356 <_SetVSize+0x24>
 8007344:	69b8      	ldr	r0, [r7, #24]
 8007346:	f7fe ff43 	bl	80061d0 <LCD_GetSwapXYEx>
 800734a:	61a5      	str	r5, [r4, #24]
 800734c:	61e6      	str	r6, [r4, #28]
 800734e:	b108      	cbz	r0, 8007354 <_SetVSize+0x22>
 8007350:	6226      	str	r6, [r4, #32]
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007354:	6225      	str	r5, [r4, #32]
 8007356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007358 <_GetDevData>:
 8007358:	2901      	cmp	r1, #1
 800735a:	4802      	ldr	r0, [pc, #8]	; (8007364 <_GetDevData+0xc>)
 800735c:	bf18      	it	ne
 800735e:	2000      	movne	r0, #0
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0800e584 	.word	0x0800e584

08007368 <_GetDevFunc>:
 8007368:	2916      	cmp	r1, #22
 800736a:	4802      	ldr	r0, [pc, #8]	; (8007374 <_GetDevFunc+0xc>)
 800736c:	bf18      	it	ne
 800736e:	2000      	movne	r0, #0
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	08007e79 	.word	0x08007e79

08007378 <_SetOrg>:
 8007378:	6800      	ldr	r0, [r0, #0]
 800737a:	b110      	cbz	r0, 8007382 <_SetOrg+0xa>
 800737c:	68c3      	ldr	r3, [r0, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	4718      	bx	r3
 8007382:	4770      	bx	lr

08007384 <_GetRect>:
 8007384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007386:	6880      	ldr	r0, [r0, #8]
 8007388:	460d      	mov	r5, r1
 800738a:	f7fd f9d9 	bl	8004740 <GUI_ALLOC_LockH>
 800738e:	4602      	mov	r2, r0
 8007390:	a802      	add	r0, sp, #8
 8007392:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8007396:	8914      	ldrh	r4, [r2, #8]
 8007398:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800739c:	802b      	strh	r3, [r5, #0]
 800739e:	441c      	add	r4, r3
 80073a0:	8953      	ldrh	r3, [r2, #10]
 80073a2:	3c01      	subs	r4, #1
 80073a4:	f840 2d04 	str.w	r2, [r0, #-4]!
 80073a8:	440b      	add	r3, r1
 80073aa:	8069      	strh	r1, [r5, #2]
 80073ac:	80ac      	strh	r4, [r5, #4]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	80eb      	strh	r3, [r5, #6]
 80073b2:	f7fd f9d3 	bl	800475c <GUI_ALLOC_UnlockH>
 80073b6:	b003      	add	sp, #12
 80073b8:	bd30      	pop	{r4, r5, pc}
	...

080073bc <_XY2PTR>:
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <_XY2PTR+0x3c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073c2:	4606      	mov	r6, r0
 80073c4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80073c6:	460d      	mov	r5, r1
 80073c8:	f7fd f9ba 	bl	8004740 <GUI_ALLOC_LockH>
 80073cc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80073d0:	ab02      	add	r3, sp, #8
 80073d2:	68c4      	ldr	r4, [r0, #12]
 80073d4:	1a69      	subs	r1, r5, r1
 80073d6:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80073da:	f843 0d04 	str.w	r0, [r3, #-4]!
 80073de:	1b76      	subs	r6, r6, r5
 80073e0:	0076      	lsls	r6, r6, #1
 80073e2:	3618      	adds	r6, #24
 80073e4:	fb04 6501 	mla	r5, r4, r1, r6
 80073e8:	1944      	adds	r4, r0, r5
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd f9b6 	bl	800475c <GUI_ALLOC_UnlockH>
 80073f0:	4620      	mov	r0, r4
 80073f2:	b002      	add	sp, #8
 80073f4:	bd70      	pop	{r4, r5, r6, pc}
 80073f6:	bf00      	nop
 80073f8:	20000080 	.word	0x20000080

080073fc <_GetPixelIndex>:
 80073fc:	b508      	push	{r3, lr}
 80073fe:	4608      	mov	r0, r1
 8007400:	4611      	mov	r1, r2
 8007402:	f7ff ffdb 	bl	80073bc <_XY2PTR>
 8007406:	8800      	ldrh	r0, [r0, #0]
 8007408:	bd08      	pop	{r3, pc}
	...

0800740c <_XorPixel>:
 800740c:	4b14      	ldr	r3, [pc, #80]	; (8007460 <_XorPixel+0x54>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007412:	4616      	mov	r6, r2
 8007414:	460d      	mov	r5, r1
 8007416:	4607      	mov	r7, r0
 8007418:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800741a:	f7fd f991 	bl	8004740 <GUI_ALLOC_LockH>
 800741e:	4631      	mov	r1, r6
 8007420:	9000      	str	r0, [sp, #0]
 8007422:	4628      	mov	r0, r5
 8007424:	f7ff ffca 	bl	80073bc <_XY2PTR>
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4604      	mov	r4, r0
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	4798      	blx	r3
 8007430:	8823      	ldrh	r3, [r4, #0]
 8007432:	4058      	eors	r0, r3
 8007434:	9b00      	ldr	r3, [sp, #0]
 8007436:	8020      	strh	r0, [r4, #0]
 8007438:	6958      	ldr	r0, [r3, #20]
 800743a:	b160      	cbz	r0, 8007456 <_XorPixel+0x4a>
 800743c:	f7fd f980 	bl	8004740 <GUI_ALLOC_LockH>
 8007440:	ac02      	add	r4, sp, #8
 8007442:	6883      	ldr	r3, [r0, #8]
 8007444:	4632      	mov	r2, r6
 8007446:	f844 0d04 	str.w	r0, [r4, #-4]!
 800744a:	4629      	mov	r1, r5
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4798      	blx	r3
 8007450:	4620      	mov	r0, r4
 8007452:	f7fd f983 	bl	800475c <GUI_ALLOC_UnlockH>
 8007456:	4668      	mov	r0, sp
 8007458:	f7fd f980 	bl	800475c <GUI_ALLOC_UnlockH>
 800745c:	b003      	add	sp, #12
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007460:	20000080 	.word	0x20000080

08007464 <_SetPixelIndex>:
 8007464:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007466:	461c      	mov	r4, r3
 8007468:	4b10      	ldr	r3, [pc, #64]	; (80074ac <_SetPixelIndex+0x48>)
 800746a:	460d      	mov	r5, r1
 800746c:	4616      	mov	r6, r2
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007472:	f7fd f965 	bl	8004740 <GUI_ALLOC_LockH>
 8007476:	4631      	mov	r1, r6
 8007478:	9000      	str	r0, [sp, #0]
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff ff9e 	bl	80073bc <_XY2PTR>
 8007480:	9b00      	ldr	r3, [sp, #0]
 8007482:	8004      	strh	r4, [r0, #0]
 8007484:	6958      	ldr	r0, [r3, #20]
 8007486:	b160      	cbz	r0, 80074a2 <_SetPixelIndex+0x3e>
 8007488:	f7fd f95a 	bl	8004740 <GUI_ALLOC_LockH>
 800748c:	ac02      	add	r4, sp, #8
 800748e:	6883      	ldr	r3, [r0, #8]
 8007490:	4632      	mov	r2, r6
 8007492:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007496:	4629      	mov	r1, r5
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4798      	blx	r3
 800749c:	4620      	mov	r0, r4
 800749e:	f7fd f95d 	bl	800475c <GUI_ALLOC_UnlockH>
 80074a2:	4668      	mov	r0, sp
 80074a4:	f7fd f95a 	bl	800475c <GUI_ALLOC_UnlockH>
 80074a8:	b002      	add	sp, #8
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	20000080 	.word	0x20000080

080074b0 <_DrawVLine>:
 80074b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4c2c      	ldr	r4, [pc, #176]	; (8007568 <_DrawVLine+0xb8>)
 80074b6:	461e      	mov	r6, r3
 80074b8:	4680      	mov	r8, r0
 80074ba:	460f      	mov	r7, r1
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	4615      	mov	r5, r2
 80074c0:	46a1      	mov	r9, r4
 80074c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80074c4:	f7fd f93c 	bl	8004740 <GUI_ALLOC_LockH>
 80074c8:	9000      	str	r0, [sp, #0]
 80074ca:	6940      	ldr	r0, [r0, #20]
 80074cc:	b108      	cbz	r0, 80074d2 <_DrawVLine+0x22>
 80074ce:	f7fd f937 	bl	8004740 <GUI_ALLOC_LockH>
 80074d2:	9001      	str	r0, [sp, #4]
 80074d4:	4629      	mov	r1, r5
 80074d6:	4638      	mov	r0, r7
 80074d8:	f7ff ff70 	bl	80073bc <_XY2PTR>
 80074dc:	f8d9 3000 	ldr.w	r3, [r9]
 80074e0:	4604      	mov	r4, r0
 80074e2:	7c1a      	ldrb	r2, [r3, #16]
 80074e4:	07d2      	lsls	r2, r2, #31
 80074e6:	d51f      	bpl.n	8007528 <_DrawVLine+0x78>
 80074e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	4798      	blx	r3
 80074f0:	fa1f f880 	uxth.w	r8, r0
 80074f4:	9801      	ldr	r0, [sp, #4]
 80074f6:	b120      	cbz	r0, 8007502 <_DrawVLine+0x52>
 80074f8:	6883      	ldr	r3, [r0, #8]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4639      	mov	r1, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4798      	blx	r3
 8007502:	8823      	ldrh	r3, [r4, #0]
 8007504:	3501      	adds	r5, #1
 8007506:	ea88 0303 	eor.w	r3, r8, r3
 800750a:	42b5      	cmp	r5, r6
 800750c:	8023      	strh	r3, [r4, #0]
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	441c      	add	r4, r3
 8007514:	ddee      	ble.n	80074f4 <_DrawVLine+0x44>
 8007516:	4668      	mov	r0, sp
 8007518:	f7fd f920 	bl	800475c <GUI_ALLOC_UnlockH>
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	b303      	cbz	r3, 8007562 <_DrawVLine+0xb2>
 8007520:	a801      	add	r0, sp, #4
 8007522:	f7fd f91b 	bl	800475c <GUI_ALLOC_UnlockH>
 8007526:	e01c      	b.n	8007562 <_DrawVLine+0xb2>
 8007528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752a:	9a00      	ldr	r2, [sp, #0]
 800752c:	f8d3 9000 	ldr.w	r9, [r3]
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8007536:	b163      	cbz	r3, 8007552 <_DrawVLine+0xa2>
 8007538:	9801      	ldr	r0, [sp, #4]
 800753a:	462a      	mov	r2, r5
 800753c:	3501      	adds	r5, #1
 800753e:	4639      	mov	r1, r7
 8007540:	6883      	ldr	r3, [r0, #8]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4798      	blx	r3
 8007546:	42ae      	cmp	r6, r5
 8007548:	f8a4 9000 	strh.w	r9, [r4]
 800754c:	4444      	add	r4, r8
 800754e:	daf3      	bge.n	8007538 <_DrawVLine+0x88>
 8007550:	e7e1      	b.n	8007516 <_DrawVLine+0x66>
 8007552:	1b75      	subs	r5, r6, r5
 8007554:	3501      	adds	r5, #1
 8007556:	3d01      	subs	r5, #1
 8007558:	f8a4 9000 	strh.w	r9, [r4]
 800755c:	4444      	add	r4, r8
 800755e:	d1fa      	bne.n	8007556 <_DrawVLine+0xa6>
 8007560:	e7d9      	b.n	8007516 <_DrawVLine+0x66>
 8007562:	b003      	add	sp, #12
 8007564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007568:	20000080 	.word	0x20000080

0800756c <_FillRect>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	4f2a      	ldr	r7, [pc, #168]	; (800761c <_FillRect+0xb0>)
 8007572:	461d      	mov	r5, r3
 8007574:	4614      	mov	r4, r2
 8007576:	b087      	sub	sp, #28
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	4689      	mov	r9, r1
 800757c:	4683      	mov	fp, r0
 800757e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007580:	ebc9 0505 	rsb	r5, r9, r5
 8007584:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	f105 0a01 	add.w	sl, r5, #1
 800758c:	9202      	str	r2, [sp, #8]
 800758e:	f7fd f8d7 	bl	8004740 <GUI_ALLOC_LockH>
 8007592:	4621      	mov	r1, r4
 8007594:	9004      	str	r0, [sp, #16]
 8007596:	4648      	mov	r0, r9
 8007598:	f7ff ff10 	bl	80073bc <_XY2PTR>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	4606      	mov	r6, r0
 80075a0:	68d3      	ldr	r3, [r2, #12]
 80075a2:	6950      	ldr	r0, [r2, #20]
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	b188      	cbz	r0, 80075cc <_FillRect+0x60>
 80075a8:	f7fd f8ca 	bl	8004740 <GUI_ALLOC_LockH>
 80075ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ae:	f10d 0818 	add.w	r8, sp, #24
 80075b2:	4622      	mov	r2, r4
 80075b4:	1b1b      	subs	r3, r3, r4
 80075b6:	4649      	mov	r1, r9
 80075b8:	f848 0d04 	str.w	r0, [r8, #-4]!
 80075bc:	3301      	adds	r3, #1
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4653      	mov	r3, sl
 80075c2:	f000 fc05 	bl	8007dd0 <GUI_USAGE_AddRect>
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7fd f8c8 	bl	800475c <GUI_ALLOC_UnlockH>
 80075cc:	006d      	lsls	r5, r5, #1
 80075ce:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80075d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075d4:	429c      	cmp	r4, r3
 80075d6:	dc1a      	bgt.n	800760e <_FillRect+0xa2>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	7c1b      	ldrb	r3, [r3, #16]
 80075dc:	07db      	lsls	r3, r3, #31
 80075de:	d50d      	bpl.n	80075fc <_FillRect+0x90>
 80075e0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	4798      	blx	r3
 80075e8:	1eb3      	subs	r3, r6, #2
 80075ea:	b280      	uxth	r0, r0
 80075ec:	1971      	adds	r1, r6, r5
 80075ee:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80075f2:	4042      	eors	r2, r0
 80075f4:	428b      	cmp	r3, r1
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	d1f9      	bne.n	80075ee <_FillRect+0x82>
 80075fa:	e004      	b.n	8007606 <_FillRect+0x9a>
 80075fc:	4652      	mov	r2, sl
 80075fe:	4641      	mov	r1, r8
 8007600:	4630      	mov	r0, r6
 8007602:	f7fe f8fa 	bl	80057fa <GUI__memset16>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	3401      	adds	r4, #1
 800760a:	441e      	add	r6, r3
 800760c:	e7e1      	b.n	80075d2 <_FillRect+0x66>
 800760e:	a804      	add	r0, sp, #16
 8007610:	f7fd f8a4 	bl	800475c <GUI_ALLOC_UnlockH>
 8007614:	b007      	add	sp, #28
 8007616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761a:	bf00      	nop
 800761c:	20000080 	.word	0x20000080

08007620 <_DrawHLine>:
 8007620:	b507      	push	{r0, r1, r2, lr}
 8007622:	9200      	str	r2, [sp, #0]
 8007624:	f7ff ffa2 	bl	800756c <_FillRect>
 8007628:	b003      	add	sp, #12
 800762a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007630 <_DrawBitmap>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	4d99      	ldr	r5, [pc, #612]	; (800789c <_DrawBitmap+0x26c>)
 8007636:	b091      	sub	sp, #68	; 0x44
 8007638:	460e      	mov	r6, r1
 800763a:	9302      	str	r3, [sp, #8]
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	900a      	str	r0, [sp, #40]	; 0x28
 8007640:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007642:	9205      	str	r2, [sp, #20]
 8007644:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8007646:	f7fd f87b 	bl	8004740 <GUI_ALLOC_LockH>
 800764a:	900e      	str	r0, [sp, #56]	; 0x38
 800764c:	6940      	ldr	r0, [r0, #20]
 800764e:	b108      	cbz	r0, 8007654 <_DrawBitmap+0x24>
 8007650:	f7fd f876 	bl	8004740 <GUI_ALLOC_LockH>
 8007654:	900f      	str	r0, [sp, #60]	; 0x3c
 8007656:	a810      	add	r0, sp, #64	; 0x40
 8007658:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	9306      	str	r3, [sp, #24]
 8007660:	f7fd f87c 	bl	800475c <GUI_ALLOC_UnlockH>
 8007664:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007666:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007668:	eb06 0b03 	add.w	fp, r6, r3
 800766c:	b150      	cbz	r0, 8007684 <_DrawBitmap+0x54>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	7c1b      	ldrb	r3, [r3, #16]
 8007672:	0799      	lsls	r1, r3, #30
 8007674:	d106      	bne.n	8007684 <_DrawBitmap+0x54>
 8007676:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007678:	4659      	mov	r1, fp
 800767a:	9a05      	ldr	r2, [sp, #20]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	f000 fba6 	bl	8007dd0 <GUI_USAGE_AddRect>
 8007684:	9905      	ldr	r1, [sp, #20]
 8007686:	4658      	mov	r0, fp
 8007688:	f7ff fe98 	bl	80073bc <_XY2PTR>
 800768c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800768e:	4605      	mov	r5, r0
 8007690:	2b10      	cmp	r3, #16
 8007692:	d134      	bne.n	80076fe <_DrawBitmap+0xce>
 8007694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007696:	b133      	cbz	r3, 80076a6 <_DrawBitmap+0x76>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	2600      	movs	r6, #0
 800769c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 80078a4 <_DrawBitmap+0x274>
 80076a0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80076a4:	e012      	b.n	80076cc <_DrawBitmap+0x9c>
 80076a6:	4b7e      	ldr	r3, [pc, #504]	; (80078a0 <_DrawBitmap+0x270>)
 80076a8:	681e      	ldr	r6, [r3, #0]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	d0f4      	beq.n	8007698 <_DrawBitmap+0x68>
 80076ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80076b0:	4621      	mov	r1, r4
 80076b2:	9a02      	ldr	r2, [sp, #8]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	9b06      	ldr	r3, [sp, #24]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80076bc:	47b0      	blx	r6
 80076be:	e35b      	b.n	8007d78 <_DrawBitmap+0x748>
 80076c0:	b944      	cbnz	r4, 80076d4 <_DrawBitmap+0xa4>
 80076c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80076c4:	3601      	adds	r6, #1
 80076c6:	441c      	add	r4, r3
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	441d      	add	r5, r3
 80076cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80076ce:	429e      	cmp	r6, r3
 80076d0:	dbf6      	blt.n	80076c0 <_DrawBitmap+0x90>
 80076d2:	e34c      	b.n	8007d6e <_DrawBitmap+0x73e>
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	d0f4      	beq.n	80076c2 <_DrawBitmap+0x92>
 80076d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80076da:	4642      	mov	r2, r8
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f8d9 3000 	ldr.w	r3, [r9]
 80076e4:	4798      	blx	r3
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	d0eb      	beq.n	80076c2 <_DrawBitmap+0x92>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4659      	mov	r1, fp
 80076ee:	9a05      	ldr	r2, [sp, #20]
 80076f0:	4638      	mov	r0, r7
 80076f2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80076f6:	4432      	add	r2, r6
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	47d0      	blx	sl
 80076fc:	e7e1      	b.n	80076c2 <_DrawBitmap+0x92>
 80076fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007700:	2b17      	cmp	r3, #23
 8007702:	dd44      	ble.n	800778e <_DrawBitmap+0x15e>
 8007704:	f06f 0303 	mvn.w	r3, #3
 8007708:	f04f 0800 	mov.w	r8, #0
 800770c:	fb03 f30b 	mul.w	r3, r3, fp
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	f06f 0301 	mvn.w	r3, #1
 8007716:	fb03 f30b 	mul.w	r3, r3, fp
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	445b      	add	r3, fp
 8007720:	9308      	str	r3, [sp, #32]
 8007722:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007724:	4598      	cmp	r8, r3
 8007726:	f280 8322 	bge.w	8007d6e <_DrawBitmap+0x73e>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	eb03 0908 	add.w	r9, r3, r8
 8007730:	b934      	cbnz	r4, 8007740 <_DrawBitmap+0x110>
 8007732:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007734:	f108 0801 	add.w	r8, r8, #1
 8007738:	441c      	add	r4, r3
 800773a:	9b06      	ldr	r3, [sp, #24]
 800773c:	441d      	add	r5, r3
 800773e:	e7f0      	b.n	8007722 <_DrawBitmap+0xf2>
 8007740:	2d00      	cmp	r5, #0
 8007742:	d0f6      	beq.n	8007732 <_DrawBitmap+0x102>
 8007744:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007746:	b137      	cbz	r7, 8007756 <_DrawBitmap+0x126>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	464a      	mov	r2, r9
 800774c:	4659      	mov	r1, fp
 800774e:	4638      	mov	r0, r7
 8007750:	685e      	ldr	r6, [r3, #4]
 8007752:	9b02      	ldr	r3, [sp, #8]
 8007754:	47b0      	blx	r6
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	465e      	mov	r6, fp
 800775a:	eb04 0a03 	add.w	sl, r4, r3
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	18eb      	adds	r3, r5, r3
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4798      	blx	r3
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8007776:	b12f      	cbz	r7, 8007784 <_DrawBitmap+0x154>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	464a      	mov	r2, r9
 800777c:	4631      	mov	r1, r6
 800777e:	4638      	mov	r0, r7
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4798      	blx	r3
 8007784:	3601      	adds	r6, #1
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	429e      	cmp	r6, r3
 800778a:	d1eb      	bne.n	8007764 <_DrawBitmap+0x134>
 800778c:	e7d1      	b.n	8007732 <_DrawBitmap+0x102>
 800778e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007790:	2b08      	cmp	r3, #8
 8007792:	f040 8089 	bne.w	80078a8 <_DrawBitmap+0x278>
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	3c01      	subs	r4, #1
 800779a:	9e05      	ldr	r6, [sp, #20]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800789c <_DrawBitmap+0x26c>
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	f06f 0301 	mvn.w	r3, #1
 80077a8:	fb03 f30b 	mul.w	r3, r3, fp
 80077ac:	9303      	str	r3, [sp, #12]
 80077ae:	9b02      	ldr	r3, [sp, #8]
 80077b0:	445b      	add	r3, fp
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	1c61      	adds	r1, r4, #1
 80077b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077ba:	1af3      	subs	r3, r6, r3
 80077bc:	429a      	cmp	r2, r3
 80077be:	f340 82d6 	ble.w	8007d6e <_DrawBitmap+0x73e>
 80077c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d036      	beq.n	8007836 <_DrawBitmap+0x206>
 80077c8:	f8d9 3000 	ldr.w	r3, [r9]
 80077cc:	7c1b      	ldrb	r3, [r3, #16]
 80077ce:	f013 0303 	ands.w	r3, r3, #3
 80077d2:	d009      	beq.n	80077e8 <_DrawBitmap+0x1b8>
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d15a      	bne.n	800788e <_DrawBitmap+0x25e>
 80077d8:	9b03      	ldr	r3, [sp, #12]
 80077da:	46a2      	mov	sl, r4
 80077dc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80077e0:	465f      	mov	r7, fp
 80077e2:	18eb      	adds	r3, r5, r3
 80077e4:	9308      	str	r3, [sp, #32]
 80077e6:	e021      	b.n	800782c <_DrawBitmap+0x1fc>
 80077e8:	9b07      	ldr	r3, [sp, #28]
 80077ea:	4622      	mov	r2, r4
 80077ec:	18e9      	adds	r1, r5, r3
 80077ee:	462b      	mov	r3, r5
 80077f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80077f4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80077f6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80077fa:	f823 0b02 	strh.w	r0, [r3], #2
 80077fe:	428b      	cmp	r3, r1
 8007800:	d1f6      	bne.n	80077f0 <_DrawBitmap+0x1c0>
 8007802:	e044      	b.n	800788e <_DrawBitmap+0x25e>
 8007804:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800780a:	9a08      	ldr	r2, [sp, #32]
 800780c:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8007810:	f1b8 0f00 	cmp.w	r8, #0
 8007814:	d006      	beq.n	8007824 <_DrawBitmap+0x1f4>
 8007816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800781a:	4632      	mov	r2, r6
 800781c:	4639      	mov	r1, r7
 800781e:	4640      	mov	r0, r8
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4798      	blx	r3
 8007824:	3701      	adds	r7, #1
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	42bb      	cmp	r3, r7
 800782a:	d030      	beq.n	800788e <_DrawBitmap+0x25e>
 800782c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f7      	beq.n	8007824 <_DrawBitmap+0x1f4>
 8007834:	e7e6      	b.n	8007804 <_DrawBitmap+0x1d4>
 8007836:	f8d9 3000 	ldr.w	r3, [r9]
 800783a:	7c1b      	ldrb	r3, [r3, #16]
 800783c:	f013 0303 	ands.w	r3, r3, #3
 8007840:	d009      	beq.n	8007856 <_DrawBitmap+0x226>
 8007842:	2b02      	cmp	r3, #2
 8007844:	d123      	bne.n	800788e <_DrawBitmap+0x25e>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	46a2      	mov	sl, r4
 800784a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800784e:	465f      	mov	r7, fp
 8007850:	18eb      	adds	r3, r5, r3
 8007852:	9308      	str	r3, [sp, #32]
 8007854:	e016      	b.n	8007884 <_DrawBitmap+0x254>
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <_DrawBitmap+0x274>)
 8007858:	4628      	mov	r0, r5
 800785a:	9a02      	ldr	r2, [sp, #8]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4798      	blx	r3
 8007860:	e015      	b.n	800788e <_DrawBitmap+0x25e>
 8007862:	9a08      	ldr	r2, [sp, #32]
 8007864:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8007868:	f1b8 0f00 	cmp.w	r8, #0
 800786c:	d006      	beq.n	800787c <_DrawBitmap+0x24c>
 800786e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007872:	4632      	mov	r2, r6
 8007874:	4639      	mov	r1, r7
 8007876:	4640      	mov	r0, r8
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4798      	blx	r3
 800787c:	3701      	adds	r7, #1
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	429f      	cmp	r7, r3
 8007882:	d004      	beq.n	800788e <_DrawBitmap+0x25e>
 8007884:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0f7      	beq.n	800787c <_DrawBitmap+0x24c>
 800788c:	e7e9      	b.n	8007862 <_DrawBitmap+0x232>
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	3601      	adds	r6, #1
 8007892:	441d      	add	r5, r3
 8007894:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007896:	441c      	add	r4, r3
 8007898:	e78c      	b.n	80077b4 <_DrawBitmap+0x184>
 800789a:	bf00      	nop
 800789c:	20000080 	.word	0x20000080
 80078a0:	20049b94 	.word	0x20049b94
 80078a4:	2000008c 	.word	0x2000008c
 80078a8:	4baf      	ldr	r3, [pc, #700]	; (8007b68 <_DrawBitmap+0x538>)
 80078aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80078ac:	2a00      	cmp	r2, #0
 80078ae:	bf08      	it	eq
 80078b0:	461a      	moveq	r2, r3
 80078b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	921f      	str	r2, [sp, #124]	; 0x7c
 80078b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	930c      	str	r3, [sp, #48]	; 0x30
 80078c0:	1c63      	adds	r3, r4, #1
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	1c83      	adds	r3, r0, #2
 80078c6:	9307      	str	r3, [sp, #28]
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	9a05      	ldr	r2, [sp, #20]
 80078d0:	1e9c      	subs	r4, r3, #2
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80078d8:	9b04      	ldr	r3, [sp, #16]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078de:	429a      	cmp	r2, r3
 80078e0:	f340 8245 	ble.w	8007d6e <_DrawBitmap+0x73e>
 80078e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	f000 80c7 	beq.w	8007a7a <_DrawBitmap+0x44a>
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	f000 8167 	beq.w	8007bc0 <_DrawBitmap+0x590>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	f040 822f 	bne.w	8007d56 <_DrawBitmap+0x726>
 80078f8:	4b9c      	ldr	r3, [pc, #624]	; (8007b6c <_DrawBitmap+0x53c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80078fe:	f7fc ff1f 	bl	8004740 <GUI_ALLOC_LockH>
 8007902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007904:	4a9a      	ldr	r2, [pc, #616]	; (8007b70 <_DrawBitmap+0x540>)
 8007906:	f1c3 0508 	rsb	r5, r3, #8
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	900e      	str	r0, [sp, #56]	; 0x38
 800790e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007912:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8007916:	5cd6      	ldrb	r6, [r2, r3]
 8007918:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800791a:	9f02      	ldr	r7, [sp, #8]
 800791c:	411e      	asrs	r6, r3
 800791e:	4b93      	ldr	r3, [pc, #588]	; (8007b6c <_DrawBitmap+0x53c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	7c1b      	ldrb	r3, [r3, #16]
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d01f      	beq.n	800796c <_DrawBitmap+0x33c>
 800792c:	2b03      	cmp	r3, #3
 800792e:	d058      	beq.n	80079e2 <_DrawBitmap+0x3b2>
 8007930:	2b01      	cmp	r3, #1
 8007932:	d056      	beq.n	80079e2 <_DrawBitmap+0x3b2>
 8007934:	42bd      	cmp	r5, r7
 8007936:	4622      	mov	r2, r4
 8007938:	bf28      	it	cs
 800793a:	463d      	movcs	r5, r7
 800793c:	1b7f      	subs	r7, r7, r5
 800793e:	462b      	mov	r3, r5
 8007940:	f006 0101 	and.w	r1, r6, #1
 8007944:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007946:	3b01      	subs	r3, #1
 8007948:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800794c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8007950:	f822 1b02 	strh.w	r1, [r2], #2
 8007954:	d1f4      	bne.n	8007940 <_DrawBitmap+0x310>
 8007956:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800795a:	2f00      	cmp	r7, #0
 800795c:	f000 8089 	beq.w	8007a72 <_DrawBitmap+0x442>
 8007960:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007964:	2508      	movs	r5, #8
 8007966:	4a82      	ldr	r2, [pc, #520]	; (8007b70 <_DrawBitmap+0x540>)
 8007968:	5cd6      	ldrb	r6, [r2, r3]
 800796a:	e7e3      	b.n	8007934 <_DrawBitmap+0x304>
 800796c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800796e:	46d8      	mov	r8, fp
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	9308      	str	r3, [sp, #32]
 8007974:	42bd      	cmp	r5, r7
 8007976:	bf28      	it	cs
 8007978:	463d      	movcs	r5, r7
 800797a:	1b7f      	subs	r7, r7, r5
 800797c:	f1b9 0f00 	cmp.w	r9, #0
 8007980:	d023      	beq.n	80079ca <_DrawBitmap+0x39a>
 8007982:	b91e      	cbnz	r6, 800798c <_DrawBitmap+0x35c>
 8007984:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007988:	44a8      	add	r8, r5
 800798a:	e022      	b.n	80079d2 <_DrawBitmap+0x3a2>
 800798c:	07f2      	lsls	r2, r6, #31
 800798e:	d509      	bpl.n	80079a4 <_DrawBitmap+0x374>
 8007990:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007994:	4641      	mov	r1, r8
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	4648      	mov	r0, r9
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4798      	blx	r3
 800799e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80079a2:	8023      	strh	r3, [r4, #0]
 80079a4:	3d01      	subs	r5, #1
 80079a6:	f108 0801 	add.w	r8, r8, #1
 80079aa:	f104 0402 	add.w	r4, r4, #2
 80079ae:	d010      	beq.n	80079d2 <_DrawBitmap+0x3a2>
 80079b0:	0876      	lsrs	r6, r6, #1
 80079b2:	e7e6      	b.n	8007982 <_DrawBitmap+0x352>
 80079b4:	07f3      	lsls	r3, r6, #31
 80079b6:	f104 0402 	add.w	r4, r4, #2
 80079ba:	bf44      	itt	mi
 80079bc:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 80079c0:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 80079c4:	3d01      	subs	r5, #1
 80079c6:	d004      	beq.n	80079d2 <_DrawBitmap+0x3a2>
 80079c8:	0876      	lsrs	r6, r6, #1
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	d1f2      	bne.n	80079b4 <_DrawBitmap+0x384>
 80079ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d04d      	beq.n	8007a72 <_DrawBitmap+0x442>
 80079d6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80079da:	2508      	movs	r5, #8
 80079dc:	4a64      	ldr	r2, [pc, #400]	; (8007b70 <_DrawBitmap+0x540>)
 80079de:	5cd6      	ldrb	r6, [r2, r3]
 80079e0:	e7c8      	b.n	8007974 <_DrawBitmap+0x344>
 80079e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e4:	46d8      	mov	r8, fp
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	4798      	blx	r3
 80079ec:	b283      	uxth	r3, r0
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	42bd      	cmp	r5, r7
 80079f6:	bf28      	it	cs
 80079f8:	463d      	movcs	r5, r7
 80079fa:	1b7f      	subs	r7, r7, r5
 80079fc:	f1b9 0f00 	cmp.w	r9, #0
 8007a00:	d01b      	beq.n	8007a3a <_DrawBitmap+0x40a>
 8007a02:	eb08 0305 	add.w	r3, r8, r5
 8007a06:	46a2      	mov	sl, r4
 8007a08:	930d      	str	r3, [sp, #52]	; 0x34
 8007a0a:	07f0      	lsls	r0, r6, #31
 8007a0c:	d50c      	bpl.n	8007a28 <_DrawBitmap+0x3f8>
 8007a0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007a12:	4641      	mov	r1, r8
 8007a14:	9a04      	ldr	r2, [sp, #16]
 8007a16:	4648      	mov	r0, r9
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4798      	blx	r3
 8007a1c:	f8ba 3000 	ldrh.w	r3, [sl]
 8007a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a22:	4053      	eors	r3, r2
 8007a24:	f8aa 3000 	strh.w	r3, [sl]
 8007a28:	f108 0801 	add.w	r8, r8, #1
 8007a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2e:	f10a 0a02 	add.w	sl, sl, #2
 8007a32:	0876      	lsrs	r6, r6, #1
 8007a34:	4598      	cmp	r8, r3
 8007a36:	d1e8      	bne.n	8007a0a <_DrawBitmap+0x3da>
 8007a38:	e00f      	b.n	8007a5a <_DrawBitmap+0x42a>
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	07f1      	lsls	r1, r6, #31
 8007a40:	f103 0302 	add.w	r3, r3, #2
 8007a44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a48:	bf41      	itttt	mi
 8007a4a:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 8007a4e:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8007a50:	4041      	eormi	r1, r0
 8007a52:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 8007a56:	3a01      	subs	r2, #1
 8007a58:	d1f1      	bne.n	8007a3e <_DrawBitmap+0x40e>
 8007a5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007a5e:	b147      	cbz	r7, 8007a72 <_DrawBitmap+0x442>
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	2508      	movs	r5, #8
 8007a64:	4a42      	ldr	r2, [pc, #264]	; (8007b70 <_DrawBitmap+0x540>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	5cd6      	ldrb	r6, [r2, r3]
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	e7c0      	b.n	80079f4 <_DrawBitmap+0x3c4>
 8007a72:	a80e      	add	r0, sp, #56	; 0x38
 8007a74:	f7fc fe72 	bl	800475c <GUI_ALLOC_UnlockH>
 8007a78:	e16d      	b.n	8007d56 <_DrawBitmap+0x726>
 8007a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a7c:	f1c3 0504 	rsb	r5, r3, #4
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8007a86:	b2ed      	uxtb	r5, r5
 8007a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8a:	409e      	lsls	r6, r3
 8007a8c:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <_DrawBitmap+0x53c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	b2f6      	uxtb	r6, r6
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d009      	beq.n	8007ab0 <_DrawBitmap+0x480>
 8007a9c:	d30a      	bcc.n	8007ab4 <_DrawBitmap+0x484>
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	f040 8159 	bne.w	8007d56 <_DrawBitmap+0x726>
 8007aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa6:	465f      	mov	r7, fp
 8007aa8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007aac:	9308      	str	r3, [sp, #32]
 8007aae:	e036      	b.n	8007b1e <_DrawBitmap+0x4ee>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	e07e      	b.n	8007bb2 <_DrawBitmap+0x582>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	4621      	mov	r1, r4
 8007aba:	bfc8      	it	gt
 8007abc:	b2dd      	uxtbgt	r5, r3
 8007abe:	1b5b      	subs	r3, r3, r5
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	09b0      	lsrs	r0, r6, #6
 8007ac4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	00b6      	lsls	r6, r6, #2
 8007aca:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8007ace:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007ad2:	b2f6      	uxtb	r6, r6
 8007ad4:	f821 0b02 	strh.w	r0, [r1], #2
 8007ad8:	d1f3      	bne.n	8007ac2 <_DrawBitmap+0x492>
 8007ada:	3d01      	subs	r5, #1
 8007adc:	b2ed      	uxtb	r5, r5
 8007ade:	3501      	adds	r5, #1
 8007ae0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8136 	beq.w	8007d56 <_DrawBitmap+0x726>
 8007aea:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007aee:	2504      	movs	r5, #4
 8007af0:	e7e1      	b.n	8007ab6 <_DrawBitmap+0x486>
 8007af2:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8007af6:	d125      	bne.n	8007b44 <_DrawBitmap+0x514>
 8007af8:	f109 0901 	add.w	r9, r9, #1
 8007afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007afe:	00b6      	lsls	r6, r6, #2
 8007b00:	4599      	cmp	r9, r3
 8007b02:	b2f6      	uxtb	r6, r6
 8007b04:	d1f5      	bne.n	8007af2 <_DrawBitmap+0x4c2>
 8007b06:	1c6b      	adds	r3, r5, #1
 8007b08:	3701      	adds	r7, #1
 8007b0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007b0e:	442f      	add	r7, r5
 8007b10:	f1b8 0f00 	cmp.w	r8, #0
 8007b14:	f000 811f 	beq.w	8007d56 <_DrawBitmap+0x726>
 8007b18:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007b1c:	2504      	movs	r5, #4
 8007b1e:	4545      	cmp	r5, r8
 8007b20:	f107 0301 	add.w	r3, r7, #1
 8007b24:	46b9      	mov	r9, r7
 8007b26:	bfc8      	it	gt
 8007b28:	fa5f f588 	uxtbgt.w	r5, r8
 8007b2c:	ebc5 0808 	rsb	r8, r5, r8
 8007b30:	3d01      	subs	r5, #1
 8007b32:	b2ed      	uxtb	r5, r5
 8007b34:	442b      	add	r3, r5
 8007b36:	930d      	str	r3, [sp, #52]	; 0x34
 8007b38:	f06f 0301 	mvn.w	r3, #1
 8007b3c:	fb03 4307 	mla	r3, r3, r7, r4
 8007b40:	9309      	str	r3, [sp, #36]	; 0x24
 8007b42:	e7d6      	b.n	8007af2 <_DrawBitmap+0x4c2>
 8007b44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007b46:	09b3      	lsrs	r3, r6, #6
 8007b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4e:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0cf      	beq.n	8007af8 <_DrawBitmap+0x4c8>
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	9a04      	ldr	r2, [sp, #16]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	9808      	ldr	r0, [sp, #32]
 8007b62:	4798      	blx	r3
 8007b64:	e7c8      	b.n	8007af8 <_DrawBitmap+0x4c8>
 8007b66:	bf00      	nop
 8007b68:	0800e5b8 	.word	0x0800e5b8
 8007b6c:	20000080 	.word	0x20000080
 8007b70:	0800e618 	.word	0x0800e618
 8007b74:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8007b78:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007b7c:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8007b80:	f101 0102 	add.w	r1, r1, #2
 8007b84:	bf18      	it	ne
 8007b86:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 8007b8a:	b2f6      	uxtb	r6, r6
 8007b8c:	bf1c      	itt	ne
 8007b8e:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8007b92:	f821 0c02 	strhne.w	r0, [r1, #-2]
 8007b96:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007b9a:	d1eb      	bne.n	8007b74 <_DrawBitmap+0x544>
 8007b9c:	3d01      	subs	r5, #1
 8007b9e:	b2ed      	uxtb	r5, r5
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80d5 	beq.w	8007d56 <_DrawBitmap+0x726>
 8007bac:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007bb0:	2504      	movs	r5, #4
 8007bb2:	429d      	cmp	r5, r3
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	bfc8      	it	gt
 8007bb8:	b2dd      	uxtbgt	r5, r3
 8007bba:	1b5b      	subs	r3, r3, r5
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	e7d9      	b.n	8007b74 <_DrawBitmap+0x544>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007bc8:	4093      	lsls	r3, r2
 8007bca:	4a6d      	ldr	r2, [pc, #436]	; (8007d80 <_DrawBitmap+0x750>)
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	b2dd      	uxtb	r5, r3
 8007bd0:	7c12      	ldrb	r2, [r2, #16]
 8007bd2:	f002 0203 	and.w	r2, r2, #3
 8007bd6:	2a01      	cmp	r2, #1
 8007bd8:	d003      	beq.n	8007be2 <_DrawBitmap+0x5b2>
 8007bda:	d308      	bcc.n	8007bee <_DrawBitmap+0x5be>
 8007bdc:	2a02      	cmp	r2, #2
 8007bde:	d03a      	beq.n	8007c56 <_DrawBitmap+0x626>
 8007be0:	e0b9      	b.n	8007d56 <_DrawBitmap+0x726>
 8007be2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007be4:	9a02      	ldr	r2, [sp, #8]
 8007be6:	f1c3 0302 	rsb	r3, r3, #2
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e0ac      	b.n	8007d48 <_DrawBitmap+0x718>
 8007bee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bf0:	b15b      	cbz	r3, 8007c0a <_DrawBitmap+0x5da>
 8007bf2:	092d      	lsrs	r5, r5, #4
 8007bf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bf6:	9a03      	ldr	r2, [sp, #12]
 8007bf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007bfc:	4692      	mov	sl, r2
 8007bfe:	8023      	strh	r3, [r4, #0]
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	9c07      	ldr	r4, [sp, #28]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	7815      	ldrb	r5, [r2, #0]
 8007c08:	e000      	b.n	8007c0c <_DrawBitmap+0x5dc>
 8007c0a:	9b02      	ldr	r3, [sp, #8]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	dd19      	ble.n	8007c44 <_DrawBitmap+0x614>
 8007c10:	1059      	asrs	r1, r3, #1
 8007c12:	1d22      	adds	r2, r4, #4
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	eb0a 0001 	add.w	r0, sl, r1
 8007c1c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007c1e:	092e      	lsrs	r6, r5, #4
 8007c20:	f005 050f 	and.w	r5, r5, #15
 8007c24:	3204      	adds	r2, #4
 8007c26:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8007c2a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8007c2e:	f822 6c08 	strh.w	r6, [r2, #-8]
 8007c32:	463e      	mov	r6, r7
 8007c34:	f822 5c06 	strh.w	r5, [r2, #-6]
 8007c38:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8007c3c:	4582      	cmp	sl, r0
 8007c3e:	d1ed      	bne.n	8007c1c <_DrawBitmap+0x5ec>
 8007c40:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8086 	beq.w	8007d56 <_DrawBitmap+0x726>
 8007c4a:	092d      	lsrs	r5, r5, #4
 8007c4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007c52:	8023      	strh	r3, [r4, #0]
 8007c54:	e07f      	b.n	8007d56 <_DrawBitmap+0x726>
 8007c56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c58:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007c5a:	b1c2      	cbz	r2, 8007c8e <_DrawBitmap+0x65e>
 8007c5c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8007c60:	d00b      	beq.n	8007c7a <_DrawBitmap+0x64a>
 8007c62:	092d      	lsrs	r5, r5, #4
 8007c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c66:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007c6a:	8023      	strh	r3, [r4, #0]
 8007c6c:	b12e      	cbz	r6, 8007c7a <_DrawBitmap+0x64a>
 8007c6e:	68b3      	ldr	r3, [r6, #8]
 8007c70:	4659      	mov	r1, fp
 8007c72:	9a04      	ldr	r2, [sp, #16]
 8007c74:	4630      	mov	r0, r6
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4798      	blx	r3
 8007c7a:	9b02      	ldr	r3, [sp, #8]
 8007c7c:	f10b 0701 	add.w	r7, fp, #1
 8007c80:	9c07      	ldr	r4, [sp, #28]
 8007c82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	781d      	ldrb	r5, [r3, #0]
 8007c8a:	469a      	mov	sl, r3
 8007c8c:	e00f      	b.n	8007cae <_DrawBitmap+0x67e>
 8007c8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c92:	465f      	mov	r7, fp
 8007c94:	e00b      	b.n	8007cae <_DrawBitmap+0x67e>
 8007c96:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8007c9a:	d10c      	bne.n	8007cb6 <_DrawBitmap+0x686>
 8007c9c:	f015 050f 	ands.w	r5, r5, #15
 8007ca0:	d117      	bne.n	8007cd2 <_DrawBitmap+0x6a2>
 8007ca2:	3404      	adds	r4, #4
 8007ca4:	3702      	adds	r7, #2
 8007ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8007caa:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8007cae:	f1b8 0f01 	cmp.w	r8, #1
 8007cb2:	dcf0      	bgt.n	8007c96 <_DrawBitmap+0x666>
 8007cb4:	e01a      	b.n	8007cec <_DrawBitmap+0x6bc>
 8007cb6:	092b      	lsrs	r3, r5, #4
 8007cb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cbe:	8023      	strh	r3, [r4, #0]
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	d0eb      	beq.n	8007c9c <_DrawBitmap+0x66c>
 8007cc4:	68b3      	ldr	r3, [r6, #8]
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4798      	blx	r3
 8007cd0:	e7e4      	b.n	8007c9c <_DrawBitmap+0x66c>
 8007cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cd4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007cd8:	8063      	strh	r3, [r4, #2]
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d0e1      	beq.n	8007ca2 <_DrawBitmap+0x672>
 8007cde:	68b3      	ldr	r3, [r6, #8]
 8007ce0:	1c79      	adds	r1, r7, #1
 8007ce2:	9a04      	ldr	r2, [sp, #16]
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4798      	blx	r3
 8007cea:	e7da      	b.n	8007ca2 <_DrawBitmap+0x672>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	d031      	beq.n	8007d56 <_DrawBitmap+0x726>
 8007cf2:	092d      	lsrs	r5, r5, #4
 8007cf4:	d02f      	beq.n	8007d56 <_DrawBitmap+0x726>
 8007cf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007cfc:	8023      	strh	r3, [r4, #0]
 8007cfe:	b356      	cbz	r6, 8007d56 <_DrawBitmap+0x726>
 8007d00:	68b3      	ldr	r3, [r6, #8]
 8007d02:	4639      	mov	r1, r7
 8007d04:	9a04      	ldr	r2, [sp, #16]
 8007d06:	4630      	mov	r0, r6
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4798      	blx	r3
 8007d0c:	e023      	b.n	8007d56 <_DrawBitmap+0x726>
 8007d0e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007d12:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8007d16:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007d1a:	f100 0002 	add.w	r0, r0, #2
 8007d1e:	bf18      	it	ne
 8007d20:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 8007d24:	b2ed      	uxtb	r5, r5
 8007d26:	bf1c      	itt	ne
 8007d28:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 8007d2c:	f820 6c02 	strhne.w	r6, [r0, #-2]
 8007d30:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8007d34:	d1eb      	bne.n	8007d0e <_DrawBitmap+0x6de>
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007d40:	b14a      	cbz	r2, 8007d56 <_DrawBitmap+0x726>
 8007d42:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8007d46:	2302      	movs	r3, #2
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	bfc8      	it	gt
 8007d4e:	b2d3      	uxtbgt	r3, r2
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	e7db      	b.n	8007d0e <_DrawBitmap+0x6de>
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	9a06      	ldr	r2, [sp, #24]
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	9b07      	ldr	r3, [sp, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	9307      	str	r3, [sp, #28]
 8007d6c:	e5ae      	b.n	80078cc <_DrawBitmap+0x29c>
 8007d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d70:	b113      	cbz	r3, 8007d78 <_DrawBitmap+0x748>
 8007d72:	a80f      	add	r0, sp, #60	; 0x3c
 8007d74:	f7fc fcf2 	bl	800475c <GUI_ALLOC_UnlockH>
 8007d78:	b011      	add	sp, #68	; 0x44
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000080 	.word	0x20000080

08007d84 <_GetDevProp>:
 8007d84:	2908      	cmp	r1, #8
 8007d86:	d004      	beq.n	8007d92 <_GetDevProp+0xe>
 8007d88:	6800      	ldr	r0, [r0, #0]
 8007d8a:	b120      	cbz	r0, 8007d96 <_GetDevProp+0x12>
 8007d8c:	68c3      	ldr	r3, [r0, #12]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	4718      	bx	r3
 8007d92:	2010      	movs	r0, #16
 8007d94:	4770      	bx	lr
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9a:	4770      	bx	lr

08007d9c <GUI_MEMDEV_SetDrawMemdev16bppFunc>:
 8007d9c:	4b01      	ldr	r3, [pc, #4]	; (8007da4 <GUI_MEMDEV_SetDrawMemdev16bppFunc+0x8>)
 8007d9e:	6018      	str	r0, [r3, #0]
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20049b94 	.word	0x20049b94

08007da8 <GUI_USAGE_DecUseCnt>:
 8007da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007daa:	4605      	mov	r5, r0
 8007dac:	f7fc fcc8 	bl	8004740 <GUI_ALLOC_LockH>
 8007db0:	8984      	ldrh	r4, [r0, #12]
 8007db2:	ab02      	add	r3, sp, #8
 8007db4:	3c01      	subs	r4, #1
 8007db6:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007dba:	b224      	sxth	r4, r4
 8007dbc:	8184      	strh	r4, [r0, #12]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fccc 	bl	800475c <GUI_ALLOC_UnlockH>
 8007dc4:	b914      	cbnz	r4, 8007dcc <GUI_USAGE_DecUseCnt+0x24>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7fc fce8 	bl	800479c <GUI_ALLOC_Free>
 8007dcc:	b003      	add	sp, #12
 8007dce:	bd30      	pop	{r4, r5, pc}

08007dd0 <GUI_USAGE_AddRect>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	9c08      	ldr	r4, [sp, #32]
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	4688      	mov	r8, r1
 8007dda:	4699      	mov	r9, r3
 8007ddc:	4414      	add	r4, r2
 8007dde:	68ab      	ldr	r3, [r5, #8]
 8007de0:	1c56      	adds	r6, r2, #1
 8007de2:	4641      	mov	r1, r8
 8007de4:	4628      	mov	r0, r5
 8007de6:	685f      	ldr	r7, [r3, #4]
 8007de8:	464b      	mov	r3, r9
 8007dea:	47b8      	blx	r7
 8007dec:	42b4      	cmp	r4, r6
 8007dee:	4632      	mov	r2, r6
 8007df0:	d1f5      	bne.n	8007dde <GUI_USAGE_AddRect+0xe>
 8007df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007df6 <_Convert16>:
 8007df6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007dfe:	4681      	mov	r9, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	4616      	mov	r6, r2
 8007e04:	461f      	mov	r7, r3
 8007e06:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	4688      	mov	r8, r1
 8007e0e:	f839 0b02 	ldrh.w	r0, [r9], #2
 8007e12:	47d8      	blx	fp
 8007e14:	47d0      	blx	sl
 8007e16:	3c01      	subs	r4, #1
 8007e18:	f848 0b04 	str.w	r0, [r8], #4
 8007e1c:	d1f7      	bne.n	8007e0e <_Convert16+0x18>
 8007e1e:	2f1f      	cmp	r7, #31
 8007e20:	d806      	bhi.n	8007e30 <_Convert16+0x3a>
 8007e22:	463a      	mov	r2, r7
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	f001 bd70 	b.w	8009910 <GUI__CompactPixelIndices>
 8007e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e34 <_Convert8>:
 8007e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	4616      	mov	r6, r2
 8007e42:	461f      	mov	r7, r3
 8007e44:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007e48:	4689      	mov	r9, r1
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e50:	47d8      	blx	fp
 8007e52:	47d0      	blx	sl
 8007e54:	1b33      	subs	r3, r6, r4
 8007e56:	f849 0b04 	str.w	r0, [r9], #4
 8007e5a:	eb18 0f03 	cmn.w	r8, r3
 8007e5e:	d1f5      	bne.n	8007e4c <_Convert8+0x18>
 8007e60:	2f1f      	cmp	r7, #31
 8007e62:	d806      	bhi.n	8007e72 <_Convert8+0x3e>
 8007e64:	463a      	mov	r2, r7
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6e:	f001 bd4f 	b.w	8009910 <GUI__CompactPixelIndices>
 8007e72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007e78 <GUI_MEMDEV__WriteToActiveOpaque>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	b09b      	sub	sp, #108	; 0x6c
 8007e7e:	4605      	mov	r5, r0
 8007e80:	9108      	str	r1, [sp, #32]
 8007e82:	9209      	str	r2, [sp, #36]	; 0x24
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f000 8399 	beq.w	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8007e8a:	f7fc fc59 	bl	8004740 <GUI_ALLOC_LockH>
 8007e8e:	ab1a      	add	r3, sp, #104	; 0x68
 8007e90:	6944      	ldr	r4, [r0, #20]
 8007e92:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fc fc60 	bl	800475c <GUI_ALLOC_UnlockH>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f001 fe7d 	bl	8009b9c <GUI_MEMDEV_GetBitsPerPixel>
 8007ea2:	2808      	cmp	r0, #8
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	4ea5      	ldr	r6, [pc, #660]	; (800813c <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8007ea8:	dd02      	ble.n	8007eb0 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f000 81c9 	beq.w	8008242 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	2700      	movs	r7, #0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8007eba:	9319      	str	r3, [sp, #100]	; 0x64
 8007ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ebe:	9718      	str	r7, [sp, #96]	; 0x60
 8007ec0:	f7fc fc3e 	bl	8004740 <GUI_ALLOC_LockH>
 8007ec4:	6802      	ldr	r2, [r0, #0]
 8007ec6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8007eca:	6912      	ldr	r2, [r2, #16]
 8007ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8007ece:	6853      	ldr	r3, [r2, #4]
 8007ed0:	6832      	ldr	r2, [r6, #0]
 8007ed2:	f849 0d14 	str.w	r0, [r9, #-20]!
 8007ed6:	6904      	ldr	r4, [r0, #16]
 8007ed8:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8007edc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007ee0:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8007ee4:	7c50      	ldrb	r0, [r2, #17]
 8007ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ee8:	f7fe f98e 	bl	8006208 <GUI_GetBitsPerPixelEx>
 8007eec:	6832      	ldr	r2, [r6, #0]
 8007eee:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ef0:	7c50      	ldrb	r0, [r2, #17]
 8007ef2:	f7fe f9b1 	bl	8006258 <GUI_GetpfIndex2ColorEx>
 8007ef6:	900a      	str	r0, [sp, #40]	; 0x28
 8007ef8:	4648      	mov	r0, r9
 8007efa:	f7fc fc2f 	bl	800475c <GUI_ALLOC_UnlockH>
 8007efe:	2c08      	cmp	r4, #8
 8007f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f04:	d904      	bls.n	8007f10 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 8007f06:	2c10      	cmp	r4, #16
 8007f08:	bf8c      	ite	hi
 8007f0a:	2304      	movhi	r3, #4
 8007f0c:	2302      	movls	r3, #2
 8007f0e:	e005      	b.n	8007f1c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8007f10:	2c01      	cmp	r4, #1
 8007f12:	d103      	bne.n	8007f1c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8007f14:	ab18      	add	r3, sp, #96	; 0x60
 8007f16:	940d      	str	r4, [sp, #52]	; 0x34
 8007f18:	930a      	str	r3, [sp, #40]	; 0x28
 8007f1a:	e001      	b.n	8007f20 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8007f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f1e:	970a      	str	r7, [sp, #40]	; 0x28
 8007f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f000 80df 	beq.w	80080e6 <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8007f28:	6833      	ldr	r3, [r6, #0]
 8007f2a:	7c58      	ldrb	r0, [r3, #17]
 8007f2c:	f7fe f99c 	bl	8006268 <GUI_GetpfColor2IndexEx>
 8007f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f32:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8007f36:	f7fc fd91 	bl	8004a5c <GUI_ALLOC_AllocNoInit>
 8007f3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f000 833d 	beq.w	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8007f42:	4628      	mov	r0, r5
 8007f44:	f001 fe62 	bl	8009c0c <GUI_MEMDEV_GetDataPtr>
 8007f48:	4605      	mov	r5, r0
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	f000 80b9 	beq.w	80080c4 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7fc fbf4 	bl	8004740 <GUI_ALLOC_LockH>
 8007f58:	eb05 030a 	add.w	r3, r5, sl
 8007f5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f60:	9311      	str	r3, [sp, #68]	; 0x44
 8007f62:	2300      	movs	r3, #0
 8007f64:	9016      	str	r0, [sp, #88]	; 0x58
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f6c:	ebca 0703 	rsb	r7, sl, r3
 8007f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f72:	4293      	cmp	r3, r2
 8007f74:	f340 80a2 	ble.w	80080bc <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007f7c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8007f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f82:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f84:	6883      	ldr	r3, [r0, #8]
 8007f86:	4641      	mov	r1, r8
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	4798      	blx	r3
 8007f8c:	4583      	cmp	fp, r0
 8007f8e:	4605      	mov	r5, r0
 8007f90:	d128      	bne.n	8007fe4 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8007f92:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f94:	f7fc fbd4 	bl	8004740 <GUI_ALLOC_LockH>
 8007f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f9a:	2c08      	cmp	r4, #8
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	465a      	mov	r2, fp
 8007fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fa4:	9014      	str	r0, [sp, #80]	; 0x50
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fac:	d902      	bls.n	8007fb4 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8007fae:	f7ff ff22 	bl	8007df6 <_Convert16>
 8007fb2:	e001      	b.n	8007fb8 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 8007fb4:	f7ff ff3e 	bl	8007e34 <_Convert8>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	ad1a      	add	r5, sp, #104	; 0x68
 8007fbc:	9808      	ldr	r0, [sp, #32]
 8007fbe:	465a      	mov	r2, fp
 8007fc0:	9305      	str	r3, [sp, #20]
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	f7fd fdca 	bl	8005b70 <LCD_DrawBitmap>
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f7fc fbbd 	bl	800475c <GUI_ALLOC_UnlockH>
 8007fe2:	e062      	b.n	80080aa <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8007fe4:	2c01      	cmp	r4, #1
 8007fe6:	d002      	beq.n	8007fee <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8007fe8:	f04f 0801 	mov.w	r8, #1
 8007fec:	e057      	b.n	800809e <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	d05b      	beq.n	80080aa <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8007ff2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	9e08      	ldr	r6, [sp, #32]
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f000 0307 	and.w	r3, r0, #7
 8007ffe:	f8cd a00c 	str.w	sl, [sp, #12]
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	9305      	str	r3, [sp, #20]
 8008008:	2308      	movs	r3, #8
 800800a:	fb90 f3f3 	sdiv	r3, r0, r3
 800800e:	443b      	add	r3, r7
 8008010:	4430      	add	r0, r6
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	2301      	movs	r3, #1
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	f7fd fcbc 	bl	8005998 <LCD__DrawBitmap_1bpp>
 8008020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008022:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008024:	4641      	mov	r1, r8
 8008026:	441d      	add	r5, r3
 8008028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800802a:	6883      	ldr	r3, [r0, #8]
 800802c:	9517      	str	r5, [sp, #92]	; 0x5c
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	4798      	blx	r3
 8008032:	4605      	mov	r5, r0
 8008034:	e7db      	b.n	8007fee <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8008036:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008038:	f7fc fb82 	bl	8004740 <GUI_ALLOC_LockH>
 800803c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800803e:	4601      	mov	r1, r0
 8008040:	9014      	str	r0, [sp, #80]	; 0x50
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	2c08      	cmp	r4, #8
 8008046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008048:	462a      	mov	r2, r5
 800804a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800804c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	fb00 7006 	mla	r0, r0, r6, r7
 8008054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008056:	d925      	bls.n	80080a4 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8008058:	f7ff fecd 	bl	8007df6 <_Convert16>
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	462a      	mov	r2, r5
 8008060:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008062:	4649      	mov	r1, r9
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008068:	9e08      	ldr	r6, [sp, #32]
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	2300      	movs	r3, #0
 800806e:	4430      	add	r0, r6
 8008070:	f8cd 8004 	str.w	r8, [sp, #4]
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	f8cd 8000 	str.w	r8, [sp]
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	2301      	movs	r3, #1
 8008080:	f7fd fd76 	bl	8005b70 <LCD_DrawBitmap>
 8008084:	a814      	add	r0, sp, #80	; 0x50
 8008086:	f7fc fb69 	bl	800475c <GUI_ALLOC_UnlockH>
 800808a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800808c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800808e:	a917      	add	r1, sp, #92	; 0x5c
 8008090:	441d      	add	r5, r3
 8008092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008094:	6883      	ldr	r3, [r0, #8]
 8008096:	9517      	str	r5, [sp, #92]	; 0x5c
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	4798      	blx	r3
 800809c:	4605      	mov	r5, r0
 800809e:	2d00      	cmp	r5, #0
 80080a0:	d1c9      	bne.n	8008036 <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 80080a2:	e002      	b.n	80080aa <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80080a4:	f7ff fec6 	bl	8007e34 <_Convert8>
 80080a8:	e7d8      	b.n	800805c <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 80080aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ac:	f109 0901 	add.w	r9, r9, #1
 80080b0:	3301      	adds	r3, #1
 80080b2:	9309      	str	r3, [sp, #36]	; 0x24
 80080b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b6:	4453      	add	r3, sl
 80080b8:	9311      	str	r3, [sp, #68]	; 0x44
 80080ba:	e755      	b.n	8007f68 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 80080bc:	a816      	add	r0, sp, #88	; 0x58
 80080be:	f7fc fb4d 	bl	800475c <GUI_ALLOC_UnlockH>
 80080c2:	e00e      	b.n	80080e2 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 80080c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c6:	465a      	mov	r2, fp
 80080c8:	9004      	str	r0, [sp, #16]
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	2301      	movs	r3, #1
 80080ce:	f8cd a00c 	str.w	sl, [sp, #12]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	9402      	str	r4, [sp, #8]
 80080d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080dc:	9808      	ldr	r0, [sp, #32]
 80080de:	f7fd fd47 	bl	8005b70 <LCD_DrawBitmap>
 80080e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080e4:	e268      	b.n	80085b8 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f001 fd90 	bl	8009c0c <GUI_MEMDEV_GetDataPtr>
 80080ec:	4607      	mov	r7, r0
 80080ee:	f1b8 0f00 	cmp.w	r8, #0
 80080f2:	f000 809a 	beq.w	800822a <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 80080f6:	2500      	movs	r5, #0
 80080f8:	4640      	mov	r0, r8
 80080fa:	f7fc fb21 	bl	8004740 <GUI_ALLOC_LockH>
 80080fe:	9016      	str	r0, [sp, #88]	; 0x58
 8008100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008102:	42ab      	cmp	r3, r5
 8008104:	f340 808d 	ble.w	8008222 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 8008108:	2300      	movs	r3, #0
 800810a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800810c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8008110:	462a      	mov	r2, r5
 8008112:	9317      	str	r3, [sp, #92]	; 0x5c
 8008114:	6883      	ldr	r3, [r0, #8]
 8008116:	4641      	mov	r1, r8
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	4798      	blx	r3
 800811c:	4583      	cmp	fp, r0
 800811e:	4606      	mov	r6, r0
 8008120:	d126      	bne.n	8008170 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 8008122:	462e      	mov	r6, r5
 8008124:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008126:	f106 0901 	add.w	r9, r6, #1
 800812a:	4641      	mov	r1, r8
 800812c:	6883      	ldr	r3, [r0, #8]
 800812e:	464a      	mov	r2, r9
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	4798      	blx	r3
 8008134:	4583      	cmp	fp, r0
 8008136:	d103      	bne.n	8008140 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8008138:	464e      	mov	r6, r9
 800813a:	e7f3      	b.n	8008124 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 800813c:	20000080 	.word	0x20000080
 8008140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008142:	ebc5 0806 	rsb	r8, r5, r6
 8008146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008148:	465a      	mov	r2, fp
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	2301      	movs	r3, #1
 8008152:	9704      	str	r7, [sp, #16]
 8008154:	4429      	add	r1, r5
 8008156:	f8cd a00c 	str.w	sl, [sp, #12]
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	4635      	mov	r5, r6
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4643      	mov	r3, r8
 8008162:	9402      	str	r4, [sp, #8]
 8008164:	9808      	ldr	r0, [sp, #32]
 8008166:	fb0a 7708 	mla	r7, sl, r8, r7
 800816a:	f7fd fd01 	bl	8005b70 <LCD_DrawBitmap>
 800816e:	e056      	b.n	800821e <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8008170:	2c01      	cmp	r4, #1
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	d004      	beq.n	8008180 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 8008176:	442b      	add	r3, r5
 8008178:	f04f 0901 	mov.w	r9, #1
 800817c:	930b      	str	r3, [sp, #44]	; 0x2c
 800817e:	e02b      	b.n	80081d8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8008180:	eb03 0905 	add.w	r9, r3, r5
 8008184:	46a0      	mov	r8, r4
 8008186:	b32e      	cbz	r6, 80081d4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8008188:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800818c:	4632      	mov	r2, r6
 800818e:	9808      	ldr	r0, [sp, #32]
 8008190:	4649      	mov	r1, r9
 8008192:	f00e 0307 	and.w	r3, lr, #7
 8008196:	f8cd a00c 	str.w	sl, [sp, #12]
 800819a:	4470      	add	r0, lr
 800819c:	f8cd 8008 	str.w	r8, [sp, #8]
 80081a0:	9306      	str	r3, [sp, #24]
 80081a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a4:	f8cd 8004 	str.w	r8, [sp, #4]
 80081a8:	9305      	str	r3, [sp, #20]
 80081aa:	2308      	movs	r3, #8
 80081ac:	f8cd 8000 	str.w	r8, [sp]
 80081b0:	fb9e f3f3 	sdiv	r3, lr, r3
 80081b4:	443b      	add	r3, r7
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	2301      	movs	r3, #1
 80081ba:	f7fd fbed 	bl	8005998 <LCD__DrawBitmap_1bpp>
 80081be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80081c2:	462a      	mov	r2, r5
 80081c4:	441e      	add	r6, r3
 80081c6:	a917      	add	r1, sp, #92	; 0x5c
 80081c8:	6883      	ldr	r3, [r0, #8]
 80081ca:	9617      	str	r6, [sp, #92]	; 0x5c
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	4798      	blx	r3
 80081d0:	4606      	mov	r6, r0
 80081d2:	e7d8      	b.n	8008186 <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 80081d4:	4457      	add	r7, sl
 80081d6:	e022      	b.n	800821e <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 80081d8:	2e00      	cmp	r6, #0
 80081da:	d0fb      	beq.n	80081d4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80081dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081de:	4632      	mov	r2, r6
 80081e0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e8:	9808      	ldr	r0, [sp, #32]
 80081ea:	fb03 730e 	mla	r3, r3, lr, r7
 80081ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f0:	4470      	add	r0, lr
 80081f2:	f8cd a00c 	str.w	sl, [sp, #12]
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	2301      	movs	r3, #1
 80081fa:	9402      	str	r4, [sp, #8]
 80081fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008200:	f8cd 9000 	str.w	r9, [sp]
 8008204:	f7fd fcb4 	bl	8005b70 <LCD_DrawBitmap>
 8008208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800820a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800820c:	462a      	mov	r2, r5
 800820e:	441e      	add	r6, r3
 8008210:	4641      	mov	r1, r8
 8008212:	6883      	ldr	r3, [r0, #8]
 8008214:	9617      	str	r6, [sp, #92]	; 0x5c
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	4798      	blx	r3
 800821a:	4606      	mov	r6, r0
 800821c:	e7dc      	b.n	80081d8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800821e:	3501      	adds	r5, #1
 8008220:	e76e      	b.n	8008100 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 8008222:	a816      	add	r0, sp, #88	; 0x58
 8008224:	f7fc fa9a 	bl	800475c <GUI_ALLOC_UnlockH>
 8008228:	e1c8      	b.n	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800822a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822c:	465a      	mov	r2, fp
 800822e:	9004      	str	r0, [sp, #16]
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	2301      	movs	r3, #1
 8008234:	f8cd a00c 	str.w	sl, [sp, #12]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	9402      	str	r4, [sp, #8]
 800823e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008240:	e03a      	b.n	80082b8 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8008242:	4628      	mov	r0, r5
 8008244:	f7fc fa7c 	bl	8004740 <GUI_ALLOC_LockH>
 8008248:	4683      	mov	fp, r0
 800824a:	a81a      	add	r0, sp, #104	; 0x68
 800824c:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8008250:	f840 bd10 	str.w	fp, [r0, #-16]!
 8008254:	930b      	str	r3, [sp, #44]	; 0x2c
 8008256:	f8db 2000 	ldr.w	r2, [fp]
 800825a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800825e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8008262:	930c      	str	r3, [sp, #48]	; 0x30
 8008264:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 8008268:	f7fc fa78 	bl	800475c <GUI_ALLOC_UnlockH>
 800826c:	6832      	ldr	r2, [r6, #0]
 800826e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8008272:	7c50      	ldrb	r0, [r2, #17]
 8008274:	4aa1      	ldr	r2, [pc, #644]	; (80084fc <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 8008276:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800827a:	6916      	ldr	r6, [r2, #16]
 800827c:	6833      	ldr	r3, [r6, #0]
 800827e:	930a      	str	r3, [sp, #40]	; 0x28
 8008280:	f7fd ffc2 	bl	8006208 <GUI_GetBitsPerPixelEx>
 8008284:	2808      	cmp	r0, #8
 8008286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008288:	d906      	bls.n	8008298 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800828a:	2810      	cmp	r0, #16
 800828c:	bf8c      	ite	hi
 800828e:	f04f 0a04 	movhi.w	sl, #4
 8008292:	f04f 0a02 	movls.w	sl, #2
 8008296:	e001      	b.n	800829c <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 8008298:	f04f 0a01 	mov.w	sl, #1
 800829c:	45b0      	cmp	r8, r6
 800829e:	d110      	bne.n	80082c2 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 80082a0:	2200      	movs	r2, #0
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	2301      	movs	r3, #1
 80082a6:	f10b 0018 	add.w	r0, fp, #24
 80082aa:	9205      	str	r2, [sp, #20]
 80082ac:	4622      	mov	r2, r4
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b4:	9004      	str	r0, [sp, #16]
 80082b6:	9702      	str	r7, [sp, #8]
 80082b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ba:	9808      	ldr	r0, [sp, #32]
 80082bc:	f7fd fc58 	bl	8005b70 <LCD_DrawBitmap>
 80082c0:	e17c      	b.n	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80082c2:	2f20      	cmp	r7, #32
 80082c4:	f040 80a2 	bne.w	800840c <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 80082c8:	fb0a f004 	mul.w	r0, sl, r4
 80082cc:	f7fc fbc6 	bl	8004a5c <GUI_ALLOC_AllocNoInit>
 80082d0:	900d      	str	r0, [sp, #52]	; 0x34
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f000 8172 	beq.w	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80082d8:	f7fc fa32 	bl	8004740 <GUI_ALLOC_LockH>
 80082dc:	9018      	str	r0, [sp, #96]	; 0x60
 80082de:	4628      	mov	r0, r5
 80082e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082e4:	f7fc fa2c 	bl	8004740 <GUI_ALLOC_LockH>
 80082e8:	9016      	str	r0, [sp, #88]	; 0x58
 80082ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082ee:	6933      	ldr	r3, [r6, #16]
 80082f0:	f100 0518 	add.w	r5, r0, #24
 80082f4:	920c      	str	r2, [sp, #48]	; 0x30
 80082f6:	b373      	cbz	r3, 8008356 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80082f8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80082fc:	f04f 0901 	mov.w	r9, #1
 8008300:	f1ba 0f02 	cmp.w	sl, #2
 8008304:	d005      	beq.n	8008312 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8008306:	f1ba 0f04 	cmp.w	sl, #4
 800830a:	d002      	beq.n	8008312 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800830c:	f1ba 0f01 	cmp.w	sl, #1
 8008310:	d106      	bne.n	8008320 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 8008312:	4628      	mov	r0, r5
 8008314:	445d      	add	r5, fp
 8008316:	6937      	ldr	r7, [r6, #16]
 8008318:	4653      	mov	r3, sl
 800831a:	4622      	mov	r2, r4
 800831c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800831e:	47b8      	blx	r7
 8008320:	2300      	movs	r3, #0
 8008322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008324:	f8cd 9004 	str.w	r9, [sp, #4]
 8008328:	4641      	mov	r1, r8
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f108 0701 	add.w	r7, r8, #1
 8008330:	9303      	str	r3, [sp, #12]
 8008332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008334:	9204      	str	r2, [sp, #16]
 8008336:	4622      	mov	r2, r4
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	2301      	movs	r3, #1
 800833c:	f8cd 9000 	str.w	r9, [sp]
 8008340:	9808      	ldr	r0, [sp, #32]
 8008342:	f7fd fc15 	bl	8005b70 <LCD_DrawBitmap>
 8008346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834a:	4413      	add	r3, r2
 800834c:	429f      	cmp	r7, r3
 800834e:	f000 812c 	beq.w	80085aa <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8008352:	46b8      	mov	r8, r7
 8008354:	e7d4      	b.n	8008300 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 8008356:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008358:	461e      	mov	r6, r3
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	f04f 0901 	mov.w	r9, #1
 8008360:	443b      	add	r3, r7
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	f1ba 0f02 	cmp.w	sl, #2
 8008368:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800836c:	d016      	beq.n	800839c <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 800836e:	f1ba 0f04 	cmp.w	sl, #4
 8008372:	d024      	beq.n	80083be <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 8008374:	f1ba 0f01 	cmp.w	sl, #1
 8008378:	d130      	bne.n	80083dc <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 800837a:	4643      	mov	r3, r8
 800837c:	462a      	mov	r2, r5
 800837e:	f852 0b04 	ldr.w	r0, [r2], #4
 8008382:	930e      	str	r3, [sp, #56]	; 0x38
 8008384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008386:	920b      	str	r2, [sp, #44]	; 0x2c
 8008388:	4798      	blx	r3
 800838a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800838c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800838e:	f803 0b01 	strb.w	r0, [r3], #1
 8008392:	1ae1      	subs	r1, r4, r3
 8008394:	eb18 0f01 	cmn.w	r8, r1
 8008398:	d1f1      	bne.n	800837e <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800839a:	e01e      	b.n	80083da <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800839c:	4643      	mov	r3, r8
 800839e:	462a      	mov	r2, r5
 80083a0:	46a0      	mov	r8, r4
 80083a2:	f852 0b04 	ldr.w	r0, [r2], #4
 80083a6:	930e      	str	r3, [sp, #56]	; 0x38
 80083a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80083ac:	4798      	blx	r3
 80083ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083b0:	f1b8 0801 	subs.w	r8, r8, #1
 80083b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083b6:	f823 0b02 	strh.w	r0, [r3], #2
 80083ba:	d1f2      	bne.n	80083a2 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 80083bc:	e00d      	b.n	80083da <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 80083be:	462a      	mov	r2, r5
 80083c0:	4623      	mov	r3, r4
 80083c2:	f852 0b04 	ldr.w	r0, [r2], #4
 80083c6:	930e      	str	r3, [sp, #56]	; 0x38
 80083c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80083cc:	4798      	blx	r3
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	f848 0b04 	str.w	r0, [r8], #4
 80083d4:	3b01      	subs	r3, #1
 80083d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083d8:	d1f3      	bne.n	80083c2 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 80083da:	445d      	add	r5, fp
 80083dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80083de:	4622      	mov	r2, r4
 80083e0:	9605      	str	r6, [sp, #20]
 80083e2:	4639      	mov	r1, r7
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	f107 0801 	add.w	r8, r7, #1
 80083ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ec:	9603      	str	r6, [sp, #12]
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	2301      	movs	r3, #1
 80083f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80083f6:	f8cd 9000 	str.w	r9, [sp]
 80083fa:	9808      	ldr	r0, [sp, #32]
 80083fc:	f7fd fbb8 	bl	8005b70 <LCD_DrawBitmap>
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	4543      	cmp	r3, r8
 8008404:	f000 80d1 	beq.w	80085aa <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8008408:	4647      	mov	r7, r8
 800840a:	e7ab      	b.n	8008364 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 800840c:	2f10      	cmp	r7, #16
 800840e:	f040 80d5 	bne.w	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8008412:	fb04 f00a 	mul.w	r0, r4, sl
 8008416:	f7fc fb21 	bl	8004a5c <GUI_ALLOC_AllocNoInit>
 800841a:	900d      	str	r0, [sp, #52]	; 0x34
 800841c:	2800      	cmp	r0, #0
 800841e:	f000 80cd 	beq.w	80085bc <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8008422:	f7fc f98d 	bl	8004740 <GUI_ALLOC_LockH>
 8008426:	9018      	str	r0, [sp, #96]	; 0x60
 8008428:	4628      	mov	r0, r5
 800842a:	f7fc f989 	bl	8004740 <GUI_ALLOC_LockH>
 800842e:	9016      	str	r0, [sp, #88]	; 0x58
 8008430:	6933      	ldr	r3, [r6, #16]
 8008432:	f100 0718 	add.w	r7, r0, #24
 8008436:	b113      	cbz	r3, 800843e <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8008438:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800843c:	b953      	cbnz	r3, 8008454 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 800843e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008444:	0066      	lsls	r6, r4, #1
 8008446:	f04f 0b00 	mov.w	fp, #0
 800844a:	930c      	str	r3, [sp, #48]	; 0x30
 800844c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844e:	442b      	add	r3, r5
 8008450:	9309      	str	r3, [sp, #36]	; 0x24
 8008452:	e083      	b.n	800855c <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8008454:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008458:	0080      	lsls	r0, r0, #2
 800845a:	f7fc faff 	bl	8004a5c <GUI_ALLOC_AllocNoInit>
 800845e:	900c      	str	r0, [sp, #48]	; 0x30
 8008460:	b118      	cbz	r0, 800846a <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8008462:	f7fc f96d 	bl	8004740 <GUI_ALLOC_LockH>
 8008466:	9017      	str	r0, [sp, #92]	; 0x5c
 8008468:	e001      	b.n	800846e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800846a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846c:	9317      	str	r3, [sp, #92]	; 0x5c
 800846e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 809a 	beq.w	80085aa <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8008476:	0063      	lsls	r3, r4, #1
 8008478:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800847c:	930a      	str	r3, [sp, #40]	; 0x28
 800847e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008482:	930e      	str	r3, [sp, #56]	; 0x38
 8008484:	f1ba 0f02 	cmp.w	sl, #2
 8008488:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800848c:	d006      	beq.n	800849c <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 800848e:	f1ba 0f04 	cmp.w	sl, #4
 8008492:	d005      	beq.n	80084a0 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8008494:	f1ba 0f01 	cmp.w	sl, #1
 8008498:	d111      	bne.n	80084be <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 800849a:	e001      	b.n	80084a0 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800849c:	4653      	mov	r3, sl
 800849e:	e000      	b.n	80084a2 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 80084a0:	2302      	movs	r3, #2
 80084a2:	4638      	mov	r0, r7
 80084a4:	4622      	mov	r2, r4
 80084a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80084a8:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80084ac:	47a8      	blx	r5
 80084ae:	4653      	mov	r3, sl
 80084b0:	4622      	mov	r2, r4
 80084b2:	4649      	mov	r1, r9
 80084b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80084b6:	6935      	ldr	r5, [r6, #16]
 80084b8:	47a8      	blx	r5
 80084ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084bc:	441f      	add	r7, r3
 80084be:	2300      	movs	r3, #0
 80084c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084c2:	4659      	mov	r1, fp
 80084c4:	9808      	ldr	r0, [sp, #32]
 80084c6:	9305      	str	r3, [sp, #20]
 80084c8:	f10b 0901 	add.w	r9, fp, #1
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	9204      	str	r2, [sp, #16]
 80084d2:	4622      	mov	r2, r4
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	2301      	movs	r3, #1
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	f7fd fb48 	bl	8005b70 <LCD_DrawBitmap>
 80084e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e4:	4413      	add	r3, r2
 80084e6:	4599      	cmp	r9, r3
 80084e8:	d001      	beq.n	80084ee <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 80084ea:	46cb      	mov	fp, r9
 80084ec:	e7ca      	b.n	8008484 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 80084ee:	a817      	add	r0, sp, #92	; 0x5c
 80084f0:	f7fc f934 	bl	800475c <GUI_ALLOC_UnlockH>
 80084f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084f6:	f7fc f951 	bl	800479c <GUI_ALLOC_Free>
 80084fa:	e056      	b.n	80085aa <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 80084fc:	20049cf4 	.word	0x20049cf4
 8008500:	f1ba 0f04 	cmp.w	sl, #4
 8008504:	d041      	beq.n	800858a <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8008506:	f1ba 0f01 	cmp.w	sl, #1
 800850a:	d111      	bne.n	8008530 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 800850c:	4643      	mov	r3, r8
 800850e:	463a      	mov	r2, r7
 8008510:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008514:	930e      	str	r3, [sp, #56]	; 0x38
 8008516:	920b      	str	r2, [sp, #44]	; 0x2c
 8008518:	47c8      	blx	r9
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	4798      	blx	r3
 800851e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008522:	f803 0b01 	strb.w	r0, [r3], #1
 8008526:	1ae1      	subs	r1, r4, r3
 8008528:	eb18 0f01 	cmn.w	r8, r1
 800852c:	d1f0      	bne.n	8008510 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 800852e:	4437      	add	r7, r6
 8008530:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008532:	4622      	mov	r2, r4
 8008534:	f8cd b014 	str.w	fp, [sp, #20]
 8008538:	4629      	mov	r1, r5
 800853a:	9304      	str	r3, [sp, #16]
 800853c:	f105 0801 	add.w	r8, r5, #1
 8008540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008542:	f8cd b00c 	str.w	fp, [sp, #12]
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	2301      	movs	r3, #1
 800854a:	9808      	ldr	r0, [sp, #32]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	f7fd fb0e 	bl	8005b70 <LCD_DrawBitmap>
 8008554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008556:	4543      	cmp	r3, r8
 8008558:	d027      	beq.n	80085aa <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800855a:	4645      	mov	r5, r8
 800855c:	f1ba 0f02 	cmp.w	sl, #2
 8008560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008564:	d1cc      	bne.n	8008500 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8008566:	4643      	mov	r3, r8
 8008568:	463a      	mov	r2, r7
 800856a:	46a0      	mov	r8, r4
 800856c:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008570:	930e      	str	r3, [sp, #56]	; 0x38
 8008572:	920b      	str	r2, [sp, #44]	; 0x2c
 8008574:	47c8      	blx	r9
 8008576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008578:	4798      	blx	r3
 800857a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857c:	f1b8 0801 	subs.w	r8, r8, #1
 8008580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008582:	f823 0b02 	strh.w	r0, [r3], #2
 8008586:	d1f1      	bne.n	800856c <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8008588:	e7d1      	b.n	800852e <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800858a:	463a      	mov	r2, r7
 800858c:	4623      	mov	r3, r4
 800858e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008592:	930e      	str	r3, [sp, #56]	; 0x38
 8008594:	920b      	str	r2, [sp, #44]	; 0x2c
 8008596:	47c8      	blx	r9
 8008598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859a:	4798      	blx	r3
 800859c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859e:	f848 0b04 	str.w	r0, [r8], #4
 80085a2:	3b01      	subs	r3, #1
 80085a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085a6:	d1f2      	bne.n	800858e <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 80085a8:	e7c1      	b.n	800852e <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 80085aa:	a816      	add	r0, sp, #88	; 0x58
 80085ac:	f7fc f8d6 	bl	800475c <GUI_ALLOC_UnlockH>
 80085b0:	a818      	add	r0, sp, #96	; 0x60
 80085b2:	f7fc f8d3 	bl	800475c <GUI_ALLOC_UnlockH>
 80085b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80085b8:	f7fc f8f0 	bl	800479c <GUI_ALLOC_Free>
 80085bc:	b01b      	add	sp, #108	; 0x6c
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c2:	bf00      	nop

080085c4 <_OnExit>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	4b1a      	ldr	r3, [pc, #104]	; (8008630 <_OnExit+0x6c>)
 80085c8:	2400      	movs	r4, #0
 80085ca:	4d1a      	ldr	r5, [pc, #104]	; (8008634 <_OnExit+0x70>)
 80085cc:	601c      	str	r4, [r3, #0]
 80085ce:	4621      	mov	r1, r4
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <_OnExit+0x74>)
 80085d2:	481a      	ldr	r0, [pc, #104]	; (800863c <_OnExit+0x78>)
 80085d4:	601c      	str	r4, [r3, #0]
 80085d6:	605c      	str	r4, [r3, #4]
 80085d8:	300c      	adds	r0, #12
 80085da:	4b19      	ldr	r3, [pc, #100]	; (8008640 <_OnExit+0x7c>)
 80085dc:	4a19      	ldr	r2, [pc, #100]	; (8008644 <_OnExit+0x80>)
 80085de:	601c      	str	r4, [r3, #0]
 80085e0:	4b19      	ldr	r3, [pc, #100]	; (8008648 <_OnExit+0x84>)
 80085e2:	f800 4c0c 	strb.w	r4, [r0, #-12]
 80085e6:	601c      	str	r4, [r3, #0]
 80085e8:	4b18      	ldr	r3, [pc, #96]	; (800864c <_OnExit+0x88>)
 80085ea:	f840 4c08 	str.w	r4, [r0, #-8]
 80085ee:	601c      	str	r4, [r3, #0]
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <_OnExit+0x8c>)
 80085f2:	6014      	str	r4, [r2, #0]
 80085f4:	6054      	str	r4, [r2, #4]
 80085f6:	2218      	movs	r2, #24
 80085f8:	601c      	str	r4, [r3, #0]
 80085fa:	f840 4c04 	str.w	r4, [r0, #-4]
 80085fe:	682b      	ldr	r3, [r5, #0]
 8008600:	4798      	blx	r3
 8008602:	4b14      	ldr	r3, [pc, #80]	; (8008654 <_OnExit+0x90>)
 8008604:	4621      	mov	r1, r4
 8008606:	2210      	movs	r2, #16
 8008608:	601c      	str	r4, [r3, #0]
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <_OnExit+0x94>)
 800860c:	4813      	ldr	r0, [pc, #76]	; (800865c <_OnExit+0x98>)
 800860e:	601c      	str	r4, [r3, #0]
 8008610:	605c      	str	r4, [r3, #4]
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	4798      	blx	r3
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	4621      	mov	r1, r4
 800861a:	2210      	movs	r2, #16
 800861c:	4810      	ldr	r0, [pc, #64]	; (8008660 <_OnExit+0x9c>)
 800861e:	4798      	blx	r3
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	4621      	mov	r1, r4
 8008624:	2210      	movs	r2, #16
 8008626:	480f      	ldr	r0, [pc, #60]	; (8008664 <_OnExit+0xa0>)
 8008628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800862c:	4718      	bx	r3
 800862e:	bf00      	nop
 8008630:	20049d54 	.word	0x20049d54
 8008634:	20000090 	.word	0x20000090
 8008638:	20049d5c 	.word	0x20049d5c
 800863c:	20049b98 	.word	0x20049b98
 8008640:	20049d68 	.word	0x20049d68
 8008644:	20049d28 	.word	0x20049d28
 8008648:	20049d14 	.word	0x20049d14
 800864c:	20049d48 	.word	0x20049d48
 8008650:	20049d58 	.word	0x20049d58
 8008654:	20049d24 	.word	0x20049d24
 8008658:	20049d18 	.word	0x20049d18
 800865c:	20049d8c 	.word	0x20049d8c
 8008660:	20049d7c 	.word	0x20049d7c
 8008664:	20049d6c 	.word	0x20049d6c

08008668 <_Findy1>:
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	4607      	mov	r7, r0
 800866e:	460c      	mov	r4, r1
 8008670:	4616      	mov	r6, r2
 8008672:	ad02      	add	r5, sp, #8
 8008674:	2f00      	cmp	r7, #0
 8008676:	d048      	beq.n	800870a <_Findy1+0xa2>
 8008678:	4638      	mov	r0, r7
 800867a:	f7fc f861 	bl	8004740 <GUI_ALLOC_LockH>
 800867e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008680:	4601      	mov	r1, r0
 8008682:	9001      	str	r0, [sp, #4]
 8008684:	07bb      	lsls	r3, r7, #30
 8008686:	d53a      	bpl.n	80086fe <_Findy1+0x96>
 8008688:	b126      	cbz	r6, 8008694 <_Findy1+0x2c>
 800868a:	4632      	mov	r2, r6
 800868c:	4628      	mov	r0, r5
 800868e:	f7fd f85a 	bl	8005746 <GUI__IntersectRects>
 8008692:	e002      	b.n	800869a <_Findy1+0x32>
 8008694:	c803      	ldmia	r0, {r0, r1}
 8008696:	e885 0003 	stmia.w	r5, {r0, r1}
 800869a:	4629      	mov	r1, r5
 800869c:	4620      	mov	r0, r4
 800869e:	f7fc fb2d 	bl	8004cfc <GUI_RectsIntersect>
 80086a2:	b360      	cbz	r0, 80086fe <_Findy1+0x96>
 80086a4:	f017 0f01 	tst.w	r7, #1
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	d11c      	bne.n	80086e6 <_Findy1+0x7e>
 80086ac:	b13e      	cbz	r6, 80086be <_Findy1+0x56>
 80086ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80086b2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80086b6:	4293      	cmp	r3, r2
 80086b8:	bfb8      	it	lt
 80086ba:	4613      	movlt	r3, r2
 80086bc:	e001      	b.n	80086c2 <_Findy1+0x5a>
 80086be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80086c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80086c6:	4293      	cmp	r3, r2
 80086c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80086cc:	dd05      	ble.n	80086da <_Findy1+0x72>
 80086ce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	db13      	blt.n	80086fe <_Findy1+0x96>
 80086d6:	3b01      	subs	r3, #1
 80086d8:	e003      	b.n	80086e2 <_Findy1+0x7a>
 80086da:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80086de:	429a      	cmp	r2, r3
 80086e0:	dd0d      	ble.n	80086fe <_Findy1+0x96>
 80086e2:	80e3      	strh	r3, [r4, #6]
 80086e4:	e00b      	b.n	80086fe <_Findy1+0x96>
 80086e6:	69df      	ldr	r7, [r3, #28]
 80086e8:	b14f      	cbz	r7, 80086fe <_Findy1+0x96>
 80086ea:	4638      	mov	r0, r7
 80086ec:	462a      	mov	r2, r5
 80086ee:	4621      	mov	r1, r4
 80086f0:	f7ff ffba 	bl	8008668 <_Findy1>
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7fc f819 	bl	800472c <GUI_ALLOC_h2p>
 80086fa:	6a07      	ldr	r7, [r0, #32]
 80086fc:	e7f4      	b.n	80086e8 <_Findy1+0x80>
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	a801      	add	r0, sp, #4
 8008702:	6a1f      	ldr	r7, [r3, #32]
 8008704:	f7fc f82a 	bl	800475c <GUI_ALLOC_UnlockH>
 8008708:	e7b4      	b.n	8008674 <_Findy1+0xc>
 800870a:	b005      	add	sp, #20
 800870c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800870e <_Findx0>:
 800870e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	4690      	mov	r8, r2
 8008718:	2500      	movs	r5, #0
 800871a:	ac02      	add	r4, sp, #8
 800871c:	2e00      	cmp	r6, #0
 800871e:	d035      	beq.n	800878c <_Findx0+0x7e>
 8008720:	4630      	mov	r0, r6
 8008722:	f7fc f80d 	bl	8004740 <GUI_ALLOC_LockH>
 8008726:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008728:	4601      	mov	r1, r0
 800872a:	9001      	str	r0, [sp, #4]
 800872c:	07b2      	lsls	r2, r6, #30
 800872e:	d527      	bpl.n	8008780 <_Findx0+0x72>
 8008730:	f1b8 0f00 	cmp.w	r8, #0
 8008734:	d004      	beq.n	8008740 <_Findx0+0x32>
 8008736:	4642      	mov	r2, r8
 8008738:	4620      	mov	r0, r4
 800873a:	f7fd f804 	bl	8005746 <GUI__IntersectRects>
 800873e:	e002      	b.n	8008746 <_Findx0+0x38>
 8008740:	c803      	ldmia	r0, {r0, r1}
 8008742:	e884 0003 	stmia.w	r4, {r0, r1}
 8008746:	4621      	mov	r1, r4
 8008748:	4638      	mov	r0, r7
 800874a:	f7fc fad7 	bl	8004cfc <GUI_RectsIntersect>
 800874e:	b1b8      	cbz	r0, 8008780 <_Findx0+0x72>
 8008750:	07f3      	lsls	r3, r6, #31
 8008752:	d405      	bmi.n	8008760 <_Findx0+0x52>
 8008754:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008758:	2501      	movs	r5, #1
 800875a:	3301      	adds	r3, #1
 800875c:	803b      	strh	r3, [r7, #0]
 800875e:	e00f      	b.n	8008780 <_Findx0+0x72>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	69de      	ldr	r6, [r3, #28]
 8008764:	b166      	cbz	r6, 8008780 <_Findx0+0x72>
 8008766:	4622      	mov	r2, r4
 8008768:	4639      	mov	r1, r7
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ffcf 	bl	800870e <_Findx0>
 8008770:	2800      	cmp	r0, #0
 8008772:	4630      	mov	r0, r6
 8008774:	bf18      	it	ne
 8008776:	2501      	movne	r5, #1
 8008778:	f7fb ffd8 	bl	800472c <GUI_ALLOC_h2p>
 800877c:	6a06      	ldr	r6, [r0, #32]
 800877e:	e7f1      	b.n	8008764 <_Findx0+0x56>
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	a801      	add	r0, sp, #4
 8008784:	6a1e      	ldr	r6, [r3, #32]
 8008786:	f7fb ffe9 	bl	800475c <GUI_ALLOC_UnlockH>
 800878a:	e7c7      	b.n	800871c <_Findx0+0xe>
 800878c:	4628      	mov	r0, r5
 800878e:	b004      	add	sp, #16
 8008790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008794 <_Findx1>:
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	b085      	sub	sp, #20
 8008798:	4605      	mov	r5, r0
 800879a:	460e      	mov	r6, r1
 800879c:	4617      	mov	r7, r2
 800879e:	ac02      	add	r4, sp, #8
 80087a0:	b37d      	cbz	r5, 8008802 <_Findx1+0x6e>
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7fb ffcc 	bl	8004740 <GUI_ALLOC_LockH>
 80087a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80087aa:	4601      	mov	r1, r0
 80087ac:	9001      	str	r0, [sp, #4]
 80087ae:	07aa      	lsls	r2, r5, #30
 80087b0:	d521      	bpl.n	80087f6 <_Findx1+0x62>
 80087b2:	b127      	cbz	r7, 80087be <_Findx1+0x2a>
 80087b4:	463a      	mov	r2, r7
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7fc ffc5 	bl	8005746 <GUI__IntersectRects>
 80087bc:	e002      	b.n	80087c4 <_Findx1+0x30>
 80087be:	c803      	ldmia	r0, {r0, r1}
 80087c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80087c4:	4621      	mov	r1, r4
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7fc fa98 	bl	8004cfc <GUI_RectsIntersect>
 80087cc:	b198      	cbz	r0, 80087f6 <_Findx1+0x62>
 80087ce:	07eb      	lsls	r3, r5, #31
 80087d0:	d404      	bmi.n	80087dc <_Findx1+0x48>
 80087d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	80b3      	strh	r3, [r6, #4]
 80087da:	e00c      	b.n	80087f6 <_Findx1+0x62>
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	69dd      	ldr	r5, [r3, #28]
 80087e0:	b14d      	cbz	r5, 80087f6 <_Findx1+0x62>
 80087e2:	4628      	mov	r0, r5
 80087e4:	4622      	mov	r2, r4
 80087e6:	4631      	mov	r1, r6
 80087e8:	f7ff ffd4 	bl	8008794 <_Findx1>
 80087ec:	4628      	mov	r0, r5
 80087ee:	f7fb ff9d 	bl	800472c <GUI_ALLOC_h2p>
 80087f2:	6a05      	ldr	r5, [r0, #32]
 80087f4:	e7f4      	b.n	80087e0 <_Findx1+0x4c>
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	a801      	add	r0, sp, #4
 80087fa:	6a1d      	ldr	r5, [r3, #32]
 80087fc:	f7fb ffae 	bl	800475c <GUI_ALLOC_UnlockH>
 8008800:	e7ce      	b.n	80087a0 <_Findx1+0xc>
 8008802:	b005      	add	sp, #20
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008808 <WM__ClipAtParentBorders>:
 8008808:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800880a:	4606      	mov	r6, r0
 800880c:	460d      	mov	r5, r1
 800880e:	4628      	mov	r0, r5
 8008810:	f7fb ff96 	bl	8004740 <GUI_ALLOC_LockH>
 8008814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008816:	4601      	mov	r1, r0
 8008818:	9001      	str	r0, [sp, #4]
 800881a:	f013 0402 	ands.w	r4, r3, #2
 800881e:	d104      	bne.n	800882a <WM__ClipAtParentBorders+0x22>
 8008820:	a801      	add	r0, sp, #4
 8008822:	f7fb ff9b 	bl	800475c <GUI_ALLOC_UnlockH>
 8008826:	4620      	mov	r0, r4
 8008828:	e016      	b.n	8008858 <WM__ClipAtParentBorders+0x50>
 800882a:	4630      	mov	r0, r6
 800882c:	f7fc ff6e 	bl	800570c <GUI__IntersectRect>
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	a801      	add	r0, sp, #4
 8008834:	699c      	ldr	r4, [r3, #24]
 8008836:	b954      	cbnz	r4, 800884e <WM__ClipAtParentBorders+0x46>
 8008838:	f7fb ff90 	bl	800475c <GUI_ALLOC_UnlockH>
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <WM__ClipAtParentBorders+0x54>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	4295      	cmp	r5, r2
 8008842:	d008      	beq.n	8008856 <WM__ClipAtParentBorders+0x4e>
 8008844:	6858      	ldr	r0, [r3, #4]
 8008846:	1b43      	subs	r3, r0, r5
 8008848:	4258      	negs	r0, r3
 800884a:	4158      	adcs	r0, r3
 800884c:	e004      	b.n	8008858 <WM__ClipAtParentBorders+0x50>
 800884e:	f7fb ff85 	bl	800475c <GUI_ALLOC_UnlockH>
 8008852:	4625      	mov	r5, r4
 8008854:	e7db      	b.n	800880e <WM__ClipAtParentBorders+0x6>
 8008856:	2001      	movs	r0, #1
 8008858:	b002      	add	sp, #8
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	20049d18 	.word	0x20049d18

08008860 <WM__InsertWindowIntoList>:
 8008860:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008864:	4606      	mov	r6, r0
 8008866:	460c      	mov	r4, r1
 8008868:	2900      	cmp	r1, #0
 800886a:	d04c      	beq.n	8008906 <WM__InsertWindowIntoList+0xa6>
 800886c:	f7fb ff68 	bl	8004740 <GUI_ALLOC_LockH>
 8008870:	2300      	movs	r3, #0
 8008872:	6184      	str	r4, [r0, #24]
 8008874:	9001      	str	r0, [sp, #4]
 8008876:	6203      	str	r3, [r0, #32]
 8008878:	4620      	mov	r0, r4
 800887a:	f7fb ff61 	bl	8004740 <GUI_ALLOC_LockH>
 800887e:	ac04      	add	r4, sp, #16
 8008880:	69c7      	ldr	r7, [r0, #28]
 8008882:	f844 0d08 	str.w	r0, [r4, #-8]!
 8008886:	b92f      	cbnz	r7, 8008894 <WM__InsertWindowIntoList+0x34>
 8008888:	61c6      	str	r6, [r0, #28]
 800888a:	a801      	add	r0, sp, #4
 800888c:	f7fb ff66 	bl	800475c <GUI_ALLOC_UnlockH>
 8008890:	4620      	mov	r0, r4
 8008892:	e036      	b.n	8008902 <WM__InsertWindowIntoList+0xa2>
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	f10d 0810 	add.w	r8, sp, #16
 800889a:	4638      	mov	r0, r7
 800889c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800889e:	f7fb ff4f 	bl	8004740 <GUI_ALLOC_LockH>
 80088a2:	f848 0d04 	str.w	r0, [r8, #-4]!
 80088a6:	f005 0508 	and.w	r5, r5, #8
 80088aa:	b975      	cbnz	r5, 80088ca <WM__InsertWindowIntoList+0x6a>
 80088ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088ae:	071a      	lsls	r2, r3, #28
 80088b0:	d50b      	bpl.n	80088ca <WM__InsertWindowIntoList+0x6a>
 80088b2:	9b01      	ldr	r3, [sp, #4]
 80088b4:	a801      	add	r0, sp, #4
 80088b6:	621f      	str	r7, [r3, #32]
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	61de      	str	r6, [r3, #28]
 80088bc:	f7fb ff4e 	bl	800475c <GUI_ALLOC_UnlockH>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7fb ff4b 	bl	800475c <GUI_ALLOC_UnlockH>
 80088c6:	4640      	mov	r0, r8
 80088c8:	e01b      	b.n	8008902 <WM__InsertWindowIntoList+0xa2>
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7fb ff46 	bl	800475c <GUI_ALLOC_UnlockH>
 80088d0:	4640      	mov	r0, r8
 80088d2:	f7fb ff43 	bl	800475c <GUI_ALLOC_UnlockH>
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7fb ff28 	bl	800472c <GUI_ALLOC_h2p>
 80088dc:	9003      	str	r0, [sp, #12]
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	6a1c      	ldr	r4, [r3, #32]
 80088e2:	b90c      	cbnz	r4, 80088e8 <WM__InsertWindowIntoList+0x88>
 80088e4:	621e      	str	r6, [r3, #32]
 80088e6:	e00b      	b.n	8008900 <WM__InsertWindowIntoList+0xa0>
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7fb ff1f 	bl	800472c <GUI_ALLOC_h2p>
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d1f4      	bne.n	80088dc <WM__InsertWindowIntoList+0x7c>
 80088f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088f4:	071b      	lsls	r3, r3, #28
 80088f6:	d5f1      	bpl.n	80088dc <WM__InsertWindowIntoList+0x7c>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	621e      	str	r6, [r3, #32]
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	621c      	str	r4, [r3, #32]
 8008900:	a801      	add	r0, sp, #4
 8008902:	f7fb ff2b 	bl	800475c <GUI_ALLOC_UnlockH>
 8008906:	b004      	add	sp, #16
 8008908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800890c <WM__Client2Screen>:
 800890c:	4603      	mov	r3, r0
 800890e:	4608      	mov	r0, r1
 8008910:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008914:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008918:	f7fc b9d7 	b.w	8004cca <GUI_MoveRect>

0800891c <_SetClipRectUserIntersect>:
 800891c:	4b11      	ldr	r3, [pc, #68]	; (8008964 <_SetClipRectUserIntersect+0x48>)
 800891e:	b530      	push	{r4, r5, lr}
 8008920:	681c      	ldr	r4, [r3, #0]
 8008922:	b085      	sub	sp, #20
 8008924:	4605      	mov	r5, r0
 8008926:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008928:	b1ba      	cbz	r2, 800895a <_SetClipRectUserIntersect+0x3e>
 800892a:	6810      	ldr	r0, [r2, #0]
 800892c:	ab02      	add	r3, sp, #8
 800892e:	6851      	ldr	r1, [r2, #4]
 8008930:	c303      	stmia	r3!, {r0, r1}
 8008932:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <_SetClipRectUserIntersect+0x4c>)
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	b900      	cbnz	r0, 800893a <_SetClipRectUserIntersect+0x1e>
 8008938:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800893a:	ac04      	add	r4, sp, #16
 800893c:	f7fb ff00 	bl	8004740 <GUI_ALLOC_LockH>
 8008940:	a902      	add	r1, sp, #8
 8008942:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008946:	f7ff ffe1 	bl	800890c <WM__Client2Screen>
 800894a:	4620      	mov	r0, r4
 800894c:	f7fb ff06 	bl	800475c <GUI_ALLOC_UnlockH>
 8008950:	a802      	add	r0, sp, #8
 8008952:	4629      	mov	r1, r5
 8008954:	f7fc feda 	bl	800570c <GUI__IntersectRect>
 8008958:	a802      	add	r0, sp, #8
 800895a:	f001 f907 	bl	8009b6c <LCD_SetClipRectEx>
 800895e:	b005      	add	sp, #20
 8008960:	bd30      	pop	{r4, r5, pc}
 8008962:	bf00      	nop
 8008964:	20000080 	.word	0x20000080
 8008968:	20049d14 	.word	0x20049d14

0800896c <WM__ActivateClipRect>:
 800896c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800896e:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <WM__ActivateClipRect+0x3c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008976:	b10a      	cbz	r2, 800897c <WM__ActivateClipRect+0x10>
 8008978:	480c      	ldr	r0, [pc, #48]	; (80089ac <WM__ActivateClipRect+0x40>)
 800897a:	e011      	b.n	80089a0 <WM__ActivateClipRect+0x34>
 800897c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800897e:	ac02      	add	r4, sp, #8
 8008980:	f7fb fede 	bl	8004740 <GUI_ALLOC_LockH>
 8008984:	9001      	str	r0, [sp, #4]
 8008986:	c803      	ldmia	r0, {r0, r1}
 8008988:	e884 0003 	stmia.w	r4, {r0, r1}
 800898c:	a801      	add	r0, sp, #4
 800898e:	f7fb fee5 	bl	800475c <GUI_ALLOC_UnlockH>
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <WM__ActivateClipRect+0x44>)
 8008994:	6819      	ldr	r1, [r3, #0]
 8008996:	b111      	cbz	r1, 800899e <WM__ActivateClipRect+0x32>
 8008998:	4620      	mov	r0, r4
 800899a:	f7ff ff35 	bl	8008808 <WM__ClipAtParentBorders>
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff ffbc 	bl	800891c <_SetClipRectUserIntersect>
 80089a4:	b004      	add	sp, #16
 80089a6:	bd10      	pop	{r4, pc}
 80089a8:	20000080 	.word	0x20000080
 80089ac:	20049bac 	.word	0x20049bac
 80089b0:	20049d14 	.word	0x20049d14

080089b4 <WM__InvalidateDrawAndDescs>:
 80089b4:	b513      	push	{r0, r1, r4, lr}
 80089b6:	4604      	mov	r4, r0
 80089b8:	b300      	cbz	r0, 80089fc <WM__InvalidateDrawAndDescs+0x48>
 80089ba:	f7fb fec1 	bl	8004740 <GUI_ALLOC_LockH>
 80089be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80089c0:	9001      	str	r0, [sp, #4]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	d517      	bpl.n	80089f6 <WM__InvalidateDrawAndDescs+0x42>
 80089c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80089c8:	b140      	cbz	r0, 80089dc <WM__InvalidateDrawAndDescs+0x28>
 80089ca:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <WM__InvalidateDrawAndDescs+0x4c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d004      	beq.n	80089dc <WM__InvalidateDrawAndDescs+0x28>
 80089d2:	f001 f8f9 	bl	8009bc8 <GUI_MEMDEV_Delete>
 80089d6:	2200      	movs	r2, #0
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	625a      	str	r2, [r3, #36]	; 0x24
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fc4f 	bl	8009280 <WM_GetFirstChild>
 80089e2:	4604      	mov	r4, r0
 80089e4:	b13c      	cbz	r4, 80089f6 <WM__InvalidateDrawAndDescs+0x42>
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7ff ffe4 	bl	80089b4 <WM__InvalidateDrawAndDescs>
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7fb fe9d 	bl	800472c <GUI_ALLOC_h2p>
 80089f2:	6a04      	ldr	r4, [r0, #32]
 80089f4:	e7f6      	b.n	80089e4 <WM__InvalidateDrawAndDescs+0x30>
 80089f6:	a801      	add	r0, sp, #4
 80089f8:	f7fb feb0 	bl	800475c <GUI_ALLOC_UnlockH>
 80089fc:	b002      	add	sp, #8
 80089fe:	bd10      	pop	{r4, pc}
 8008a00:	20049d64 	.word	0x20049d64

08008a04 <WM__RectIsNZ>:
 8008a04:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008a08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	dc08      	bgt.n	8008a22 <WM__RectIsNZ+0x1e>
 8008a10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008a14:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008a18:	4283      	cmp	r3, r0
 8008a1a:	bfcc      	ite	gt
 8008a1c:	2000      	movgt	r0, #0
 8008a1e:	2001      	movle	r0, #1
 8008a20:	4770      	bx	lr
 8008a22:	2000      	movs	r0, #0
 8008a24:	4770      	bx	lr

08008a26 <WM__SendMsgNoData>:
 8008a26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a28:	ab04      	add	r3, sp, #16
 8008a2a:	9001      	str	r0, [sp, #4]
 8008a2c:	f843 1d10 	str.w	r1, [r3, #-16]!
 8008a30:	4619      	mov	r1, r3
 8008a32:	f000 fcdf 	bl	80093f4 <WM__SendMessage>
 8008a36:	b005      	add	sp, #20
 8008a38:	f85d fb04 	ldr.w	pc, [sp], #4

08008a3c <WM__GetClientRectWin>:
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	804b      	strh	r3, [r1, #2]
 8008a40:	800b      	strh	r3, [r1, #0]
 8008a42:	8883      	ldrh	r3, [r0, #4]
 8008a44:	8802      	ldrh	r2, [r0, #0]
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	8842      	ldrh	r2, [r0, #2]
 8008a4a:	808b      	strh	r3, [r1, #4]
 8008a4c:	88c3      	ldrh	r3, [r0, #6]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	80cb      	strh	r3, [r1, #6]
 8008a52:	4770      	bx	lr

08008a54 <WM__GetTopLevelLayer>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	4604      	mov	r4, r0
 8008a58:	f7fb fe68 	bl	800472c <GUI_ALLOC_h2p>
 8008a5c:	6980      	ldr	r0, [r0, #24]
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d1f9      	bne.n	8008a56 <WM__GetTopLevelLayer+0x2>
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <WM__GetTopLevelLayer+0x24>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4294      	cmp	r4, r2
 8008a68:	d005      	beq.n	8008a76 <WM__GetTopLevelLayer+0x22>
 8008a6a:	6858      	ldr	r0, [r3, #4]
 8008a6c:	4284      	cmp	r4, r0
 8008a6e:	bf0c      	ite	eq
 8008a70:	2001      	moveq	r0, #1
 8008a72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008a76:	bd10      	pop	{r4, pc}
 8008a78:	20049d18 	.word	0x20049d18

08008a7c <_Invalidate1Abs>:
 8008a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	460d      	mov	r5, r1
 8008a82:	4606      	mov	r6, r0
 8008a84:	4617      	mov	r7, r2
 8008a86:	f7fb fe51 	bl	800472c <GUI_ALLOC_h2p>
 8008a8a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008a8c:	9001      	str	r0, [sp, #4]
 8008a8e:	078b      	lsls	r3, r1, #30
 8008a90:	d53e      	bpl.n	8008b10 <_Invalidate1Abs+0x94>
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7ff ffb6 	bl	8008a04 <WM__RectIsNZ>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d039      	beq.n	8008b10 <_Invalidate1Abs+0x94>
 8008a9c:	f640 0301 	movw	r3, #2049	; 0x801
 8008aa0:	400b      	ands	r3, r1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d034      	beq.n	8008b10 <_Invalidate1Abs+0x94>
 8008aa6:	ac02      	add	r4, sp, #8
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7fb fe49 	bl	8004740 <GUI_ALLOC_LockH>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7fc fe46 	bl	8005746 <GUI__IntersectRects>
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff ffa2 	bl	8008a04 <WM__RectIsNZ>
 8008ac0:	b318      	cbz	r0, 8008b0a <_Invalidate1Abs+0x8e>
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	f244 0120 	movw	r1, #16416	; 0x4020
 8008ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aca:	f103 0508 	add.w	r5, r3, #8
 8008ace:	4011      	ands	r1, r2
 8008ad0:	b129      	cbz	r1, 8008ade <_Invalidate1Abs+0x62>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7fc f8cc 	bl	8004c74 <GUI_MergeRect>
 8008adc:	e015      	b.n	8008b0a <_Invalidate1Abs+0x8e>
 8008ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ae2:	433a      	orrs	r2, r7
 8008ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8008aea:	4630      	mov	r0, r6
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <_Invalidate1Abs+0x98>)
 8008aee:	8813      	ldrh	r3, [r2, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	8013      	strh	r3, [r2, #0]
 8008af4:	f7ff ffae 	bl	8008a54 <WM__GetTopLevelLayer>
 8008af8:	4a07      	ldr	r2, [pc, #28]	; (8008b18 <_Invalidate1Abs+0x9c>)
 8008afa:	2301      	movs	r3, #1
 8008afc:	fa03 f000 	lsl.w	r0, r3, r0
 8008b00:	6813      	ldr	r3, [r2, #0]
 8008b02:	4303      	orrs	r3, r0
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	f7fc fd6f 	bl	80055e8 <GUI_SignalEvent>
 8008b0a:	a801      	add	r0, sp, #4
 8008b0c:	f7fb fe26 	bl	800475c <GUI_ALLOC_UnlockH>
 8008b10:	b005      	add	sp, #20
 8008b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b14:	20049d30 	.word	0x20049d30
 8008b18:	20049d40 	.word	0x20049d40

08008b1c <WM__Invalidate1Abs>:
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f7ff bfad 	b.w	8008a7c <_Invalidate1Abs>

08008b22 <WM_InvalidateWindowAndDescsEx>:
 8008b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b24:	460f      	mov	r7, r1
 8008b26:	b085      	sub	sp, #20
 8008b28:	4615      	mov	r5, r2
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b348      	cbz	r0, 8008b82 <WM_InvalidateWindowAndDescsEx+0x60>
 8008b2e:	f7fb fe07 	bl	8004740 <GUI_ALLOC_LockH>
 8008b32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008b34:	ac04      	add	r4, sp, #16
 8008b36:	4602      	mov	r2, r0
 8008b38:	079b      	lsls	r3, r3, #30
 8008b3a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008b3e:	d403      	bmi.n	8008b48 <WM_InvalidateWindowAndDescsEx+0x26>
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7fb fe0b 	bl	800475c <GUI_ALLOC_UnlockH>
 8008b46:	e01c      	b.n	8008b82 <WM_InvalidateWindowAndDescsEx+0x60>
 8008b48:	4639      	mov	r1, r7
 8008b4a:	a802      	add	r0, sp, #8
 8008b4c:	f7fc fdfb 	bl	8005746 <GUI__IntersectRects>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0f5      	beq.n	8008b40 <WM_InvalidateWindowAndDescsEx+0x1e>
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7fb fe01 	bl	800475c <GUI_ALLOC_UnlockH>
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	a902      	add	r1, sp, #8
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ff8c 	bl	8008a7c <_Invalidate1Abs>
 8008b64:	4630      	mov	r0, r6
 8008b66:	f000 fb8b 	bl	8009280 <WM_GetFirstChild>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	b14c      	cbz	r4, 8008b82 <WM_InvalidateWindowAndDescsEx+0x60>
 8008b6e:	4620      	mov	r0, r4
 8008b70:	462a      	mov	r2, r5
 8008b72:	a902      	add	r1, sp, #8
 8008b74:	f7ff ffd5 	bl	8008b22 <WM_InvalidateWindowAndDescsEx>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7fb fdd7 	bl	800472c <GUI_ALLOC_h2p>
 8008b7e:	6a04      	ldr	r4, [r0, #32]
 8008b80:	e7f4      	b.n	8008b6c <WM_InvalidateWindowAndDescsEx+0x4a>
 8008b82:	b005      	add	sp, #20
 8008b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b86 <WM__InvalidateRect>:
 8008b86:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4617      	mov	r7, r2
 8008b8e:	461d      	mov	r5, r3
 8008b90:	460c      	mov	r4, r1
 8008b92:	b381      	cbz	r1, 8008bf6 <WM__InvalidateRect+0x70>
 8008b94:	4608      	mov	r0, r1
 8008b96:	f7fb fdd3 	bl	8004740 <GUI_ALLOC_LockH>
 8008b9a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	9001      	str	r0, [sp, #4]
 8008ba0:	07b3      	lsls	r3, r6, #30
 8008ba2:	d525      	bpl.n	8008bf0 <WM__InvalidateRect+0x6a>
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	a802      	add	r0, sp, #8
 8008ba8:	f7fc fdcd 	bl	8005746 <GUI__IntersectRects>
 8008bac:	b300      	cbz	r0, 8008bf0 <WM__InvalidateRect+0x6a>
 8008bae:	f640 0301 	movw	r3, #2049	; 0x801
 8008bb2:	4033      	ands	r3, r6
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d107      	bne.n	8008bc8 <WM__InvalidateRect+0x42>
 8008bb8:	9901      	ldr	r1, [sp, #4]
 8008bba:	462b      	mov	r3, r5
 8008bbc:	a802      	add	r0, sp, #8
 8008bbe:	6a0a      	ldr	r2, [r1, #32]
 8008bc0:	6989      	ldr	r1, [r1, #24]
 8008bc2:	f7ff ffe0 	bl	8008b86 <WM__InvalidateRect>
 8008bc6:	e004      	b.n	8008bd2 <WM__InvalidateRect+0x4c>
 8008bc8:	462a      	mov	r2, r5
 8008bca:	a902      	add	r1, sp, #8
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7ff ff55 	bl	8008a7c <_Invalidate1Abs>
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	69dc      	ldr	r4, [r3, #28]
 8008bd6:	b15c      	cbz	r4, 8008bf0 <WM__InvalidateRect+0x6a>
 8008bd8:	42bc      	cmp	r4, r7
 8008bda:	d009      	beq.n	8008bf0 <WM__InvalidateRect+0x6a>
 8008bdc:	4620      	mov	r0, r4
 8008bde:	462a      	mov	r2, r5
 8008be0:	a902      	add	r1, sp, #8
 8008be2:	f7ff ff9e 	bl	8008b22 <WM_InvalidateWindowAndDescsEx>
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7fb fda0 	bl	800472c <GUI_ALLOC_h2p>
 8008bec:	6a04      	ldr	r4, [r0, #32]
 8008bee:	e7f2      	b.n	8008bd6 <WM__InvalidateRect+0x50>
 8008bf0:	a801      	add	r0, sp, #4
 8008bf2:	f7fb fdb3 	bl	800475c <GUI_ALLOC_UnlockH>
 8008bf6:	b004      	add	sp, #16
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bfc <WM__InvalidateRectEx>:
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f7ff bfc2 	b.w	8008b86 <WM__InvalidateRect>

08008c02 <WM_InvalidateRect>:
 8008c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c04:	460f      	mov	r7, r1
 8008c06:	b087      	sub	sp, #28
 8008c08:	4605      	mov	r5, r0
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d033      	beq.n	8008c76 <WM_InvalidateRect+0x74>
 8008c0e:	f7fb fd97 	bl	8004740 <GUI_ALLOC_LockH>
 8008c12:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008c14:	9001      	str	r0, [sp, #4]
 8008c16:	07b2      	lsls	r2, r6, #30
 8008c18:	d52a      	bpl.n	8008c70 <WM_InvalidateRect+0x6e>
 8008c1a:	ac04      	add	r4, sp, #16
 8008c1c:	03f3      	lsls	r3, r6, #15
 8008c1e:	c803      	ldmia	r0, {r0, r1}
 8008c20:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c24:	d502      	bpl.n	8008c2c <WM_InvalidateRect+0x2a>
 8008c26:	4628      	mov	r0, r5
 8008c28:	f7ff fec4 	bl	80089b4 <WM__InvalidateDrawAndDescs>
 8008c2c:	b15f      	cbz	r7, 8008c46 <WM_InvalidateRect+0x44>
 8008c2e:	6838      	ldr	r0, [r7, #0]
 8008c30:	ab02      	add	r3, sp, #8
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	c303      	stmia	r3!, {r0, r1}
 8008c36:	a902      	add	r1, sp, #8
 8008c38:	9801      	ldr	r0, [sp, #4]
 8008c3a:	f7ff fe67 	bl	800890c <WM__Client2Screen>
 8008c3e:	a902      	add	r1, sp, #8
 8008c40:	4620      	mov	r0, r4
 8008c42:	f7fc fd63 	bl	800570c <GUI__IntersectRect>
 8008c46:	4629      	mov	r1, r5
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7ff fddd 	bl	8008808 <WM__ClipAtParentBorders>
 8008c4e:	b178      	cbz	r0, 8008c70 <WM_InvalidateRect+0x6e>
 8008c50:	f640 0301 	movw	r3, #2049	; 0x801
 8008c54:	4033      	ands	r3, r6
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d106      	bne.n	8008c68 <WM_InvalidateRect+0x66>
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	6a1a      	ldr	r2, [r3, #32]
 8008c60:	6999      	ldr	r1, [r3, #24]
 8008c62:	f7ff ffcb 	bl	8008bfc <WM__InvalidateRectEx>
 8008c66:	e003      	b.n	8008c70 <WM_InvalidateRect+0x6e>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7ff ff56 	bl	8008b1c <WM__Invalidate1Abs>
 8008c70:	a801      	add	r0, sp, #4
 8008c72:	f7fb fd73 	bl	800475c <GUI_ALLOC_UnlockH>
 8008c76:	b007      	add	sp, #28
 8008c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c7a <WM_InvalidateWindow>:
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f7ff bfc1 	b.w	8008c02 <WM_InvalidateRect>

08008c80 <WM__SelectTopLevelLayer>:
 8008c80:	b508      	push	{r3, lr}
 8008c82:	f7ff fee7 	bl	8008a54 <WM__GetTopLevelLayer>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	db03      	blt.n	8008c92 <WM__SelectTopLevelLayer+0x12>
 8008c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c8e:	f7fc bc65 	b.w	800555c <GUI_SelectLayer>
 8008c92:	bd08      	pop	{r3, pc}

08008c94 <WM_SelectWindow>:
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <WM_SelectWindow+0x38>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	b908      	cbnz	r0, 8008ca6 <WM_SelectWindow+0x12>
 8008ca2:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <WM_SelectWindow+0x3c>)
 8008ca4:	681c      	ldr	r4, [r3, #0]
 8008ca6:	6494      	str	r4, [r2, #72]	; 0x48
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7ff ffe9 	bl	8008c80 <WM__SelectTopLevelLayer>
 8008cae:	f7fd f871 	bl	8005d94 <LCD_SetClipRectMax>
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7fb fd3a 	bl	800472c <GUI_ALLOC_h2p>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008cbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8008cc0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000080 	.word	0x20000080
 8008cd0:	20049d34 	.word	0x20049d34

08008cd4 <WM_CreateWindowAsChild>:
 8008cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cdc:	4698      	mov	r8, r3
 8008cde:	4b4e      	ldr	r3, [pc, #312]	; (8008e18 <WM_CreateWindowAsChild+0x144>)
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	460e      	mov	r6, r1
 8008ce4:	4617      	mov	r7, r2
 8008ce6:	f8d3 9000 	ldr.w	r9, [r3]
 8008cea:	f1ba 0f00 	cmp.w	sl, #0
 8008cee:	d128      	bne.n	8008d42 <WM_CreateWindowAsChild+0x6e>
 8008cf0:	4b4a      	ldr	r3, [pc, #296]	; (8008e1c <WM_CreateWindowAsChild+0x148>)
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b353      	cbz	r3, 8008d4c <WM_CreateWindowAsChild+0x78>
 8008cf6:	4b4a      	ldr	r3, [pc, #296]	; (8008e20 <WM_CreateWindowAsChild+0x14c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	7c5a      	ldrb	r2, [r3, #17]
 8008cfc:	4b49      	ldr	r3, [pc, #292]	; (8008e24 <WM_CreateWindowAsChild+0x150>)
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	2a01      	cmp	r2, #1
 8008d06:	d921      	bls.n	8008d4c <WM_CreateWindowAsChild+0x78>
 8008d08:	469a      	mov	sl, r3
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	f7fb fd18 	bl	8004740 <GUI_ALLOC_LockH>
 8008d10:	f9b0 1000 	ldrsh.w	r1, [r0]
 8008d14:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008d18:	9001      	str	r0, [sp, #4]
 8008d1a:	440d      	add	r5, r1
 8008d1c:	4416      	add	r6, r2
 8008d1e:	b91f      	cbnz	r7, 8008d28 <WM_CreateWindowAsChild+0x54>
 8008d20:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008d24:	1a5f      	subs	r7, r3, r1
 8008d26:	3701      	adds	r7, #1
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	d105      	bne.n	8008d3a <WM_CreateWindowAsChild+0x66>
 8008d2e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008d32:	ebc2 0803 	rsb	r8, r2, r3
 8008d36:	f108 0801 	add.w	r8, r8, #1
 8008d3a:	a801      	add	r0, sp, #4
 8008d3c:	f7fb fd0e 	bl	800475c <GUI_ALLOC_UnlockH>
 8008d40:	e004      	b.n	8008d4c <WM_CreateWindowAsChild+0x78>
 8008d42:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008d46:	d1e0      	bne.n	8008d0a <WM_CreateWindowAsChild+0x36>
 8008d48:	f04f 0a00 	mov.w	sl, #0
 8008d4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008d4e:	302c      	adds	r0, #44	; 0x2c
 8008d50:	f7fb fe88 	bl	8004a64 <GUI_ALLOC_AllocZero>
 8008d54:	4604      	mov	r4, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d059      	beq.n	8008e0e <WM_CreateWindowAsChild+0x13a>
 8008d5a:	4a30      	ldr	r2, [pc, #192]	; (8008e1c <WM_CreateWindowAsChild+0x148>)
 8008d5c:	f10d 0b08 	add.w	fp, sp, #8
 8008d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d62:	ea49 0903 	orr.w	r9, r9, r3
 8008d66:	8813      	ldrh	r3, [r2, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	8013      	strh	r3, [r2, #0]
 8008d6c:	f7fb fce8 	bl	8004740 <GUI_ALLOC_LockH>
 8008d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d72:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8008d76:	6103      	str	r3, [r0, #16]
 8008d78:	4b2b      	ldr	r3, [pc, #172]	; (8008e28 <WM_CreateWindowAsChild+0x154>)
 8008d7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008d7c:	8005      	strh	r5, [r0, #0]
 8008d7e:	ea09 0303 	and.w	r3, r9, r3
 8008d82:	8046      	strh	r6, [r0, #2]
 8008d84:	443d      	add	r5, r7
 8008d86:	4446      	add	r6, r8
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	3d01      	subs	r5, #1
 8008d8c:	3e01      	subs	r6, #1
 8008d8e:	6283      	str	r3, [r0, #40]	; 0x28
 8008d90:	8085      	strh	r5, [r0, #4]
 8008d92:	80c6      	strh	r6, [r0, #6]
 8008d94:	4658      	mov	r0, fp
 8008d96:	f7fb fce1 	bl	800475c <GUI_ALLOC_UnlockH>
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <WM_CreateWindowAsChild+0x158>)
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	b148      	cbz	r0, 8008db4 <WM_CreateWindowAsChild+0xe0>
 8008da0:	f7fb fcc4 	bl	800472c <GUI_ALLOC_h2p>
 8008da4:	4605      	mov	r5, r0
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7fb fcc0 	bl	800472c <GUI_ALLOC_h2p>
 8008dac:	696b      	ldr	r3, [r5, #20]
 8008dae:	6143      	str	r3, [r0, #20]
 8008db0:	616c      	str	r4, [r5, #20]
 8008db2:	e000      	b.n	8008db6 <WM_CreateWindowAsChild+0xe2>
 8008db4:	601c      	str	r4, [r3, #0]
 8008db6:	4651      	mov	r1, sl
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7ff fd51 	bl	8008860 <WM__InsertWindowIntoList>
 8008dbe:	f019 0f20 	tst.w	r9, #32
 8008dc2:	d002      	beq.n	8008dca <WM_CreateWindowAsChild+0xf6>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff ff65 	bl	8008c94 <WM_SelectWindow>
 8008dca:	f019 0f01 	tst.w	r9, #1
 8008dce:	bf1f      	itttt	ne
 8008dd0:	4a17      	ldrne	r2, [pc, #92]	; (8008e30 <WM_CreateWindowAsChild+0x15c>)
 8008dd2:	6813      	ldrne	r3, [r2, #0]
 8008dd4:	3301      	addne	r3, #1
 8008dd6:	6013      	strne	r3, [r2, #0]
 8008dd8:	f019 0f40 	tst.w	r9, #64	; 0x40
 8008ddc:	d002      	beq.n	8008de4 <WM_CreateWindowAsChild+0x110>
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 fa5e 	bl	80092a0 <WM_BringToBottom>
 8008de4:	f019 0f02 	tst.w	r9, #2
 8008de8:	d00d      	beq.n	8008e06 <WM_CreateWindowAsChild+0x132>
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7fb fca8 	bl	8004740 <GUI_ALLOC_LockH>
 8008df0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008df2:	9000      	str	r0, [sp, #0]
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	6283      	str	r3, [r0, #40]	; 0x28
 8008dfa:	4658      	mov	r0, fp
 8008dfc:	f7fb fcae 	bl	800475c <GUI_ALLOC_UnlockH>
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff ff3a 	bl	8008c7a <WM_InvalidateWindow>
 8008e06:	2101      	movs	r1, #1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff fe0c 	bl	8008a26 <WM__SendMsgNoData>
 8008e0e:	4620      	mov	r0, r4
 8008e10:	b003      	add	sp, #12
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	bf00      	nop
 8008e18:	20049d48 	.word	0x20049d48
 8008e1c:	20049d10 	.word	0x20049d10
 8008e20:	20000080 	.word	0x20000080
 8008e24:	20049d18 	.word	0x20049d18
 8008e28:	003f3f9f 	.word	0x003f3f9f
 8008e2c:	20049d34 	.word	0x20049d34
 8008e30:	20049d68 	.word	0x20049d68

08008e34 <WM__GetNextIVR>:
 8008e34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008e38:	4f5d      	ldr	r7, [pc, #372]	; (8008fb0 <WM__GetNextIVR+0x17c>)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008e40:	2800      	cmp	r0, #0
 8008e42:	f000 80b1 	beq.w	8008fa8 <WM__GetNextIVR+0x174>
 8008e46:	4a5b      	ldr	r2, [pc, #364]	; (8008fb4 <WM__GetNextIVR+0x180>)
 8008e48:	6a13      	ldr	r3, [r2, #32]
 8008e4a:	4614      	mov	r4, r2
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	dd03      	ble.n	8008e58 <WM__GetNextIVR+0x24>
 8008e50:	3b01      	subs	r3, #1
 8008e52:	2000      	movs	r0, #0
 8008e54:	6213      	str	r3, [r2, #32]
 8008e56:	e0a7      	b.n	8008fa8 <WM__GetNextIVR+0x174>
 8008e58:	69d3      	ldr	r3, [r2, #28]
 8008e5a:	f102 0614 	add.w	r6, r2, #20
 8008e5e:	ad02      	add	r5, sp, #8
 8008e60:	3301      	adds	r3, #1
 8008e62:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008e66:	61d3      	str	r3, [r2, #28]
 8008e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e6c:	b923      	cbnz	r3, 8008e78 <WM__GetNextIVR+0x44>
 8008e6e:	8993      	ldrh	r3, [r2, #12]
 8008e70:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008e74:	89d3      	ldrh	r3, [r2, #14]
 8008e76:	e010      	b.n	8008e9a <WM__GetNextIVR+0x66>
 8008e78:	8b13      	ldrh	r3, [r2, #24]
 8008e7a:	8ad2      	ldrh	r2, [r2, #22]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8008e82:	b21b      	sxth	r3, r3
 8008e84:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008e8e:	da06      	bge.n	8008e9e <WM__GetNextIVR+0x6a>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008e96:	8b63      	ldrh	r3, [r4, #26]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008e9e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008ea2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8008ea6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008fb4 <WM__GetNextIVR+0x180>
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	dd04      	ble.n	8008eb8 <WM__GetNextIVR+0x84>
 8008eae:	6a23      	ldr	r3, [r4, #32]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	6223      	str	r3, [r4, #32]
 8008eb6:	e077      	b.n	8008fa8 <WM__GetNextIVR+0x174>
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ebc:	f7fb fc40 	bl	8004740 <GUI_ALLOC_LockH>
 8008ec0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008ec4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8008ec8:	9001      	str	r0, [sp, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d11c      	bne.n	8008f08 <WM__GetNextIVR+0xd4>
 8008ece:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8008ed2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008ed6:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8008eda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ede:	4b34      	ldr	r3, [pc, #208]	; (8008fb0 <WM__GetNextIVR+0x17c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ee4:	b15a      	cbz	r2, 8008efe <WM__GetNextIVR+0xca>
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	f7fb fc20 	bl	800472c <GUI_ALLOC_h2p>
 8008eec:	4680      	mov	r8, r0
 8008eee:	2200      	movs	r2, #0
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	6a00      	ldr	r0, [r0, #32]
 8008ef4:	f7ff fbb8 	bl	8008668 <_Findy1>
 8008ef8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008efc:	e7f2      	b.n	8008ee4 <WM__GetNextIVR+0xb0>
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	4629      	mov	r1, r5
 8008f02:	69d8      	ldr	r0, [r3, #28]
 8008f04:	f7ff fbb0 	bl	8008668 <_Findy1>
 8008f08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008f0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f14:	b16a      	cbz	r2, 8008f32 <WM__GetNextIVR+0xfe>
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7fb fc08 	bl	800472c <GUI_ALLOC_h2p>
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4629      	mov	r1, r5
 8008f22:	6a00      	ldr	r0, [r0, #32]
 8008f24:	f7ff fbf3 	bl	800870e <_Findx0>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1ed      	bne.n	8008f08 <WM__GetNextIVR+0xd4>
 8008f2c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008f30:	e7f0      	b.n	8008f14 <WM__GetNextIVR+0xe0>
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	4629      	mov	r1, r5
 8008f36:	69d8      	ldr	r0, [r3, #28]
 8008f38:	f7ff fbe9 	bl	800870e <_Findx0>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d1e3      	bne.n	8008f08 <WM__GetNextIVR+0xd4>
 8008f40:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8008f44:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008f48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	dd07      	ble.n	8008f60 <WM__GetNextIVR+0x12c>
 8008f50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008f54:	e886 0003 	stmia.w	r6, {r0, r1}
 8008f58:	a801      	add	r0, sp, #4
 8008f5a:	f7fb fbff 	bl	800475c <GUI_ALLOC_UnlockH>
 8008f5e:	e797      	b.n	8008e90 <WM__GetNextIVR+0x5c>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f64:	b152      	cbz	r2, 8008f7c <WM__GetNextIVR+0x148>
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fb fbe0 	bl	800472c <GUI_ALLOC_h2p>
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4629      	mov	r1, r5
 8008f72:	6a00      	ldr	r0, [r0, #32]
 8008f74:	f7ff fc0e 	bl	8008794 <_Findx1>
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	e7f3      	b.n	8008f64 <WM__GetNextIVR+0x130>
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8008f84:	69d8      	ldr	r0, [r3, #28]
 8008f86:	f7ff fc05 	bl	8008794 <_Findx1>
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f7fb fbe6 	bl	800475c <GUI_ALLOC_UnlockH>
 8008f90:	69e2      	ldr	r2, [r4, #28]
 8008f92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008f96:	429a      	cmp	r2, r3
 8008f98:	dc89      	bgt.n	8008eae <WM__GetNextIVR+0x7a>
 8008f9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008f9e:	e886 0003 	stmia.w	r6, {r0, r1}
 8008fa2:	f7ff fce3 	bl	800896c <WM__ActivateClipRect>
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	b004      	add	sp, #16
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000080 	.word	0x20000080
 8008fb4:	20049b98 	.word	0x20049b98

08008fb8 <WM__InitIVRSearch>:
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4e39      	ldr	r6, [pc, #228]	; (80090a4 <WM__InitIVRSearch+0xec>)
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	6832      	ldr	r2, [r6, #0]
 8008fc4:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8008fc8:	b913      	cbnz	r3, 8008fd0 <WM__InitIVRSearch+0x18>
 8008fca:	f7ff fccf 	bl	800896c <WM__ActivateClipRect>
 8008fce:	e064      	b.n	800909a <WM__InitIVRSearch+0xe2>
 8008fd0:	4f35      	ldr	r7, [pc, #212]	; (80090a8 <WM__InitIVRSearch+0xf0>)
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	463d      	mov	r5, r7
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	623b      	str	r3, [r7, #32]
 8008fdc:	dc5d      	bgt.n	800909a <WM__InitIVRSearch+0xe2>
 8008fde:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8008fe0:	f7fb fbae 	bl	8004740 <GUI_ALLOC_LockH>
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe8:	9000      	str	r0, [sp, #0]
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <WM__InitIVRSearch+0xf4>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b113      	cbz	r3, 8008ff8 <WM__InitIVRSearch+0x40>
 8008ff2:	ab02      	add	r3, sp, #8
 8008ff4:	3008      	adds	r0, #8
 8008ff6:	e004      	b.n	8009002 <WM__InitIVRSearch+0x4a>
 8008ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ffa:	f013 0402 	ands.w	r4, r3, #2
 8008ffe:	d00c      	beq.n	800901a <WM__InitIVRSearch+0x62>
 8009000:	ab02      	add	r3, sp, #8
 8009002:	ac02      	add	r4, sp, #8
 8009004:	c803      	ldmia	r0, {r0, r1}
 8009006:	e883 0003 	stmia.w	r3, {r0, r1}
 800900a:	f1b8 0f00 	cmp.w	r8, #0
 800900e:	d00c      	beq.n	800902a <WM__InitIVRSearch+0x72>
 8009010:	4641      	mov	r1, r8
 8009012:	4620      	mov	r0, r4
 8009014:	f7fc fb7a 	bl	800570c <GUI__IntersectRect>
 8009018:	e007      	b.n	800902a <WM__InitIVRSearch+0x72>
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	4668      	mov	r0, sp
 800901e:	3b01      	subs	r3, #1
 8009020:	623b      	str	r3, [r7, #32]
 8009022:	f7fb fb9b 	bl	800475c <GUI_ALLOC_UnlockH>
 8009026:	4620      	mov	r0, r4
 8009028:	e038      	b.n	800909c <WM__InitIVRSearch+0xe4>
 800902a:	6833      	ldr	r3, [r6, #0]
 800902c:	4f20      	ldr	r7, [pc, #128]	; (80090b0 <WM__InitIVRSearch+0xf8>)
 800902e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009030:	b1c2      	cbz	r2, 8009064 <WM__InitIVRSearch+0xac>
 8009032:	9b00      	ldr	r3, [sp, #0]
 8009034:	6810      	ldr	r0, [r2, #0]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	ab04      	add	r3, sp, #16
 800903a:	6851      	ldr	r1, [r2, #4]
 800903c:	c303      	stmia	r3!, {r0, r1}
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	b133      	cbz	r3, 8009050 <WM__InitIVRSearch+0x98>
 8009042:	a801      	add	r0, sp, #4
 8009044:	f7fb fb8a 	bl	800475c <GUI_ALLOC_UnlockH>
 8009048:	6838      	ldr	r0, [r7, #0]
 800904a:	f7fb fb79 	bl	8004740 <GUI_ALLOC_LockH>
 800904e:	9001      	str	r0, [sp, #4]
 8009050:	a904      	add	r1, sp, #16
 8009052:	9801      	ldr	r0, [sp, #4]
 8009054:	f7ff fc5a 	bl	800890c <WM__Client2Screen>
 8009058:	4620      	mov	r0, r4
 800905a:	a904      	add	r1, sp, #16
 800905c:	f7fc fb56 	bl	800570c <GUI__IntersectRect>
 8009060:	a801      	add	r0, sp, #4
 8009062:	e000      	b.n	8009066 <WM__InitIVRSearch+0xae>
 8009064:	4668      	mov	r0, sp
 8009066:	f7fb fb79 	bl	800475c <GUI_ALLOC_UnlockH>
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	b119      	cbz	r1, 8009076 <WM__InitIVRSearch+0xbe>
 800906e:	4620      	mov	r0, r4
 8009070:	f7ff fbca 	bl	8008808 <WM__ClipAtParentBorders>
 8009074:	b128      	cbz	r0, 8009082 <WM__InitIVRSearch+0xca>
 8009076:	6833      	ldr	r3, [r6, #0]
 8009078:	4620      	mov	r0, r4
 800907a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800907c:	f7ff fbc4 	bl	8008808 <WM__ClipAtParentBorders>
 8009080:	b918      	cbnz	r0, 800908a <WM__InitIVRSearch+0xd2>
 8009082:	6a2b      	ldr	r3, [r5, #32]
 8009084:	3b01      	subs	r3, #1
 8009086:	622b      	str	r3, [r5, #32]
 8009088:	e008      	b.n	800909c <WM__InitIVRSearch+0xe4>
 800908a:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <WM__InitIVRSearch+0xfc>)
 800908c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009090:	e883 0003 	stmia.w	r3, {r0, r1}
 8009094:	f7ff fece 	bl	8008e34 <WM__GetNextIVR>
 8009098:	e000      	b.n	800909c <WM__InitIVRSearch+0xe4>
 800909a:	2001      	movs	r0, #1
 800909c:	b006      	add	sp, #24
 800909e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a2:	bf00      	nop
 80090a4:	20000080 	.word	0x20000080
 80090a8:	20049b98 	.word	0x20049b98
 80090ac:	20049d44 	.word	0x20049d44
 80090b0:	20049d14 	.word	0x20049d14
 80090b4:	20049ba4 	.word	0x20049ba4

080090b8 <WM_Activate>:
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <WM_Activate+0xc>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80090c2:	4770      	bx	lr
 80090c4:	20000080 	.word	0x20000080

080090c8 <WM_DefaultProc>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
 80090cc:	6840      	ldr	r0, [r0, #4]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	2b17      	cmp	r3, #23
 80090d2:	d010      	beq.n	80090f6 <WM_DefaultProc+0x2e>
 80090d4:	dc07      	bgt.n	80090e6 <WM_DefaultProc+0x1e>
 80090d6:	2b0e      	cmp	r3, #14
 80090d8:	d00f      	beq.n	80090fa <WM_DefaultProc+0x32>
 80090da:	2b14      	cmp	r3, #20
 80090dc:	d115      	bne.n	800910a <WM_DefaultProc+0x42>
 80090de:	68e1      	ldr	r1, [r4, #12]
 80090e0:	f000 f9ae 	bl	8009440 <WM__GetClientRectEx>
 80090e4:	e011      	b.n	800910a <WM_DefaultProc+0x42>
 80090e6:	2b22      	cmp	r3, #34	; 0x22
 80090e8:	d00c      	beq.n	8009104 <WM_DefaultProc+0x3c>
 80090ea:	2b28      	cmp	r3, #40	; 0x28
 80090ec:	d10d      	bne.n	800910a <WM_DefaultProc+0x42>
 80090ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f2:	f7ff bdc2 	b.w	8008c7a <WM_InvalidateWindow>
 80090f6:	60e0      	str	r0, [r4, #12]
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	4621      	mov	r1, r4
 80090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009100:	f000 b911 	b.w	8009326 <WM_SendToParent>
 8009104:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009108:	e000      	b.n	800910c <WM_DefaultProc+0x44>
 800910a:	2300      	movs	r3, #0
 800910c:	60e3      	str	r3, [r4, #12]
 800910e:	bd10      	pop	{r4, pc}

08009110 <_cbBackWin>:
 8009110:	6803      	ldr	r3, [r0, #0]
 8009112:	2b0e      	cmp	r3, #14
 8009114:	b510      	push	{r4, lr}
 8009116:	4604      	mov	r4, r0
 8009118:	d002      	beq.n	8009120 <_cbBackWin+0x10>
 800911a:	2b0f      	cmp	r3, #15
 800911c:	d009      	beq.n	8009132 <_cbBackWin+0x22>
 800911e:	e020      	b.n	8009162 <_cbBackWin+0x52>
 8009120:	68c3      	ldr	r3, [r0, #12]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	2a01      	cmp	r2, #1
 8009126:	d121      	bne.n	800916c <_cbBackWin+0x5c>
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912e:	f7fc ba03 	b.w	8005538 <GUI_StoreKey>
 8009132:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <_cbBackWin+0x60>)
 8009134:	6843      	ldr	r3, [r0, #4]
 8009136:	6811      	ldr	r1, [r2, #0]
 8009138:	428b      	cmp	r3, r1
 800913a:	d006      	beq.n	800914a <_cbBackWin+0x3a>
 800913c:	6852      	ldr	r2, [r2, #4]
 800913e:	4293      	cmp	r3, r2
 8009140:	bf0c      	ite	eq
 8009142:	2301      	moveq	r3, #1
 8009144:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009148:	e000      	b.n	800914c <_cbBackWin+0x3c>
 800914a:	2300      	movs	r3, #0
 800914c:	4a09      	ldr	r2, [pc, #36]	; (8009174 <_cbBackWin+0x64>)
 800914e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009152:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009156:	4298      	cmp	r0, r3
 8009158:	d003      	beq.n	8009162 <_cbBackWin+0x52>
 800915a:	f7fb fdf5 	bl	8004d48 <GUI_SetBkColor>
 800915e:	f7fb feb7 	bl	8004ed0 <GUI_Clear>
 8009162:	4620      	mov	r0, r4
 8009164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009168:	f7ff bfae 	b.w	80090c8 <WM_DefaultProc>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	bf00      	nop
 8009170:	20049d18 	.word	0x20049d18
 8009174:	20049d4c 	.word	0x20049d4c

08009178 <WM_Init>:
 8009178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800917c:	4d2a      	ldr	r5, [pc, #168]	; (8009228 <WM_Init+0xb0>)
 800917e:	7828      	ldrb	r0, [r5, #0]
 8009180:	2800      	cmp	r0, #0
 8009182:	d14d      	bne.n	8009220 <WM_Init+0xa8>
 8009184:	4b29      	ldr	r3, [pc, #164]	; (800922c <WM_Init+0xb4>)
 8009186:	4604      	mov	r4, r0
 8009188:	4e29      	ldr	r6, [pc, #164]	; (8009230 <WM_Init+0xb8>)
 800918a:	6018      	str	r0, [r3, #0]
 800918c:	4b29      	ldr	r3, [pc, #164]	; (8009234 <WM_Init+0xbc>)
 800918e:	4f2a      	ldr	r7, [pc, #168]	; (8009238 <WM_Init+0xc0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009264 <WM_Init+0xec>
 8009196:	6458      	str	r0, [r3, #68]	; 0x44
 8009198:	4b28      	ldr	r3, [pc, #160]	; (800923c <WM_Init+0xc4>)
 800919a:	60a8      	str	r0, [r5, #8]
 800919c:	8018      	strh	r0, [r3, #0]
 800919e:	4b28      	ldr	r3, [pc, #160]	; (8009240 <WM_Init+0xc8>)
 80091a0:	8018      	strh	r0, [r3, #0]
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7fb ffd8 	bl	8005158 <GUI_DEVICE__GetpDriver>
 80091a8:	b1a8      	cbz	r0, 80091d6 <WM_Init+0x5e>
 80091aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ae:	2302      	movs	r3, #2
 80091b0:	2100      	movs	r1, #0
 80091b2:	9602      	str	r6, [sp, #8]
 80091b4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80091b8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80091bc:	9103      	str	r1, [sp, #12]
 80091be:	4608      	mov	r0, r1
 80091c0:	461a      	mov	r2, r3
 80091c2:	f7ff fd87 	bl	8008cd4 <WM_CreateWindowAsChild>
 80091c6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80091ca:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80091ce:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80091d2:	f7ff fd52 	bl	8008c7a <WM_InvalidateWindow>
 80091d6:	3401      	adds	r4, #1
 80091d8:	2c02      	cmp	r4, #2
 80091da:	d1e2      	bne.n	80091a2 <WM_Init+0x2a>
 80091dc:	4819      	ldr	r0, [pc, #100]	; (8009244 <WM_Init+0xcc>)
 80091de:	f000 f927 	bl	8009430 <WM__AddCriticalHandle>
 80091e2:	4819      	ldr	r0, [pc, #100]	; (8009248 <WM_Init+0xd0>)
 80091e4:	f000 f924 	bl	8009430 <WM__AddCriticalHandle>
 80091e8:	4818      	ldr	r0, [pc, #96]	; (800924c <WM_Init+0xd4>)
 80091ea:	f000 f921 	bl	8009430 <WM__AddCriticalHandle>
 80091ee:	4818      	ldr	r0, [pc, #96]	; (8009250 <WM_Init+0xd8>)
 80091f0:	f000 f91e 	bl	8009430 <WM__AddCriticalHandle>
 80091f4:	4817      	ldr	r0, [pc, #92]	; (8009254 <WM_Init+0xdc>)
 80091f6:	f000 f91b 	bl	8009430 <WM__AddCriticalHandle>
 80091fa:	4817      	ldr	r0, [pc, #92]	; (8009258 <WM_Init+0xe0>)
 80091fc:	f000 f918 	bl	8009430 <WM__AddCriticalHandle>
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <WM_Init+0xc0>)
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	f7ff fd46 	bl	8008c94 <WM_SelectWindow>
 8009208:	f7ff ff56 	bl	80090b8 <WM_Activate>
 800920c:	2301      	movs	r3, #1
 800920e:	4813      	ldr	r0, [pc, #76]	; (800925c <WM_Init+0xe4>)
 8009210:	702b      	strb	r3, [r5, #0]
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <WM_Init+0xe8>)
 8009214:	626b      	str	r3, [r5, #36]	; 0x24
 8009216:	b004      	add	sp, #16
 8009218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800921c:	f7fb bf76 	b.w	800510c <GUI__RegisterExit>
 8009220:	b004      	add	sp, #16
 8009222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009226:	bf00      	nop
 8009228:	20049b98 	.word	0x20049b98
 800922c:	20049d34 	.word	0x20049d34
 8009230:	08009111 	.word	0x08009111
 8009234:	20000080 	.word	0x20000080
 8009238:	20049d18 	.word	0x20049d18
 800923c:	20049d30 	.word	0x20049d30
 8009240:	20049d10 	.word	0x20049d10
 8009244:	20049d8c 	.word	0x20049d8c
 8009248:	20049d7c 	.word	0x20049d7c
 800924c:	20049d6c 	.word	0x20049d6c
 8009250:	20049d94 	.word	0x20049d94
 8009254:	20049d84 	.word	0x20049d84
 8009258:	20049d74 	.word	0x20049d74
 800925c:	20049bbc 	.word	0x20049bbc
 8009260:	080085c5 	.word	0x080085c5
 8009264:	20049d4c 	.word	0x20049d4c

08009268 <WM_GetDesktopWindow>:
 8009268:	4b03      	ldr	r3, [pc, #12]	; (8009278 <WM_GetDesktopWindow+0x10>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	7c5a      	ldrb	r2, [r3, #17]
 800926e:	4b03      	ldr	r3, [pc, #12]	; (800927c <WM_GetDesktopWindow+0x14>)
 8009270:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000080 	.word	0x20000080
 800927c:	20049d18 	.word	0x20049d18

08009280 <WM_GetFirstChild>:
 8009280:	b508      	push	{r3, lr}
 8009282:	4603      	mov	r3, r0
 8009284:	b110      	cbz	r0, 800928c <WM_GetFirstChild+0xc>
 8009286:	f7fb fa51 	bl	800472c <GUI_ALLOC_h2p>
 800928a:	69c3      	ldr	r3, [r0, #28]
 800928c:	4618      	mov	r0, r3
 800928e:	bd08      	pop	{r3, pc}

08009290 <WM_GetParent>:
 8009290:	b508      	push	{r3, lr}
 8009292:	4603      	mov	r3, r0
 8009294:	b110      	cbz	r0, 800929c <WM_GetParent+0xc>
 8009296:	f7fb fa49 	bl	800472c <GUI_ALLOC_h2p>
 800929a:	6983      	ldr	r3, [r0, #24]
 800929c:	4618      	mov	r0, r3
 800929e:	bd08      	pop	{r3, pc}

080092a0 <WM_BringToBottom>:
 80092a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a4:	4604      	mov	r4, r0
 80092a6:	b087      	sub	sp, #28
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d039      	beq.n	8009320 <WM_BringToBottom+0x80>
 80092ac:	f7fb fa48 	bl	8004740 <GUI_ALLOC_LockH>
 80092b0:	ad04      	add	r5, sp, #16
 80092b2:	4603      	mov	r3, r0
 80092b4:	9001      	str	r0, [sp, #4]
 80092b6:	c803      	ldmia	r0, {r0, r1}
 80092b8:	6a1e      	ldr	r6, [r3, #32]
 80092ba:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80092be:	e885 0003 	stmia.w	r5, {r0, r1}
 80092c2:	a801      	add	r0, sp, #4
 80092c4:	f7fb fa4a 	bl	800475c <GUI_ALLOC_UnlockH>
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 f880 	bl	80093ce <WM__GetPrevSibling>
 80092ce:	4607      	mov	r7, r0
 80092d0:	b330      	cbz	r0, 8009320 <WM_BringToBottom+0x80>
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7ff ffdc 	bl	8009290 <WM_GetParent>
 80092d8:	f019 0f02 	tst.w	r9, #2
 80092dc:	4680      	mov	r8, r0
 80092de:	d004      	beq.n	80092ea <WM_BringToBottom+0x4a>
 80092e0:	4601      	mov	r1, r0
 80092e2:	4632      	mov	r2, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	f7ff fc89 	bl	8008bfc <WM__InvalidateRectEx>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fb fa28 	bl	8004740 <GUI_ALLOC_LockH>
 80092f0:	9001      	str	r0, [sp, #4]
 80092f2:	4640      	mov	r0, r8
 80092f4:	f7fb fa24 	bl	8004740 <GUI_ALLOC_LockH>
 80092f8:	9003      	str	r0, [sp, #12]
 80092fa:	4638      	mov	r0, r7
 80092fc:	f7fb fa20 	bl	8004740 <GUI_ALLOC_LockH>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	69d9      	ldr	r1, [r3, #28]
 8009306:	6206      	str	r6, [r0, #32]
 8009308:	9002      	str	r0, [sp, #8]
 800930a:	a801      	add	r0, sp, #4
 800930c:	6211      	str	r1, [r2, #32]
 800930e:	61dc      	str	r4, [r3, #28]
 8009310:	f7fb fa24 	bl	800475c <GUI_ALLOC_UnlockH>
 8009314:	a803      	add	r0, sp, #12
 8009316:	f7fb fa21 	bl	800475c <GUI_ALLOC_UnlockH>
 800931a:	a802      	add	r0, sp, #8
 800931c:	f7fb fa1e 	bl	800475c <GUI_ALLOC_UnlockH>
 8009320:	b007      	add	sp, #28
 8009322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009326 <WM_SendToParent>:
 8009326:	b538      	push	{r3, r4, r5, lr}
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b141      	cbz	r1, 8009340 <WM_SendToParent+0x1a>
 800932e:	f7ff ffaf 	bl	8009290 <WM_GetParent>
 8009332:	b128      	cbz	r0, 8009340 <WM_SendToParent+0x1a>
 8009334:	60a5      	str	r5, [r4, #8]
 8009336:	4621      	mov	r1, r4
 8009338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933c:	f000 b85a 	b.w	80093f4 <WM__SendMessage>
 8009340:	bd38      	pop	{r3, r4, r5, pc}
	...

08009344 <_MULTIBUF_End>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	2400      	movs	r4, #0
 8009348:	4e07      	ldr	r6, [pc, #28]	; (8009368 <_MULTIBUF_End+0x24>)
 800934a:	4d08      	ldr	r5, [pc, #32]	; (800936c <_MULTIBUF_End+0x28>)
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	682b      	ldr	r3, [r5, #0]
 8009350:	b102      	cbz	r2, 8009354 <_MULTIBUF_End+0x10>
 8009352:	4013      	ands	r3, r2
 8009354:	40e3      	lsrs	r3, r4
 8009356:	07db      	lsls	r3, r3, #31
 8009358:	d502      	bpl.n	8009360 <_MULTIBUF_End+0x1c>
 800935a:	4620      	mov	r0, r4
 800935c:	f7fc f88e 	bl	800547c <GUI_MULTIBUF_EndEx>
 8009360:	3401      	adds	r4, #1
 8009362:	2c02      	cmp	r4, #2
 8009364:	d1f2      	bne.n	800934c <_MULTIBUF_End+0x8>
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	20049ca8 	.word	0x20049ca8
 800936c:	20049d40 	.word	0x20049d40

08009370 <_MULTIBUF_Begin>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	2400      	movs	r4, #0
 8009374:	4e07      	ldr	r6, [pc, #28]	; (8009394 <_MULTIBUF_Begin+0x24>)
 8009376:	4d08      	ldr	r5, [pc, #32]	; (8009398 <_MULTIBUF_Begin+0x28>)
 8009378:	6832      	ldr	r2, [r6, #0]
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b102      	cbz	r2, 8009380 <_MULTIBUF_Begin+0x10>
 800937e:	4013      	ands	r3, r2
 8009380:	40e3      	lsrs	r3, r4
 8009382:	07db      	lsls	r3, r3, #31
 8009384:	d502      	bpl.n	800938c <_MULTIBUF_Begin+0x1c>
 8009386:	4620      	mov	r0, r4
 8009388:	f7fc f844 	bl	8005414 <GUI_MULTIBUF_BeginEx>
 800938c:	3401      	adds	r4, #1
 800938e:	2c02      	cmp	r4, #2
 8009390:	d1f2      	bne.n	8009378 <_MULTIBUF_Begin+0x8>
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	20049ca8 	.word	0x20049ca8
 8009398:	20049d40 	.word	0x20049d40

0800939c <WM_MULTIBUF_Enable>:
 800939c:	4a05      	ldr	r2, [pc, #20]	; (80093b4 <WM_MULTIBUF_Enable+0x18>)
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	3300      	adds	r3, #0
 80093a2:	bf18      	it	ne
 80093a4:	2301      	movne	r3, #1
 80093a6:	b110      	cbz	r0, 80093ae <WM_MULTIBUF_Enable+0x12>
 80093a8:	4903      	ldr	r1, [pc, #12]	; (80093b8 <WM_MULTIBUF_Enable+0x1c>)
 80093aa:	6011      	str	r1, [r2, #0]
 80093ac:	e000      	b.n	80093b0 <WM_MULTIBUF_Enable+0x14>
 80093ae:	6010      	str	r0, [r2, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	4770      	bx	lr
 80093b4:	20049d58 	.word	0x20049d58
 80093b8:	0800e5f8 	.word	0x0800e5f8

080093bc <WM__GetFirstSibling>:
 80093bc:	b508      	push	{r3, lr}
 80093be:	f7ff ff67 	bl	8009290 <WM_GetParent>
 80093c2:	b118      	cbz	r0, 80093cc <WM__GetFirstSibling+0x10>
 80093c4:	f7fb f9b2 	bl	800472c <GUI_ALLOC_h2p>
 80093c8:	69c0      	ldr	r0, [r0, #28]
 80093ca:	bd08      	pop	{r3, pc}
 80093cc:	bd08      	pop	{r3, pc}

080093ce <WM__GetPrevSibling>:
 80093ce:	b538      	push	{r3, r4, r5, lr}
 80093d0:	4605      	mov	r5, r0
 80093d2:	f7ff fff3 	bl	80093bc <WM__GetFirstSibling>
 80093d6:	4604      	mov	r4, r0
 80093d8:	b154      	cbz	r4, 80093f0 <WM__GetPrevSibling+0x22>
 80093da:	42ac      	cmp	r4, r5
 80093dc:	d007      	beq.n	80093ee <WM__GetPrevSibling+0x20>
 80093de:	4620      	mov	r0, r4
 80093e0:	f7fb f9a4 	bl	800472c <GUI_ALLOC_h2p>
 80093e4:	6a03      	ldr	r3, [r0, #32]
 80093e6:	429d      	cmp	r5, r3
 80093e8:	d002      	beq.n	80093f0 <WM__GetPrevSibling+0x22>
 80093ea:	461c      	mov	r4, r3
 80093ec:	e7f4      	b.n	80093d8 <WM__GetPrevSibling+0xa>
 80093ee:	2400      	movs	r4, #0
 80093f0:	4620      	mov	r0, r4
 80093f2:	bd38      	pop	{r3, r4, r5, pc}

080093f4 <WM__SendMessage>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4c0d      	ldr	r4, [pc, #52]	; (800942c <WM__SendMessage+0x38>)
 80093f8:	4606      	mov	r6, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	2b13      	cmp	r3, #19
 8009400:	dc12      	bgt.n	8009428 <WM__SendMessage+0x34>
 8009402:	f7fb f993 	bl	800472c <GUI_ALLOC_h2p>
 8009406:	6902      	ldr	r2, [r0, #16]
 8009408:	606e      	str	r6, [r5, #4]
 800940a:	b142      	cbz	r2, 800941e <WM__SendMessage+0x2a>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	4628      	mov	r0, r5
 8009410:	3301      	adds	r3, #1
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	4790      	blx	r2
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	3b01      	subs	r3, #1
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	4628      	mov	r0, r5
 8009420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009424:	f7ff be50 	b.w	80090c8 <WM_DefaultProc>
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	bf00      	nop
 800942c:	20049bc8 	.word	0x20049bc8

08009430 <WM__AddCriticalHandle>:
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <WM__AddCriticalHandle+0xc>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	6002      	str	r2, [r0, #0]
 8009436:	6018      	str	r0, [r3, #0]
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	20049d54 	.word	0x20049d54

08009440 <WM__GetClientRectEx>:
 8009440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009442:	460d      	mov	r5, r1
 8009444:	b158      	cbz	r0, 800945e <WM__GetClientRectEx+0x1e>
 8009446:	b151      	cbz	r1, 800945e <WM__GetClientRectEx+0x1e>
 8009448:	ac02      	add	r4, sp, #8
 800944a:	f7fb f979 	bl	8004740 <GUI_ALLOC_LockH>
 800944e:	4629      	mov	r1, r5
 8009450:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009454:	f7ff faf2 	bl	8008a3c <WM__GetClientRectWin>
 8009458:	4620      	mov	r0, r4
 800945a:	f7fb f97f 	bl	800475c <GUI_ALLOC_UnlockH>
 800945e:	b003      	add	sp, #12
 8009460:	bd30      	pop	{r4, r5, pc}

08009462 <_GetIndexMask_0>:
 8009462:	b508      	push	{r3, lr}
 8009464:	f7fc fec8 	bl	80061f8 <LCD_GetNumColors>
 8009468:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800946c:	d010      	beq.n	8009490 <_GetIndexMask_0+0x2e>
 800946e:	287f      	cmp	r0, #127	; 0x7f
 8009470:	d810      	bhi.n	8009494 <_GetIndexMask_0+0x32>
 8009472:	283f      	cmp	r0, #63	; 0x3f
 8009474:	d810      	bhi.n	8009498 <_GetIndexMask_0+0x36>
 8009476:	281f      	cmp	r0, #31
 8009478:	d810      	bhi.n	800949c <_GetIndexMask_0+0x3a>
 800947a:	280f      	cmp	r0, #15
 800947c:	d810      	bhi.n	80094a0 <_GetIndexMask_0+0x3e>
 800947e:	2807      	cmp	r0, #7
 8009480:	d810      	bhi.n	80094a4 <_GetIndexMask_0+0x42>
 8009482:	2803      	cmp	r0, #3
 8009484:	d810      	bhi.n	80094a8 <_GetIndexMask_0+0x46>
 8009486:	2801      	cmp	r0, #1
 8009488:	bf94      	ite	ls
 800948a:	2000      	movls	r0, #0
 800948c:	2001      	movhi	r0, #1
 800948e:	e00c      	b.n	80094aa <_GetIndexMask_0+0x48>
 8009490:	2008      	movs	r0, #8
 8009492:	e00a      	b.n	80094aa <_GetIndexMask_0+0x48>
 8009494:	2007      	movs	r0, #7
 8009496:	e008      	b.n	80094aa <_GetIndexMask_0+0x48>
 8009498:	2006      	movs	r0, #6
 800949a:	e006      	b.n	80094aa <_GetIndexMask_0+0x48>
 800949c:	2005      	movs	r0, #5
 800949e:	e004      	b.n	80094aa <_GetIndexMask_0+0x48>
 80094a0:	2004      	movs	r0, #4
 80094a2:	e002      	b.n	80094aa <_GetIndexMask_0+0x48>
 80094a4:	2003      	movs	r0, #3
 80094a6:	e000      	b.n	80094aa <_GetIndexMask_0+0x48>
 80094a8:	2002      	movs	r0, #2
 80094aa:	2301      	movs	r3, #1
 80094ac:	fa03 f000 	lsl.w	r0, r3, r0
 80094b0:	3801      	subs	r0, #1
 80094b2:	bd08      	pop	{r3, pc}

080094b4 <_Index2Color_0>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4604      	mov	r4, r0
 80094b8:	f7fc fe9e 	bl	80061f8 <LCD_GetNumColors>
 80094bc:	4605      	mov	r5, r0
 80094be:	f7fc fec3 	bl	8006248 <LCD_GetPalette>
 80094c2:	42a5      	cmp	r5, r4
 80094c4:	d903      	bls.n	80094ce <_Index2Color_0+0x1a>
 80094c6:	b118      	cbz	r0, 80094d0 <_Index2Color_0+0x1c>
 80094c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	2000      	movs	r0, #0
 80094d0:	bd38      	pop	{r3, r4, r5, pc}

080094d2 <_Color2Index_0>:
 80094d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d6:	4681      	mov	r9, r0
 80094d8:	f7fc fe8e 	bl	80061f8 <LCD_GetNumColors>
 80094dc:	4607      	mov	r7, r0
 80094de:	f7fc feb3 	bl	8006248 <LCD_GetPalette>
 80094e2:	4606      	mov	r6, r0
 80094e4:	b1e0      	cbz	r0, 8009520 <_Color2Index_0+0x4e>
 80094e6:	2000      	movs	r0, #0
 80094e8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 80094ec:	454b      	cmp	r3, r9
 80094ee:	d017      	beq.n	8009520 <_Color2Index_0+0x4e>
 80094f0:	3001      	adds	r0, #1
 80094f2:	4287      	cmp	r7, r0
 80094f4:	dcf8      	bgt.n	80094e8 <_Color2Index_0+0x16>
 80094f6:	2400      	movs	r4, #0
 80094f8:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 80094fc:	4625      	mov	r5, r4
 80094fe:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8009502:	4648      	mov	r0, r9
 8009504:	f7fb fb6f 	bl	8004be6 <GUI_CalcColorDist>
 8009508:	4580      	cmp	r8, r0
 800950a:	bf88      	it	hi
 800950c:	462c      	movhi	r4, r5
 800950e:	f105 0501 	add.w	r5, r5, #1
 8009512:	bf88      	it	hi
 8009514:	4680      	movhi	r8, r0
 8009516:	42af      	cmp	r7, r5
 8009518:	dcf1      	bgt.n	80094fe <_Color2Index_0+0x2c>
 800951a:	4620      	mov	r0, r4
 800951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009524 <GUI_GetYAdjust>:
 8009524:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <GUI_GetYAdjust+0x2c>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b08      	cmp	r3, #8
 8009530:	d007      	beq.n	8009542 <GUI_GetYAdjust+0x1e>
 8009532:	2b0c      	cmp	r3, #12
 8009534:	d005      	beq.n	8009542 <GUI_GetYAdjust+0x1e>
 8009536:	2b04      	cmp	r3, #4
 8009538:	d107      	bne.n	800954a <GUI_GetYAdjust+0x26>
 800953a:	69d3      	ldr	r3, [r2, #28]
 800953c:	7e18      	ldrb	r0, [r3, #24]
 800953e:	3801      	subs	r0, #1
 8009540:	4770      	bx	lr
 8009542:	69d3      	ldr	r3, [r2, #28]
 8009544:	7e18      	ldrb	r0, [r3, #24]
 8009546:	0840      	lsrs	r0, r0, #1
 8009548:	4770      	bx	lr
 800954a:	2000      	movs	r0, #0
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000080 	.word	0x20000080

08009554 <GUI_GetFontDistY>:
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <GUI_GetFontDistY+0xc>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	7e58      	ldrb	r0, [r3, #25]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20000080 	.word	0x20000080

08009564 <GUI_GetCharDistX>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <GUI_GetCharDistX+0xc>)
 8009566:	2100      	movs	r1, #0
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4718      	bx	r3
 8009570:	20000080 	.word	0x20000080

08009574 <GUI_GetCharDistXEx>:
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <GUI_GetCharDistXEx+0xc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4718      	bx	r3
 800957e:	bf00      	nop
 8009580:	20000080 	.word	0x20000080

08009584 <_Log2VisBuffered>:
 8009584:	4770      	bx	lr
	...

08009588 <_DispLine>:
 8009588:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800958a:	4615      	mov	r5, r2
 800958c:	ab02      	add	r3, sp, #8
 800958e:	4a21      	ldr	r2, [pc, #132]	; (8009614 <_DispLine+0x8c>)
 8009590:	4c21      	ldr	r4, [pc, #132]	; (8009618 <_DispLine+0x90>)
 8009592:	f843 1d08 	str.w	r1, [r3, #-8]!
 8009596:	4619      	mov	r1, r3
 8009598:	9001      	str	r0, [sp, #4]
 800959a:	6812      	ldr	r2, [r2, #0]
 800959c:	4790      	blx	r2
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	9001      	str	r0, [sp, #4]
 80095a2:	6958      	ldr	r0, [r3, #20]
 80095a4:	b940      	cbnz	r0, 80095b8 <_DispLine+0x30>
 80095a6:	2001      	movs	r0, #1
 80095a8:	f000 fad8 	bl	8009b5c <GUI__ManageCache>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	69d3      	ldr	r3, [r2, #28]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	b93b      	cbnz	r3, 80095c4 <_DispLine+0x3c>
 80095b4:	4d19      	ldr	r5, [pc, #100]	; (800961c <_DispLine+0x94>)
 80095b6:	e022      	b.n	80095fe <_DispLine+0x76>
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7fb fb9f 	bl	8004cfc <GUI_RectsIntersect>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1f1      	bne.n	80095a6 <_DispLine+0x1e>
 80095c2:	e024      	b.n	800960e <_DispLine+0x86>
 80095c4:	4c16      	ldr	r4, [pc, #88]	; (8009620 <_DispLine+0x98>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	6821      	ldr	r1, [r4, #0]
 80095ca:	b141      	cbz	r1, 80095de <_DispLine+0x56>
 80095cc:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 80095d0:	9801      	ldr	r0, [sp, #4]
 80095d2:	9900      	ldr	r1, [sp, #0]
 80095d4:	4798      	blx	r3
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	4628      	mov	r0, r5
 80095da:	4798      	blx	r3
 80095dc:	e014      	b.n	8009608 <_DispLine+0x80>
 80095de:	9900      	ldr	r1, [sp, #0]
 80095e0:	9801      	ldr	r0, [sp, #4]
 80095e2:	4798      	blx	r3
 80095e4:	e010      	b.n	8009608 <_DispLine+0x80>
 80095e6:	a801      	add	r0, sp, #4
 80095e8:	f7fb ffce 	bl	8005588 <GUI_UC__GetCharCodeInc>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	4606      	mov	r6, r0
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4798      	blx	r3
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b10b      	cbz	r3, 80095fe <_DispLine+0x76>
 80095fa:	4630      	mov	r0, r6
 80095fc:	4798      	blx	r3
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	daee      	bge.n	80095e6 <_DispLine+0x5e>
 8009608:	2000      	movs	r0, #0
 800960a:	f000 faa7 	bl	8009b5c <GUI__ManageCache>
 800960e:	b002      	add	sp, #8
 8009610:	bd70      	pop	{r4, r5, r6, pc}
 8009612:	bf00      	nop
 8009614:	200000b4 	.word	0x200000b4
 8009618:	20000080 	.word	0x20000080
 800961c:	20049cd0 	.word	0x20049cd0
 8009620:	20049cc4 	.word	0x20049cc4

08009624 <GUI__GetLineNumChars>:
 8009624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009626:	460d      	mov	r5, r1
 8009628:	9001      	str	r0, [sp, #4]
 800962a:	4604      	mov	r4, r0
 800962c:	b188      	cbz	r0, 8009652 <GUI__GetLineNumChars+0x2e>
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <GUI__GetLineNumChars+0x34>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	695c      	ldr	r4, [r3, #20]
 8009636:	b154      	cbz	r4, 800964e <GUI__GetLineNumChars+0x2a>
 8009638:	6864      	ldr	r4, [r4, #4]
 800963a:	b144      	cbz	r4, 800964e <GUI__GetLineNumChars+0x2a>
 800963c:	47a0      	blx	r4
 800963e:	e009      	b.n	8009654 <GUI__GetLineNumChars+0x30>
 8009640:	a801      	add	r0, sp, #4
 8009642:	f7fb ffa1 	bl	8005588 <GUI_UC__GetCharCodeInc>
 8009646:	b120      	cbz	r0, 8009652 <GUI__GetLineNumChars+0x2e>
 8009648:	280a      	cmp	r0, #10
 800964a:	d002      	beq.n	8009652 <GUI__GetLineNumChars+0x2e>
 800964c:	3401      	adds	r4, #1
 800964e:	42ac      	cmp	r4, r5
 8009650:	dbf6      	blt.n	8009640 <GUI__GetLineNumChars+0x1c>
 8009652:	4620      	mov	r0, r4
 8009654:	b003      	add	sp, #12
 8009656:	bd30      	pop	{r4, r5, pc}
 8009658:	20000080 	.word	0x20000080

0800965c <GUI__GetOverlap>:
 800965c:	b513      	push	{r0, r1, r4, lr}
 800965e:	2400      	movs	r4, #0
 8009660:	a902      	add	r1, sp, #8
 8009662:	f841 4d04 	str.w	r4, [r1, #-4]!
 8009666:	f7ff ff85 	bl	8009574 <GUI_GetCharDistXEx>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	4298      	cmp	r0, r3
 800966e:	bfb4      	ite	lt
 8009670:	1a18      	sublt	r0, r3, r0
 8009672:	4620      	movge	r0, r4
 8009674:	b002      	add	sp, #8
 8009676:	bd10      	pop	{r4, pc}

08009678 <GUI__GetLineDistX>:
 8009678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967a:	4a15      	ldr	r2, [pc, #84]	; (80096d0 <GUI__GetLineDistX+0x58>)
 800967c:	ab02      	add	r3, sp, #8
 800967e:	9001      	str	r0, [sp, #4]
 8009680:	f843 1d08 	str.w	r1, [r3, #-8]!
 8009684:	4619      	mov	r1, r3
 8009686:	6812      	ldr	r2, [r2, #0]
 8009688:	4790      	blx	r2
 800968a:	9001      	str	r0, [sp, #4]
 800968c:	b1e8      	cbz	r0, 80096ca <GUI__GetLineDistX+0x52>
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <GUI__GetLineDistX+0x5c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	695c      	ldr	r4, [r3, #20]
 8009696:	b10c      	cbz	r4, 800969c <GUI__GetLineDistX+0x24>
 8009698:	6824      	ldr	r4, [r4, #0]
 800969a:	b90c      	cbnz	r4, 80096a0 <GUI__GetLineDistX+0x28>
 800969c:	4625      	mov	r5, r4
 800969e:	e002      	b.n	80096a6 <GUI__GetLineDistX+0x2e>
 80096a0:	9900      	ldr	r1, [sp, #0]
 80096a2:	47a0      	blx	r4
 80096a4:	e011      	b.n	80096ca <GUI__GetLineDistX+0x52>
 80096a6:	9b00      	ldr	r3, [sp, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	db07      	blt.n	80096c0 <GUI__GetLineDistX+0x48>
 80096b0:	a801      	add	r0, sp, #4
 80096b2:	f7fb ff69 	bl	8005588 <GUI_UC__GetCharCodeInc>
 80096b6:	4604      	mov	r4, r0
 80096b8:	f7ff ff54 	bl	8009564 <GUI_GetCharDistX>
 80096bc:	4405      	add	r5, r0
 80096be:	e7f2      	b.n	80096a6 <GUI__GetLineDistX+0x2e>
 80096c0:	4620      	mov	r0, r4
 80096c2:	f7ff ffcb 	bl	800965c <GUI__GetOverlap>
 80096c6:	4428      	add	r0, r5
 80096c8:	e7ff      	b.n	80096ca <GUI__GetLineDistX+0x52>
 80096ca:	b003      	add	sp, #12
 80096cc:	bd30      	pop	{r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	200000b4 	.word	0x200000b4
 80096d4:	20000080 	.word	0x20000080

080096d8 <GUI__DispLine>:
 80096d8:	4b27      	ldr	r3, [pc, #156]	; (8009778 <GUI__DispLine+0xa0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096de:	4605      	mov	r5, r0
 80096e0:	460e      	mov	r6, r1
 80096e2:	b163      	cbz	r3, 80096fe <GUI__DispLine+0x26>
 80096e4:	2000      	movs	r0, #0
 80096e6:	f7ff fc67 	bl	8008fb8 <WM__InitIVRSearch>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d041      	beq.n	8009772 <GUI__DispLine+0x9a>
 80096ee:	466a      	mov	r2, sp
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7ff ff48 	bl	8009588 <_DispLine>
 80096f8:	f7ff fb9c 	bl	8008e34 <WM__GetNextIVR>
 80096fc:	e7f5      	b.n	80096ea <GUI__DispLine+0x12>
 80096fe:	4c1f      	ldr	r4, [pc, #124]	; (800977c <GUI__DispLine+0xa4>)
 8009700:	466b      	mov	r3, sp
 8009702:	6810      	ldr	r0, [r2, #0]
 8009704:	6851      	ldr	r1, [r2, #4]
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	c303      	stmia	r3!, {r0, r1}
 800970a:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 800970e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009712:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8009716:	443b      	add	r3, r7
 8009718:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800971c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8009720:	f8ad 3000 	strh.w	r3, [sp]
 8009724:	4401      	add	r1, r0
 8009726:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800972a:	443a      	add	r2, r7
 800972c:	f8ad 1002 	strh.w	r1, [sp, #2]
 8009730:	4403      	add	r3, r0
 8009732:	4668      	mov	r0, sp
 8009734:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009738:	f8ad 3006 	strh.w	r3, [sp, #6]
 800973c:	f7ff fc3c 	bl	8008fb8 <WM__InitIVRSearch>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	b940      	cbnz	r0, 8009756 <GUI__DispLine+0x7e>
 8009744:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009746:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009748:	1a52      	subs	r2, r2, r1
 800974a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800974c:	845a      	strh	r2, [r3, #34]	; 0x22
 800974e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8009750:	1a52      	subs	r2, r2, r1
 8009752:	849a      	strh	r2, [r3, #36]	; 0x24
 8009754:	e00d      	b.n	8009772 <GUI__DispLine+0x9a>
 8009756:	f8bd 2000 	ldrh.w	r2, [sp]
 800975a:	4631      	mov	r1, r6
 800975c:	4628      	mov	r0, r5
 800975e:	845a      	strh	r2, [r3, #34]	; 0x22
 8009760:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009764:	849a      	strh	r2, [r3, #36]	; 0x24
 8009766:	466a      	mov	r2, sp
 8009768:	f7ff ff0e 	bl	8009588 <_DispLine>
 800976c:	f7ff fb62 	bl	8008e34 <WM__GetNextIVR>
 8009770:	e7e6      	b.n	8009740 <GUI__DispLine+0x68>
 8009772:	b003      	add	sp, #12
 8009774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009776:	bf00      	nop
 8009778:	20049cb0 	.word	0x20049cb0
 800977c:	20000080 	.word	0x20000080

08009780 <GUIMONO_DispChar>:
 8009780:	4b4d      	ldr	r3, [pc, #308]	; (80098b8 <GUIMONO_DispChar+0x138>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	69d1      	ldr	r1, [r2, #28]
 8009786:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	69cc      	ldr	r4, [r1, #28]
 800978c:	b08b      	sub	sp, #44	; 0x2c
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	4283      	cmp	r3, r0
 8009792:	d808      	bhi.n	80097a6 <GUIMONO_DispChar+0x26>
 8009794:	89e5      	ldrh	r5, [r4, #14]
 8009796:	4285      	cmp	r5, r0
 8009798:	d305      	bcc.n	80097a6 <GUIMONO_DispChar+0x26>
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	1ac3      	subs	r3, r0, r3
 800979e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80097a2:	9506      	str	r5, [sp, #24]
 80097a4:	e013      	b.n	80097ce <GUIMONO_DispChar+0x4e>
 80097a6:	68a3      	ldr	r3, [r4, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d07c      	beq.n	80098a6 <GUIMONO_DispChar+0x126>
 80097ac:	881d      	ldrh	r5, [r3, #0]
 80097ae:	42a8      	cmp	r0, r5
 80097b0:	d379      	bcc.n	80098a6 <GUIMONO_DispChar+0x126>
 80097b2:	885e      	ldrh	r6, [r3, #2]
 80097b4:	4286      	cmp	r6, r0
 80097b6:	d376      	bcc.n	80098a6 <GUIMONO_DispChar+0x126>
 80097b8:	1b40      	subs	r0, r0, r5
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	6866      	ldr	r6, [r4, #4]
 80097be:	b280      	uxth	r0, r0
 80097c0:	9606      	str	r6, [sp, #24]
 80097c2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80097c6:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 80097ca:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 80097ce:	1c58      	adds	r0, r3, #1
 80097d0:	9309      	str	r3, [sp, #36]	; 0x24
 80097d2:	d068      	beq.n	80098a6 <GUIMONO_DispChar+0x126>
 80097d4:	f891 b018 	ldrb.w	fp, [r1, #24]
 80097d8:	7ca1      	ldrb	r1, [r4, #18]
 80097da:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 80097de:	fb1b f301 	smulbb	r3, fp, r1
 80097e2:	4d35      	ldr	r5, [pc, #212]	; (80098b8 <GUIMONO_DispChar+0x138>)
 80097e4:	4648      	mov	r0, r9
 80097e6:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 80097ea:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 80097ee:	9307      	str	r3, [sp, #28]
 80097f0:	f894 a010 	ldrb.w	sl, [r4, #16]
 80097f4:	f7fc f846 	bl	8005884 <LCD_SetDrawMode>
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	9b07      	ldr	r3, [sp, #28]
 80097fc:	69ca      	ldr	r2, [r1, #28]
 80097fe:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009800:	9008      	str	r0, [sp, #32]
 8009802:	4618      	mov	r0, r3
 8009804:	9105      	str	r1, [sp, #20]
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	9906      	ldr	r1, [sp, #24]
 800980a:	fb00 1003 	mla	r0, r0, r3, r1
 800980e:	4641      	mov	r1, r8
 8009810:	9004      	str	r0, [sp, #16]
 8009812:	4638      	mov	r0, r7
 8009814:	7ca3      	ldrb	r3, [r4, #18]
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	2301      	movs	r3, #1
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	7ed3      	ldrb	r3, [r2, #27]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	7e93      	ldrb	r3, [r2, #26]
 8009822:	4652      	mov	r2, sl
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	465b      	mov	r3, fp
 8009828:	f7fc f9a2 	bl	8005b70 <LCD_DrawBitmap>
 800982c:	1c73      	adds	r3, r6, #1
 800982e:	d01a      	beq.n	8009866 <GUIMONO_DispChar+0xe6>
 8009830:	f049 0002 	orr.w	r0, r9, #2
 8009834:	f7fc f826 	bl	8005884 <LCD_SetDrawMode>
 8009838:	682a      	ldr	r2, [r5, #0]
 800983a:	9906      	ldr	r1, [sp, #24]
 800983c:	4638      	mov	r0, r7
 800983e:	69d3      	ldr	r3, [r2, #28]
 8009840:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009842:	9205      	str	r2, [sp, #20]
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	fb02 1606 	mla	r6, r2, r6, r1
 800984a:	4641      	mov	r1, r8
 800984c:	9604      	str	r6, [sp, #16]
 800984e:	7ca2      	ldrb	r2, [r4, #18]
 8009850:	9203      	str	r2, [sp, #12]
 8009852:	2201      	movs	r2, #1
 8009854:	9202      	str	r2, [sp, #8]
 8009856:	7eda      	ldrb	r2, [r3, #27]
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	4652      	mov	r2, sl
 800985c:	7e9b      	ldrb	r3, [r3, #26]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	465b      	mov	r3, fp
 8009862:	f7fc f985 	bl	8005b70 <LCD_DrawBitmap>
 8009866:	682b      	ldr	r3, [r5, #0]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	7e5a      	ldrb	r2, [r3, #25]
 800986c:	7e1b      	ldrb	r3, [r3, #24]
 800986e:	429a      	cmp	r2, r3
 8009870:	d915      	bls.n	800989e <GUIMONO_DispChar+0x11e>
 8009872:	f1b9 0f02 	cmp.w	r9, #2
 8009876:	d012      	beq.n	800989e <GUIMONO_DispChar+0x11e>
 8009878:	f089 0004 	eor.w	r0, r9, #4
 800987c:	f7fc f802 	bl	8005884 <LCD_SetDrawMode>
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <GUIMONO_DispChar+0x138>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	7e18      	ldrb	r0, [r3, #24]
 8009888:	7ed9      	ldrb	r1, [r3, #27]
 800988a:	7e9a      	ldrb	r2, [r3, #26]
 800988c:	7e5b      	ldrb	r3, [r3, #25]
 800988e:	fb00 8101 	mla	r1, r0, r1, r8
 8009892:	fb0a 7202 	mla	r2, sl, r2, r7
 8009896:	4638      	mov	r0, r7
 8009898:	4443      	add	r3, r8
 800989a:	f7fc f851 	bl	8005940 <LCD_FillRect>
 800989e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80098a2:	f7fb ffef 	bl	8005884 <LCD_SetDrawMode>
 80098a6:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <GUIMONO_DispChar+0x138>)
 80098a8:	7c61      	ldrb	r1, [r4, #17]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80098ae:	440b      	add	r3, r1
 80098b0:	8453      	strh	r3, [r2, #34]	; 0x22
 80098b2:	b00b      	add	sp, #44	; 0x2c
 80098b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b8:	20000080 	.word	0x20000080

080098bc <GUIMONO_GetCharDistX>:
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <GUIMONO_GetCharDistX+0x14>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	b109      	cbz	r1, 80098ca <GUIMONO_GetCharDistX+0xe>
 80098c6:	7c1a      	ldrb	r2, [r3, #16]
 80098c8:	600a      	str	r2, [r1, #0]
 80098ca:	7c58      	ldrb	r0, [r3, #17]
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000080 	.word	0x20000080

080098d4 <GUIMONO_GetFontInfo>:
 80098d4:	2302      	movs	r3, #2
 80098d6:	800b      	strh	r3, [r1, #0]
 80098d8:	4770      	bx	lr

080098da <GUIMONO_IsInFont>:
 80098da:	69c3      	ldr	r3, [r0, #28]
 80098dc:	899a      	ldrh	r2, [r3, #12]
 80098de:	428a      	cmp	r2, r1
 80098e0:	d802      	bhi.n	80098e8 <GUIMONO_IsInFont+0xe>
 80098e2:	89da      	ldrh	r2, [r3, #14]
 80098e4:	428a      	cmp	r2, r1
 80098e6:	d20f      	bcs.n	8009908 <GUIMONO_IsInFont+0x2e>
 80098e8:	6898      	ldr	r0, [r3, #8]
 80098ea:	b180      	cbz	r0, 800990e <GUIMONO_IsInFont+0x34>
 80098ec:	8803      	ldrh	r3, [r0, #0]
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d30c      	bcc.n	800990c <GUIMONO_IsInFont+0x32>
 80098f2:	8842      	ldrh	r2, [r0, #2]
 80098f4:	428a      	cmp	r2, r1
 80098f6:	d309      	bcc.n	800990c <GUIMONO_IsInFont+0x32>
 80098f8:	1ac9      	subs	r1, r1, r3
 80098fa:	6843      	ldr	r3, [r0, #4]
 80098fc:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8009900:	43c0      	mvns	r0, r0
 8009902:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8009906:	4770      	bx	lr
 8009908:	2001      	movs	r0, #1
 800990a:	4770      	bx	lr
 800990c:	2000      	movs	r0, #0
 800990e:	4770      	bx	lr

08009910 <GUI__CompactPixelIndices>:
 8009910:	2a08      	cmp	r2, #8
 8009912:	b510      	push	{r4, lr}
 8009914:	dd0e      	ble.n	8009934 <GUI__CompactPixelIndices+0x24>
 8009916:	2a10      	cmp	r2, #16
 8009918:	dc0a      	bgt.n	8009930 <GUI__CompactPixelIndices+0x20>
 800991a:	4603      	mov	r3, r0
 800991c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009920:	f850 2b04 	ldr.w	r2, [r0], #4
 8009924:	f823 2b02 	strh.w	r2, [r3], #2
 8009928:	428b      	cmp	r3, r1
 800992a:	d1f9      	bne.n	8009920 <GUI__CompactPixelIndices+0x10>
 800992c:	2001      	movs	r0, #1
 800992e:	bd10      	pop	{r4, pc}
 8009930:	2000      	movs	r0, #0
 8009932:	bd10      	pop	{r4, pc}
 8009934:	2a02      	cmp	r2, #2
 8009936:	d12a      	bne.n	800998e <GUI__CompactPixelIndices+0x7e>
 8009938:	4604      	mov	r4, r0
 800993a:	6803      	ldr	r3, [r0, #0]
 800993c:	2901      	cmp	r1, #1
 800993e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8009942:	b2db      	uxtb	r3, r3
 8009944:	d020      	beq.n	8009988 <GUI__CompactPixelIndices+0x78>
 8009946:	6842      	ldr	r2, [r0, #4]
 8009948:	2902      	cmp	r1, #2
 800994a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800994e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8009952:	ea43 0302 	orr.w	r3, r3, r2
 8009956:	d101      	bne.n	800995c <GUI__CompactPixelIndices+0x4c>
 8009958:	3008      	adds	r0, #8
 800995a:	e016      	b.n	800998a <GUI__CompactPixelIndices+0x7a>
 800995c:	6882      	ldr	r2, [r0, #8]
 800995e:	2903      	cmp	r1, #3
 8009960:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8009964:	f002 020c 	and.w	r2, r2, #12
 8009968:	ea43 0302 	orr.w	r3, r3, r2
 800996c:	d101      	bne.n	8009972 <GUI__CompactPixelIndices+0x62>
 800996e:	300c      	adds	r0, #12
 8009970:	e00b      	b.n	800998a <GUI__CompactPixelIndices+0x7a>
 8009972:	68c2      	ldr	r2, [r0, #12]
 8009974:	3904      	subs	r1, #4
 8009976:	3010      	adds	r0, #16
 8009978:	f002 0203 	and.w	r2, r2, #3
 800997c:	4313      	orrs	r3, r2
 800997e:	f804 3b01 	strb.w	r3, [r4], #1
 8009982:	2900      	cmp	r1, #0
 8009984:	d1d9      	bne.n	800993a <GUI__CompactPixelIndices+0x2a>
 8009986:	e7d1      	b.n	800992c <GUI__CompactPixelIndices+0x1c>
 8009988:	3004      	adds	r0, #4
 800998a:	2100      	movs	r1, #0
 800998c:	e7f7      	b.n	800997e <GUI__CompactPixelIndices+0x6e>
 800998e:	2a04      	cmp	r2, #4
 8009990:	d115      	bne.n	80099be <GUI__CompactPixelIndices+0xae>
 8009992:	4604      	mov	r4, r0
 8009994:	2901      	cmp	r1, #1
 8009996:	6803      	ldr	r3, [r0, #0]
 8009998:	bf18      	it	ne
 800999a:	6842      	ldrne	r2, [r0, #4]
 800999c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80099a0:	bf0c      	ite	eq
 80099a2:	2100      	moveq	r1, #0
 80099a4:	3902      	subne	r1, #2
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	bf17      	itett	ne
 80099aa:	f002 020f 	andne.w	r2, r2, #15
 80099ae:	3004      	addeq	r0, #4
 80099b0:	3008      	addne	r0, #8
 80099b2:	4313      	orrne	r3, r2
 80099b4:	f804 3b01 	strb.w	r3, [r4], #1
 80099b8:	2900      	cmp	r1, #0
 80099ba:	d1eb      	bne.n	8009994 <GUI__CompactPixelIndices+0x84>
 80099bc:	e7b6      	b.n	800992c <GUI__CompactPixelIndices+0x1c>
 80099be:	2a01      	cmp	r2, #1
 80099c0:	4603      	mov	r3, r0
 80099c2:	d154      	bne.n	8009a6e <GUI__CompactPixelIndices+0x15e>
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	2901      	cmp	r1, #1
 80099c8:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	d04b      	beq.n	8009a68 <GUI__CompactPixelIndices+0x158>
 80099d0:	685c      	ldr	r4, [r3, #4]
 80099d2:	2902      	cmp	r1, #2
 80099d4:	ea4f 1484 	mov.w	r4, r4, lsl #6
 80099d8:	f004 0440 	and.w	r4, r4, #64	; 0x40
 80099dc:	ea42 0204 	orr.w	r2, r2, r4
 80099e0:	d101      	bne.n	80099e6 <GUI__CompactPixelIndices+0xd6>
 80099e2:	3308      	adds	r3, #8
 80099e4:	e041      	b.n	8009a6a <GUI__CompactPixelIndices+0x15a>
 80099e6:	689c      	ldr	r4, [r3, #8]
 80099e8:	2903      	cmp	r1, #3
 80099ea:	ea4f 1444 	mov.w	r4, r4, lsl #5
 80099ee:	f004 0420 	and.w	r4, r4, #32
 80099f2:	ea42 0204 	orr.w	r2, r2, r4
 80099f6:	d101      	bne.n	80099fc <GUI__CompactPixelIndices+0xec>
 80099f8:	330c      	adds	r3, #12
 80099fa:	e036      	b.n	8009a6a <GUI__CompactPixelIndices+0x15a>
 80099fc:	68dc      	ldr	r4, [r3, #12]
 80099fe:	2904      	cmp	r1, #4
 8009a00:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8009a04:	f004 0410 	and.w	r4, r4, #16
 8009a08:	ea42 0204 	orr.w	r2, r2, r4
 8009a0c:	d101      	bne.n	8009a12 <GUI__CompactPixelIndices+0x102>
 8009a0e:	3310      	adds	r3, #16
 8009a10:	e02b      	b.n	8009a6a <GUI__CompactPixelIndices+0x15a>
 8009a12:	691c      	ldr	r4, [r3, #16]
 8009a14:	2905      	cmp	r1, #5
 8009a16:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8009a1a:	f004 0408 	and.w	r4, r4, #8
 8009a1e:	ea42 0204 	orr.w	r2, r2, r4
 8009a22:	d101      	bne.n	8009a28 <GUI__CompactPixelIndices+0x118>
 8009a24:	3314      	adds	r3, #20
 8009a26:	e020      	b.n	8009a6a <GUI__CompactPixelIndices+0x15a>
 8009a28:	695c      	ldr	r4, [r3, #20]
 8009a2a:	2906      	cmp	r1, #6
 8009a2c:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8009a30:	f004 0404 	and.w	r4, r4, #4
 8009a34:	ea42 0204 	orr.w	r2, r2, r4
 8009a38:	d101      	bne.n	8009a3e <GUI__CompactPixelIndices+0x12e>
 8009a3a:	3318      	adds	r3, #24
 8009a3c:	e015      	b.n	8009a6a <GUI__CompactPixelIndices+0x15a>
 8009a3e:	699c      	ldr	r4, [r3, #24]
 8009a40:	3907      	subs	r1, #7
 8009a42:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009a46:	bf08      	it	eq
 8009a48:	331c      	addeq	r3, #28
 8009a4a:	f004 0402 	and.w	r4, r4, #2
 8009a4e:	ea42 0204 	orr.w	r2, r2, r4
 8009a52:	bf1f      	itttt	ne
 8009a54:	69dc      	ldrne	r4, [r3, #28]
 8009a56:	3320      	addne	r3, #32
 8009a58:	f004 0401 	andne.w	r4, r4, #1
 8009a5c:	4322      	orrne	r2, r4
 8009a5e:	f800 2b01 	strb.w	r2, [r0], #1
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d1ae      	bne.n	80099c4 <GUI__CompactPixelIndices+0xb4>
 8009a66:	e761      	b.n	800992c <GUI__CompactPixelIndices+0x1c>
 8009a68:	3304      	adds	r3, #4
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	e7f7      	b.n	8009a5e <GUI__CompactPixelIndices+0x14e>
 8009a6e:	4401      	add	r1, r0
 8009a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a74:	f803 2b01 	strb.w	r2, [r3], #1
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	d1f9      	bne.n	8009a70 <GUI__CompactPixelIndices+0x160>
 8009a7c:	e756      	b.n	800992c <GUI__CompactPixelIndices+0x1c>
	...

08009a80 <GUI__ManageCacheEx>:
 8009a80:	2801      	cmp	r0, #1
 8009a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a84:	4606      	mov	r6, r0
 8009a86:	460c      	mov	r4, r1
 8009a88:	dc62      	bgt.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009a8a:	4d33      	ldr	r5, [pc, #204]	; (8009b58 <GUI__ManageCacheEx+0xd8>)
 8009a8c:	686b      	ldr	r3, [r5, #4]
 8009a8e:	b103      	cbz	r3, 8009a92 <GUI__ManageCacheEx+0x12>
 8009a90:	4798      	blx	r3
 8009a92:	2c01      	cmp	r4, #1
 8009a94:	d004      	beq.n	8009aa0 <GUI__ManageCacheEx+0x20>
 8009a96:	2c02      	cmp	r4, #2
 8009a98:	d020      	beq.n	8009adc <GUI__ManageCacheEx+0x5c>
 8009a9a:	2c00      	cmp	r4, #0
 8009a9c:	d158      	bne.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009a9e:	e033      	b.n	8009b08 <GUI__ManageCacheEx+0x88>
 8009aa0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8009aa4:	68af      	ldr	r7, [r5, #8]
 8009aa6:	b9af      	cbnz	r7, 8009ad4 <GUI__ManageCacheEx+0x54>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7fb fb55 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8009aae:	9001      	str	r0, [sp, #4]
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d04d      	beq.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009ab4:	68c3      	ldr	r3, [r0, #12]
 8009ab6:	210d      	movs	r1, #13
 8009ab8:	a801      	add	r0, sp, #4
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d045      	beq.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	9801      	ldr	r0, [sp, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	68ab      	ldr	r3, [r5, #8]
 8009acc:	4638      	mov	r0, r7
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60ab      	str	r3, [r5, #8]
 8009ad2:	e03e      	b.n	8009b52 <GUI__ManageCacheEx+0xd2>
 8009ad4:	1c78      	adds	r0, r7, #1
 8009ad6:	60a8      	str	r0, [r5, #8]
 8009ad8:	4620      	mov	r0, r4
 8009ada:	e03a      	b.n	8009b52 <GUI__ManageCacheEx+0xd2>
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7fb fb3b 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8009ae2:	9001      	str	r0, [sp, #4]
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d033      	beq.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009ae8:	68c3      	ldr	r3, [r0, #12]
 8009aea:	210d      	movs	r1, #13
 8009aec:	a801      	add	r0, sp, #4
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	4798      	blx	r3
 8009af2:	4604      	mov	r4, r0
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d02b      	beq.n	8009b50 <GUI__ManageCacheEx+0xd0>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <GUI__ManageCacheEx+0x7e>
 8009afc:	4798      	blx	r3
 8009afe:	2102      	movs	r1, #2
 8009b00:	9801      	ldr	r0, [sp, #4]
 8009b02:	47a0      	blx	r4
 8009b04:	2000      	movs	r0, #0
 8009b06:	e024      	b.n	8009b52 <GUI__ManageCacheEx+0xd2>
 8009b08:	00b4      	lsls	r4, r6, #2
 8009b0a:	192b      	adds	r3, r5, r4
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d001      	beq.n	8009b16 <GUI__ManageCacheEx+0x96>
 8009b12:	2001      	movs	r0, #1
 8009b14:	e015      	b.n	8009b42 <GUI__ManageCacheEx+0xc2>
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7fb fb1e 	bl	8005158 <GUI_DEVICE__GetpDriver>
 8009b1c:	9001      	str	r0, [sp, #4]
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0f7      	beq.n	8009b12 <GUI__ManageCacheEx+0x92>
 8009b22:	68c3      	ldr	r3, [r0, #12]
 8009b24:	210d      	movs	r1, #13
 8009b26:	a801      	add	r0, sp, #4
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	4798      	blx	r3
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d0ef      	beq.n	8009b12 <GUI__ManageCacheEx+0x92>
 8009b32:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <GUI__ManageCacheEx+0xd8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <GUI__ManageCacheEx+0xba>
 8009b38:	4798      	blx	r3
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	9801      	ldr	r0, [sp, #4]
 8009b3e:	47b0      	blx	r6
 8009b40:	2000      	movs	r0, #0
 8009b42:	4425      	add	r5, r4
 8009b44:	68ab      	ldr	r3, [r5, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bf18      	it	ne
 8009b4a:	3b01      	subne	r3, #1
 8009b4c:	60ab      	str	r3, [r5, #8]
 8009b4e:	e000      	b.n	8009b52 <GUI__ManageCacheEx+0xd2>
 8009b50:	2001      	movs	r0, #1
 8009b52:	b003      	add	sp, #12
 8009b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20049bcc 	.word	0x20049bcc

08009b5c <GUI__ManageCache>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <GUI__ManageCache+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	7c58      	ldrb	r0, [r3, #17]
 8009b64:	f7ff bf8c 	b.w	8009a80 <GUI__ManageCacheEx>
 8009b68:	20000080 	.word	0x20000080

08009b6c <LCD_SetClipRectEx>:
 8009b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6e:	4c09      	ldr	r4, [pc, #36]	; (8009b94 <LCD_SetClipRectEx+0x28>)
 8009b70:	4605      	mov	r5, r0
 8009b72:	4669      	mov	r1, sp
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	7c5a      	ldrb	r2, [r3, #17]
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <LCD_SetClipRectEx+0x2c>)
 8009b7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009b7e:	68c3      	ldr	r3, [r0, #12]
 8009b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b82:	4798      	blx	r3
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	466a      	mov	r2, sp
 8009b88:	4629      	mov	r1, r5
 8009b8a:	3008      	adds	r0, #8
 8009b8c:	f7fb fddb 	bl	8005746 <GUI__IntersectRects>
 8009b90:	b003      	add	sp, #12
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	20000080 	.word	0x20000080
 8009b98:	20049cf4 	.word	0x20049cf4

08009b9c <GUI_MEMDEV_GetBitsPerPixel>:
 8009b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	b170      	cbz	r0, 8009bc0 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8009ba2:	f7fa fdcd 	bl	8004740 <GUI_ALLOC_LockH>
 8009ba6:	6803      	ldr	r3, [r0, #0]
 8009ba8:	ad02      	add	r5, sp, #8
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	4798      	blx	r3
 8009bb4:	f7fc fbb7 	bl	8006326 <LCD__GetBPPDevice>
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f7fa fdce 	bl	800475c <GUI_ALLOC_UnlockH>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	b003      	add	sp, #12
 8009bc4:	bd30      	pop	{r4, r5, pc}
	...

08009bc8 <GUI_MEMDEV_Delete>:
 8009bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bca:	4604      	mov	r4, r0
 8009bcc:	b1d0      	cbz	r0, 8009c04 <GUI_MEMDEV_Delete+0x3c>
 8009bce:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <GUI_MEMDEV_Delete+0x40>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	d101      	bne.n	8009bdc <GUI_MEMDEV_Delete+0x14>
 8009bd8:	f7fb f8ad 	bl	8004d36 <GUI_SelectLCD>
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7fa fdaf 	bl	8004740 <GUI_ALLOC_LockH>
 8009be2:	9001      	str	r0, [sp, #4]
 8009be4:	6940      	ldr	r0, [r0, #20]
 8009be6:	b108      	cbz	r0, 8009bec <GUI_MEMDEV_Delete+0x24>
 8009be8:	f7fe f8de 	bl	8007da8 <GUI_USAGE_DecUseCnt>
 8009bec:	ad02      	add	r5, sp, #8
 8009bee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f7fb fac0 	bl	8005178 <GUI_DEVICE_Delete>
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f7fa fdaf 	bl	800475c <GUI_ALLOC_UnlockH>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7fa fdcc 	bl	800479c <GUI_ALLOC_Free>
 8009c04:	b003      	add	sp, #12
 8009c06:	bd30      	pop	{r4, r5, pc}
 8009c08:	20000080 	.word	0x20000080

08009c0c <GUI_MEMDEV_GetDataPtr>:
 8009c0c:	b513      	push	{r0, r1, r4, lr}
 8009c0e:	b158      	cbz	r0, 8009c28 <GUI_MEMDEV_GetDataPtr+0x1c>
 8009c10:	f7fa fd96 	bl	8004740 <GUI_ALLOC_LockH>
 8009c14:	ab02      	add	r3, sp, #8
 8009c16:	f100 0418 	add.w	r4, r0, #24
 8009c1a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fa fd9c 	bl	800475c <GUI_ALLOC_UnlockH>
 8009c24:	4620      	mov	r0, r4
 8009c26:	e7ff      	b.n	8009c28 <GUI_MEMDEV_GetDataPtr+0x1c>
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <memmove>:
 8009c2c:	4288      	cmp	r0, r1
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	eb01 0402 	add.w	r4, r1, r2
 8009c34:	d902      	bls.n	8009c3c <memmove+0x10>
 8009c36:	4284      	cmp	r4, r0
 8009c38:	4623      	mov	r3, r4
 8009c3a:	d807      	bhi.n	8009c4c <memmove+0x20>
 8009c3c:	1e43      	subs	r3, r0, #1
 8009c3e:	42a1      	cmp	r1, r4
 8009c40:	d008      	beq.n	8009c54 <memmove+0x28>
 8009c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c4a:	e7f8      	b.n	8009c3e <memmove+0x12>
 8009c4c:	4402      	add	r2, r0
 8009c4e:	4601      	mov	r1, r0
 8009c50:	428a      	cmp	r2, r1
 8009c52:	d100      	bne.n	8009c56 <memmove+0x2a>
 8009c54:	bd10      	pop	{r4, pc}
 8009c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c5e:	e7f7      	b.n	8009c50 <memmove+0x24>

08009c60 <memset>:
 8009c60:	4402      	add	r2, r0
 8009c62:	4603      	mov	r3, r0
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d100      	bne.n	8009c6a <memset+0xa>
 8009c68:	4770      	bx	lr
 8009c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c6e:	e7f9      	b.n	8009c64 <memset+0x4>

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4d0d      	ldr	r5, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1b64      	subs	r4, r4, r5
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4d0b      	ldr	r5, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f000 f826 	bl	8009cd4 <_init>
 8009c88:	1b64      	subs	r4, r4, r5
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	42a6      	cmp	r6, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c98:	4798      	blx	r3
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	4798      	blx	r3
 8009ca4:	3601      	adds	r6, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	0800e730 	.word	0x0800e730
 8009cac:	0800e730 	.word	0x0800e730
 8009cb0:	0800e730 	.word	0x0800e730
 8009cb4:	0800e734 	.word	0x0800e734

08009cb8 <memcpy>:
 8009cb8:	440a      	add	r2, r1
 8009cba:	4291      	cmp	r1, r2
 8009cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009cc0:	d100      	bne.n	8009cc4 <memcpy+0xc>
 8009cc2:	4770      	bx	lr
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cce:	4291      	cmp	r1, r2
 8009cd0:	d1f9      	bne.n	8009cc6 <memcpy+0xe>
 8009cd2:	bd10      	pop	{r4, pc}

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
