
STemWin_HelloWorld_STM32F723IEKx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006a60  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ded4  0800ded4  0001ded4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ded8  0800ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  20000000  0800dedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00025be0  200000c4  0800dfa0  000200c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20025ca4  0800dfa0  00025ca4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 10 .comment      000000b1  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 11 .debug_line   000131d6  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000000c5  00000000  00000000  0003337b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00014486  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032af  00000000  00000000  000478c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0004ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e98e3  00000000  00000000  0004b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ceb  00000000  00000000  0013510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002458d  00000000  00000000  00135df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002634  00000000  00000000  0015a384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000075c3  00000000  00000000  0015c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c4 	.word	0x200000c4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007454 	.word	0x08007454

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000c8 	.word	0x200000c8
 800021c:	08007454 	.word	0x08007454

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800051c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000522:	e003      	b.n	800052c <LoopCopyDataInit>

08000524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800052a:	3104      	adds	r1, #4

0800052c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000534:	d3f6      	bcc.n	8000524 <CopyDataInit>
  ldr  r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000538:	e002      	b.n	8000540 <LoopFillZerobss>

0800053a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800053a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800053c:	f842 3b04 	str.w	r3, [r2], #4

08000540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000544:	d3f9      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000546:	f000 fd47 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f006 ff51 	bl	80073f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800054e:	f000 f82b 	bl	80005a8 <main>
  bx  lr    
 8000552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000554:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8000558:	0800dedc 	.word	0x0800dedc
  ldr  r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000560:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8000564:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8000568:	20025ca4 	.word	0x20025ca4

0800056c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC_IRQHandler>
	...

08000570 <MainTask>:
*/
/*********************************************************************
*
*       MainTask
*/
void MainTask(void) {
 8000570:	b508      	push	{r3, lr}
  GUI_Clear();
 8000572:	f002 f957 	bl	8002824 <GUI_Clear>
  GUI_SetFont(&GUI_Font20_1);
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <MainTask+0x30>)
 8000578:	f002 f896 	bl	80026a8 <GUI_SetFont>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 800057c:	f003 f8ba 	bl	80036f4 <LCD_GetXSize>
 8000580:	4604      	mov	r4, r0
 8000582:	f003 f8bf 	bl	8003704 <LCD_GetYSize>
 8000586:	3814      	subs	r0, #20
 8000588:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 800058c:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8000590:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000594:	1052      	asrs	r2, r2, #1
 8000596:	1041      	asrs	r1, r0, #1
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <MainTask+0x34>)
 800059a:	f002 fba9 	bl	8002cf0 <GUI_DispStringAt>
  while(1);
 800059e:	e7fe      	b.n	800059e <MainTask+0x2e>
 80005a0:	0800b598 	.word	0x0800b598
 80005a4:	0800debc 	.word	0x0800debc

080005a8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */ 
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005ac:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 80005b0:	f000 fdf8 	bl	80011a4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005b4:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005b6:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005b8:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005ba:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005be:	f248 731f 	movw	r3, #34591	; 0x871f

  /* Configure the MPU attributes for PSRAM with recommended configurations:
     Normal memory, Shareable, write-back */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x64000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80005c2:	f04f 47c8 	mov.w	r7, #1677721600	; 0x64000000
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005c6:	950b      	str	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005c8:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005cc:	f000 fe08 	bl	80011e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80005d0:	4b69      	ldr	r3, [pc, #420]	; (8000778 <main+0x1d0>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005d2:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005d4:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80005d8:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80005dc:	4b67      	ldr	r3, [pc, #412]	; (800077c <main+0x1d4>)
 80005de:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005e0:	f000 fdfe 	bl	80011e0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005e4:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80005e8:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005ec:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005ee:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80005f2:	4b63      	ldr	r3, [pc, #396]	; (8000780 <main+0x1d8>)
 80005f4:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005f8:	4b62      	ldr	r3, [pc, #392]	; (8000784 <main+0x1dc>)
 80005fa:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005fc:	f000 fdf0 	bl	80011e0 <HAL_MPU_ConfigRegion>
#else
#error Can't setup MPU regions, specific board name isn't defined!
#endif

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000600:	2004      	movs	r0, #4
 8000602:	f000 fddd 	bl	80011c0 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800060a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800060e:	4a5e      	ldr	r2, [pc, #376]	; (8000788 <main+0x1e0>)
 8000610:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000618:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800061c:	6953      	ldr	r3, [r2, #20]
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000628:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000634:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000638:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000644:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000646:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000650:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000656:	d2f9      	bcs.n	800064c <main+0xa4>
    } while(sets-- != 0U);
 8000658:	3b20      	subs	r3, #32
 800065a:	f113 0f20 	cmn.w	r3, #32
 800065e:	d1f2      	bne.n	8000646 <main+0x9e>
 8000660:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000664:	6953      	ldr	r3, [r2, #20]
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000670:	f3bf 8f6f 	isb	sy
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4d45      	ldr	r5, [pc, #276]	; (800078c <main+0x1e4>)
  HAL_Init();
 8000676:	f000 fcf9 	bl	800106c <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067c:	2402      	movs	r4, #2
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8000680:	2619      	movs	r6, #25
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000682:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	642b      	str	r3, [r5, #64]	; 0x40
 800068a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <main+0x1e8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ae:	e9cd 7308 	strd	r7, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;  
 80006ba:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006be:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006c2:	2309      	movs	r3, #9
 80006c4:	9313      	str	r3, [sp, #76]	; 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006c6:	f000 fed3 	bl	8001470 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 80006ca:	b118      	cbz	r0, 80006d4 <main+0x12c>
    HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	; 0x32
 80006ce:	f000 fcf1 	bl	80010b4 <HAL_Delay>
  while(1)
 80006d2:	e7fb      	b.n	80006cc <main+0x124>
  ret = HAL_PWREx_EnableOverDrive();
 80006d4:	f000 fe94 	bl	8001400 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 80006d8:	b118      	cbz	r0, 80006e2 <main+0x13a>
    HAL_Delay(50);
 80006da:	2032      	movs	r0, #50	; 0x32
 80006dc:	f000 fcea 	bl	80010b4 <HAL_Delay>
  while(1)
 80006e0:	e7fb      	b.n	80006da <main+0x132>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80006e2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 80006e6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006ea:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	e9cd 0306 	strd	r0, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80006f8:	a803      	add	r0, sp, #12
 80006fa:	f001 f8a1 	bl	8001840 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 80006fe:	4606      	mov	r6, r0
 8000700:	b118      	cbz	r0, 800070a <main+0x162>
    HAL_Delay(50);
 8000702:	2032      	movs	r0, #50	; 0x32
 8000704:	f000 fcd6 	bl	80010b4 <HAL_Delay>
  while(1)
 8000708:	e7fb      	b.n	8000702 <main+0x15a>
  BSP_LED_Init(LED5);
 800070a:	f000 fadd 	bl	8000cc8 <BSP_LED_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <main+0x1ec>)
 8000710:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000714:	4c20      	ldr	r4, [pc, #128]	; (8000798 <main+0x1f0>)
 8000716:	681b      	ldr	r3, [r3, #0]
  TimHandle.Init.ClockDivision = 0;
 8000718:	6166      	str	r6, [r4, #20]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	60e6      	str	r6, [r4, #12]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	61e6      	str	r6, [r4, #28]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800071e:	1d26      	adds	r6, r4, #4
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000720:	fbb3 f3f2 	udiv	r3, r3, r2
  TimHandle.Instance = TIM3;
 8000724:	4a1d      	ldr	r2, [pc, #116]	; (800079c <main+0x1f4>)
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000726:	3b01      	subs	r3, #1
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000728:	4630      	mov	r0, r6
  TimHandle.Instance = TIM3;
 800072a:	6062      	str	r2, [r4, #4]
  TimHandle.Init.Period = 500 - 1;
 800072c:	f240 12f3 	movw	r2, #499	; 0x1f3
  uwPrescalerValue = (uint32_t) ((SystemCoreClock /2) / 10000) - 1;
 8000730:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = 500 - 1;
 8000732:	6122      	str	r2, [r4, #16]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000734:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000736:	f001 faa7 	bl	8001c88 <HAL_TIM_Base_Init>
 800073a:	b100      	cbz	r0, 800073e <main+0x196>
    while(1) 
 800073c:	e7fe      	b.n	800073c <main+0x194>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800073e:	4630      	mov	r0, r6
 8000740:	f001 f94a 	bl	80019d8 <HAL_TIM_Base_Start_IT>
 8000744:	b100      	cbz	r0, 8000748 <main+0x1a0>
    while(1) 
 8000746:	e7fe      	b.n	8000746 <main+0x19e>
  BSP_LED_Init(LED5);
 8000748:	f000 fabe 	bl	8000cc8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 800074c:	4638      	mov	r0, r7
 800074e:	f000 fabb 	bl	8000cc8 <BSP_LED_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 8000752:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000758:	632b      	str	r3, [r5, #48]	; 0x30
 800075a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800075c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000760:	9308      	str	r3, [sp, #32]
 8000762:	9b08      	ldr	r3, [sp, #32]
  GUI_Init();
 8000764:	f002 f8ba 	bl	80028dc <GUI_Init>
  WM_SetCreateFlags(WM_CF_MEMDEV);
 8000768:	2004      	movs	r0, #4
  GUI_Initialized = 1;
 800076a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  WM_SetCreateFlags(WM_CF_MEMDEV);
 800076e:	f006 f91d 	bl	80069ac <WM_SetCreateFlags>
  MainTask();
 8000772:	f7ff fefd 	bl	8000570 <MainTask>
  for(;;);
 8000776:	e7fe      	b.n	8000776 <main+0x1ce>
 8000778:	03000012 	.word	0x03000012
 800077c:	01010100 	.word	0x01010100
 8000780:	0300000c 	.word	0x0300000c
 8000784:	01000101 	.word	0x01000101
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000
 8000794:	20000084 	.word	0x20000084
 8000798:	200000e0 	.word	0x200000e0
 800079c:	40000400 	.word	0x40000400

080007a0 <HAL_TIM_Base_MspInit>:
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_TIM_Base_MspInit+0x2c>)
{
 80007a2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80007a6:	2100      	movs	r1, #0
 80007a8:	201d      	movs	r0, #29
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007aa:	f042 0202 	orr.w	r2, r2, #2
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80007b0:	2201      	movs	r2, #1
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80007bc:	f000 fc9e 	bl	80010fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007c0:	201d      	movs	r0, #29
}
 80007c2:	b003      	add	sp, #12
 80007c4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007c8:	f000 bcca 	b.w	8001160 <HAL_NVIC_EnableIRQ>
 80007cc:	40023800 	.word	0x40023800

080007d0 <BSP_Background>:
  BSP_LED_Toggle(LED5);
 80007d0:	2000      	movs	r0, #0
{
 80007d2:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED5);
 80007d4:	f000 faa8 	bl	8000d28 <BSP_LED_Toggle>
  BSP_LED_Toggle(LED6);
 80007d8:	2001      	movs	r0, #1
}
 80007da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LED_Toggle(LED6);
 80007de:	f000 baa3 	b.w	8000d28 <BSP_LED_Toggle>

080007e2 <HAL_TIM_PeriodElapsedCallback>:
  BSP_Background();
 80007e2:	f7ff bff5 	b.w	80007d0 <BSP_Background>

080007e6 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80007e6:	4770      	bx	lr

080007e8 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <HardFault_Handler>

080007ea <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <MemManage_Handler>

080007ec <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <BusFault_Handler>

080007ee <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <UsageFault_Handler>

080007f0 <DebugMon_Handler>:
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007f4:	b508      	push	{r3, lr}
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 80007f6:	f000 fc4b 	bl	8001090 <HAL_IncTick>
  
  OS_TimeMS++;
 80007fa:	4a02      	ldr	r2, [pc, #8]	; (8000804 <SysTick_Handler+0x10>)
 80007fc:	6813      	ldr	r3, [r2, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	6013      	str	r3, [r2, #0]
}
 8000802:	bd08      	pop	{r3, pc}
 8000804:	2002594c 	.word	0x2002594c

08000808 <TIM3_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <TIM3_IRQHandler+0x8>)
 800080a:	f001 b927 	b.w	8001a5c <HAL_TIM_IRQHandler>
 800080e:	bf00      	nop
 8000810:	200000e4 	.word	0x200000e4

08000814 <ST7789H2_GetLcdPixelWidth>:
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
}
 8000814:	20f0      	movs	r0, #240	; 0xf0
 8000816:	4770      	bx	lr

08000818 <ST7789H2_SetDisplayWindow>:
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8000818:	28ef      	cmp	r0, #239	; 0xef
{
 800081a:	b530      	push	{r4, r5, lr}
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800081c:	bf94      	ite	ls
 800081e:	4605      	movls	r5, r0
 8000820:	2500      	movhi	r5, #0
 8000822:	4c0e      	ldr	r4, [pc, #56]	; (800085c <ST7789H2_SetDisplayWindow+0x44>)
  else
  {
    WindowsXstart = 0;
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8000824:	29ef      	cmp	r1, #239	; 0xef
 8000826:	8025      	strh	r5, [r4, #0]
 8000828:	bf94      	ite	ls
 800082a:	460d      	movls	r5, r1
 800082c:	2500      	movhi	r5, #0
 800082e:	8065      	strh	r5, [r4, #2]
  else
  {
    WindowsYstart = 0;
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8000830:	1814      	adds	r4, r2, r0
 8000832:	2cf0      	cmp	r4, #240	; 0xf0
  {
    WindowsXend = Width  + Xpos - 1;
 8000834:	bfd6      	itet	le
 8000836:	f102 32ff 	addle.w	r2, r2, #4294967295	; 0xffffffff
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800083a:	20ef      	movgt	r0, #239	; 0xef
    WindowsXend = Width  + Xpos - 1;
 800083c:	1880      	addle	r0, r0, r2
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <ST7789H2_SetDisplayWindow+0x48>)
 8000840:	bfd8      	it	le
 8000842:	b280      	uxthle	r0, r0
 8000844:	8010      	strh	r0, [r2, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8000846:	1858      	adds	r0, r3, r1
 8000848:	28f0      	cmp	r0, #240	; 0xf0
  {
    WindowsYend = Height + Ypos - 1;
 800084a:	bfd7      	itett	le
 800084c:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8000850:	21ef      	movgt	r1, #239	; 0xef
    WindowsYend = Height + Ypos - 1;
 8000852:	18c9      	addle	r1, r1, r3
 8000854:	b289      	uxthle	r1, r1
 8000856:	8051      	strh	r1, [r2, #2]
  }
}
 8000858:	bd30      	pop	{r4, r5, pc}
 800085a:	bf00      	nop
 800085c:	20000132 	.word	0x20000132
 8000860:	20000000 	.word	0x20000000

08000864 <ST7789H2_GetLcdPixelHeight>:
 8000864:	20f0      	movs	r0, #240	; 0xf0
 8000866:	4770      	bx	lr

08000868 <ST7789H2_WriteReg>:
{
 8000868:	b538      	push	{r3, r4, r5, lr}
 800086a:	460c      	mov	r4, r1
 800086c:	4615      	mov	r5, r2
  LCD_IO_WriteReg(Command);
 800086e:	f000 fb07 	bl	8000e80 <LCD_IO_WriteReg>
  for (i=0; i<NbParameters; i++)
 8000872:	4425      	add	r5, r4
 8000874:	42ac      	cmp	r4, r5
 8000876:	d100      	bne.n	800087a <ST7789H2_WriteReg+0x12>
}
 8000878:	bd38      	pop	{r3, r4, r5, pc}
    LCD_IO_WriteData(Parameters[i]);
 800087a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800087e:	f000 faf7 	bl	8000e70 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8000882:	e7f7      	b.n	8000874 <ST7789H2_WriteReg+0xc>

08000884 <ST7789H2_SetOrientation>:
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8000884:	2801      	cmp	r0, #1
{
 8000886:	b513      	push	{r0, r1, r4, lr}
 8000888:	4604      	mov	r4, r0
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800088a:	d01e      	beq.n	80008ca <ST7789H2_SetOrientation+0x46>
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800088c:	2802      	cmp	r0, #2
 800088e:	d11e      	bne.n	80008ce <ST7789H2_SetOrientation+0x4a>
    parameter[0] = 0x00;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <ST7789H2_SetOrientation+0x50>)
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8000892:	2206      	movs	r2, #6
 8000894:	4669      	mov	r1, sp
 8000896:	2033      	movs	r0, #51	; 0x33
    parameter[0] = 0x00;
 8000898:	9300      	str	r3, [sp, #0]
    parameter[4] = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80008a0:	f7ff ffe2 	bl	8000868 <ST7789H2_WriteReg>
    parameter[0] = 0x00;
 80008a4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80008a8:	4622      	mov	r2, r4
 80008aa:	4669      	mov	r1, sp
 80008ac:	2037      	movs	r0, #55	; 0x37
    parameter[0] = 0x00;
 80008ae:	f8ad 3000 	strh.w	r3, [sp]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80008b2:	f7ff ffd9 	bl	8000868 <ST7789H2_WriteReg>
    parameter[0] = 0xC0; 
 80008b6:	23c0      	movs	r3, #192	; 0xc0
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	4669      	mov	r1, sp
 80008bc:	2036      	movs	r0, #54	; 0x36
    parameter[0] = 0x00;     
 80008be:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80008c2:	f7ff ffd1 	bl	8000868 <ST7789H2_WriteReg>
}
 80008c6:	b002      	add	sp, #8
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	2300      	movs	r3, #0
 80008cc:	e7f4      	b.n	80008b8 <ST7789H2_SetOrientation+0x34>
 80008ce:	2360      	movs	r3, #96	; 0x60
 80008d0:	e7f2      	b.n	80008b8 <ST7789H2_SetOrientation+0x34>
 80008d2:	bf00      	nop
 80008d4:	f0010000 	.word	0xf0010000

080008d8 <ST7789H2_DisplayOn>:
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2029      	movs	r0, #41	; 0x29
 80008dc:	4611      	mov	r1, r2
{
 80008de:	b508      	push	{r3, lr}
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80008e0:	f7ff ffc2 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2011      	movs	r0, #17
 80008e8:	4611      	mov	r1, r2
}
 80008ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80008ee:	f7ff bfbb 	b.w	8000868 <ST7789H2_WriteReg>
	...

080008f4 <ST7789H2_Init>:
{
 80008f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LCD_IO_Init();
 80008f6:	f000 fa21 	bl	8000d3c <LCD_IO_Init>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80008fa:	2200      	movs	r2, #0
 80008fc:	2010      	movs	r0, #16
  parameter[0] = 0x00;     
 80008fe:	2400      	movs	r4, #0
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8000900:	4611      	mov	r1, r2
  parameter[0] = 0x05;     
 8000902:	2505      	movs	r5, #5
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8000904:	f7ff ffb0 	bl	8000868 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fac6 	bl	8000e9a <LCD_IO_Delay>
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 800090e:	2200      	movs	r2, #0
 8000910:	2001      	movs	r0, #1
  parameter[0] = 0x00;
 8000912:	f04f 466f 	mov.w	r6, #4009754624	; 0xef000000
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8000916:	4611      	mov	r1, r2
 8000918:	f7ff ffa6 	bl	8000868 <ST7789H2_WriteReg>
  LCD_IO_Delay(200);
 800091c:	20c8      	movs	r0, #200	; 0xc8
 800091e:	f000 fabc 	bl	8000e9a <LCD_IO_Delay>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8000922:	2200      	movs	r2, #0
 8000924:	2011      	movs	r0, #17
 8000926:	4611      	mov	r1, r2
 8000928:	f7ff ff9e 	bl	8000868 <ST7789H2_WriteReg>
  LCD_IO_Delay(120); 
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fab4 	bl	8000e9a <LCD_IO_Delay>
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8000932:	4669      	mov	r1, sp
 8000934:	2201      	movs	r2, #1
 8000936:	2036      	movs	r0, #54	; 0x36
  parameter[0] = 0x00;     
 8000938:	f88d 4000 	strb.w	r4, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800093c:	f7ff ff94 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8000940:	4669      	mov	r1, sp
 8000942:	2201      	movs	r2, #1
 8000944:	203a      	movs	r0, #58	; 0x3a
  parameter[0] = 0x05;     
 8000946:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800094a:	f7ff ff8d 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800094e:	4622      	mov	r2, r4
 8000950:	4621      	mov	r1, r4
 8000952:	2021      	movs	r0, #33	; 0x21
 8000954:	f7ff ff88 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000958:	4669      	mov	r1, sp
 800095a:	2204      	movs	r2, #4
 800095c:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;
 800095e:	9600      	str	r6, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000960:	f7ff ff82 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8000964:	4669      	mov	r1, sp
 8000966:	2204      	movs	r2, #4
 8000968:	202b      	movs	r0, #43	; 0x2b
  parameter[0] = 0x00;
 800096a:	9600      	str	r6, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800096c:	f7ff ff7c 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x0C;
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <ST7789H2_Init+0x16c>)
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8000972:	462a      	mov	r2, r5
 8000974:	4669      	mov	r1, sp
  parameter[0] = 0x0C;
 8000976:	9300      	str	r3, [sp, #0]
  parameter[4] = 0x33; 
 8000978:	2333      	movs	r3, #51	; 0x33
  parameter[0] = 0x35; 
 800097a:	2535      	movs	r5, #53	; 0x35
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800097c:	20b2      	movs	r0, #178	; 0xb2
  parameter[4] = 0x33; 
 800097e:	f88d 3004 	strb.w	r3, [sp, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8000982:	f7ff ff71 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8000986:	4669      	mov	r1, sp
 8000988:	2201      	movs	r2, #1
 800098a:	20b7      	movs	r0, #183	; 0xb7
  parameter[0] = 0x35; 
 800098c:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8000990:	f7ff ff6a 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x1F; 
 8000994:	231f      	movs	r3, #31
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8000996:	4669      	mov	r1, sp
 8000998:	2201      	movs	r2, #1
 800099a:	20bb      	movs	r0, #187	; 0xbb
  parameter[0] = 0x1F; 
 800099c:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80009a0:	f7ff ff62 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x2C; 
 80009a4:	232c      	movs	r3, #44	; 0x2c
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80009a6:	4669      	mov	r1, sp
 80009a8:	2201      	movs	r2, #1
 80009aa:	20c0      	movs	r0, #192	; 0xc0
  parameter[0] = 0x2C; 
 80009ac:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80009b0:	f7ff ff5a 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x01;
 80009b4:	f24c 3301 	movw	r3, #49921	; 0xc301
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80009b8:	4669      	mov	r1, sp
 80009ba:	2202      	movs	r2, #2
 80009bc:	20c2      	movs	r0, #194	; 0xc2
  parameter[0] = 0x01;
 80009be:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80009c2:	f7ff ff51 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x20; 
 80009c6:	2320      	movs	r3, #32
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80009c8:	4669      	mov	r1, sp
 80009ca:	2201      	movs	r2, #1
 80009cc:	20c4      	movs	r0, #196	; 0xc4
  parameter[0] = 0x20; 
 80009ce:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80009d2:	f7ff ff49 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0x0F; 
 80009d6:	230f      	movs	r3, #15
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80009d8:	4669      	mov	r1, sp
 80009da:	2201      	movs	r2, #1
 80009dc:	20c6      	movs	r0, #198	; 0xc6
  parameter[0] = 0x0F; 
 80009de:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80009e2:	f7ff ff41 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0xA4;
 80009e6:	f24a 13a4 	movw	r3, #41380	; 0xa1a4
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80009ea:	4669      	mov	r1, sp
 80009ec:	2201      	movs	r2, #1
 80009ee:	20d0      	movs	r0, #208	; 0xd0
  parameter[0] = 0xA4;
 80009f0:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80009f4:	f7ff ff38 	bl	8000868 <ST7789H2_WriteReg>
  parameter[0] = 0xD0;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <ST7789H2_Init+0x170>)
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80009fa:	4669      	mov	r1, sp
 80009fc:	220e      	movs	r2, #14
  parameter[0] = 0xD0;
 80009fe:	9300      	str	r3, [sp, #0]
  parameter[4] = 0x0C;
 8000a00:	f103 532c 	add.w	r3, r3, #721420288	; 0x2b000000
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8000a04:	20e0      	movs	r0, #224	; 0xe0
  parameter[4] = 0x0C;
 8000a06:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
 8000a0a:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 8000a0e:	9301      	str	r3, [sp, #4]
  parameter[8] = 0x50;
 8000a10:	f1a3 53f9 	sub.w	r3, r3, #522190848	; 0x1f200000
 8000a14:	f5a3 23bb 	sub.w	r3, r3, #382976	; 0x5d800
 8000a18:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 8000a1c:	9302      	str	r3, [sp, #8]
  parameter[12] = 0x29;
 8000a1e:	f642 5329 	movw	r3, #11561	; 0x2d29
 8000a22:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8000a26:	f7ff ff1f 	bl	8000868 <ST7789H2_WriteReg>
  parameter[4] = 0x06;
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <ST7789H2_Init+0x174>)
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8000a2c:	4669      	mov	r1, sp
  parameter[4] = 0x06;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <ST7789H2_Init+0x178>)
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8000a30:	20e1      	movs	r0, #225	; 0xe1
  parameter[4] = 0x06;
 8000a32:	e9cd 2300 	strd	r2, r3, [sp]
  parameter[8] = 0x51;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <ST7789H2_Init+0x17c>)
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8000a38:	220e      	movs	r2, #14
  parameter[8] = 0x51;
 8000a3a:	9302      	str	r3, [sp, #8]
  parameter[12] = 0x2F;
 8000a3c:	f243 132f 	movw	r3, #12591	; 0x312f
 8000a40:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8000a44:	f7ff ff10 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_DisplayOn();  
 8000a48:	f7ff ff46 	bl	80008d8 <ST7789H2_DisplayOn>
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4669      	mov	r1, sp
 8000a50:	4628      	mov	r0, r5
  parameter[0] = 0x00;     
 8000a52:	f88d 4000 	strb.w	r4, [sp]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8000a56:	f7ff ff07 	bl	8000868 <ST7789H2_WriteReg>
}
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	bf00      	nop
 8000a60:	33000c0c 	.word	0x33000c0c
 8000a64:	081108d0 	.word	0x081108d0
 8000a68:	081008d0 	.word	0x081008d0
 8000a6c:	44390606 	.word	0x44390606
 8000a70:	14160b51 	.word	0x14160b51

08000a74 <ST7789H2_DisplayOff>:
  parameter[0] = 0xFE;
 8000a74:	23fe      	movs	r3, #254	; 0xfe
{
 8000a76:	b507      	push	{r0, r1, r2, lr}
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8000a78:	2201      	movs	r2, #1
 8000a7a:	a901      	add	r1, sp, #4
 8000a7c:	20bd      	movs	r0, #189	; 0xbd
  parameter[0] = 0xFE;
 8000a7e:	f88d 3004 	strb.w	r3, [sp, #4]
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8000a82:	f7ff fef1 	bl	8000868 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8000a86:	2200      	movs	r2, #0
 8000a88:	2010      	movs	r0, #16
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	f7ff feec 	bl	8000868 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8000a90:	200a      	movs	r0, #10
 8000a92:	f000 fa02 	bl	8000e9a <LCD_IO_Delay>
}
 8000a96:	b003      	add	sp, #12
 8000a98:	f85d fb04 	ldr.w	pc, [sp], #4

08000a9c <ST7789H2_SetCursor>:
{
 8000a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  parameter[1] = 0x00 + Xpos;
 8000a9e:	b2c0      	uxtb	r0, r0
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000aa0:	2204      	movs	r2, #4
  parameter[0] = 0x00;     
 8000aa2:	2500      	movs	r5, #0
{
 8000aa4:	460c      	mov	r4, r1
  parameter[1] = 0x00 + Xpos;
 8000aa6:	f88d 0005 	strb.w	r0, [sp, #5]
  parameter[3] = 0xEF + Xpos;
 8000aaa:	3811      	subs	r0, #17
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000aac:	eb0d 0102 	add.w	r1, sp, r2
  parameter[0] = 0x00;     
 8000ab0:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[3] = 0xEF + Xpos;
 8000ab4:	f88d 0007 	strb.w	r0, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000ab8:	202a      	movs	r0, #42	; 0x2a
  parameter[2] = 0x00;
 8000aba:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8000abe:	f7ff fed3 	bl	8000868 <ST7789H2_WriteReg>
  parameter[1] = 0x00 + Ypos;
 8000ac2:	b2e1      	uxtb	r1, r4
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	202b      	movs	r0, #43	; 0x2b
  parameter[0] = 0x00;
 8000ac8:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[1] = 0x00 + Ypos;
 8000acc:	f88d 1005 	strb.w	r1, [sp, #5]
  parameter[3] = 0xEF + Ypos;
 8000ad0:	3911      	subs	r1, #17
  parameter[2] = 0x00;
 8000ad2:	f88d 5006 	strb.w	r5, [sp, #6]
  parameter[3] = 0xEF + Ypos;
 8000ad6:	f88d 1007 	strb.w	r1, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8000ada:	eb0d 0102 	add.w	r1, sp, r2
 8000ade:	f7ff fec3 	bl	8000868 <ST7789H2_WriteReg>
}
 8000ae2:	b003      	add	sp, #12
 8000ae4:	bd30      	pop	{r4, r5, pc}

08000ae6 <ST7789H2_WritePixel>:
{
 8000ae6:	b510      	push	{r4, lr}
 8000ae8:	4614      	mov	r4, r2
  ST7789H2_SetCursor(Xpos, Ypos);
 8000aea:	f7ff ffd7 	bl	8000a9c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000aee:	2200      	movs	r2, #0
 8000af0:	202c      	movs	r0, #44	; 0x2c
 8000af2:	4611      	mov	r1, r2
 8000af4:	f7ff feb8 	bl	8000868 <ST7789H2_WriteReg>
  LCD_IO_WriteData(RGBCode);
 8000af8:	4620      	mov	r0, r4
}
 8000afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_IO_WriteData(RGBCode);
 8000afe:	f000 b9b7 	b.w	8000e70 <LCD_IO_WriteData>

08000b02 <ST7789H2_ReadPixel>:
{
 8000b02:	b538      	push	{r3, r4, r5, lr}
 8000b04:	4604      	mov	r4, r0
 8000b06:	460d      	mov	r5, r1
  ST7789H2_SetCursor(Xpos, Ypos);
 8000b08:	f7ff ffc8 	bl	8000a9c <ST7789H2_SetCursor>
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f7ff ffc4 	bl	8000a9c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8000b14:	2200      	movs	r2, #0
 8000b16:	202e      	movs	r0, #46	; 0x2e
 8000b18:	4611      	mov	r1, r2
 8000b1a:	f7ff fea5 	bl	8000868 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8000b1e:	f000 f9b7 	bl	8000e90 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8000b22:	f000 f9b5 	bl	8000e90 <LCD_IO_ReadData>
 8000b26:	4604      	mov	r4, r0
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8000b28:	f000 f9b2 	bl	8000e90 <LCD_IO_ReadData>
  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8000b2c:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8000b30:	f3c4 0285 	ubfx	r2, r4, #2, #6
 8000b34:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8000b38:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8000b3c:	1918      	adds	r0, r3, r4
}
 8000b3e:	b280      	uxth	r0, r0
 8000b40:	bd38      	pop	{r3, r4, r5, pc}

08000b42 <ST7789H2_DrawHLine>:
{
 8000b42:	b570      	push	{r4, r5, r6, lr}
 8000b44:	4606      	mov	r6, r0
 8000b46:	4608      	mov	r0, r1
  ST7789H2_SetCursor(Xpos, Ypos); 
 8000b48:	4611      	mov	r1, r2
{
 8000b4a:	461c      	mov	r4, r3
  ST7789H2_SetCursor(Xpos, Ypos); 
 8000b4c:	f7ff ffa6 	bl	8000a9c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000b50:	2200      	movs	r2, #0
  for(counter = 0; counter < Length; counter++)
 8000b52:	2500      	movs	r5, #0
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000b54:	202c      	movs	r0, #44	; 0x2c
 8000b56:	4611      	mov	r1, r2
 8000b58:	f7ff fe86 	bl	8000868 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 8000b5c:	42a5      	cmp	r5, r4
 8000b5e:	d100      	bne.n	8000b62 <ST7789H2_DrawHLine+0x20>
}
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
    LCD_IO_WriteData(RGBCode);
 8000b62:	4630      	mov	r0, r6
 8000b64:	3501      	adds	r5, #1
 8000b66:	f000 f983 	bl	8000e70 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8000b6a:	e7f7      	b.n	8000b5c <ST7789H2_DrawHLine+0x1a>

08000b6c <ST7789H2_DrawVLine>:
{
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	4614      	mov	r4, r2
 8000b70:	461d      	mov	r5, r3
 8000b72:	460e      	mov	r6, r1
 8000b74:	4607      	mov	r7, r0
  ST7789H2_SetCursor(Xpos, Ypos);
 8000b76:	4611      	mov	r1, r2
 8000b78:	4425      	add	r5, r4
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	f7ff ff8e 	bl	8000a9c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000b80:	2200      	movs	r2, #0
 8000b82:	b2ad      	uxth	r5, r5
 8000b84:	202c      	movs	r0, #44	; 0x2c
 8000b86:	4611      	mov	r1, r2
 8000b88:	f7ff fe6e 	bl	8000868 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	d100      	bne.n	8000b92 <ST7789H2_DrawVLine+0x26>
}
 8000b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8000b92:	4621      	mov	r1, r4
 8000b94:	3401      	adds	r4, #1
 8000b96:	463a      	mov	r2, r7
 8000b98:	4630      	mov	r0, r6
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	f7ff ffa3 	bl	8000ae6 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8000ba0:	e7f4      	b.n	8000b8c <ST7789H2_DrawVLine+0x20>
	...

08000ba4 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	4615      	mov	r5, r2
  uint32_t i = 0;
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000bac:	2200      	movs	r2, #0
  uint32_t i = 0;
 8000bae:	2700      	movs	r7, #0
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8000bb0:	4425      	add	r5, r4
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8000bb2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000bfc <ST7789H2_DrawRGBHLine+0x58>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8000bb6:	f8df a048 	ldr.w	sl, [pc, #72]	; 8000c00 <ST7789H2_DrawRGBHLine+0x5c>
{
 8000bba:	460e      	mov	r6, r1
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000bbc:	202c      	movs	r0, #44	; 0x2c
 8000bbe:	4611      	mov	r1, r2
{
 8000bc0:	4698      	mov	r8, r3
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8000bc2:	f7ff fe51 	bl	8000868 <ST7789H2_WriteReg>
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8000bc6:	42a5      	cmp	r5, r4
 8000bc8:	d801      	bhi.n	8000bce <ST7789H2_DrawRGBHLine+0x2a>
        LCD_IO_WriteData(rgb565[i]);        
      }      
      i++;
    }
  }
}
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8000bce:	f8b9 3000 	ldrh.w	r3, [r9]
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d810      	bhi.n	8000bf8 <ST7789H2_DrawRGBHLine+0x54>
 8000bd6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8000bda:	42b3      	cmp	r3, r6
 8000bdc:	d80c      	bhi.n	8000bf8 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8000bde:	f8ba 3000 	ldrh.w	r3, [sl]
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d308      	bcc.n	8000bf8 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8000be6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8000bea:	42b3      	cmp	r3, r6
 8000bec:	d304      	bcc.n	8000bf8 <ST7789H2_DrawRGBHLine+0x54>
        LCD_IO_WriteData(rgb565[i]);        
 8000bee:	f838 0017 	ldrh.w	r0, [r8, r7, lsl #1]
      i++;
 8000bf2:	3701      	adds	r7, #1
        LCD_IO_WriteData(rgb565[i]);        
 8000bf4:	f000 f93c 	bl	8000e70 <LCD_IO_WriteData>
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8000bf8:	3401      	adds	r4, #1
 8000bfa:	e7e4      	b.n	8000bc6 <ST7789H2_DrawRGBHLine+0x22>
 8000bfc:	20000132 	.word	0x20000132
 8000c00:	20000000 	.word	0x20000000

08000c04 <ST7789H2_DrawBitmap>:
{
 8000c04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c08:	4607      	mov	r7, r0
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8000c0a:	4816      	ldr	r0, [pc, #88]	; (8000c64 <ST7789H2_DrawBitmap+0x60>)
{
 8000c0c:	460e      	mov	r6, r1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8000c0e:	4916      	ldr	r1, [pc, #88]	; (8000c68 <ST7789H2_DrawBitmap+0x64>)
 8000c10:	8805      	ldrh	r5, [r0, #0]
 8000c12:	880b      	ldrh	r3, [r1, #0]
 8000c14:	3501      	adds	r5, #1
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8000c16:	8844      	ldrh	r4, [r0, #2]
 8000c18:	8849      	ldrh	r1, [r1, #2]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8000c1a:	1aed      	subs	r5, r5, r3
  size = *(volatile uint16_t *) (pbmp + 2);
 8000c1c:	8853      	ldrh	r3, [r2, #2]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8000c1e:	8893      	ldrh	r3, [r2, #4]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8000c20:	3401      	adds	r4, #1
  index = *(volatile uint16_t *) (pbmp + 10);
 8000c22:	8953      	ldrh	r3, [r2, #10]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8000c24:	b2ad      	uxth	r5, r5
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000c26:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8000c2a:	1a64      	subs	r4, r4, r1
  index = *(volatile uint16_t *) (pbmp + 10);
 8000c2c:	b29b      	uxth	r3, r3
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8000c2e:	fa16 f484 	uxtah	r4, r6, r4
 8000c32:	ea4f 0945 	mov.w	r9, r5, lsl #1
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8000c36:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000c3a:	eb02 0803 	add.w	r8, r2, r3
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8000c3e:	42a6      	cmp	r6, r4
 8000c40:	d302      	bcc.n	8000c48 <ST7789H2_DrawBitmap+0x44>
}
 8000c42:	b003      	add	sp, #12
 8000c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ST7789H2_SetCursor(Xpos, posY - 1);
 8000c48:	3c01      	subs	r4, #1
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	b2a1      	uxth	r1, r4
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	f7ff ff24 	bl	8000a9c <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8000c54:	4643      	mov	r3, r8
 8000c56:	462a      	mov	r2, r5
 8000c58:	9901      	ldr	r1, [sp, #4]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	44c8      	add	r8, r9
 8000c5e:	f7ff ffa1 	bl	8000ba4 <ST7789H2_DrawRGBHLine>
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8000c62:	e7ec      	b.n	8000c3e <ST7789H2_DrawBitmap+0x3a>
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000132 	.word	0x20000132

08000c6c <ST7789H2_DrawRGBImage>:
{
 8000c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c70:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8000c74:	4605      	mov	r5, r0
 8000c76:	4616      	mov	r6, r2
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8000c78:	460c      	mov	r4, r1
 8000c7a:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8000c7e:	18cf      	adds	r7, r1, r3
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d802      	bhi.n	8000c8a <ST7789H2_DrawRGBImage+0x1e>
}
 8000c84:	b003      	add	sp, #12
 8000c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ST7789H2_SetCursor(Xpos, posY);
 8000c8a:	b2a1      	uxth	r1, r4
 8000c8c:	4628      	mov	r0, r5
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8000c8e:	3401      	adds	r4, #1
    ST7789H2_SetCursor(Xpos, posY);
 8000c90:	9101      	str	r1, [sp, #4]
 8000c92:	f7ff ff03 	bl	8000a9c <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8000c96:	4643      	mov	r3, r8
 8000c98:	4632      	mov	r2, r6
 8000c9a:	9901      	ldr	r1, [sp, #4]
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	44c8      	add	r8, r9
 8000ca0:	f7ff ff80 	bl	8000ba4 <ST7789H2_DrawRGBHLine>
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8000ca4:	e7ec      	b.n	8000c80 <ST7789H2_DrawRGBImage+0x14>

08000ca6 <ST7789H2_ReadReg>:
{
 8000ca6:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(Command);
 8000ca8:	f000 f8ea 	bl	8000e80 <LCD_IO_WriteReg>
  LCD_IO_ReadData();
 8000cac:	f000 f8f0 	bl	8000e90 <LCD_IO_ReadData>
  return (LCD_IO_ReadData());
 8000cb0:	f000 f8ee 	bl	8000e90 <LCD_IO_ReadData>
}
 8000cb4:	b2c0      	uxtb	r0, r0
 8000cb6:	bd08      	pop	{r3, pc}

08000cb8 <ST7789H2_ReadID>:
{
 8000cb8:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000cba:	f000 f83f 	bl	8000d3c <LCD_IO_Init>
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8000cbe:	2004      	movs	r0, #4
 8000cc0:	f7ff fff1 	bl	8000ca6 <ST7789H2_ReadReg>
}
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	bd08      	pop	{r3, pc}

08000cc8 <BSP_LED_Init>:
  *            @arg  LED5
  *            @arg  LED6
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cc8:	b500      	push	{lr}
 8000cca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8000ccc:	b9d8      	cbnz	r0, 8000d06 <BSP_LED_Init+0x3e>
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <BSP_LED_Init+0x58>)
 8000cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <BSP_LED_Init+0x5c>)
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000ce4:	a903      	add	r1, sp, #12
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000ce6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000cee:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cf2:	6898      	ldr	r0, [r3, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000cf4:	e9cd 2204 	strd	r2, r2, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cfc:	f000 fa9c 	bl	8001238 <HAL_GPIO_Init>

}
 8000d00:	b009      	add	sp, #36	; 0x24
 8000d02:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d06:	2801      	cmp	r0, #1
 8000d08:	d1eb      	bne.n	8000ce2 <BSP_LED_Init+0x1a>
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <BSP_LED_Init+0x58>)
 8000d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0e:	f042 0202 	orr.w	r2, r2, #2
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	9b02      	ldr	r3, [sp, #8]
 8000d1e:	e7e0      	b.n	8000ce2 <BSP_LED_Init+0x1a>
 8000d20:	40023800 	.word	0x40023800
 8000d24:	2000003c 	.word	0x2000003c

08000d28 <BSP_LED_Toggle>:
  *            @arg  LED6
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <BSP_LED_Toggle+0x10>)
 8000d2a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000d2e:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8000d32:	6890      	ldr	r0, [r2, #8]
 8000d34:	f000 bb5b 	b.w	80013ee <HAL_GPIO_TogglePin>
 8000d38:	2000003c 	.word	0x2000003c

08000d3c <LCD_IO_Init>:
static void FMC_BANK2_MspInit(void)
{
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d3c:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <LCD_IO_Init+0x120>)
  /* GPIOD configuration */ 
  /* LCD_PSRAM_D2, LCD_PSRAM_D3, LCD_PSRAM_NOE, LCD_PSRAM_NWE, PSRAM_NE1, LCD_PSRAM_D13, 
     LCD_PSRAM_D14, LCD_PSRAM_D15, PSRAM_A16, PSRAM_A17, LCD_PSRAM_D0, LCD_PSRAM_D1 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5  | GPIO_PIN_7 | GPIO_PIN_8 |\
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000d3e:	4848      	ldr	r0, [pc, #288]	; (8000e60 <LCD_IO_Init+0x124>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d42:	f042 0201 	orr.w	r2, r2, #1
/**
  * @brief  Initializes LCD low level.
  * @retval None
  */
void LCD_IO_Init(void) 
{
 8000d46:	b530      	push	{r4, r5, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
{
 8000d4a:	b0a1      	sub	sp, #132	; 0x84
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d4e:	2402      	movs	r4, #2
 8000d50:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000d52:	a90d      	add	r1, sp, #52	; 0x34
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d54:	f002 0201 	and.w	r2, r2, #1
 8000d58:	9200      	str	r2, [sp, #0]
 8000d5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
 8000d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d66:	f002 0201 	and.w	r2, r2, #1
 8000d6a:	9201      	str	r2, [sp, #4]
 8000d6c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_FMC_FORCE_RESET();
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	619a      	str	r2, [r3, #24]
  __HAL_RCC_FMC_RELEASE_RESET();
 8000d76:	699a      	ldr	r2, [r3, #24]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d80:	f042 0208 	orr.w	r2, r2, #8
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
 8000d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d88:	f002 0208 	and.w	r2, r2, #8
 8000d8c:	9202      	str	r2, [sp, #8]
 8000d8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d92:	f042 0210 	orr.w	r2, r2, #16
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
 8000d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9a:	f002 0210 	and.w	r2, r2, #16
 8000d9e:	9203      	str	r2, [sp, #12]
 8000da0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da4:	f042 0220 	orr.w	r2, r2, #32
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
 8000daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dac:	f002 0220 	and.w	r2, r2, #32
 8000db0:	9204      	str	r2, [sp, #16]
 8000db2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE(); 
 8000db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000dbc:	2203      	movs	r2, #3
  __HAL_RCC_GPIOG_CLK_ENABLE(); 
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	9b05      	ldr	r3, [sp, #20]
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000dc8:	230c      	movs	r3, #12
 8000dca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5  | GPIO_PIN_7 | GPIO_PIN_8 |\
 8000dce:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000dd2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5  | GPIO_PIN_7 | GPIO_PIN_8 |\
 8000dd6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000dd8:	f000 fa2e 	bl	8001238 <HAL_GPIO_Init>
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
 8000ddc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000de0:	a90d      	add	r1, sp, #52	; 0x34
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <LCD_IO_Init+0x128>)
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
 8000de4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000de6:	f000 fa27 	bl	8001238 <HAL_GPIO_Init>
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |\
 8000dea:	f24f 033f 	movw	r3, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000dee:	a90d      	add	r1, sp, #52	; 0x34
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <LCD_IO_Init+0x12c>)
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |\
 8000df2:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000df4:	f000 fa20 	bl	8001238 <HAL_GPIO_Init>
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |\
 8000df8:	f240 233f 	movw	r3, #575	; 0x23f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000dfc:	a90d      	add	r1, sp, #52	; 0x34
 8000dfe:	481b      	ldr	r0, [pc, #108]	; (8000e6c <LCD_IO_Init+0x130>)
  gpio_init_structure.Pin  = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |\
 8000e00:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e02:	f000 fa19 	bl	8001238 <HAL_GPIO_Init>
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8000e06:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e0a:	2210      	movs	r2, #16
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8000e0c:	a80d      	add	r0, sp, #52	; 0x34
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8000e0e:	930d      	str	r3, [sp, #52]	; 0x34
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e10:	f503 7382 	add.w	r3, r3, #260	; 0x104
  hsram.Init.NSBank             = FMC_NORSRAM_BANK2;
 8000e14:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e18:	2300      	movs	r3, #0
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e1a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8000e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8000e22:	931a      	str	r3, [sp, #104]	; 0x68
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e24:	931b      	str	r3, [sp, #108]	; 0x6c
  sram_timing.AccessMode            = FMC_ACCESS_MODE_A;
 8000e26:	930c      	str	r3, [sp, #48]	; 0x30
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8000e28:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8000e2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8000e30:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sram_timing.AddressSetupTime      = 9;
 8000e34:	2209      	movs	r2, #9
  sram_timing.AddressHoldTime       = 2;
 8000e36:	e9cd 2406 	strd	r2, r4, [sp, #24]
  sram_timing.DataSetupTime         = 6;
 8000e3a:	2206      	movs	r2, #6
  sram_timing.BusTurnAroundDuration = 1;
 8000e3c:	e9cd 2508 	strd	r2, r5, [sp, #32]
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8000e40:	aa06      	add	r2, sp, #24
 8000e42:	4611      	mov	r1, r2
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8000e44:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8000e48:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e4c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  sram_timing.DataLatency           = 2;
 8000e50:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8000e54:	f000 fd93 	bl	800197e <HAL_SRAM_Init>
  FMC_BANK2_Init();
}
 8000e58:	b021      	add	sp, #132	; 0x84
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40021400 	.word	0x40021400
 8000e6c:	40021800 	.word	0x40021800

08000e70 <LCD_IO_WriteData>:
  FMC_BANK2->RAM = Data;
 8000e70:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8000e74:	8058      	strh	r0, [r3, #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
void LCD_IO_WriteData(uint16_t RegValue) 
{
  /* Write 16-bit Reg */
  FMC_BANK2_WriteData(RegValue);
  __DSB();
}
 8000e7e:	4770      	bx	lr

08000e80 <LCD_IO_WriteReg>:
  FMC_BANK2->REG = Reg;
 8000e80:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8000e84:	8018      	strh	r0, [r3, #0]
 8000e86:	f3bf 8f4f 	dsb	sy
 8000e8a:	f3bf 8f4f 	dsb	sy
void LCD_IO_WriteReg(uint8_t Reg) 
{
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK2_WriteReg(Reg);
  __DSB();
}
 8000e8e:	4770      	bx	lr

08000e90 <LCD_IO_ReadData>:
  return FMC_BANK2->RAM;
 8000e90:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8000e94:	8858      	ldrh	r0, [r3, #2]
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
  return FMC_BANK2_ReadData();
}
 8000e96:	b280      	uxth	r0, r0
 8000e98:	4770      	bx	lr

08000e9a <LCD_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8000e9a:	f000 b90b 	b.w	80010b4 <HAL_Delay>
	...

08000ea0 <BSP_LCD_MspInit>:
__weak void BSP_LCD_MspInit(void)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <BSP_LCD_MspInit+0x88>)
 8000ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LCD_RESET_GPIO_CLK_ENABLE();
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
{
 8000eac:	b089      	sub	sp, #36	; 0x24
  LCD_RESET_GPIO_CLK_ENABLE();
 8000eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
  
  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000eb0:	2400      	movs	r4, #0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8000eb2:	4d1e      	ldr	r5, [pc, #120]	; (8000f2c <BSP_LCD_MspInit+0x8c>)
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8000eb4:	2780      	movs	r7, #128	; 0x80
  LCD_RESET_GPIO_CLK_ENABLE();
 8000eb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000eba:	2601      	movs	r6, #1
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8000ebc:	a903      	add	r1, sp, #12
 8000ebe:	4628      	mov	r0, r5
  LCD_RESET_GPIO_CLK_ENABLE();
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	9a00      	ldr	r2, [sp, #0]
  LCD_TE_GPIO_CLK_ENABLE();
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec6:	f042 0204 	orr.w	r2, r2, #4
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	f002 0204 	and.w	r2, r2, #4
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9a01      	ldr	r2, [sp, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000edc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8000ee0:	9703      	str	r7, [sp, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ee6:	9604      	str	r6, [sp, #16]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000eec:	2302      	movs	r3, #2
 8000eee:	e9cd 4305 	strd	r4, r3, [sp, #20]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8000ef2:	f000 f9a1 	bl	8001238 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	4639      	mov	r1, r7
 8000efa:	4628      	mov	r0, r5
 8000efc:	f000 fa72 	bl	80013e4 <HAL_GPIO_WritePin>
  
  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8000f04:	a903      	add	r1, sp, #12
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <BSP_LCD_MspInit+0x90>)
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8000f08:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8000f0c:	f000 f994 	bl	8001238 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8000f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000f14:	a903      	add	r1, sp, #12
 8000f16:	4628      	mov	r0, r5
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_LOW;
 8000f18:	9406      	str	r4, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000f1a:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000f1e:	f000 f98b 	bl	8001238 <HAL_GPIO_Init>
}
 8000f22:	b009      	add	sp, #36	; 0x24
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40020800 	.word	0x40020800

08000f34 <BSP_LCD_InitEx>:
{ 
 8000f34:	b570      	push	{r4, r5, r6, lr}
  DrawProp.BackColor = 0xFFFF;
 8000f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3a:	4d22      	ldr	r5, [pc, #136]	; (8000fc4 <BSP_LCD_InitEx+0x90>)
  DrawProp.TextColor = 0x0000;
 8000f3c:	2600      	movs	r6, #0
{ 
 8000f3e:	4604      	mov	r4, r0
  DrawProp.BackColor = 0xFFFF;
 8000f40:	60ab      	str	r3, [r5, #8]
  DrawProp.pFont     = &Font24;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <BSP_LCD_InitEx+0x94>)
  DrawProp.TextColor = 0x0000;
 8000f44:	606e      	str	r6, [r5, #4]
  DrawProp.pFont     = &Font24;
 8000f46:	60eb      	str	r3, [r5, #12]
  BSP_LCD_MspInit();
 8000f48:	f7ff ffaa 	bl	8000ea0 <BSP_LCD_MspInit>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <BSP_LCD_InitEx+0x98>)
 8000f54:	f000 fa46 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8000f58:	4632      	mov	r2, r6
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <BSP_LCD_InitEx+0x98>)
 8000f5e:	f000 fa41 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8000f62:	2005      	movs	r0, #5
 8000f64:	f000 f8a6 	bl	80010b4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <BSP_LCD_InitEx+0x98>)
 8000f6e:	f000 fa39 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 f89e 	bl	80010b4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8000f78:	4632      	mov	r2, r6
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <BSP_LCD_InitEx+0x98>)
 8000f7e:	f000 fa31 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8000f82:	2014      	movs	r0, #20
 8000f84:	f000 f896 	bl	80010b4 <HAL_Delay>
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8000f88:	4e11      	ldr	r6, [pc, #68]	; (8000fd0 <BSP_LCD_InitEx+0x9c>)
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	480f      	ldr	r0, [pc, #60]	; (8000fcc <BSP_LCD_InitEx+0x98>)
 8000f90:	f000 fa28 	bl	80013e4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8000f94:	200a      	movs	r0, #10
 8000f96:	f000 f88d 	bl	80010b4 <HAL_Delay>
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8000f9a:	6873      	ldr	r3, [r6, #4]
 8000f9c:	4798      	blx	r3
 8000f9e:	2885      	cmp	r0, #133	; 0x85
 8000fa0:	d10d      	bne.n	8000fbe <BSP_LCD_InitEx+0x8a>
    LcdDrv->Init();
 8000fa2:	6833      	ldr	r3, [r6, #0]
    LcdDrv = &ST7789H2_drv;
 8000fa4:	602e      	str	r6, [r5, #0]
    LcdDrv->Init();
 8000fa6:	4798      	blx	r3
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000fa8:	b91c      	cbnz	r4, 8000fb2 <BSP_LCD_InitEx+0x7e>
      ST7789H2_SetOrientation(LCD_ORIENTATION_LANDSCAPE_ROT180);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fc6a 	bl	8000884 <ST7789H2_SetOrientation>
 8000fb0:	e001      	b.n	8000fb6 <BSP_LCD_InitEx+0x82>
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8000fb2:	2c02      	cmp	r4, #2
 8000fb4:	d0f9      	beq.n	8000faa <BSP_LCD_InitEx+0x76>
  DrawProp.pFont = fonts;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <BSP_LCD_InitEx+0xa0>)
    ret = LCD_OK;   
 8000fb8:	2000      	movs	r0, #0
  DrawProp.pFont = fonts;
 8000fba:	60eb      	str	r3, [r5, #12]
}
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = LCD_ERROR;
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	e7fc      	b.n	8000fbc <BSP_LCD_InitEx+0x88>
 8000fc2:	bf00      	nop
 8000fc4:	20000138 	.word	0x20000138
 8000fc8:	20000064 	.word	0x20000064
 8000fcc:	40021c00 	.word	0x40021c00
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	2000005c 	.word	0x2000005c

08000fd8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	490f      	ldr	r1, [pc, #60]	; (8001018 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fda:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <SystemInit+0x44>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000ff2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ffa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ffe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <SystemInit+0x48>)
 8001002:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800100a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800100c:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
#if defined(USE_STM32F7308_DISCO)
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in External QSPI FLASH */
#elif defined(USE_STM32F723E_DISCO)
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001012:	608b      	str	r3, [r1, #8]
#else
#error Can't define SCB->VTOR, specific board name isn't defined!
#endif
#endif
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	40023800 	.word	0x40023800
 8001020:	24003010 	.word	0x24003010

08001024 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102a:	4e0e      	ldr	r6, [pc, #56]	; (8001064 <HAL_InitTick+0x3c>)
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001030:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001032:	7832      	ldrb	r2, [r6, #0]
 8001034:	fbb3 f3f2 	udiv	r3, r3, r2
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_InitTick+0x40>)
 800103a:	6810      	ldr	r0, [r2, #0]
 800103c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001040:	f000 f89c 	bl	800117c <HAL_SYSTICK_Config>
 8001044:	4604      	mov	r4, r0
 8001046:	b950      	cbnz	r0, 800105e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	2d0f      	cmp	r5, #15
 800104a:	d808      	bhi.n	800105e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	4602      	mov	r2, r0
 800104e:	4629      	mov	r1, r5
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f000 f852 	bl	80010fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4620      	mov	r0, r4
 800105a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800105c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
 8001060:	e7fc      	b.n	800105c <HAL_InitTick+0x34>
 8001062:	bf00      	nop
 8001064:	20000088 	.word	0x20000088
 8001068:	20000084 	.word	0x20000084

0800106c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
{
 8001070:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001072:	6813      	ldr	r3, [r2, #0]
 8001074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001078:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	f000 f82d 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f7ff ffd2 	bl	8001028 <HAL_InitTick>
  HAL_MspInit();
 8001084:	f7ff ffce 	bl	8001024 <HAL_MspInit>
}
 8001088:	2000      	movs	r0, #0
 800108a:	bd08      	pop	{r3, pc}
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x10>)
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <HAL_IncTick+0x14>)
 8001094:	6811      	ldr	r1, [r2, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	440b      	add	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000148 	.word	0x20000148
 80010a4:	20000088 	.word	0x20000088

080010a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <HAL_GetTick+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000148 	.word	0x20000148

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fff6 	bl	80010a8 <HAL_GetTick>
 80010bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010c0:	bf1e      	ittt	ne
 80010c2:	4b04      	ldrne	r3, [pc, #16]	; (80010d4 <HAL_Delay+0x20>)
 80010c4:	781b      	ldrbne	r3, [r3, #0]
 80010c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	1b43      	subs	r3, r0, r5
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	d3fa      	bcc.n	80010c8 <HAL_Delay+0x14>
  {
  }
}
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
 80010d4:	20000088 	.word	0x20000088

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010e6:	0412      	lsls	r2, r2, #16
 80010e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b530      	push	{r4, r5, lr}
 8001100:	68dc      	ldr	r4, [r3, #12]
 8001102:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001106:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	2b04      	cmp	r3, #4
 800110e:	bf28      	it	cs
 8001110:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001118:	bf8c      	ite	hi
 800111a:	3c03      	subhi	r4, #3
 800111c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001122:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	fa03 f304 	lsl.w	r3, r3, r4
 8001134:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800113c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800113e:	db06      	blt.n	800114e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001144:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001148:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800114c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	f000 000f 	and.w	r0, r0, #15
 8001152:	4a02      	ldr	r2, [pc, #8]	; (800115c <HAL_NVIC_SetPriority+0x60>)
 8001154:	5413      	strb	r3, [r2, r0]
 8001156:	e7f9      	b.n	800114c <HAL_NVIC_SetPriority+0x50>
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	e000ed14 	.word	0xe000ed14

08001160 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001160:	2800      	cmp	r0, #0
 8001162:	db07      	blt.n	8001174 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001164:	0941      	lsrs	r1, r0, #5
 8001166:	2301      	movs	r3, #1
 8001168:	f000 001f 	and.w	r0, r0, #31
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <HAL_NVIC_EnableIRQ+0x18>)
 800116e:	4083      	lsls	r3, r0
 8001170:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	3801      	subs	r0, #1
 800117e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001182:	d20b      	bcs.n	800119c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001184:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_SYSTICK_Config+0x24>)
 800118a:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001194:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001196:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001198:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800119c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011a4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_MPU_Disable+0x18>)
 80011aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011b2:	2200      	movs	r2, #0
 80011b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MPU_Enable+0x1c>)
 80011c2:	f040 0001 	orr.w	r0, r0, #1
 80011c6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011d6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011e0:	7843      	ldrb	r3, [r0, #1]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_MPU_ConfigRegion+0x54>)
{
 80011e4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80011e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80011ea:	7801      	ldrb	r1, [r0, #0]
 80011ec:	b1e9      	cbz	r1, 800122a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80011ee:	6843      	ldr	r3, [r0, #4]
 80011f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011f4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011f8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011fa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011fe:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001200:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001202:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001206:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001208:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800120c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001212:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001214:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001218:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800121e:	7a01      	ldrb	r1, [r0, #8]
 8001220:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001224:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001228:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800122a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800122e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8001232:	e7f9      	b.n	8001228 <HAL_MPU_ConfigRegion+0x48>
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800123c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80013e0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <HAL_GPIO_Init+0x1a0>)
    ioposition = ((uint32_t)0x01) << position;
 8001244:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001248:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800124e:	43ac      	bics	r4, r5
 8001250:	f040 80ac 	bne.w	80013ac <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001254:	684d      	ldr	r5, [r1, #4]
 8001256:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800125a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001260:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001266:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	2f01      	cmp	r7, #1
 800126a:	d834      	bhi.n	80012d6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800126c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800126e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001272:	68cf      	ldr	r7, [r1, #12]
 8001274:	fa07 f708 	lsl.w	r7, r7, r8
 8001278:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800127c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800127e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001288:	409f      	lsls	r7, r3
 800128a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800128e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001290:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001294:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001298:	688f      	ldr	r7, [r1, #8]
 800129a:	fa07 f708 	lsl.w	r7, r7, r8
 800129e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80012a2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	d119      	bne.n	80012da <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80012a6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012aa:	f003 0b07 	and.w	fp, r3, #7
 80012ae:	f04f 0e0f 	mov.w	lr, #15
 80012b2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80012b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80012ba:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012be:	fa0e fe0b 	lsl.w	lr, lr, fp
 80012c2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012c6:	690f      	ldr	r7, [r1, #16]
 80012c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80012cc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80012d0:	f8ca 7020 	str.w	r7, [sl, #32]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	2c03      	cmp	r4, #3
 80012d8:	d1da      	bne.n	8001290 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80012da:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012dc:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012e4:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e8:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80012ec:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	d05d      	beq.n	80013ac <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80012f4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f8:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001300:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001304:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800130a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800130e:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001312:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001316:	9401      	str	r4, [sp, #4]
 8001318:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800131a:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800131c:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001320:	40bc      	lsls	r4, r7
 8001322:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001326:	4c2d      	ldr	r4, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x1a4>)
 8001328:	42a0      	cmp	r0, r4
 800132a:	d046      	beq.n	80013ba <HAL_GPIO_Init+0x182>
 800132c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001330:	42a0      	cmp	r0, r4
 8001332:	d044      	beq.n	80013be <HAL_GPIO_Init+0x186>
 8001334:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001338:	42a0      	cmp	r0, r4
 800133a:	d042      	beq.n	80013c2 <HAL_GPIO_Init+0x18a>
 800133c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001340:	42a0      	cmp	r0, r4
 8001342:	d040      	beq.n	80013c6 <HAL_GPIO_Init+0x18e>
 8001344:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001348:	42a0      	cmp	r0, r4
 800134a:	d03e      	beq.n	80013ca <HAL_GPIO_Init+0x192>
 800134c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001350:	42a0      	cmp	r0, r4
 8001352:	d03c      	beq.n	80013ce <HAL_GPIO_Init+0x196>
 8001354:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001358:	42a0      	cmp	r0, r4
 800135a:	d03a      	beq.n	80013d2 <HAL_GPIO_Init+0x19a>
 800135c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001360:	42a0      	cmp	r0, r4
 8001362:	bf0c      	ite	eq
 8001364:	2407      	moveq	r4, #7
 8001366:	2408      	movne	r4, #8
 8001368:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800136a:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800136c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001370:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001372:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8001376:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001378:	bf54      	ite	pl
 800137a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800137c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001380:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8001382:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001384:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001386:	bf54      	ite	pl
 8001388:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800138a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8001390:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001392:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001394:	bf54      	ite	pl
 8001396:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001398:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800139e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80013a0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	bf54      	ite	pl
 80013a4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80013a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80013aa:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ac:	3301      	adds	r3, #1
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	f47f af48 	bne.w	8001244 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80013b4:	b003      	add	sp, #12
 80013b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ba:	2400      	movs	r4, #0
 80013bc:	e7d4      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013be:	2401      	movs	r4, #1
 80013c0:	e7d2      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013c2:	2402      	movs	r4, #2
 80013c4:	e7d0      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013c6:	2403      	movs	r4, #3
 80013c8:	e7ce      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013ca:	2404      	movs	r4, #4
 80013cc:	e7cc      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013ce:	2405      	movs	r4, #5
 80013d0:	e7ca      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013d2:	2406      	movs	r4, #6
 80013d4:	e7c8      	b.n	8001368 <HAL_GPIO_Init+0x130>
 80013d6:	bf00      	nop
 80013d8:	40013c00 	.word	0x40013c00
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e4:	b10a      	cbz	r2, 80013ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013e6:	6181      	str	r1, [r0, #24]
  }
}
 80013e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ea:	0409      	lsls	r1, r1, #16
 80013ec:	e7fb      	b.n	80013e6 <HAL_GPIO_WritePin+0x2>

080013ee <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ee:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	ea01 0203 	and.w	r2, r1, r3
 80013f4:	ea21 0103 	bic.w	r1, r1, r3
 80013f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80013fc:	6181      	str	r1, [r0, #24]
}
 80013fe:	4770      	bx	lr

08001400 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001402:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001406:	4c19      	ldr	r4, [pc, #100]	; (800146c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff fe42 	bl	80010a8 <HAL_GetTick>
 8001424:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001426:	6863      	ldr	r3, [r4, #4]
 8001428:	03da      	lsls	r2, r3, #15
 800142a:	d50c      	bpl.n	8001446 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800142c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800142e:	4d0f      	ldr	r5, [pc, #60]	; (800146c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001436:	f7ff fe37 	bl	80010a8 <HAL_GetTick>
 800143a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800143c:	686b      	ldr	r3, [r5, #4]
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	d50a      	bpl.n	8001458 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001442:	2000      	movs	r0, #0
 8001444:	e006      	b.n	8001454 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001446:	f7ff fe2f 	bl	80010a8 <HAL_GetTick>
 800144a:	1b40      	subs	r0, r0, r5
 800144c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001450:	d9e9      	bls.n	8001426 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
}
 8001454:	b003      	add	sp, #12
 8001456:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001458:	f7ff fe26 	bl	80010a8 <HAL_GetTick>
 800145c:	1b00      	subs	r0, r0, r4
 800145e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001462:	d9eb      	bls.n	800143c <HAL_PWREx_EnableOverDrive+0x3c>
 8001464:	e7f5      	b.n	8001452 <HAL_PWREx_EnableOverDrive+0x52>
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000

08001470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	4604      	mov	r4, r0
 8001476:	b340      	cbz	r0, 80014ca <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001478:	6803      	ldr	r3, [r0, #0]
 800147a:	07db      	lsls	r3, r3, #31
 800147c:	d410      	bmi.n	80014a0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	079f      	lsls	r7, r3, #30
 8001482:	d461      	bmi.n	8001548 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	0719      	lsls	r1, r3, #28
 8001488:	f100 80a6 	bmi.w	80015d8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	075a      	lsls	r2, r3, #29
 8001490:	f100 80c7 	bmi.w	8001622 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001494:	69a2      	ldr	r2, [r4, #24]
 8001496:	2a00      	cmp	r2, #0
 8001498:	f040 8130 	bne.w	80016fc <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800149c:	2000      	movs	r0, #0
 800149e:	e02c      	b.n	80014fa <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a0:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	f002 020c 	and.w	r2, r2, #12
 80014a8:	2a04      	cmp	r2, #4
 80014aa:	d007      	beq.n	80014bc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	f002 020c 	and.w	r2, r2, #12
 80014b2:	2a08      	cmp	r2, #8
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	025e      	lsls	r6, r3, #9
 80014ba:	d508      	bpl.n	80014ce <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	4b8d      	ldr	r3, [pc, #564]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	039d      	lsls	r5, r3, #14
 80014c2:	d5dc      	bpl.n	800147e <HAL_RCC_OscConfig+0xe>
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1d9      	bne.n	800147e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	4d88      	ldr	r5, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d113      	bne.n	8001500 <HAL_RCC_OscConfig+0x90>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014e0:	f7ff fde2 	bl	80010a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	4e83      	ldr	r6, [pc, #524]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80014e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e8:	6833      	ldr	r3, [r6, #0]
 80014ea:	0398      	lsls	r0, r3, #14
 80014ec:	d4c7      	bmi.n	800147e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ee:	f7ff fddb 	bl	80010a8 <HAL_GetTick>
 80014f2:	1b40      	subs	r0, r0, r5
 80014f4:	2864      	cmp	r0, #100	; 0x64
 80014f6:	d9f7      	bls.n	80014e8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80014f8:	2003      	movs	r0, #3
}
 80014fa:	b002      	add	sp, #8
 80014fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	b99b      	cbnz	r3, 800152a <HAL_RCC_OscConfig+0xba>
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	602b      	str	r3, [r5, #0]
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001512:	f7ff fdc9 	bl	80010a8 <HAL_GetTick>
 8001516:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	0399      	lsls	r1, r3, #14
 800151c:	d5af      	bpl.n	800147e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151e:	f7ff fdc3 	bl	80010a8 <HAL_GetTick>
 8001522:	1b80      	subs	r0, r0, r6
 8001524:	2864      	cmp	r0, #100	; 0x64
 8001526:	d9f7      	bls.n	8001518 <HAL_RCC_OscConfig+0xa8>
 8001528:	e7e6      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	d103      	bne.n	800153a <HAL_RCC_OscConfig+0xca>
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	602b      	str	r3, [r5, #0]
 8001538:	e7ce      	b.n	80014d8 <HAL_RCC_OscConfig+0x68>
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	602b      	str	r3, [r5, #0]
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	e7ca      	b.n	80014de <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	f012 0f0c 	tst.w	r2, #12
 8001550:	d007      	beq.n	8001562 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	f002 020c 	and.w	r2, r2, #12
 8001558:	2a08      	cmp	r2, #8
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x110>
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	025a      	lsls	r2, r3, #9
 8001560:	d40e      	bmi.n	8001580 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4a64      	ldr	r2, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 8001564:	6813      	ldr	r3, [r2, #0]
 8001566:	079b      	lsls	r3, r3, #30
 8001568:	d502      	bpl.n	8001570 <HAL_RCC_OscConfig+0x100>
 800156a:	68e3      	ldr	r3, [r4, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d1ac      	bne.n	80014ca <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	6921      	ldr	r1, [r4, #16]
 8001574:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001578:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800157c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157e:	e781      	b.n	8001484 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001580:	68e3      	ldr	r3, [r4, #12]
 8001582:	4d5c      	ldr	r5, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 8001584:	b1bb      	cbz	r3, 80015b6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800158e:	f7ff fd8b 	bl	80010a8 <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	079f      	lsls	r7, r3, #30
 8001598:	d507      	bpl.n	80015aa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	6922      	ldr	r2, [r4, #16]
 800159e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015a6:	602b      	str	r3, [r5, #0]
 80015a8:	e76c      	b.n	8001484 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fd7d 	bl	80010a8 <HAL_GetTick>
 80015ae:	1b80      	subs	r0, r0, r6
 80015b0:	2802      	cmp	r0, #2
 80015b2:	d9ef      	bls.n	8001594 <HAL_RCC_OscConfig+0x124>
 80015b4:	e7a0      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015be:	f7ff fd73 	bl	80010a8 <HAL_GetTick>
 80015c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	0798      	lsls	r0, r3, #30
 80015c8:	f57f af5c 	bpl.w	8001484 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fd6c 	bl	80010a8 <HAL_GetTick>
 80015d0:	1b80      	subs	r0, r0, r6
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d9f6      	bls.n	80015c4 <HAL_RCC_OscConfig+0x154>
 80015d6:	e78f      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d8:	6963      	ldr	r3, [r4, #20]
 80015da:	4d46      	ldr	r5, [pc, #280]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 80015dc:	b183      	cbz	r3, 8001600 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80015de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80015e6:	f7ff fd5f 	bl	80010a8 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015ee:	079b      	lsls	r3, r3, #30
 80015f0:	f53f af4c 	bmi.w	800148c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fd58 	bl	80010a8 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x17c>
 80015fe:	e77b      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001600:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001608:	f7ff fd4e 	bl	80010a8 <HAL_GetTick>
 800160c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001610:	079f      	lsls	r7, r3, #30
 8001612:	f57f af3b 	bpl.w	800148c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fd47 	bl	80010a8 <HAL_GetTick>
 800161a:	1b80      	subs	r0, r0, r6
 800161c:	2802      	cmp	r0, #2
 800161e:	d9f6      	bls.n	800160e <HAL_RCC_OscConfig+0x19e>
 8001620:	e76a      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 8001624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001626:	00d0      	lsls	r0, r2, #3
 8001628:	d427      	bmi.n	800167a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800162c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4d2e      	ldr	r5, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	05d9      	lsls	r1, r3, #23
 8001644:	d51b      	bpl.n	800167e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001646:	68a3      	ldr	r3, [r4, #8]
 8001648:	4d2a      	ldr	r5, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 800164a:	2b01      	cmp	r3, #1
 800164c:	d127      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
 800164e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800165a:	f7ff fd25 	bl	80010a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	4e25      	ldr	r6, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8001660:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001664:	079b      	lsls	r3, r3, #30
 8001666:	d53f      	bpl.n	80016e8 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8001668:	2f00      	cmp	r7, #0
 800166a:	f43f af13 	beq.w	8001494 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x284>)
 8001670:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	e70c      	b.n	8001494 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800167a:	2700      	movs	r7, #0
 800167c:	e7df      	b.n	800163e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001686:	f7ff fd0f 	bl	80010a8 <HAL_GetTick>
 800168a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	05da      	lsls	r2, r3, #23
 8001690:	d4d9      	bmi.n	8001646 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001692:	f7ff fd09 	bl	80010a8 <HAL_GetTick>
 8001696:	1b80      	subs	r0, r0, r6
 8001698:	2864      	cmp	r0, #100	; 0x64
 800169a:	d9f7      	bls.n	800168c <HAL_RCC_OscConfig+0x21c>
 800169c:	e72c      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169e:	b9ab      	cbnz	r3, 80016cc <HAL_RCC_OscConfig+0x25c>
 80016a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	672b      	str	r3, [r5, #112]	; 0x70
 80016ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016ae:	f023 0304 	bic.w	r3, r3, #4
 80016b2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80016b4:	f7ff fcf8 	bl	80010a8 <HAL_GetTick>
 80016b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016bc:	0798      	lsls	r0, r3, #30
 80016be:	d5d3      	bpl.n	8001668 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcf2 	bl	80010a8 <HAL_GetTick>
 80016c4:	1b80      	subs	r0, r0, r6
 80016c6:	4540      	cmp	r0, r8
 80016c8:	d9f7      	bls.n	80016ba <HAL_RCC_OscConfig+0x24a>
 80016ca:	e715      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016d0:	d103      	bne.n	80016da <HAL_RCC_OscConfig+0x26a>
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	672b      	str	r3, [r5, #112]	; 0x70
 80016d8:	e7b9      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	672b      	str	r3, [r5, #112]	; 0x70
 80016e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	e7b5      	b.n	8001654 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fcde 	bl	80010a8 <HAL_GetTick>
 80016ec:	1b40      	subs	r0, r0, r5
 80016ee:	4540      	cmp	r0, r8
 80016f0:	d9b7      	bls.n	8001662 <HAL_RCC_OscConfig+0x1f2>
 80016f2:	e701      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fc:	4d38      	ldr	r5, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x370>)
 80016fe:	68ab      	ldr	r3, [r5, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d041      	beq.n	800178c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8001708:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	d12e      	bne.n	8001772 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8001714:	f7ff fcc8 	bl	80010a8 <HAL_GetTick>
 8001718:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	0199      	lsls	r1, r3, #6
 800171e:	d422      	bmi.n	8001766 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800172a:	430b      	orrs	r3, r1
 800172c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001730:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001732:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001738:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800173c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001740:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800174a:	f7ff fcad 	bl	80010a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4d24      	ldr	r5, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8001750:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	019a      	lsls	r2, r3, #6
 8001756:	f53f aea1 	bmi.w	800149c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fca5 	bl	80010a8 <HAL_GetTick>
 800175e:	1b00      	subs	r0, r0, r4
 8001760:	2802      	cmp	r0, #2
 8001762:	d9f6      	bls.n	8001752 <HAL_RCC_OscConfig+0x2e2>
 8001764:	e6c8      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff fc9f 	bl	80010a8 <HAL_GetTick>
 800176a:	1b80      	subs	r0, r0, r6
 800176c:	2802      	cmp	r0, #2
 800176e:	d9d4      	bls.n	800171a <HAL_RCC_OscConfig+0x2aa>
 8001770:	e6c2      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001772:	f7ff fc99 	bl	80010a8 <HAL_GetTick>
 8001776:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	f57f ae8e 	bpl.w	800149c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fc92 	bl	80010a8 <HAL_GetTick>
 8001784:	1b00      	subs	r0, r0, r4
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f6      	bls.n	8001778 <HAL_RCC_OscConfig+0x308>
 800178a:	e6b5      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800178e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001790:	f43f ae9b 	beq.w	80014ca <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	69e1      	ldr	r1, [r4, #28]
 800179a:	428a      	cmp	r2, r1
 800179c:	f47f ae95 	bne.w	80014ca <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a4:	6a21      	ldr	r1, [r4, #32]
 80017a6:	428a      	cmp	r2, r1
 80017a8:	f47f ae8f 	bne.w	80014ca <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b2:	401a      	ands	r2, r3
 80017b4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80017b8:	f47f ae87 	bne.w	80014ca <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017be:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80017c2:	0852      	lsrs	r2, r2, #1
 80017c4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80017ca:	f47f ae7e 	bne.w	80014ca <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ce:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80017d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80017d8:	f43f ae60 	beq.w	800149c <HAL_RCC_OscConfig+0x2c>
 80017dc:	e675      	b.n	80014ca <HAL_RCC_OscConfig+0x5a>
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e4:	4913      	ldr	r1, [pc, #76]	; (8001834 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e8:	688b      	ldr	r3, [r1, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d01b      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x46>
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d11b      	bne.n	800182e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017f8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001800:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001808:	bf1a      	itte	ne
 800180a:	480b      	ldrne	r0, [pc, #44]	; (8001838 <HAL_RCC_GetSysClockFreq+0x54>)
 800180c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	480b      	ldreq	r0, [pc, #44]	; (800183c <HAL_RCC_GetSysClockFreq+0x58>)
 8001810:	fba1 0100 	umull	r0, r1, r1, r0
 8001814:	f7fe fd04 	bl	8000220 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetSysClockFreq+0x50>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001820:	3301      	adds	r3, #1
 8001822:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001824:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001828:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182a:	4803      	ldr	r0, [pc, #12]	; (8001838 <HAL_RCC_GetSysClockFreq+0x54>)
 800182c:	e7fc      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001830:	e7fa      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x44>
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	017d7840 	.word	0x017d7840
 800183c:	00f42400 	.word	0x00f42400

08001840 <HAL_RCC_ClockConfig>:
{
 8001840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001844:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001846:	4604      	mov	r4, r0
 8001848:	b910      	cbnz	r0, 8001850 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
}
 800184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4a45      	ldr	r2, [pc, #276]	; (8001968 <HAL_RCC_ClockConfig+0x128>)
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	428b      	cmp	r3, r1
 800185a:	d328      	bcc.n	80018ae <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	6821      	ldr	r1, [r4, #0]
 800185e:	078f      	lsls	r7, r1, #30
 8001860:	d430      	bmi.n	80018c4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	07c8      	lsls	r0, r1, #31
 8001864:	d443      	bmi.n	80018ee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001866:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_RCC_ClockConfig+0x128>)
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	42ab      	cmp	r3, r5
 8001870:	d866      	bhi.n	8001940 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	0751      	lsls	r1, r2, #29
 8001876:	d46f      	bmi.n	8001958 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	0713      	lsls	r3, r2, #28
 800187a:	d507      	bpl.n	800188c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
 800187e:	6921      	ldr	r1, [r4, #16]
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001886:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800188a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188c:	f7ff ffaa 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
 8001892:	4a37      	ldr	r2, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x130>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	40d8      	lsrs	r0, r3
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_RCC_ClockConfig+0x134>)
 80018a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_RCC_ClockConfig+0x138>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f7ff fbbf 	bl	8001028 <HAL_InitTick>
  return HAL_OK;
 80018aa:	2000      	movs	r0, #0
 80018ac:	e7ce      	b.n	800184c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	f023 030f 	bic.w	r3, r3, #15
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b8:	6813      	ldr	r3, [r2, #0]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	428b      	cmp	r3, r1
 80018c0:	d1c3      	bne.n	800184a <HAL_RCC_ClockConfig+0xa>
 80018c2:	e7cb      	b.n	800185c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	f011 0f04 	tst.w	r1, #4
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
 80018ca:	d003      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80018d2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	070e      	lsls	r6, r1, #28
 80018d6:	d503      	bpl.n	80018e0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80018de:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	68a0      	ldr	r0, [r4, #8]
 80018e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018e8:	4302      	orrs	r2, r0
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e7b9      	b.n	8001862 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	6861      	ldr	r1, [r4, #4]
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
 80018f2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	d11b      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	d0a5      	beq.n	800184a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001904:	4f19      	ldr	r7, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	f022 0203 	bic.w	r2, r2, #3
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800190e:	f7ff fbcb 	bl	80010a8 <HAL_GetTick>
 8001912:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	6862      	ldr	r2, [r4, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001920:	d0a1      	beq.n	8001866 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001922:	f7ff fbc1 	bl	80010a8 <HAL_GetTick>
 8001926:	1b80      	subs	r0, r0, r6
 8001928:	4540      	cmp	r0, r8
 800192a:	d9f3      	bls.n	8001914 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800192c:	2003      	movs	r0, #3
 800192e:	e78d      	b.n	800184c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001930:	2902      	cmp	r1, #2
 8001932:	d102      	bne.n	800193a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001934:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001938:	e7e0      	b.n	80018fc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	f012 0f02 	tst.w	r2, #2
 800193e:	e7dd      	b.n	80018fc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	f023 030f 	bic.w	r3, r3, #15
 8001946:	432b      	orrs	r3, r5
 8001948:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	6813      	ldr	r3, [r2, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	42ab      	cmp	r3, r5
 8001952:	f47f af7a 	bne.w	800184a <HAL_RCC_ClockConfig+0xa>
 8001956:	e78c      	b.n	8001872 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4904      	ldr	r1, [pc, #16]	; (800196c <HAL_RCC_ClockConfig+0x12c>)
 800195a:	68e0      	ldr	r0, [r4, #12]
 800195c:	688b      	ldr	r3, [r1, #8]
 800195e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001962:	4303      	orrs	r3, r0
 8001964:	608b      	str	r3, [r1, #8]
 8001966:	e787      	b.n	8001878 <HAL_RCC_ClockConfig+0x38>
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	0800b148 	.word	0x0800b148
 8001974:	20000084 	.word	0x20000084
 8001978:	2000008c 	.word	0x2000008c

0800197c <HAL_SRAM_MspInit>:
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 800197c:	4770      	bx	lr

0800197e <HAL_SRAM_Init>:
{
 800197e:	b570      	push	{r4, r5, r6, lr}
 8001980:	460e      	mov	r6, r1
 8001982:	4615      	mov	r5, r2
  if (hsram == NULL)
 8001984:	4604      	mov	r4, r0
 8001986:	b328      	cbz	r0, 80019d4 <HAL_SRAM_Init+0x56>
  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001988:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800198c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001990:	b91b      	cbnz	r3, 800199a <HAL_SRAM_Init+0x1c>
    hsram->Lock = HAL_UNLOCKED;
 8001992:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_SRAM_MspInit(hsram);
 8001996:	f7ff fff1 	bl	800197c <HAL_SRAM_MspInit>
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800199a:	f104 0108 	add.w	r1, r4, #8
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	f000 f9a6 	bl	8001cf0 <FMC_NORSRAM_Init>
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80019a4:	68a2      	ldr	r2, [r4, #8]
 80019a6:	4631      	mov	r1, r6
 80019a8:	6820      	ldr	r0, [r4, #0]
 80019aa:	f000 f9e5 	bl	8001d78 <FMC_NORSRAM_Timing_Init>
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80019ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019b0:	68a2      	ldr	r2, [r4, #8]
 80019b2:	4629      	mov	r1, r5
 80019b4:	6860      	ldr	r0, [r4, #4]
 80019b6:	f000 fa0b 	bl	8001dd0 <FMC_NORSRAM_Extended_Timing_Init>
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	68a1      	ldr	r1, [r4, #8]
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80019c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
 80019d6:	e7fc      	b.n	80019d2 <HAL_SRAM_Init+0x54>

080019d8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d133      	bne.n	8001a48 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e6:	6803      	ldr	r3, [r0, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f0:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <HAL_TIM_Base_Start_IT+0x74>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01a      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d017      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 80019fc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 8001a04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00f      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 8001a0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00b      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 8001a14:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 8001a1c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d003      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x54>
 8001a24:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a2c:	6899      	ldr	r1, [r3, #8]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_TIM_Base_Start_IT+0x78>)
 8001a30:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	2a06      	cmp	r2, #6
 8001a34:	d006      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x6c>
 8001a36:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001a3a:	d003      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a44:	2000      	movs	r0, #0
}
 8001a46:	4770      	bx	lr
    return HAL_ERROR;
 8001a48:	2001      	movs	r0, #1
 8001a4a:	4770      	bx	lr
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	00010007 	.word	0x00010007

08001a54 <HAL_TIM_OC_DelayElapsedCallback>:
 8001a54:	4770      	bx	lr

08001a56 <HAL_TIM_IC_CaptureCallback>:
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001a58:	4770      	bx	lr

08001a5a <HAL_TIM_TriggerCallback>:
 8001a5a:	4770      	bx	lr

08001a5c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	0791      	lsls	r1, r2, #30
{
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a66:	d50f      	bpl.n	8001a88 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	0792      	lsls	r2, r2, #30
 8001a6c:	d50c      	bpl.n	8001a88 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a6e:	f06f 0202 	mvn.w	r2, #2
 8001a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a74:	2201      	movs	r2, #1
 8001a76:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0799      	lsls	r1, r3, #30
 8001a7c:	f000 8085 	beq.w	8001b8a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a80:	f7ff ffe9 	bl	8001a56 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a84:	2300      	movs	r3, #0
 8001a86:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	0752      	lsls	r2, r2, #29
 8001a8e:	d510      	bpl.n	8001ab2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	0750      	lsls	r0, r2, #29
 8001a94:	d50d      	bpl.n	8001ab2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a96:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001aa8:	d075      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	f7ff ffd4 	bl	8001a56 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	0711      	lsls	r1, r2, #28
 8001ab8:	d50f      	bpl.n	8001ada <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	0712      	lsls	r2, r2, #28
 8001abe:	d50c      	bpl.n	8001ada <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac8:	2204      	movs	r2, #4
 8001aca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	079b      	lsls	r3, r3, #30
 8001ad0:	d067      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	f7ff ffc0 	bl	8001a56 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	06d0      	lsls	r0, r2, #27
 8001ae0:	d510      	bpl.n	8001b04 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	06d1      	lsls	r1, r2, #27
 8001ae6:	d50d      	bpl.n	8001b04 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ae8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001af0:	2208      	movs	r2, #8
 8001af2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001afa:	d058      	beq.n	8001bae <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001afc:	f7ff ffab 	bl	8001a56 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b00:	2300      	movs	r3, #0
 8001b02:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	07d2      	lsls	r2, r2, #31
 8001b0a:	d508      	bpl.n	8001b1e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	07d0      	lsls	r0, r2, #31
 8001b10:	d505      	bpl.n	8001b1e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b12:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b18:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b1a:	f7fe fe62 	bl	80007e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	0611      	lsls	r1, r2, #24
 8001b24:	d508      	bpl.n	8001b38 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	0612      	lsls	r2, r2, #24
 8001b2a:	d505      	bpl.n	8001b38 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b34:	f000 f8d9 	bl	8001cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	05d0      	lsls	r0, r2, #23
 8001b3e:	d508      	bpl.n	8001b52 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	0611      	lsls	r1, r2, #24
 8001b44:	d505      	bpl.n	8001b52 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b46:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001b4e:	f000 f8cd 	bl	8001cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	0652      	lsls	r2, r2, #25
 8001b58:	d508      	bpl.n	8001b6c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	0650      	lsls	r0, r2, #25
 8001b5e:	d505      	bpl.n	8001b6c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b66:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b68:	f7ff ff77 	bl	8001a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	0691      	lsls	r1, r2, #26
 8001b72:	d522      	bpl.n	8001bba <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	0692      	lsls	r2, r2, #26
 8001b78:	d51f      	bpl.n	8001bba <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b7a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b80:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001b86:	f000 b8af 	b.w	8001ce8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8a:	f7ff ff63 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff ff62 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b94:	e776      	b.n	8001a84 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	f7ff ff5d 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff ff5c 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ba0:	e785      	b.n	8001aae <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	f7ff ff57 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff ff56 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bac:	e793      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	f7ff ff51 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ff50 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bb8:	e7a2      	b.n	8001b00 <HAL_TIM_IRQHandler+0xa4>
}
 8001bba:	bd10      	pop	{r4, pc}

08001bbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001bbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d012      	beq.n	8001bea <TIM_Base_SetConfig+0x2e>
 8001bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bc8:	d00f      	beq.n	8001bea <TIM_Base_SetConfig+0x2e>
 8001bca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d00b      	beq.n	8001bea <TIM_Base_SetConfig+0x2e>
 8001bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bd6:	4290      	cmp	r0, r2
 8001bd8:	d007      	beq.n	8001bea <TIM_Base_SetConfig+0x2e>
 8001bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bde:	4290      	cmp	r0, r2
 8001be0:	d003      	beq.n	8001bea <TIM_Base_SetConfig+0x2e>
 8001be2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001be6:	4290      	cmp	r0, r2
 8001be8:	d119      	bne.n	8001c1e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001bea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bf0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf2:	4a23      	ldr	r2, [pc, #140]	; (8001c80 <TIM_Base_SetConfig+0xc4>)
 8001bf4:	4290      	cmp	r0, r2
 8001bf6:	d029      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001bf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bfc:	d026      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001bfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c02:	4290      	cmp	r0, r2
 8001c04:	d022      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c0a:	4290      	cmp	r0, r2
 8001c0c:	d01e      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c12:	4290      	cmp	r0, r2
 8001c14:	d01a      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c1a:	4290      	cmp	r0, r2
 8001c1c:	d016      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <TIM_Base_SetConfig+0xc8>)
 8001c20:	4290      	cmp	r0, r2
 8001c22:	d013      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c28:	4290      	cmp	r0, r2
 8001c2a:	d00f      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c30:	4290      	cmp	r0, r2
 8001c32:	d00b      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c34:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001c38:	4290      	cmp	r0, r2
 8001c3a:	d007      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c40:	4290      	cmp	r0, r2
 8001c42:	d003      	beq.n	8001c4c <TIM_Base_SetConfig+0x90>
 8001c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c48:	4290      	cmp	r0, r2
 8001c4a:	d103      	bne.n	8001c54 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c50:	68ca      	ldr	r2, [r1, #12]
 8001c52:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c54:	694a      	ldr	r2, [r1, #20]
 8001c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c5a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001c5c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5e:	688b      	ldr	r3, [r1, #8]
 8001c60:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c62:	680b      	ldr	r3, [r1, #0]
 8001c64:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <TIM_Base_SetConfig+0xc4>)
 8001c68:	4298      	cmp	r0, r3
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0xb8>
 8001c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c70:	4298      	cmp	r0, r3
 8001c72:	d101      	bne.n	8001c78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c74:	690b      	ldr	r3, [r1, #16]
 8001c76:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	6143      	str	r3, [r0, #20]
}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40014000 	.word	0x40014000

08001c88 <HAL_TIM_Base_Init>:
{
 8001c88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	b350      	cbz	r0, 8001ce4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c96:	b91b      	cbnz	r3, 8001ca0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c9c:	f7fe fd80 	bl	80007a0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca2:	6820      	ldr	r0, [r4, #0]
 8001ca4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001caa:	f7ff ff87 	bl	8001bbc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cae:	2301      	movs	r3, #1
  return HAL_OK;
 8001cb0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001cba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001cbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001cc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001cc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cd6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001cda:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001cde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001ce2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7fc      	b.n	8001ce2 <HAL_TIM_Base_Init+0x5a>

08001ce8 <HAL_TIMEx_CommutCallback>:
 8001ce8:	4770      	bx	lr

08001cea <HAL_TIMEx_BreakCallback>:
 8001cea:	4770      	bx	lr

08001cec <HAL_TIMEx_Break2Callback>:
 8001cec:	4770      	bx	lr
	...

08001cf0 <FMC_NORSRAM_Init>:
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001cf0:	680a      	ldr	r2, [r1, #0]
 8001cf2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
{
 8001cfa:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8001cfc:	688d      	ldr	r5, [r1, #8]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001cfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCR1_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001d02:	684b      	ldr	r3, [r1, #4]
 8001d04:	68cf      	ldr	r7, [r1, #12]
 8001d06:	432b      	orrs	r3, r5
 8001d08:	f850 c022 	ldr.w	ip, [r0, r2, lsl #2]
 8001d0c:	433b      	orrs	r3, r7
 8001d0e:	690f      	ldr	r7, [r1, #16]
 8001d10:	433b      	orrs	r3, r7
 8001d12:	694f      	ldr	r7, [r1, #20]
 8001d14:	433b      	orrs	r3, r7
 8001d16:	698f      	ldr	r7, [r1, #24]
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	69cf      	ldr	r7, [r1, #28]
 8001d1c:	433b      	orrs	r3, r7
 8001d1e:	6a0f      	ldr	r7, [r1, #32]
 8001d20:	433b      	orrs	r3, r7
 8001d22:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8001d24:	433b      	orrs	r3, r7
 8001d26:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8001d28:	433b      	orrs	r3, r7
 8001d2a:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  btcr_reg |= Init->WriteFifo;
 8001d2c:	e9d1 640c 	ldrd	r6, r4, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001d30:	433b      	orrs	r3, r7
 8001d32:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001d34:	4333      	orrs	r3, r6
 8001d36:	4323      	orrs	r3, r4
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <FMC_NORSRAM_Init+0x84>)
 8001d3c:	ea01 010c 	and.w	r1, r1, ip
 8001d40:	430b      	orrs	r3, r1
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8001d42:	f1a5 0108 	sub.w	r1, r5, #8
 8001d46:	424d      	negs	r5, r1
 8001d48:	414d      	adcs	r5, r1

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8001d4a:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001d4e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001d52:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8001d56:	d108      	bne.n	8001d6a <FMC_NORSRAM_Init+0x7a>
 8001d58:	b14a      	cbz	r2, 8001d6e <FMC_NORSRAM_Init+0x7e>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d60:	6003      	str	r3, [r0, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	431c      	orrs	r4, r3
 8001d66:	6004      	str	r4, [r0, #0]
 8001d68:	e001      	b.n	8001d6e <FMC_NORSRAM_Init+0x7e>
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d1f9      	bne.n	8001d62 <FMC_NORSRAM_Init+0x72>
  }

  return HAL_OK;
}
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	ffc00480 	.word	0xffc00480

08001d78 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001d7a:	680b      	ldr	r3, [r1, #0]
 8001d7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001d80:	698f      	ldr	r7, [r1, #24]
 8001d82:	690d      	ldr	r5, [r1, #16]
 8001d84:	433b      	orrs	r3, r7
 8001d86:	684f      	ldr	r7, [r1, #4]
 8001d88:	3d01      	subs	r5, #1
 8001d8a:	6856      	ldr	r6, [r2, #4]
 8001d8c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8001d90:	688f      	ldr	r7, [r1, #8]
 8001d92:	052c      	lsls	r4, r5, #20
 8001d94:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d98:	68cf      	ldr	r7, [r1, #12]
 8001d9a:	6949      	ldr	r1, [r1, #20]
 8001d9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001da0:	3902      	subs	r1, #2
 8001da2:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001da6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001daa:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8001dae:	430b      	orrs	r3, r1
 8001db0:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	02db      	lsls	r3, r3, #11
 8001db6:	d508      	bpl.n	8001dca <FMC_NORSRAM_Timing_Init+0x52>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8001db8:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8001dba:	6843      	ldr	r3, [r0, #4]
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8001dbc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8001dc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8001dc4:	4314      	orrs	r4, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8001dca:	2000      	movs	r0, #0
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001dd0 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8001dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8001dd4:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8001dd6:	d114      	bne.n	8001e02 <FMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001dd8:	698d      	ldr	r5, [r1, #24]
 8001dda:	680b      	ldr	r3, [r1, #0]
 8001ddc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001de0:	432b      	orrs	r3, r5
 8001de2:	684d      	ldr	r5, [r1, #4]
 8001de4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001de8:	688d      	ldr	r5, [r1, #8]
 8001dea:	68c9      	ldr	r1, [r1, #12]
 8001dec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <FMC_NORSRAM_Extended_Timing_Init+0x38>)
 8001df6:	4021      	ands	r1, r4
 8001df8:	430b      	orrs	r3, r1
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001dfa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001dfe:	2000      	movs	r0, #0
 8001e00:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001e02:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001e06:	e7f8      	b.n	8001dfa <FMC_NORSRAM_Extended_Timing_Init+0x2a>
 8001e08:	cff00000 	.word	0xcff00000

08001e0c <GUI_X_Config>:
void GUI_X_Config(void) 
{
  //
  // Assign memory to STemWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8001e0c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001e10:	4801      	ldr	r0, [pc, #4]	; (8001e18 <GUI_X_Config+0xc>)
 8001e12:	f000 ba15 	b.w	8002240 <GUI_ALLOC_AssignMemory>
 8001e16:	bf00      	nop
 8001e18:	2000014c 	.word	0x2000014c

08001e1c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8001e1c:	4770      	bx	lr

08001e1e <LcdWriteReg>:
  * @retval None
  */
static void STM_FSMC_BANK1_WriteReg(uint8_t Reg) 
{ 
  /* Write 16-bit Index, then write register */
  FMC_BANK2->REG = Reg;  
 8001e1e:	b2c0      	uxtb	r0, r0
 8001e20:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8001e24:	8018      	strh	r0, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
}
 8001e2e:	4770      	bx	lr

08001e30 <LcdWriteData>:
  FMC_BANK2->RAM = Data;  
 8001e30:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8001e34:	8058      	strh	r0, [r3, #2]
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
}
 8001e3e:	4770      	bx	lr

08001e40 <LcdWriteDataMultiple>:
  while (NumItems--) 
 8001e40:	2300      	movs	r3, #0
  FMC_BANK2->RAM = Data;  
 8001e42:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
{
 8001e46:	b510      	push	{r4, lr}
  while (NumItems--) 
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d100      	bne.n	8001e4e <LcdWriteDataMultiple+0xe>
}
 8001e4c:	bd10      	pop	{r4, pc}
    STM_FSMC_BANK1_WriteData(*pData++);
 8001e4e:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
  FMC_BANK2->RAM = Data;  
 8001e52:	8054      	strh	r4, [r2, #2]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	3301      	adds	r3, #1
}
 8001e5e:	e7f3      	b.n	8001e48 <LcdWriteDataMultiple+0x8>

08001e60 <LcdReadDataMultiple>:
  while (NumItems--) 
 8001e60:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  * @param  None
  * @retval Read value
  */
static uint16_t STM_FSMC_BANK1_ReadData(void) 
{
  return FMC_BANK2->RAM;  
 8001e64:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
  while (NumItems--) 
 8001e68:	4288      	cmp	r0, r1
 8001e6a:	d100      	bne.n	8001e6e <LcdReadDataMultiple+0xe>
}
 8001e6c:	4770      	bx	lr
  return FMC_BANK2->RAM;  
 8001e6e:	885a      	ldrh	r2, [r3, #2]
    *pData++ = STM_FSMC_BANK1_ReadData();
 8001e70:	f820 2b02 	strh.w	r2, [r0], #2
 8001e74:	e7f8      	b.n	8001e68 <LcdReadDataMultiple+0x8>

08001e76 <LCD_LL_Init>:
  BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE_ROT180);  
 8001e76:	2002      	movs	r0, #2
 8001e78:	f7ff b85c 	b.w	8000f34 <BSP_LCD_InitEx>

08001e7c <LCD_X_Config>:
{
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	b0a0      	sub	sp, #128	; 0x80
  CONFIG_FLEXCOLOR Config = {0};
 8001e80:	2214      	movs	r2, #20
 8001e82:	2100      	movs	r1, #0
 8001e84:	a801      	add	r0, sp, #4
 8001e86:	f005 faab 	bl	80073e0 <memset>
  GUI_PORT_API PortAPI = {0};
 8001e8a:	2268      	movs	r2, #104	; 0x68
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	a806      	add	r0, sp, #24
 8001e90:	f005 faa6 	bl	80073e0 <memset>
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8001e94:	2300      	movs	r3, #0
 8001e96:	4912      	ldr	r1, [pc, #72]	; (8001ee0 <LCD_X_Config+0x64>)
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <LCD_X_Config+0x68>)
 8001e9c:	f000 fe88 	bl	8002bb0 <GUI_DEVICE_CreateAndLink>
  Config.Orientation = GUI_MIRROR_Y | GUI_MIRROR_X; 
 8001ea0:	2303      	movs	r3, #3
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8001ea2:	a901      	add	r1, sp, #4
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8001ea4:	4604      	mov	r4, r0
  Config.Orientation = GUI_MIRROR_Y | GUI_MIRROR_X; 
 8001ea6:	9303      	str	r3, [sp, #12]
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8001ea8:	f002 f837 	bl	8003f1a <GUIDRV_FlexColor_Config>
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8001eac:	22f0      	movs	r2, #240	; 0xf0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	f001 fd19 	bl	80038e8 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8001eb6:	22f0      	movs	r2, #240	; 0xf0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	4611      	mov	r1, r2
 8001ebc:	f001 fd2c 	bl	8003918 <LCD_SetVSizeEx>
  PortAPI.pfWrite16_A0  = LcdWriteReg;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <LCD_X_Config+0x6c>)
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B16);
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LCD_X_Config+0x70>)
 8001ec4:	a906      	add	r1, sp, #24
  PortAPI.pfWrite16_A0  = LcdWriteReg;
 8001ec6:	930e      	str	r3, [sp, #56]	; 0x38
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B16);
 8001ec8:	4620      	mov	r0, r4
  PortAPI.pfWrite16_A1  = LcdWriteData;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <LCD_X_Config+0x74>)
 8001ecc:	930f      	str	r3, [sp, #60]	; 0x3c
  PortAPI.pfWriteM16_A1 = LcdWriteDataMultiple;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <LCD_X_Config+0x78>)
 8001ed0:	9311      	str	r3, [sp, #68]	; 0x44
  PortAPI.pfReadM16_A1  = LcdReadDataMultiple;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <LCD_X_Config+0x7c>)
 8001ed4:	9315      	str	r3, [sp, #84]	; 0x54
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B16);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LCD_X_Config+0x80>)
 8001ed8:	f002 f83d 	bl	8003f56 <GUIDRV_FlexColor_SetFunc>
}
 8001edc:	b020      	add	sp, #128	; 0x80
 8001ede:	bd10      	pop	{r4, pc}
 8001ee0:	0800b160 	.word	0x0800b160
 8001ee4:	0800b55c 	.word	0x0800b55c
 8001ee8:	08001e1f 	.word	0x08001e1f
 8001eec:	08004961 	.word	0x08004961
 8001ef0:	08001e31 	.word	0x08001e31
 8001ef4:	08001e41 	.word	0x08001e41
 8001ef8:	08001e61 	.word	0x08001e61
 8001efc:	080045c1 	.word	0x080045c1

08001f00 <LCD_X_DisplayDriver>:
  switch (Cmd) {
 8001f00:	2901      	cmp	r1, #1
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8001f02:	b508      	push	{r3, lr}
  switch (Cmd) {
 8001f04:	d103      	bne.n	8001f0e <LCD_X_DisplayDriver+0xe>
    LCD_LL_Init();
 8001f06:	f7ff ffb6 	bl	8001e76 <LCD_LL_Init>
    return 0;
 8001f0a:	2000      	movs	r0, #0
}
 8001f0c:	bd08      	pop	{r3, pc}
  return r;
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f12:	e7fb      	b.n	8001f0c <LCD_X_DisplayDriver+0xc>

08001f14 <LCD_Index2Color_M565>:
 8001f14:	f000 011f 	and.w	r1, r0, #31
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <LCD_Index2Color_M565+0x20>)
 8001f1a:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8001f1e:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	5c52      	ldrb	r2, [r2, r1]
 8001f26:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <LCD_Index2Color_M565+0x24>)
 8001f2c:	5c10      	ldrb	r0, [r2, r0]
 8001f2e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001f32:	4770      	bx	lr
 8001f34:	0800b4e0 	.word	0x0800b4e0
 8001f38:	0800b4a0 	.word	0x0800b4a0

08001f3c <_Color2Index_M565>:
 8001f3c:	b2c1      	uxtb	r1, r0
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <_Color2Index_M565+0x20>)
 8001f40:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8001f44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	5c52      	ldrb	r2, [r2, r1]
 8001f4c:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <_Color2Index_M565+0x24>)
 8001f52:	5c10      	ldrb	r0, [r2, r0]
 8001f54:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	0800b2a0 	.word	0x0800b2a0
 8001f60:	0800b1a0 	.word	0x0800b1a0

08001f64 <_GetIndexMask_M565>:
 8001f64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f68:	4770      	bx	lr
	...

08001f6c <_Color2IndexBulk>:
 8001f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6e:	f8df e054 	ldr.w	lr, [pc, #84]	; 8001fc4 <_Color2IndexBulk+0x58>
 8001f72:	4606      	mov	r6, r0
 8001f74:	460d      	mov	r5, r1
 8001f76:	4614      	mov	r4, r2
 8001f78:	f8de e000 	ldr.w	lr, [lr]
 8001f7c:	461f      	mov	r7, r3
 8001f7e:	f1be 0f00 	cmp.w	lr, #0
 8001f82:	d003      	beq.n	8001f8c <_Color2IndexBulk+0x20>
 8001f84:	46f4      	mov	ip, lr
 8001f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001f8a:	4760      	bx	ip
 8001f8c:	490b      	ldr	r1, [pc, #44]	; (8001fbc <_Color2IndexBulk+0x50>)
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <_Color2IndexBulk+0x54>)
 8001f90:	f856 2b04 	ldr.w	r2, [r6], #4
 8001f94:	3c01      	subs	r4, #1
 8001f96:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001f9a:	fa5f fe82 	uxtb.w	lr, r2
 8001f9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f811 e00e 	ldrb.w	lr, [r1, lr]
 8001fa8:	5c82      	ldrb	r2, [r0, r2]
 8001faa:	eb03 23ce 	add.w	r3, r3, lr, lsl #11
 8001fae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8001fb2:	802b      	strh	r3, [r5, #0]
 8001fb4:	443d      	add	r5, r7
 8001fb6:	d1eb      	bne.n	8001f90 <_Color2IndexBulk+0x24>
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	0800b2a0 	.word	0x0800b2a0
 8001fc0:	0800b1a0 	.word	0x0800b1a0
 8001fc4:	20025950 	.word	0x20025950

08001fc8 <_Index2ColorBulk>:
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fca:	4e15      	ldr	r6, [pc, #84]	; (8002020 <_Index2ColorBulk+0x58>)
 8001fcc:	4686      	mov	lr, r0
 8001fce:	460f      	mov	r7, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	6876      	ldr	r6, [r6, #4]
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	b11e      	cbz	r6, 8001fe0 <_Index2ColorBulk+0x18>
 8001fd8:	46b4      	mov	ip, r6
 8001fda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001fde:	4760      	bx	ip
 8001fe0:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
 8001fe4:	1e50      	subs	r0, r2, #1
 8001fe6:	4e0f      	ldr	r6, [pc, #60]	; (8002024 <_Index2ColorBulk+0x5c>)
 8001fe8:	3901      	subs	r1, #1
 8001fea:	fb03 e000 	mla	r0, r3, r0, lr
 8001fee:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8001ff2:	4f0d      	ldr	r7, [pc, #52]	; (8002028 <_Index2ColorBulk+0x60>)
 8001ff4:	8802      	ldrh	r2, [r0, #0]
 8001ff6:	3c01      	subs	r4, #1
 8001ff8:	eba0 0005 	sub.w	r0, r0, r5
 8001ffc:	f002 031f 	and.w	r3, r2, #31
 8002000:	f816 e003 	ldrb.w	lr, [r6, r3]
 8002004:	ea4f 23d2 	mov.w	r3, r2, lsr #11
 8002008:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800200c:	5cf3      	ldrb	r3, [r6, r3]
 800200e:	5cba      	ldrb	r2, [r7, r2]
 8002010:	eb03 430e 	add.w	r3, r3, lr, lsl #16
 8002014:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002018:	f841 3904 	str.w	r3, [r1], #-4
 800201c:	d1ea      	bne.n	8001ff4 <_Index2ColorBulk+0x2c>
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002020:	20025950 	.word	0x20025950
 8002024:	0800b4e0 	.word	0x0800b4e0
 8002028:	0800b4a0 	.word	0x0800b4a0

0800202c <_PushFreeBlock>:
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <_PushFreeBlock+0x20>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	3201      	adds	r2, #1
 8002032:	b510      	push	{r4, lr}
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002038:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800203a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800203e:	604c      	str	r4, [r1, #4]
 8002040:	2100      	movs	r1, #0
 8002042:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8002046:	6258      	str	r0, [r3, #36]	; 0x24
 8002048:	bd10      	pop	{r4, pc}
 800204a:	bf00      	nop
 800204c:	20025af4 	.word	0x20025af4

08002050 <_RemoveFreeBlock>:
 8002050:	b510      	push	{r4, lr}
 8002052:	230f      	movs	r3, #15
 8002054:	6844      	ldr	r4, [r0, #4]
 8002056:	490d      	ldr	r1, [pc, #52]	; (800208c <_RemoveFreeBlock+0x3c>)
 8002058:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800205c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800205e:	4294      	cmp	r4, r2
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <_RemoveFreeBlock+0x3c>)
 8002062:	d203      	bcs.n	800206c <_RemoveFreeBlock+0x1c>
 8002064:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002068:	d2f6      	bcs.n	8002058 <_RemoveFreeBlock+0x8>
 800206a:	bd10      	pop	{r4, pc}
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80c      	bhi.n	800208a <_RemoveFreeBlock+0x3a>
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	1b09      	subs	r1, r1, r4
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	6881      	ldr	r1, [r0, #8]
 8002078:	68c0      	ldr	r0, [r0, #12]
 800207a:	b101      	cbz	r1, 800207e <_RemoveFreeBlock+0x2e>
 800207c:	6048      	str	r0, [r1, #4]
 800207e:	b108      	cbz	r0, 8002084 <_RemoveFreeBlock+0x34>
 8002080:	6001      	str	r1, [r0, #0]
 8002082:	bd10      	pop	{r4, pc}
 8002084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002088:	6459      	str	r1, [r3, #68]	; 0x44
 800208a:	bd10      	pop	{r4, pc}
 800208c:	20025af4 	.word	0x20025af4

08002090 <_AddFreeMemory>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	4e27      	ldr	r6, [pc, #156]	; (8002130 <_AddFreeMemory+0xa0>)
 8002094:	4605      	mov	r5, r0
 8002096:	1808      	adds	r0, r1, r0
 8002098:	460c      	mov	r4, r1
 800209a:	68f3      	ldr	r3, [r6, #12]
 800209c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800209e:	3b01      	subs	r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	4283      	cmp	r3, r0
 80020a4:	d305      	bcc.n	80020b2 <_AddFreeMemory+0x22>
 80020a6:	594b      	ldr	r3, [r1, r5]
 80020a8:	b91b      	cbnz	r3, 80020b2 <_AddFreeMemory+0x22>
 80020aa:	6843      	ldr	r3, [r0, #4]
 80020ac:	441d      	add	r5, r3
 80020ae:	f7ff ffcf 	bl	8002050 <_RemoveFreeBlock>
 80020b2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80020b4:	429c      	cmp	r4, r3
 80020b6:	d90a      	bls.n	80020ce <_AddFreeMemory+0x3e>
 80020b8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80020bc:	1be7      	subs	r7, r4, r7
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b92b      	cbnz	r3, 80020ce <_AddFreeMemory+0x3e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	463c      	mov	r4, r7
 80020c6:	4638      	mov	r0, r7
 80020c8:	441d      	add	r5, r3
 80020ca:	f7ff ffc1 	bl	8002050 <_RemoveFreeBlock>
 80020ce:	230f      	movs	r3, #15
 80020d0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80020d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020d6:	4295      	cmp	r5, r2
 80020d8:	d203      	bcs.n	80020e2 <_AddFreeMemory+0x52>
 80020da:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80020de:	d2f7      	bcs.n	80020d0 <_AddFreeMemory+0x40>
 80020e0:	e023      	b.n	800212a <_AddFreeMemory+0x9a>
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	d821      	bhi.n	800212a <_AddFreeMemory+0x9a>
 80020e6:	3308      	adds	r3, #8
 80020e8:	1960      	adds	r0, r4, r5
 80020ea:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80020ee:	6851      	ldr	r1, [r2, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	6124      	str	r4, [r4, #16]
 80020f4:	60a1      	str	r1, [r4, #8]
 80020f6:	e884 0024 	stmia.w	r4, {r2, r5}
 80020fa:	f840 5c04 	str.w	r5, [r0, #-4]
 80020fe:	f104 0008 	add.w	r0, r4, #8
 8002102:	b101      	cbz	r1, 8002106 <_AddFreeMemory+0x76>
 8002104:	6048      	str	r0, [r1, #4]
 8002106:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800210a:	60a1      	str	r1, [r4, #8]
 800210c:	60e2      	str	r2, [r4, #12]
 800210e:	6058      	str	r0, [r3, #4]
 8002110:	6833      	ldr	r3, [r6, #0]
 8002112:	4907      	ldr	r1, [pc, #28]	; (8002130 <_AddFreeMemory+0xa0>)
 8002114:	18ea      	adds	r2, r5, r3
 8002116:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800211a:	6032      	str	r2, [r6, #0]
 800211c:	b92b      	cbnz	r3, 800212a <_AddFreeMemory+0x9a>
 800211e:	68cb      	ldr	r3, [r1, #12]
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	688a      	ldr	r2, [r1, #8]
 8002124:	4293      	cmp	r3, r2
 8002126:	bf88      	it	hi
 8002128:	608b      	strhi	r3, [r1, #8]
 800212a:	4628      	mov	r0, r5
 800212c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212e:	bf00      	nop
 8002130:	20025af4 	.word	0x20025af4

08002134 <_RemoveHoles>:
 8002134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	4f23      	ldr	r7, [pc, #140]	; (80021c8 <_RemoveHoles+0x94>)
 800213a:	4683      	mov	fp, r0
 800213c:	68fe      	ldr	r6, [r7, #12]
 800213e:	46b8      	mov	r8, r7
 8002140:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002142:	3e01      	subs	r6, #1
 8002144:	4426      	add	r6, r4
 8002146:	e894 0028 	ldmia.w	r4, {r3, r5}
 800214a:	bb9b      	cbnz	r3, 80021b4 <_RemoveHoles+0x80>
 800214c:	1961      	adds	r1, r4, r5
 800214e:	428e      	cmp	r6, r1
 8002150:	d930      	bls.n	80021b4 <_RemoveHoles+0x80>
 8002152:	f854 a005 	ldr.w	sl, [r4, r5]
 8002156:	f1ba 0f00 	cmp.w	sl, #0
 800215a:	d02b      	beq.n	80021b4 <_RemoveHoles+0x80>
 800215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215e:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d126      	bne.n	80021b4 <_RemoveHoles+0x80>
 8002166:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800216a:	4620      	mov	r0, r4
 800216c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	9101      	str	r1, [sp, #4]
 8002174:	f7ff ff6c 	bl	8002050 <_RemoveFreeBlock>
 8002178:	9901      	ldr	r1, [sp, #4]
 800217a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800217e:	6808      	ldr	r0, [r1, #0]
 8002180:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002184:	4620      	mov	r0, r4
 8002186:	6054      	str	r4, [r2, #4]
 8002188:	464a      	mov	r2, r9
 800218a:	f005 f90f 	bl	80073ac <memmove>
 800218e:	9b00      	ldr	r3, [sp, #0]
 8002190:	eb04 0109 	add.w	r1, r4, r9
 8002194:	4628      	mov	r0, r5
 8002196:	459a      	cmp	sl, r3
 8002198:	bf02      	ittt	eq
 800219a:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 800219e:	1b5b      	subeq	r3, r3, r5
 80021a0:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 80021a4:	f7ff ff74 	bl	8002090 <_AddFreeMemory>
 80021a8:	f1bb 0f00 	cmp.w	fp, #0
 80021ac:	d001      	beq.n	80021b2 <_RemoveHoles+0x7e>
 80021ae:	4558      	cmp	r0, fp
 80021b0:	d205      	bcs.n	80021be <_RemoveHoles+0x8a>
 80021b2:	464d      	mov	r5, r9
 80021b4:	442c      	add	r4, r5
 80021b6:	42a6      	cmp	r6, r4
 80021b8:	d8c5      	bhi.n	8002146 <_RemoveHoles+0x12>
 80021ba:	2001      	movs	r0, #1
 80021bc:	e000      	b.n	80021c0 <_RemoveHoles+0x8c>
 80021be:	2000      	movs	r0, #0
 80021c0:	b003      	add	sp, #12
 80021c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
 80021c8:	20025af4 	.word	0x20025af4

080021cc <GUI_ALLOC_FreeFixedBlock>:
 80021cc:	b128      	cbz	r0, 80021da <GUI_ALLOC_FreeFixedBlock+0xe>
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <GUI_ALLOC_FreeFixedBlock+0x10>)
 80021d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d2:	6002      	str	r2, [r0, #0]
 80021d4:	b102      	cbz	r2, 80021d8 <GUI_ALLOC_FreeFixedBlock+0xc>
 80021d6:	6050      	str	r0, [r2, #4]
 80021d8:	63d8      	str	r0, [r3, #60]	; 0x3c
 80021da:	4770      	bx	lr
 80021dc:	20025af4 	.word	0x20025af4

080021e0 <GUI_ALLOC_h2p>:
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <GUI_ALLOC_h2p+0x10>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80021e8:	6840      	ldr	r0, [r0, #4]
 80021ea:	3008      	adds	r0, #8
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20025af4 	.word	0x20025af4

080021f4 <GUI_ALLOC_LockH>:
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <GUI_ALLOC_LockH+0x18>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	3201      	adds	r2, #1
 80021fa:	61da      	str	r2, [r3, #28]
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 8002202:	3301      	adds	r3, #1
 8002204:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 8002208:	f7ff bfea 	b.w	80021e0 <GUI_ALLOC_h2p>
 800220c:	20025af4 	.word	0x20025af4

08002210 <GUI_ALLOC_UnlockH>:
 8002210:	6803      	ldr	r3, [r0, #0]
 8002212:	490a      	ldr	r1, [pc, #40]	; (800223c <GUI_ALLOC_UnlockH+0x2c>)
 8002214:	b530      	push	{r4, r5, lr}
 8002216:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800221a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800221c:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d903      	bls.n	800222c <GUI_ALLOC_UnlockH+0x1c>
 8002224:	69ca      	ldr	r2, [r1, #28]
 8002226:	b10a      	cbz	r2, 800222c <GUI_ALLOC_UnlockH+0x1c>
 8002228:	3a01      	subs	r2, #1
 800222a:	61ca      	str	r2, [r1, #28]
 800222c:	3b01      	subs	r3, #1
 800222e:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 8002232:	2300      	movs	r3, #0
 8002234:	6003      	str	r3, [r0, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	bd30      	pop	{r4, r5, pc}
 800223a:	bf00      	nop
 800223c:	20025af4 	.word	0x20025af4

08002240 <GUI_ALLOC_AssignMemory>:
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <GUI_ALLOC_AssignMemory+0xc>)
 8002242:	f021 0103 	bic.w	r1, r1, #3
 8002246:	6018      	str	r0, [r3, #0]
 8002248:	6059      	str	r1, [r3, #4]
 800224a:	4770      	bx	lr
 800224c:	20025958 	.word	0x20025958

08002250 <GUI_ALLOC_Free>:
 8002250:	b510      	push	{r4, lr}
 8002252:	4604      	mov	r4, r0
 8002254:	b160      	cbz	r0, 8002270 <GUI_ALLOC_Free+0x20>
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <GUI_ALLOC_Free+0x24>)
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	6848      	ldr	r0, [r1, #4]
 8002262:	f7ff ff15 	bl	8002090 <_AddFreeMemory>
 8002266:	4620      	mov	r0, r4
 8002268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800226c:	f7ff bede 	b.w	800202c <_PushFreeBlock>
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	20025af4 	.word	0x20025af4

08002278 <_EnlargeBlocks>:
 8002278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800227c:	4c22      	ldr	r4, [pc, #136]	; (8002308 <_EnlargeBlocks+0x90>)
 800227e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002280:	b93b      	cbnz	r3, 8002292 <_EnlargeBlocks+0x1a>
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <_EnlargeBlocks+0x94>)
 8002284:	689d      	ldr	r5, [r3, #8]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	3508      	adds	r5, #8
 800228a:	fbb3 f5f5 	udiv	r5, r3, r5
 800228e:	3502      	adds	r5, #2
 8002290:	e003      	b.n	800229a <_EnlargeBlocks+0x22>
 8002292:	6923      	ldr	r3, [r4, #16]
 8002294:	1d1d      	adds	r5, r3, #4
 8002296:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800229a:	00e8      	lsls	r0, r5, #3
 800229c:	f000 f8c0 	bl	8002420 <_Alloc>
 80022a0:	4680      	mov	r8, r0
 80022a2:	b360      	cbz	r0, 80022fe <_EnlargeBlocks+0x86>
 80022a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022a6:	6922      	ldr	r2, [r4, #16]
 80022a8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80022ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80022ae:	00d2      	lsls	r2, r2, #3
 80022b0:	685e      	ldr	r6, [r3, #4]
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <_EnlargeBlocks+0x98>)
 80022b4:	3608      	adds	r6, #8
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4630      	mov	r0, r6
 80022ba:	4798      	blx	r3
 80022bc:	6922      	ldr	r2, [r4, #16]
 80022be:	1e69      	subs	r1, r5, #1
 80022c0:	6366      	str	r6, [r4, #52]	; 0x34
 80022c2:	4613      	mov	r3, r2
 80022c4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d205      	bcs.n	80022d8 <_EnlargeBlocks+0x60>
 80022cc:	3301      	adds	r3, #1
 80022ce:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 80022d2:	f840 3c04 	str.w	r3, [r0, #-4]
 80022d6:	e7f7      	b.n	80022c8 <_EnlargeBlocks+0x50>
 80022d8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80022dc:	f04f 0800 	mov.w	r8, #0
 80022e0:	4638      	mov	r0, r7
 80022e2:	f8c6 8004 	str.w	r8, [r6, #4]
 80022e6:	6863      	ldr	r3, [r4, #4]
 80022e8:	6262      	str	r2, [r4, #36]	; 0x24
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	6125      	str	r5, [r4, #16]
 80022ee:	442b      	add	r3, r5
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	b13f      	cbz	r7, 8002304 <_EnlargeBlocks+0x8c>
 80022f4:	f7ff ffac 	bl	8002250 <GUI_ALLOC_Free>
 80022f8:	4640      	mov	r0, r8
 80022fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022fe:	2001      	movs	r0, #1
 8002300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002308:	20025af4 	.word	0x20025af4
 800230c:	20025958 	.word	0x20025958
 8002310:	200000a8 	.word	0x200000a8

08002314 <_InitOnce>:
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <_InitOnce+0x60>)
 8002316:	b570      	push	{r4, r5, r6, lr}
 8002318:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800231c:	bb43      	cbnz	r3, 8002370 <_InitOnce+0x5c>
 800231e:	2301      	movs	r3, #1
 8002320:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <_InitOnce+0x64>)
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	b911      	cbnz	r1, 8002330 <_InitOnce+0x1c>
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	0889      	lsrs	r1, r1, #2
 800232e:	6099      	str	r1, [r3, #8]
 8002330:	215a      	movs	r1, #90	; 0x5a
 8002332:	2610      	movs	r6, #16
 8002334:	6211      	str	r1, [r2, #32]
 8002336:	2100      	movs	r1, #0
 8002338:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 800233c:	fa06 f501 	lsl.w	r5, r6, r1
 8002340:	3101      	adds	r1, #1
 8002342:	4c0c      	ldr	r4, [pc, #48]	; (8002374 <_InitOnce+0x60>)
 8002344:	6405      	str	r5, [r0, #64]	; 0x40
 8002346:	2910      	cmp	r1, #16
 8002348:	d1f6      	bne.n	8002338 <_InitOnce+0x24>
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	2501      	movs	r5, #1
 800234e:	6858      	ldr	r0, [r3, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	63a1      	str	r1, [r4, #56]	; 0x38
 8002354:	6123      	str	r3, [r4, #16]
 8002356:	f1a0 0314 	sub.w	r3, r0, #20
 800235a:	60e0      	str	r0, [r4, #12]
 800235c:	440b      	add	r3, r1
 800235e:	6363      	str	r3, [r4, #52]	; 0x34
 8002360:	605d      	str	r5, [r3, #4]
 8002362:	6265      	str	r5, [r4, #36]	; 0x24
 8002364:	6065      	str	r5, [r4, #4]
 8002366:	f7ff fe93 	bl	8002090 <_AddFreeMemory>
 800236a:	f7ff ff85 	bl	8002278 <_EnlargeBlocks>
 800236e:	6325      	str	r5, [r4, #48]	; 0x30
 8002370:	bd70      	pop	{r4, r5, r6, pc}
 8002372:	bf00      	nop
 8002374:	20025af4 	.word	0x20025af4
 8002378:	20025958 	.word	0x20025958

0800237c <GUI_ALLOC_GetFixedBlock>:
 800237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002380:	4607      	mov	r7, r0
 8002382:	4e26      	ldr	r6, [pc, #152]	; (800241c <GUI_ALLOC_GetFixedBlock+0xa0>)
 8002384:	f7ff ffc6 	bl	8002314 <_InitOnce>
 8002388:	3703      	adds	r7, #3
 800238a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800238c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800238e:	f027 0703 	bic.w	r7, r7, #3
 8002392:	4614      	mov	r4, r2
 8002394:	3704      	adds	r7, #4
 8002396:	4287      	cmp	r7, r0
 8002398:	bf38      	it	cc
 800239a:	4607      	movcc	r7, r0
 800239c:	b134      	cbz	r4, 80023ac <GUI_ALLOC_GetFixedBlock+0x30>
 800239e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80023a2:	429f      	cmp	r7, r3
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	d02c      	beq.n	8002402 <GUI_ALLOC_GetFixedBlock+0x86>
 80023a8:	461c      	mov	r4, r3
 80023aa:	e7f7      	b.n	800239c <GUI_ALLOC_GetFixedBlock+0x20>
 80023ac:	68f3      	ldr	r3, [r6, #12]
 80023ae:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80023b0:	eb02 0803 	add.w	r8, r2, r3
 80023b4:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80023b8:	ebc5 0508 	rsb	r5, r5, r8
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	b133      	cbz	r3, 80023ce <GUI_ALLOC_GetFixedBlock+0x52>
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff feb7 	bl	8002134 <_RemoveHoles>
 80023c6:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80023ca:	ebc5 0508 	rsb	r5, r5, r8
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	bb0b      	cbnz	r3, 8002416 <GUI_ALLOC_GetFixedBlock+0x9a>
 80023d2:	686b      	ldr	r3, [r5, #4]
 80023d4:	429f      	cmp	r7, r3
 80023d6:	dc1e      	bgt.n	8002416 <GUI_ALLOC_GetFixedBlock+0x9a>
 80023d8:	4628      	mov	r0, r5
 80023da:	1d1c      	adds	r4, r3, #4
 80023dc:	f7ff fe38 	bl	8002050 <_RemoveFreeBlock>
 80023e0:	68f3      	ldr	r3, [r6, #12]
 80023e2:	6868      	ldr	r0, [r5, #4]
 80023e4:	1be4      	subs	r4, r4, r7
 80023e6:	1bdb      	subs	r3, r3, r7
 80023e8:	1bc0      	subs	r0, r0, r7
 80023ea:	442c      	add	r4, r5
 80023ec:	60f3      	str	r3, [r6, #12]
 80023ee:	6973      	ldr	r3, [r6, #20]
 80023f0:	443b      	add	r3, r7
 80023f2:	6173      	str	r3, [r6, #20]
 80023f4:	d002      	beq.n	80023fc <GUI_ALLOC_GetFixedBlock+0x80>
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7ff fe4a 	bl	8002090 <_AddFreeMemory>
 80023fc:	f844 7c04 	str.w	r7, [r4, #-4]
 8002400:	e009      	b.n	8002416 <GUI_ALLOC_GetFixedBlock+0x9a>
 8002402:	b10b      	cbz	r3, 8002408 <GUI_ALLOC_GetFixedBlock+0x8c>
 8002404:	6861      	ldr	r1, [r4, #4]
 8002406:	6059      	str	r1, [r3, #4]
 8002408:	6861      	ldr	r1, [r4, #4]
 800240a:	b101      	cbz	r1, 800240e <GUI_ALLOC_GetFixedBlock+0x92>
 800240c:	600b      	str	r3, [r1, #0]
 800240e:	42a2      	cmp	r2, r4
 8002410:	d101      	bne.n	8002416 <GUI_ALLOC_GetFixedBlock+0x9a>
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	63f3      	str	r3, [r6, #60]	; 0x3c
 8002416:	4620      	mov	r0, r4
 8002418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800241c:	20025af4 	.word	0x20025af4

08002420 <_Alloc>:
 8002420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002424:	4e39      	ldr	r6, [pc, #228]	; (800250c <_Alloc+0xec>)
 8002426:	4604      	mov	r4, r0
 8002428:	f7ff ff74 	bl	8002314 <_InitOnce>
 800242c:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	42ac      	cmp	r4, r5
 8002432:	bf24      	itt	cs
 8002434:	3403      	addcs	r4, #3
 8002436:	f024 0503 	biccs.w	r5, r4, #3
 800243a:	4c34      	ldr	r4, [pc, #208]	; (800250c <_Alloc+0xec>)
 800243c:	350c      	adds	r5, #12
 800243e:	42ab      	cmp	r3, r5
 8002440:	d33e      	bcc.n	80024c0 <_Alloc+0xa0>
 8002442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002444:	6862      	ldr	r2, [r4, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	d90f      	bls.n	800246a <_Alloc+0x4a>
 800244a:	6873      	ldr	r3, [r6, #4]
 800244c:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8002454:	6073      	str	r3, [r6, #4]
 8002456:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002458:	eb03 0208 	add.w	r2, r3, r8
 800245c:	6852      	ldr	r2, [r2, #4]
 800245e:	6272      	str	r2, [r6, #36]	; 0x24
 8002460:	2201      	movs	r2, #1
 8002462:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8002466:	b957      	cbnz	r7, 800247e <_Alloc+0x5e>
 8002468:	e02a      	b.n	80024c0 <_Alloc+0xa0>
 800246a:	3b01      	subs	r3, #1
 800246c:	6323      	str	r3, [r4, #48]	; 0x30
 800246e:	f7ff ff03 	bl	8002278 <_EnlargeBlocks>
 8002472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002474:	3301      	adds	r3, #1
 8002476:	6323      	str	r3, [r4, #48]	; 0x30
 8002478:	2800      	cmp	r0, #0
 800247a:	d0e6      	beq.n	800244a <_Alloc+0x2a>
 800247c:	e020      	b.n	80024c0 <_Alloc+0xa0>
 800247e:	230f      	movs	r3, #15
 8002480:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8002484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002486:	4295      	cmp	r5, r2
 8002488:	d20c      	bcs.n	80024a4 <_Alloc+0x84>
 800248a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800248e:	d2f7      	bcs.n	8002480 <_Alloc+0x60>
 8002490:	e008      	b.n	80024a4 <_Alloc+0x84>
 8002492:	6894      	ldr	r4, [r2, #8]
 8002494:	b12c      	cbz	r4, 80024a2 <_Alloc+0x82>
 8002496:	6862      	ldr	r2, [r4, #4]
 8002498:	4295      	cmp	r5, r2
 800249a:	d914      	bls.n	80024c6 <_Alloc+0xa6>
 800249c:	68a2      	ldr	r2, [r4, #8]
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d1f7      	bne.n	8002492 <_Alloc+0x72>
 80024a2:	3301      	adds	r3, #1
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d803      	bhi.n	80024b0 <_Alloc+0x90>
 80024a8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80024ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024ae:	e7f6      	b.n	800249e <_Alloc+0x7e>
 80024b0:	4628      	mov	r0, r5
 80024b2:	f7ff fe3f 	bl	8002134 <_RemoveHoles>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0e1      	beq.n	800247e <_Alloc+0x5e>
 80024ba:	4638      	mov	r0, r7
 80024bc:	f7ff fdb6 	bl	800202c <_PushFreeBlock>
 80024c0:	2000      	movs	r0, #0
 80024c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80024ca:	4620      	mov	r0, r4
 80024cc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80024ce:	ebc5 0209 	rsb	r2, r5, r9
 80024d2:	330c      	adds	r3, #12
 80024d4:	429a      	cmp	r2, r3
 80024d6:	bf38      	it	cc
 80024d8:	464d      	movcc	r5, r9
 80024da:	f7ff fdb9 	bl	8002050 <_RemoveFreeBlock>
 80024de:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80024e0:	1961      	adds	r1, r4, r5
 80024e2:	454d      	cmp	r5, r9
 80024e4:	4498      	add	r8, r3
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f8c8 4004 	str.w	r4, [r8, #4]
 80024ee:	6027      	str	r7, [r4, #0]
 80024f0:	6065      	str	r5, [r4, #4]
 80024f2:	60a3      	str	r3, [r4, #8]
 80024f4:	6124      	str	r4, [r4, #16]
 80024f6:	f841 5c04 	str.w	r5, [r1, #-4]
 80024fa:	da03      	bge.n	8002504 <_Alloc+0xe4>
 80024fc:	ebc5 0009 	rsb	r0, r5, r9
 8002500:	f7ff fdc6 	bl	8002090 <_AddFreeMemory>
 8002504:	4638      	mov	r0, r7
 8002506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800250a:	bf00      	nop
 800250c:	20025af4 	.word	0x20025af4

08002510 <GUI_ALLOC_AllocNoInit>:
 8002510:	b108      	cbz	r0, 8002516 <GUI_ALLOC_AllocNoInit+0x6>
 8002512:	f7ff bf85 	b.w	8002420 <_Alloc>
 8002516:	4770      	bx	lr

08002518 <GUI_ALLOC_AllocZero>:
 8002518:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800251a:	4606      	mov	r6, r0
 800251c:	f7ff fff8 	bl	8002510 <GUI_ALLOC_AllocNoInit>
 8002520:	4605      	mov	r5, r0
 8002522:	b160      	cbz	r0, 800253e <GUI_ALLOC_AllocZero+0x26>
 8002524:	f7ff fe66 	bl	80021f4 <GUI_ALLOC_LockH>
 8002528:	ac02      	add	r4, sp, #8
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <GUI_ALLOC_AllocZero+0x2c>)
 800252c:	4632      	mov	r2, r6
 800252e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8002532:	2100      	movs	r1, #0
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4798      	blx	r3
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff fe69 	bl	8002210 <GUI_ALLOC_UnlockH>
 800253e:	4628      	mov	r0, r5
 8002540:	b002      	add	sp, #8
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	200000ac 	.word	0x200000ac

08002548 <GUI_CalcColorDist>:
 8002548:	b2c3      	uxtb	r3, r0
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	1a9a      	subs	r2, r3, r2
 800254e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002552:	b292      	uxth	r2, r2
 8002554:	b510      	push	{r4, lr}
 8002556:	b214      	sxth	r4, r2
 8002558:	2c00      	cmp	r4, #0
 800255a:	bfbc      	itt	lt
 800255c:	4252      	neglt	r2, r2
 800255e:	b214      	sxthlt	r4, r2
 8002560:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002564:	0c09      	lsrs	r1, r1, #16
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800256c:	b29b      	uxth	r3, r3
 800256e:	b289      	uxth	r1, r1
 8002570:	b21a      	sxth	r2, r3
 8002572:	b208      	sxth	r0, r1
 8002574:	2a00      	cmp	r2, #0
 8002576:	bfbc      	itt	lt
 8002578:	425b      	neglt	r3, r3
 800257a:	b21a      	sxthlt	r2, r3
 800257c:	2800      	cmp	r0, #0
 800257e:	bfb8      	it	lt
 8002580:	4249      	neglt	r1, r1
 8002582:	fb02 f202 	mul.w	r2, r2, r2
 8002586:	bfb8      	it	lt
 8002588:	b208      	sxthlt	r0, r1
 800258a:	fb04 2204 	mla	r2, r4, r4, r2
 800258e:	b280      	uxth	r0, r0
 8002590:	fb00 2000 	mla	r0, r0, r0, r2
 8002594:	bd10      	pop	{r4, pc}

08002596 <GUI_GetBkColor>:
 8002596:	b508      	push	{r3, lr}
 8002598:	f001 f870 	bl	800367c <LCD_GetBkColorIndex>
 800259c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025a0:	f000 bf72 	b.w	8003488 <LCD_Index2Color>

080025a4 <GUI_GetColor>:
 80025a4:	b508      	push	{r3, lr}
 80025a6:	f001 f871 	bl	800368c <LCD_GetColorIndex>
 80025aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025ae:	f000 bf6b 	b.w	8003488 <LCD_Index2Color>
	...

080025b4 <GUI_GetVersionString>:
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <GUI_GetVersionString+0x14>)
 80025b6:	2335      	movs	r3, #53	; 0x35
 80025b8:	7003      	strb	r3, [r0, #0]
 80025ba:	2334      	movs	r3, #52	; 0x34
 80025bc:	7083      	strb	r3, [r0, #2]
 80025be:	70c3      	strb	r3, [r0, #3]
 80025c0:	2361      	movs	r3, #97	; 0x61
 80025c2:	7103      	strb	r3, [r0, #4]
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000090 	.word	0x20000090

080025cc <GUI_MergeRect>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	b338      	cbz	r0, 8002620 <GUI_MergeRect+0x54>
 80025d0:	b309      	cbz	r1, 8002616 <GUI_MergeRect+0x4a>
 80025d2:	b30a      	cbz	r2, 8002618 <GUI_MergeRect+0x4c>
 80025d4:	f9b2 4000 	ldrsh.w	r4, [r2]
 80025d8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80025dc:	42a3      	cmp	r3, r4
 80025de:	bfa8      	it	ge
 80025e0:	4623      	movge	r3, r4
 80025e2:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80025e6:	8003      	strh	r3, [r0, #0]
 80025e8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80025ec:	42a3      	cmp	r3, r4
 80025ee:	bfa8      	it	ge
 80025f0:	4623      	movge	r3, r4
 80025f2:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80025f6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80025fa:	8043      	strh	r3, [r0, #2]
 80025fc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8002600:	42a3      	cmp	r3, r4
 8002602:	bfb8      	it	lt
 8002604:	4623      	movlt	r3, r4
 8002606:	8083      	strh	r3, [r0, #4]
 8002608:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800260c:	4293      	cmp	r3, r2
 800260e:	bfb8      	it	lt
 8002610:	4613      	movlt	r3, r2
 8002612:	80c3      	strh	r3, [r0, #6]
 8002614:	bd10      	pop	{r4, pc}
 8002616:	4611      	mov	r1, r2
 8002618:	680b      	ldr	r3, [r1, #0]
 800261a:	6003      	str	r3, [r0, #0]
 800261c:	684b      	ldr	r3, [r1, #4]
 800261e:	6043      	str	r3, [r0, #4]
 8002620:	bd10      	pop	{r4, pc}

08002622 <GUI_MoveRect>:
 8002622:	b168      	cbz	r0, 8002640 <GUI_MoveRect+0x1e>
 8002624:	b289      	uxth	r1, r1
 8002626:	8803      	ldrh	r3, [r0, #0]
 8002628:	b292      	uxth	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	8003      	strh	r3, [r0, #0]
 800262e:	8883      	ldrh	r3, [r0, #4]
 8002630:	4419      	add	r1, r3
 8002632:	8843      	ldrh	r3, [r0, #2]
 8002634:	4413      	add	r3, r2
 8002636:	8081      	strh	r1, [r0, #4]
 8002638:	8043      	strh	r3, [r0, #2]
 800263a:	88c3      	ldrh	r3, [r0, #6]
 800263c:	441a      	add	r2, r3
 800263e:	80c2      	strh	r2, [r0, #6]
 8002640:	4770      	bx	lr
	...

08002644 <GUI_GotoXY>:
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <GUI_GotoXY+0xc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	8458      	strh	r0, [r3, #34]	; 0x22
 800264a:	2000      	movs	r0, #0
 800264c:	8499      	strh	r1, [r3, #36]	; 0x24
 800264e:	4770      	bx	lr
 8002650:	200000a4 	.word	0x200000a4

08002654 <GUI_RectsIntersect>:
 8002654:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8002658:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800265c:	429a      	cmp	r2, r3
 800265e:	dc14      	bgt.n	800268a <GUI_RectsIntersect+0x36>
 8002660:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8002664:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8002668:	429a      	cmp	r2, r3
 800266a:	dc0e      	bgt.n	800268a <GUI_RectsIntersect+0x36>
 800266c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8002670:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	dc08      	bgt.n	800268a <GUI_RectsIntersect+0x36>
 8002678:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800267c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002680:	4283      	cmp	r3, r0
 8002682:	bfcc      	ite	gt
 8002684:	2000      	movgt	r0, #0
 8002686:	2001      	movle	r0, #1
 8002688:	4770      	bx	lr
 800268a:	2000      	movs	r0, #0
 800268c:	4770      	bx	lr

0800268e <GUI_SelectLCD>:
 800268e:	b508      	push	{r3, lr}
 8002690:	f001 f8f2 	bl	8003878 <LCD_SelectLCD>
 8002694:	f001 f958 	bl	8003948 <LCD_UpdateColorIndices>
 8002698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800269c:	f004 b840 	b.w	8006720 <WM_Activate>

080026a0 <GUI_SetBkColor>:
 80026a0:	f000 bf38 	b.w	8003514 <LCD_SetBkColor>

080026a4 <GUI_SetColor>:
 80026a4:	f000 bf3c 	b.w	8003520 <LCD_SetColor>

080026a8 <GUI_SetFont>:
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <GUI_SetFont+0x10>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	b100      	cbz	r0, 80026b2 <GUI_SetFont+0xa>
 80026b0:	61d8      	str	r0, [r3, #28]
 80026b2:	4610      	mov	r0, r2
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	200000a4 	.word	0x200000a4

080026bc <GUI_SetOrg>:
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <GUI_SetOrg+0x28>)
 80026be:	460a      	mov	r2, r1
 80026c0:	b410      	push	{r4}
 80026c2:	8018      	strh	r0, [r3, #0]
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <GUI_SetOrg+0x2c>)
 80026c6:	8019      	strh	r1, [r3, #0]
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <GUI_SetOrg+0x30>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	7c59      	ldrb	r1, [r3, #17]
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <GUI_SetOrg+0x34>)
 80026d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	6a0c      	ldr	r4, [r1, #32]
 80026d8:	4601      	mov	r1, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	4623      	mov	r3, r4
 80026de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026e2:	4718      	bx	r3
 80026e4:	20025bdc 	.word	0x20025bdc
 80026e8:	20025bcc 	.word	0x20025bcc
 80026ec:	200000a4 	.word	0x200000a4
 80026f0:	20025c04 	.word	0x20025c04

080026f4 <_InitContext>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4e1a      	ldr	r6, [pc, #104]	; (8002760 <_InitContext+0x6c>)
 80026f8:	4604      	mov	r4, r0
 80026fa:	4d1a      	ldr	r5, [pc, #104]	; (8002764 <_InitContext+0x70>)
 80026fc:	f106 0384 	add.w	r3, r6, #132	; 0x84
 8002700:	f104 0108 	add.w	r1, r4, #8
 8002704:	6703      	str	r3, [r0, #112]	; 0x70
 8002706:	68eb      	ldr	r3, [r5, #12]
 8002708:	1d1a      	adds	r2, r3, #4
 800270a:	639b      	str	r3, [r3, #56]	; 0x38
 800270c:	641b      	str	r3, [r3, #64]	; 0x40
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002710:	f103 0208 	add.w	r2, r3, #8
 8002714:	6142      	str	r2, [r0, #20]
 8002716:	7c5a      	ldrb	r2, [r3, #17]
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_InitContext+0x74>)
 800271a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800271e:	68c3      	ldr	r3, [r0, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4798      	blx	r3
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_InitContext+0x78>)
 8002726:	6663      	str	r3, [r4, #100]	; 0x64
 8002728:	686b      	ldr	r3, [r5, #4]
 800272a:	61e3      	str	r3, [r4, #28]
 800272c:	68eb      	ldr	r3, [r5, #12]
 800272e:	3308      	adds	r3, #8
 8002730:	6163      	str	r3, [r4, #20]
 8002732:	2301      	movs	r3, #1
 8002734:	7623      	strb	r3, [r4, #24]
 8002736:	76e3      	strb	r3, [r4, #27]
 8002738:	f004 f8ca 	bl	80068d0 <WM_GetDesktopWindow>
 800273c:	2303      	movs	r3, #3
 800273e:	64a0      	str	r0, [r4, #72]	; 0x48
 8002740:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002744:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002748:	6830      	ldr	r0, [r6, #0]
 800274a:	6323      	str	r3, [r4, #48]	; 0x30
 800274c:	6363      	str	r3, [r4, #52]	; 0x34
 800274e:	f000 fee1 	bl	8003514 <LCD_SetBkColor>
 8002752:	68a8      	ldr	r0, [r5, #8]
 8002754:	f000 fee4 	bl	8003520 <LCD_SetColor>
 8002758:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_InitContext+0x7c>)
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <_InitContext+0x80>)
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	2002596c 	.word	0x2002596c
 8002764:	20000098 	.word	0x20000098
 8002768:	20025c04 	.word	0x20025c04
 800276c:	0800b178 	.word	0x0800b178
 8002770:	0800b190 	.word	0x0800b190
 8002774:	20025bfc 	.word	0x20025bfc

08002778 <_OnExit>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2400      	movs	r4, #0
 800277c:	4d0a      	ldr	r5, [pc, #40]	; (80027a8 <_OnExit+0x30>)
 800277e:	4e0b      	ldr	r6, [pc, #44]	; (80027ac <_OnExit+0x34>)
 8002780:	2274      	movs	r2, #116	; 0x74
 8002782:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8002786:	3504      	adds	r5, #4
 8002788:	6833      	ldr	r3, [r6, #0]
 800278a:	4621      	mov	r1, r4
 800278c:	4628      	mov	r0, r5
 800278e:	4798      	blx	r3
 8002790:	6833      	ldr	r3, [r6, #0]
 8002792:	2208      	movs	r2, #8
 8002794:	4621      	mov	r1, r4
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <_OnExit+0x38>)
 8002798:	4798      	blx	r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <_OnExit+0x3c>)
 800279c:	60dd      	str	r5, [r3, #12]
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <_OnExit+0x40>)
 80027a0:	701c      	strb	r4, [r3, #0]
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <_OnExit+0x44>)
 80027a4:	601c      	str	r4, [r3, #0]
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	2002596c 	.word	0x2002596c
 80027ac:	200000ac 	.word	0x200000ac
 80027b0:	20025c04 	.word	0x20025c04
 80027b4:	20000098 	.word	0x20000098
 80027b8:	20025bec 	.word	0x20025bec
 80027bc:	20025bc8 	.word	0x20025bc8

080027c0 <GUI_ClearRect>:
 80027c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80027c4:	4604      	mov	r4, r0
 80027c6:	2004      	movs	r0, #4
 80027c8:	4616      	mov	r6, r2
 80027ca:	461f      	mov	r7, r3
 80027cc:	460d      	mov	r5, r1
 80027ce:	f000 fb65 	bl	8002e9c <LCD_SetDrawMode>
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <GUI_ClearRect+0x60>)
 80027d4:	4680      	mov	r8, r0
 80027d6:	4668      	mov	r0, sp
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	4414      	add	r4, r2
 80027e0:	4416      	add	r6, r2
 80027e2:	441d      	add	r5, r3
 80027e4:	441f      	add	r7, r3
 80027e6:	f8ad 4000 	strh.w	r4, [sp]
 80027ea:	f8ad 6004 	strh.w	r6, [sp, #4]
 80027ee:	f8ad 5002 	strh.w	r5, [sp, #2]
 80027f2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80027f6:	f003 ff13 	bl	8006620 <WM__InitIVRSearch>
 80027fa:	b928      	cbnz	r0, 8002808 <GUI_ClearRect+0x48>
 80027fc:	4640      	mov	r0, r8
 80027fe:	f000 fb4d 	bl	8002e9c <LCD_SetDrawMode>
 8002802:	b002      	add	sp, #8
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002808:	463b      	mov	r3, r7
 800280a:	4632      	mov	r2, r6
 800280c:	4629      	mov	r1, r5
 800280e:	4620      	mov	r0, r4
 8002810:	f000 fba2 	bl	8002f58 <LCD_FillRect>
 8002814:	f003 fe42 	bl	800649c <WM__GetNextIVR>
 8002818:	2800      	cmp	r0, #0
 800281a:	d1f5      	bne.n	8002808 <GUI_ClearRect+0x48>
 800281c:	e7ee      	b.n	80027fc <GUI_ClearRect+0x3c>
 800281e:	bf00      	nop
 8002820:	20000098 	.word	0x20000098

08002824 <GUI_Clear>:
 8002824:	2100      	movs	r1, #0
 8002826:	b510      	push	{r4, lr}
 8002828:	4608      	mov	r0, r1
 800282a:	f7ff ff0b 	bl	8002644 <GUI_GotoXY>
 800282e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002832:	4903      	ldr	r1, [pc, #12]	; (8002840 <GUI_Clear+0x1c>)
 8002834:	461a      	mov	r2, r3
 8002836:	4608      	mov	r0, r1
 8002838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800283c:	f7ff bfc0 	b.w	80027c0 <GUI_ClearRect>
 8002840:	ffffc001 	.word	0xffffc001

08002844 <GUI__Config>:
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	4d20      	ldr	r5, [pc, #128]	; (80028c8 <GUI__Config+0x84>)
 8002848:	b085      	sub	sp, #20
 800284a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	d137      	bne.n	80028c2 <GUI__Config+0x7e>
 8002852:	2301      	movs	r3, #1
 8002854:	466a      	mov	r2, sp
 8002856:	466e      	mov	r6, sp
 8002858:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <GUI__Config+0x88>)
 800285e:	f103 0708 	add.w	r7, r3, #8
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	3308      	adds	r3, #8
 8002866:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800286a:	4614      	mov	r4, r2
 800286c:	42bb      	cmp	r3, r7
 800286e:	c403      	stmia	r4!, {r0, r1}
 8002870:	4622      	mov	r2, r4
 8002872:	d1f6      	bne.n	8002862 <GUI__Config+0x1e>
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	8899      	ldrh	r1, [r3, #4]
 8002878:	799b      	ldrb	r3, [r3, #6]
 800287a:	6020      	str	r0, [r4, #0]
 800287c:	71a3      	strb	r3, [r4, #6]
 800287e:	4633      	mov	r3, r6
 8002880:	80a1      	strh	r1, [r4, #4]
 8002882:	4c13      	ldr	r4, [pc, #76]	; (80028d0 <GUI__Config+0x8c>)
 8002884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002888:	f804 2b01 	strb.w	r2, [r4], #1
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	2a00      	cmp	r2, #0
 8002890:	d1f8      	bne.n	8002884 <GUI__Config+0x40>
 8002892:	f7ff fe8f 	bl	80025b4 <GUI_GetVersionString>
 8002896:	f810 3b01 	ldrb.w	r3, [r0], #1
 800289a:	4622      	mov	r2, r4
 800289c:	f804 3b01 	strb.w	r3, [r4], #1
 80028a0:	7803      	ldrb	r3, [r0, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f7      	bne.n	8002896 <GUI__Config+0x52>
 80028a6:	7053      	strb	r3, [r2, #1]
 80028a8:	f7ff fab0 	bl	8001e0c <GUI_X_Config>
 80028ac:	f7ff fae6 	bl	8001e7c <LCD_X_Config>
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <GUI__Config+0x90>)
 80028b2:	4809      	ldr	r0, [pc, #36]	; (80028d8 <GUI__Config+0x94>)
 80028b4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80028b8:	b005      	add	sp, #20
 80028ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80028be:	f000 b8d1 	b.w	8002a64 <GUI__RegisterExit>
 80028c2:	b005      	add	sp, #20
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2002596c 	.word	0x2002596c
 80028cc:	0800b180 	.word	0x0800b180
 80028d0:	200259f0 	.word	0x200259f0
 80028d4:	08002779 	.word	0x08002779
 80028d8:	20025a04 	.word	0x20025a04

080028dc <GUI_Init>:
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <GUI_Init+0x154>)
 80028e4:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <GUI_Init+0x154>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <GUI_Init+0x158>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f6:	f240 4249 	movw	r2, #1097	; 0x449
 80028fa:	4293      	cmp	r3, r2
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <GUI_Init+0x158>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290c:	f240 4151 	movw	r1, #1105	; 0x451
 8002910:	428b      	cmp	r3, r1
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <GUI_Init+0x158>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002928:	f240 4252 	movw	r2, #1106	; 0x452
 800292c:	4293      	cmp	r3, r2
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	430b      	orrs	r3, r1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <GUI_Init+0x82>
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <GUI_Init+0x15c>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	bf00      	nop
 8002944:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <GUI_Init+0x15c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1fb      	bne.n	8002944 <GUI_Init+0x68>
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <GUI_Init+0x160>)
 800294e:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <GUI_Init+0x164>)
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <GUI_Init+0x160>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <GUI_Init+0x168>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <GUI_Init+0xb2>
 800295c:	e7fe      	b.n	800295c <GUI_Init+0x80>
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <GUI_Init+0x16c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800296a:	d110      	bne.n	800298e <GUI_Init+0xb2>
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <GUI_Init+0x170>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	bf00      	nop
 8002974:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <GUI_Init+0x170>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1fb      	bne.n	8002974 <GUI_Init+0x98>
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <GUI_Init+0x174>)
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <GUI_Init+0x164>)
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <GUI_Init+0x174>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <GUI_Init+0x168>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d000      	beq.n	800298e <GUI_Init+0xb2>
 800298c:	e7fe      	b.n	800298c <GUI_Init+0xb0>
 800298e:	f7ff ff59 	bl	8002844 <GUI__Config>
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <GUI_Init+0x178>)
 8002994:	222e      	movs	r2, #46	; 0x2e
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	f7ff fa40 	bl	8001e1c <GUI_X_Init>
 800299c:	482e      	ldr	r0, [pc, #184]	; (8002a58 <GUI_Init+0x17c>)
 800299e:	f7ff fea9 	bl	80026f4 <_InitContext>
 80029a2:	f000 fd11 	bl	80033c8 <emWin_LCD_Init>
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	f000 fef6 	bl	8003798 <LCD_GetXSizeDisplay>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2dc      	uxtb	r4, r3
 80029b8:	f000 fef4 	bl	80037a4 <LCD_GetYSizeDisplay>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4323      	orrs	r3, r4
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <GUI_Init+0x108>
 80029d0:	f000 fed6 	bl	8003780 <LCD_GetXSizeMax>
 80029d4:	4604      	mov	r4, r0
 80029d6:	f000 fed6 	bl	8003786 <LCD_GetYSizeMax>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	4620      	mov	r0, r4
 80029e0:	f000 fed4 	bl	800378c <LCD_SetDisplaySize>
 80029e4:	2100      	movs	r1, #0
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fe68 	bl	80026bc <GUI_SetOrg>
 80029ec:	f003 fef8 	bl	80067e0 <WM_Init>
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <GUI_Init+0x180>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <GUI_Init+0x142>
 80029f8:	e00d      	b.n	8002a16 <GUI_Init+0x13a>
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <GUI_Init+0x180>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <GUI_Init+0x130>
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <GUI_Init+0x180>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4798      	blx	r3
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <GUI_Init+0x180>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <GUI_Init+0x180>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <GUI_Init+0x180>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1ed      	bne.n	80029fa <GUI_Init+0x11e>
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <GUI_Init+0x184>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e0002000 	.word	0xe0002000
 8002a34:	e0042000 	.word	0xe0042000
 8002a38:	40023008 	.word	0x40023008
 8002a3c:	40023000 	.word	0x40023000
 8002a40:	f407a5c2 	.word	0xf407a5c2
 8002a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8002a48:	5c001000 	.word	0x5c001000
 8002a4c:	58024c08 	.word	0x58024c08
 8002a50:	58024c00 	.word	0x58024c00
 8002a54:	20025bbc 	.word	0x20025bbc
 8002a58:	20025970 	.word	0x20025970
 8002a5c:	200259e8 	.word	0x200259e8
 8002a60:	20025be4 	.word	0x20025be4

08002a64 <GUI__RegisterExit>:
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <GUI__RegisterExit+0x24>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <GUI__RegisterExit+0x24>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	200259e4 	.word	0x200259e4

08002a8c <GUI_DEVICE__GetpDriver>:
 8002a8c:	2801      	cmp	r0, #1
 8002a8e:	dc09      	bgt.n	8002aa4 <GUI_DEVICE__GetpDriver+0x18>
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <GUI_DEVICE__GetpDriver+0x1c>)
 8002a92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a96:	b120      	cbz	r0, 8002aa2 <GUI_DEVICE__GetpDriver+0x16>
 8002a98:	68c3      	ldr	r3, [r0, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b11b      	cbz	r3, 8002aa6 <GUI_DEVICE__GetpDriver+0x1a>
 8002a9e:	6800      	ldr	r0, [r0, #0]
 8002aa0:	e7f9      	b.n	8002a96 <GUI_DEVICE__GetpDriver+0xa>
 8002aa2:	4770      	bx	lr
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	4770      	bx	lr
 8002aa8:	20025c04 	.word	0x20025c04

08002aac <GUI_DEVICE_Delete>:
 8002aac:	f7ff bb8e 	b.w	80021cc <GUI_ALLOC_FreeFixedBlock>

08002ab0 <GUI_DEVICE_Create>:
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	460d      	mov	r5, r1
 8002ab8:	4617      	mov	r7, r2
 8002aba:	461c      	mov	r4, r3
 8002abc:	dd01      	ble.n	8002ac2 <GUI_DEVICE_Create+0x12>
 8002abe:	2000      	movs	r0, #0
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac2:	201c      	movs	r0, #28
 8002ac4:	f7ff fc5a 	bl	800237c <GUI_ALLOC_GetFixedBlock>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d0f8      	beq.n	8002abe <GUI_DEVICE_Create+0xe>
 8002acc:	b10d      	cbz	r5, 8002ad2 <GUI_DEVICE_Create+0x22>
 8002ace:	6105      	str	r5, [r0, #16]
 8002ad0:	e009      	b.n	8002ae6 <GUI_DEVICE_Create+0x36>
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <GUI_DEVICE_Create+0x48>)
 8002ad4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002ad8:	b129      	cbz	r1, 8002ae6 <GUI_DEVICE_Create+0x36>
 8002ada:	680b      	ldr	r3, [r1, #0]
 8002adc:	b10b      	cbz	r3, 8002ae2 <GUI_DEVICE_Create+0x32>
 8002ade:	4619      	mov	r1, r3
 8002ae0:	e7fb      	b.n	8002ada <GUI_DEVICE_Create+0x2a>
 8002ae2:	690b      	ldr	r3, [r1, #16]
 8002ae4:	6103      	str	r3, [r0, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6184      	str	r4, [r0, #24]
 8002aea:	8287      	strh	r7, [r0, #20]
 8002aec:	60c6      	str	r6, [r0, #12]
 8002aee:	6003      	str	r3, [r0, #0]
 8002af0:	6043      	str	r3, [r0, #4]
 8002af2:	6083      	str	r3, [r0, #8]
 8002af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20025c04 	.word	0x20025c04

08002afc <GUI_DEVICE_Unlink>:
 8002afc:	6981      	ldr	r1, [r0, #24]
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <GUI_DEVICE_Unlink+0x2c>)
 8002b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b04:	4298      	cmp	r0, r3
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	d104      	bne.n	8002b14 <GUI_DEVICE_Unlink+0x18>
 8002b0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002b0e:	b10b      	cbz	r3, 8002b14 <GUI_DEVICE_Unlink+0x18>
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	6842      	ldr	r2, [r0, #4]
 8002b16:	b102      	cbz	r2, 8002b1a <GUI_DEVICE_Unlink+0x1e>
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	b103      	cbz	r3, 8002b20 <GUI_DEVICE_Unlink+0x24>
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	2300      	movs	r3, #0
 8002b22:	6003      	str	r3, [r0, #0]
 8002b24:	6043      	str	r3, [r0, #4]
 8002b26:	4770      	bx	lr
 8002b28:	20025c04 	.word	0x20025c04

08002b2c <GUI_DEVICE_Link>:
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	b908      	cbnz	r0, 8002b34 <GUI_DEVICE_Link+0x8>
 8002b30:	2001      	movs	r0, #1
 8002b32:	bd30      	pop	{r4, r5, pc}
 8002b34:	6984      	ldr	r4, [r0, #24]
 8002b36:	2c01      	cmp	r4, #1
 8002b38:	dcfa      	bgt.n	8002b30 <GUI_DEVICE_Link+0x4>
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <GUI_DEVICE_Link+0x7c>)
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	4294      	cmp	r4, r2
 8002b40:	bfa4      	itt	ge
 8002b42:	1c62      	addge	r2, r4, #1
 8002b44:	701a      	strbge	r2, [r3, #0]
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <GUI_DEVICE_Link+0x80>)
 8002b48:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8002b4c:	4615      	mov	r5, r2
 8002b4e:	b91b      	cbnz	r3, 8002b58 <GUI_DEVICE_Link+0x2c>
 8002b50:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd30      	pop	{r4, r5, pc}
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	b10a      	cbz	r2, 8002b60 <GUI_DEVICE_Link+0x34>
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	e7fb      	b.n	8002b58 <GUI_DEVICE_Link+0x2c>
 8002b60:	68c2      	ldr	r2, [r0, #12]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	68d9      	ldr	r1, [r3, #12]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4291      	cmp	r1, r2
 8002b6a:	dd03      	ble.n	8002b74 <GUI_DEVICE_Link+0x48>
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f8      	bne.n	8002b64 <GUI_DEVICE_Link+0x38>
 8002b72:	e7dd      	b.n	8002b30 <GUI_DEVICE_Link+0x4>
 8002b74:	d109      	bne.n	8002b8a <GUI_DEVICE_Link+0x5e>
 8002b76:	8a81      	ldrh	r1, [r0, #20]
 8002b78:	2901      	cmp	r1, #1
 8002b7a:	d106      	bne.n	8002b8a <GUI_DEVICE_Link+0x5e>
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	b121      	cbz	r1, 8002b8a <GUI_DEVICE_Link+0x5e>
 8002b80:	460b      	mov	r3, r1
 8002b82:	68c9      	ldr	r1, [r1, #12]
 8002b84:	6809      	ldr	r1, [r1, #0]
 8002b86:	428a      	cmp	r2, r1
 8002b88:	ddf8      	ble.n	8002b7c <GUI_DEVICE_Link+0x50>
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	b112      	cbz	r2, 8002b94 <GUI_DEVICE_Link+0x68>
 8002b8e:	6010      	str	r0, [r2, #0]
 8002b90:	6042      	str	r2, [r0, #4]
 8002b92:	e001      	b.n	8002b98 <GUI_DEVICE_Link+0x6c>
 8002b94:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8002b98:	6058      	str	r0, [r3, #4]
 8002b9a:	4298      	cmp	r0, r3
 8002b9c:	bf08      	it	eq
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	6003      	str	r3, [r0, #0]
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	bd30      	pop	{r4, r5, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20025bb6 	.word	0x20025bb6
 8002bac:	20025c04 	.word	0x20025c04

08002bb0 <GUI_DEVICE_CreateAndLink>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	f7ff ff7c 	bl	8002ab0 <GUI_DEVICE_Create>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	b148      	cbz	r0, 8002bd0 <GUI_DEVICE_CreateAndLink+0x20>
 8002bbc:	f7ff ffb6 	bl	8002b2c <GUI_DEVICE_Link>
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b923      	cbnz	r3, 8002bd0 <GUI_DEVICE_CreateAndLink+0x20>
 8002bc6:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <GUI_DEVICE_CreateAndLink+0x24>)
 8002bc8:	3516      	adds	r5, #22
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	200000a4 	.word	0x200000a4

08002bd8 <GUI_DispString>:
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	4605      	mov	r5, r0
 8002bde:	b085      	sub	sp, #20
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d07f      	beq.n	8002ce4 <GUI_DispString+0x10c>
 8002be4:	4c41      	ldr	r4, [pc, #260]	; (8002cec <GUI_DispString+0x114>)
 8002be6:	f003 ffb5 	bl	8006b54 <GUI_GetFontDistY>
 8002bea:	4607      	mov	r7, r0
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	46a1      	mov	r9, r4
 8002bf0:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 8002bf4:	f003 ff96 	bl	8006b24 <GUI_GetYAdjust>
 8002bf8:	6822      	ldr	r2, [r4, #0]
 8002bfa:	b286      	uxth	r6, r0
 8002bfc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8002bfe:	1b9b      	subs	r3, r3, r6
 8002c00:	8493      	strh	r3, [r2, #36]	; 0x24
 8002c02:	782b      	ldrb	r3, [r5, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d061      	beq.n	8002ccc <GUI_DispString+0xf4>
 8002c08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f004 f809 	bl	8006c24 <GUI__GetLineNumChars>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4682      	mov	sl, r0
 8002c16:	4628      	mov	r0, r5
 8002c18:	f004 f82e 	bl	8006c78 <GUI__GetLineDistX>
 8002c1c:	6822      	ldr	r2, [r4, #0]
 8002c1e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d004      	beq.n	8002c32 <GUI_DispString+0x5a>
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d104      	bne.n	8002c36 <GUI_DispString+0x5e>
 8002c2c:	fb90 f3f3 	sdiv	r3, r0, r3
 8002c30:	e002      	b.n	8002c38 <GUI_DispString+0x60>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e000      	b.n	8002c38 <GUI_DispString+0x60>
 8002c36:	2300      	movs	r3, #0
 8002c38:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8002c3a:	fa1f fb80 	uxth.w	fp, r0
 8002c3e:	4628      	mov	r0, r5
 8002c40:	1acb      	subs	r3, r1, r3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b219      	sxth	r1, r3
 8002c46:	8451      	strh	r1, [r2, #34]	; 0x22
 8002c48:	f8ad 1008 	strh.w	r1, [sp, #8]
 8002c4c:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8002c50:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002c54:	440b      	add	r3, r1
 8002c56:	4651      	mov	r1, sl
 8002c58:	f8ad 200a 	strh.w	r2, [sp, #10]
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002c62:	b2bb      	uxth	r3, r7
 8002c64:	441a      	add	r2, r3
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	f8ad 200e 	strh.w	r2, [sp, #14]
 8002c6c:	aa02      	add	r2, sp, #8
 8002c6e:	f004 f833 	bl	8006cd8 <GUI__DispLine>
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002c78:	4628      	mov	r0, r5
 8002c7a:	8491      	strh	r1, [r2, #36]	; 0x24
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	f000 f85b 	bl	8002d38 <GUI_UC__NumChars2NumBytes>
 8002c82:	5c2a      	ldrb	r2, [r5, r0]
 8002c84:	eb05 0e00 	add.w	lr, r5, r0
 8002c88:	9b01      	ldr	r3, [sp, #4]
 8002c8a:	2a0a      	cmp	r2, #10
 8002c8c:	d001      	beq.n	8002c92 <GUI_DispString+0xba>
 8002c8e:	2a0d      	cmp	r2, #13
 8002c90:	d112      	bne.n	8002cb8 <GUI_DispString+0xe0>
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002c96:	f001 0103 	and.w	r1, r1, #3
 8002c9a:	3901      	subs	r1, #1
 8002c9c:	2901      	cmp	r1, #1
 8002c9e:	bf8a      	itet	hi
 8002ca0:	8c11      	ldrhhi	r1, [r2, #32]
 8002ca2:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 8002ca6:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8002ca8:	f89e 1000 	ldrb.w	r1, [lr]
 8002cac:	290a      	cmp	r1, #10
 8002cae:	d10a      	bne.n	8002cc6 <GUI_DispString+0xee>
 8002cb0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8002cb2:	440b      	add	r3, r1
 8002cb4:	8493      	strh	r3, [r2, #36]	; 0x24
 8002cb6:	e006      	b.n	8002cc6 <GUI_DispString+0xee>
 8002cb8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8002cbc:	f8d9 3000 	ldr.w	r3, [r9]
 8002cc0:	4483      	add	fp, r0
 8002cc2:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 8002cc6:	f89e 3000 	ldrb.w	r3, [lr]
 8002cca:	b943      	cbnz	r3, 8002cde <GUI_DispString+0x106>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8002cd0:	4416      	add	r6, r2
 8002cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cd4:	f022 0203 	bic.w	r2, r2, #3
 8002cd8:	849e      	strh	r6, [r3, #36]	; 0x24
 8002cda:	859a      	strh	r2, [r3, #44]	; 0x2c
 8002cdc:	e002      	b.n	8002ce4 <GUI_DispString+0x10c>
 8002cde:	f10e 0501 	add.w	r5, lr, #1
 8002ce2:	e78e      	b.n	8002c02 <GUI_DispString+0x2a>
 8002ce4:	b005      	add	sp, #20
 8002ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	200000a4 	.word	0x200000a4

08002cf0 <GUI_DispStringAt>:
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <GUI_DispStringAt+0xc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	8459      	strh	r1, [r3, #34]	; 0x22
 8002cf6:	849a      	strh	r2, [r3, #36]	; 0x24
 8002cf8:	f7ff bf6e 	b.w	8002bd8 <GUI_DispString>
 8002cfc:	200000a4 	.word	0x200000a4

08002d00 <GUI_StoreKey>:
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <GUI_StoreKey+0xc>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	b902      	cbnz	r2, 8002d08 <GUI_StoreKey+0x8>
 8002d06:	6018      	str	r0, [r3, #0]
 8002d08:	f000 b832 	b.w	8002d70 <GUI_SignalEvent>
 8002d0c:	20025a0c 	.word	0x20025a0c

08002d10 <GUI_UC__GetCharCodeInc>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	4e08      	ldr	r6, [pc, #32]	; (8002d34 <GUI_UC__GetCharCodeInc+0x24>)
 8002d14:	4605      	mov	r5, r0
 8002d16:	6804      	ldr	r4, [r0, #0]
 8002d18:	6833      	ldr	r3, [r6, #0]
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4798      	blx	r3
 8002d20:	6833      	ldr	r3, [r6, #0]
 8002d22:	4607      	mov	r7, r0
 8002d24:	4620      	mov	r0, r4
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4798      	blx	r3
 8002d2a:	4420      	add	r0, r4
 8002d2c:	6028      	str	r0, [r5, #0]
 8002d2e:	4638      	mov	r0, r7
 8002d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20025bfc 	.word	0x20025bfc

08002d38 <GUI_UC__NumChars2NumBytes>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	2400      	movs	r4, #0
 8002d40:	4f05      	ldr	r7, [pc, #20]	; (8002d58 <GUI_UC__NumChars2NumBytes+0x20>)
 8002d42:	b13d      	cbz	r5, 8002d54 <GUI_UC__NumChars2NumBytes+0x1c>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4630      	mov	r0, r6
 8002d48:	3d01      	subs	r5, #1
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	4406      	add	r6, r0
 8002d50:	4404      	add	r4, r0
 8002d52:	e7f6      	b.n	8002d42 <GUI_UC__NumChars2NumBytes+0xa>
 8002d54:	4620      	mov	r0, r4
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d58:	20025bfc 	.word	0x20025bfc

08002d5c <_GetCharCode>:
 8002d5c:	7800      	ldrb	r0, [r0, #0]
 8002d5e:	4770      	bx	lr

08002d60 <_GetCharSize>:
 8002d60:	2001      	movs	r0, #1
 8002d62:	4770      	bx	lr

08002d64 <_CalcSizeOfChar>:
 8002d64:	2001      	movs	r0, #1
 8002d66:	4770      	bx	lr

08002d68 <_Encode>:
 8002d68:	7001      	strb	r1, [r0, #0]
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	4770      	bx	lr
	...

08002d70 <GUI_SignalEvent>:
 8002d70:	4b02      	ldr	r3, [pc, #8]	; (8002d7c <GUI_SignalEvent+0xc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b103      	cbz	r3, 8002d78 <GUI_SignalEvent+0x8>
 8002d76:	4718      	bx	r3
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20025a6c 	.word	0x20025a6c

08002d80 <GUI__IntersectRect>:
 8002d80:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002d84:	f9b0 2000 	ldrsh.w	r2, [r0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8002d8e:	bfb8      	it	lt
 8002d90:	8003      	strhlt	r3, [r0, #0]
 8002d92:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8002d9c:	bfb8      	it	lt
 8002d9e:	8043      	strhlt	r3, [r0, #2]
 8002da0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8002daa:	bfc8      	it	gt
 8002dac:	8083      	strhgt	r3, [r0, #4]
 8002dae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	bfc8      	it	gt
 8002db6:	80c3      	strhgt	r3, [r0, #6]
 8002db8:	4770      	bx	lr

08002dba <GUI__IntersectRects>:
 8002dba:	b570      	push	{r4, r5, r6, lr}
 8002dbc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	f9b2 5000 	ldrsh.w	r5, [r2]
 8002dc6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8002dca:	429d      	cmp	r5, r3
 8002dcc:	bfb8      	it	lt
 8002dce:	461d      	movlt	r5, r3
 8002dd0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8002dd4:	8005      	strh	r5, [r0, #0]
 8002dd6:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8002dda:	4283      	cmp	r3, r0
 8002ddc:	bfb8      	it	lt
 8002dde:	4603      	movlt	r3, r0
 8002de0:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8002de4:	4284      	cmp	r4, r0
 8002de6:	8073      	strh	r3, [r6, #2]
 8002de8:	bfa8      	it	ge
 8002dea:	4604      	movge	r4, r0
 8002dec:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8002df0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8002df4:	80b4      	strh	r4, [r6, #4]
 8002df6:	4282      	cmp	r2, r0
 8002df8:	bfa8      	it	ge
 8002dfa:	4602      	movge	r2, r0
 8002dfc:	42a5      	cmp	r5, r4
 8002dfe:	80f2      	strh	r2, [r6, #6]
 8002e00:	dc04      	bgt.n	8002e0c <GUI__IntersectRects+0x52>
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bfcc      	ite	gt
 8002e06:	2000      	movgt	r0, #0
 8002e08:	2001      	movle	r0, #1
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}

08002e10 <GUI__memset16>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	0784      	lsls	r4, r0, #30
 8002e14:	bf42      	ittt	mi
 8002e16:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8002e1a:	8001      	strhmi	r1, [r0, #0]
 8002e1c:	3002      	addmi	r0, #2
 8002e1e:	0854      	lsrs	r4, r2, #1
 8002e20:	d023      	beq.n	8002e6a <GUI__memset16+0x5a>
 8002e22:	2c03      	cmp	r4, #3
 8002e24:	4623      	mov	r3, r4
 8002e26:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8002e2a:	d802      	bhi.n	8002e32 <GUI__memset16+0x22>
 8002e2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002e30:	e016      	b.n	8002e60 <GUI__memset16+0x50>
 8002e32:	f100 0310 	add.w	r3, r0, #16
 8002e36:	4626      	mov	r6, r4
 8002e38:	3e04      	subs	r6, #4
 8002e3a:	f843 5c10 	str.w	r5, [r3, #-16]
 8002e3e:	f843 5c0c 	str.w	r5, [r3, #-12]
 8002e42:	3310      	adds	r3, #16
 8002e44:	2e03      	cmp	r6, #3
 8002e46:	f843 5c18 	str.w	r5, [r3, #-24]
 8002e4a:	f843 5c14 	str.w	r5, [r3, #-20]
 8002e4e:	dcf3      	bgt.n	8002e38 <GUI__memset16+0x28>
 8002e50:	3c04      	subs	r4, #4
 8002e52:	08a3      	lsrs	r3, r4, #2
 8002e54:	1c5e      	adds	r6, r3, #1
 8002e56:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8002e5a:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8002e5e:	e7e5      	b.n	8002e2c <GUI__memset16+0x1c>
 8002e60:	4298      	cmp	r0, r3
 8002e62:	d002      	beq.n	8002e6a <GUI__memset16+0x5a>
 8002e64:	f840 5b04 	str.w	r5, [r0], #4
 8002e68:	e7fa      	b.n	8002e60 <GUI__memset16+0x50>
 8002e6a:	07d3      	lsls	r3, r2, #31
 8002e6c:	bf48      	it	mi
 8002e6e:	8001      	strhmi	r1, [r0, #0]
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e74 <_SetDrawMode>:
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <_SetDrawMode+0x24>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	7c1a      	ldrb	r2, [r3, #16]
 8002e7c:	ea82 0100 	eor.w	r1, r2, r0
 8002e80:	0749      	lsls	r1, r1, #29
 8002e82:	d505      	bpl.n	8002e90 <_SetDrawMode+0x1c>
 8002e84:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002e86:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002e88:	6825      	ldr	r5, [r4, #0]
 8002e8a:	680e      	ldr	r6, [r1, #0]
 8002e8c:	6026      	str	r6, [r4, #0]
 8002e8e:	600d      	str	r5, [r1, #0]
 8002e90:	7418      	strb	r0, [r3, #16]
 8002e92:	4610      	mov	r0, r2
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
 8002e96:	bf00      	nop
 8002e98:	200000a4 	.word	0x200000a4

08002e9c <LCD_SetDrawMode>:
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <LCD_SetDrawMode+0x8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4718      	bx	r3
 8002ea4:	200000b0 	.word	0x200000b0

08002ea8 <LCD_DrawPixel>:
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <LCD_DrawPixel+0x58>)
 8002eaa:	460a      	mov	r2, r1
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8002eb2:	4291      	cmp	r1, r2
 8002eb4:	b430      	push	{r4, r5}
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	dc20      	bgt.n	8002efc <LCD_DrawPixel+0x54>
 8002eba:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8002ebe:	428a      	cmp	r2, r1
 8002ec0:	dc1c      	bgt.n	8002efc <LCD_DrawPixel+0x54>
 8002ec2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002ec6:	4281      	cmp	r1, r0
 8002ec8:	dc18      	bgt.n	8002efc <LCD_DrawPixel+0x54>
 8002eca:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8002ece:	4288      	cmp	r0, r1
 8002ed0:	dc14      	bgt.n	8002efc <LCD_DrawPixel+0x54>
 8002ed2:	7c19      	ldrb	r1, [r3, #16]
 8002ed4:	7c58      	ldrb	r0, [r3, #17]
 8002ed6:	f011 0f01 	tst.w	r1, #1
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <LCD_DrawPixel+0x5c>)
 8002edc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002ee0:	d004      	beq.n	8002eec <LCD_DrawPixel+0x44>
 8002ee2:	68c3      	ldr	r3, [r0, #12]
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	bc30      	pop	{r4, r5}
 8002eea:	4718      	bx	r3
 8002eec:	68c1      	ldr	r1, [r0, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	698d      	ldr	r5, [r1, #24]
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	46ac      	mov	ip, r5
 8002ef8:	bc30      	pop	{r4, r5}
 8002efa:	4760      	bx	ip
 8002efc:	bc30      	pop	{r4, r5}
 8002efe:	4770      	bx	lr
 8002f00:	200000a4 	.word	0x200000a4
 8002f04:	20025c04 	.word	0x20025c04

08002f08 <LCD_DrawHLine>:
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <LCD_DrawHLine+0x48>)
 8002f0a:	b430      	push	{r4, r5}
 8002f0c:	681c      	ldr	r4, [r3, #0]
 8002f0e:	460d      	mov	r5, r1
 8002f10:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002f14:	428b      	cmp	r3, r1
 8002f16:	dc19      	bgt.n	8002f4c <LCD_DrawHLine+0x44>
 8002f18:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	dc15      	bgt.n	8002f4c <LCD_DrawHLine+0x44>
 8002f20:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8002f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f28:	4281      	cmp	r1, r0
 8002f2a:	bfb8      	it	lt
 8002f2c:	4601      	movlt	r1, r0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	bfa8      	it	ge
 8002f32:	4613      	movge	r3, r2
 8002f34:	4299      	cmp	r1, r3
 8002f36:	dc09      	bgt.n	8002f4c <LCD_DrawHLine+0x44>
 8002f38:	7c60      	ldrb	r0, [r4, #17]
 8002f3a:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <LCD_DrawHLine+0x4c>)
 8002f3c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8002f40:	68c2      	ldr	r2, [r0, #12]
 8002f42:	6894      	ldr	r4, [r2, #8]
 8002f44:	462a      	mov	r2, r5
 8002f46:	46a4      	mov	ip, r4
 8002f48:	bc30      	pop	{r4, r5}
 8002f4a:	4760      	bx	ip
 8002f4c:	bc30      	pop	{r4, r5}
 8002f4e:	4770      	bx	lr
 8002f50:	200000a4 	.word	0x200000a4
 8002f54:	20025c04 	.word	0x20025c04

08002f58 <LCD_FillRect>:
 8002f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f5a:	4c13      	ldr	r4, [pc, #76]	; (8002fa8 <LCD_FillRect+0x50>)
 8002f5c:	6824      	ldr	r4, [r4, #0]
 8002f5e:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8002f62:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8002f66:	4285      	cmp	r5, r0
 8002f68:	bfb8      	it	lt
 8002f6a:	4605      	movlt	r5, r0
 8002f6c:	4296      	cmp	r6, r2
 8002f6e:	bfa8      	it	ge
 8002f70:	4616      	movge	r6, r2
 8002f72:	42ae      	cmp	r6, r5
 8002f74:	db15      	blt.n	8002fa2 <LCD_FillRect+0x4a>
 8002f76:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8002f7a:	428a      	cmp	r2, r1
 8002f7c:	bfb8      	it	lt
 8002f7e:	460a      	movlt	r2, r1
 8002f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f84:	428b      	cmp	r3, r1
 8002f86:	bfa8      	it	ge
 8002f88:	460b      	movge	r3, r1
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dc09      	bgt.n	8002fa2 <LCD_FillRect+0x4a>
 8002f8e:	7c60      	ldrb	r0, [r4, #17]
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <LCD_FillRect+0x54>)
 8002f92:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002f96:	68c1      	ldr	r1, [r0, #12]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4633      	mov	r3, r6
 8002f9c:	690c      	ldr	r4, [r1, #16]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	47a0      	blx	r4
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200000a4 	.word	0x200000a4
 8002fac:	20025c04 	.word	0x20025c04

08002fb0 <LCD__DrawBitmap_1bpp>:
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	b08f      	sub	sp, #60	; 0x3c
 8002fb6:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8003184 <LCD__DrawBitmap_1bpp+0x1d4>
 8002fba:	460c      	mov	r4, r1
 8002fbc:	4617      	mov	r7, r2
 8002fbe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002fc0:	f8de e000 	ldr.w	lr, [lr]
 8002fc4:	9502      	str	r5, [sp, #8]
 8002fc6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8002fc8:	9007      	str	r0, [sp, #28]
 8002fca:	9508      	str	r5, [sp, #32]
 8002fcc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	9503      	str	r5, [sp, #12]
 8002fd2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8002fd6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8002fd8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8002fdc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8002fde:	f1be 0f00 	cmp.w	lr, #0
 8002fe2:	d002      	beq.n	8002fea <LCD__DrawBitmap_1bpp+0x3a>
 8002fe4:	f8de 4000 	ldr.w	r4, [lr]
 8002fe8:	e054      	b.n	8003094 <LCD__DrawBitmap_1bpp+0xe4>
 8002fea:	9b02      	ldr	r3, [sp, #8]
 8002fec:	9a08      	ldr	r2, [sp, #32]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d154      	bne.n	800309e <LCD__DrawBitmap_1bpp+0xee>
 8002ff4:	4b61      	ldr	r3, [pc, #388]	; (800317c <LCD__DrawBitmap_1bpp+0x1cc>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8002ffc:	1a53      	subs	r3, r2, r1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	dd0a      	ble.n	8003018 <LCD__DrawBitmap_1bpp+0x68>
 8003002:	9901      	ldr	r1, [sp, #4]
 8003004:	ebc3 0e01 	rsb	lr, r3, r1
 8003008:	f1be 0f00 	cmp.w	lr, #0
 800300c:	f340 80b2 	ble.w	8003174 <LCD__DrawBitmap_1bpp+0x1c4>
 8003010:	9903      	ldr	r1, [sp, #12]
 8003012:	fb01 6603 	mla	r6, r1, r3, r6
 8003016:	e002      	b.n	800301e <LCD__DrawBitmap_1bpp+0x6e>
 8003018:	f8dd e004 	ldr.w	lr, [sp, #4]
 800301c:	460a      	mov	r2, r1
 800301e:	9b01      	ldr	r3, [sp, #4]
 8003020:	441c      	add	r4, r3
 8003022:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8003026:	3c01      	subs	r4, #1
 8003028:	1ae4      	subs	r4, r4, r3
 800302a:	2c00      	cmp	r4, #0
 800302c:	dd05      	ble.n	800303a <LCD__DrawBitmap_1bpp+0x8a>
 800302e:	ebc4 0e0e 	rsb	lr, r4, lr
 8003032:	f1be 0f00 	cmp.w	lr, #0
 8003036:	f340 809d 	ble.w	8003174 <LCD__DrawBitmap_1bpp+0x1c4>
 800303a:	9b07      	ldr	r3, [sp, #28]
 800303c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8003040:	443b      	add	r3, r7
 8003042:	3b01      	subs	r3, #1
 8003044:	1a5b      	subs	r3, r3, r1
 8003046:	2b00      	cmp	r3, #0
 8003048:	bfc8      	it	gt
 800304a:	1aff      	subgt	r7, r7, r3
 800304c:	9b07      	ldr	r3, [sp, #28]
 800304e:	1b59      	subs	r1, r3, r5
 8003050:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8003054:	4299      	cmp	r1, r3
 8003056:	da09      	bge.n	800306c <LCD__DrawBitmap_1bpp+0xbc>
 8003058:	1a5b      	subs	r3, r3, r1
 800305a:	441d      	add	r5, r3
 800305c:	1aff      	subs	r7, r7, r3
 800305e:	f023 0307 	bic.w	r3, r3, #7
 8003062:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8003066:	f005 0507 	and.w	r5, r5, #7
 800306a:	4419      	add	r1, r3
 800306c:	2f00      	cmp	r7, #0
 800306e:	f340 8081 	ble.w	8003174 <LCD__DrawBitmap_1bpp+0x1c4>
 8003072:	7c40      	ldrb	r0, [r0, #17]
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <LCD__DrawBitmap_1bpp+0x1d0>)
 8003076:	9c03      	ldr	r4, [sp, #12]
 8003078:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800307c:	68c3      	ldr	r3, [r0, #12]
 800307e:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8003082:	951c      	str	r5, [sp, #112]	; 0x70
 8003084:	961b      	str	r6, [sp, #108]	; 0x6c
 8003086:	941a      	str	r4, [sp, #104]	; 0x68
 8003088:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800308c:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8003090:	685c      	ldr	r4, [r3, #4]
 8003092:	463b      	mov	r3, r7
 8003094:	46a4      	mov	ip, r4
 8003096:	b00f      	add	sp, #60	; 0x3c
 8003098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	4760      	bx	ip
 800309e:	f1ca 0308 	rsb	r3, sl, #8
 80030a2:	4675      	mov	r5, lr
 80030a4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800317c <LCD__DrawBitmap_1bpp+0x1cc>
 80030a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80030aa:	9b02      	ldr	r3, [sp, #8]
 80030ac:	f8cd e014 	str.w	lr, [sp, #20]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	930d      	str	r3, [sp, #52]	; 0x34
 80030b4:	9b05      	ldr	r3, [sp, #20]
 80030b6:	9a01      	ldr	r2, [sp, #4]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	da5b      	bge.n	8003174 <LCD__DrawBitmap_1bpp+0x1c4>
 80030bc:	9b08      	ldr	r3, [sp, #32]
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	9309      	str	r3, [sp, #36]	; 0x24
 80030c2:	3b01      	subs	r3, #1
 80030c4:	930a      	str	r3, [sp, #40]	; 0x28
 80030c6:	f8d9 3000 	ldr.w	r3, [r9]
 80030ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030cc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80030d0:	428a      	cmp	r2, r1
 80030d2:	dc48      	bgt.n	8003166 <LCD__DrawBitmap_1bpp+0x1b6>
 80030d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80030d8:	429c      	cmp	r4, r3
 80030da:	dc44      	bgt.n	8003166 <LCD__DrawBitmap_1bpp+0x1b6>
 80030dc:	9b07      	ldr	r3, [sp, #28]
 80030de:	f04f 0800 	mov.w	r8, #0
 80030e2:	9606      	str	r6, [sp, #24]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80030ea:	9b04      	ldr	r3, [sp, #16]
 80030ec:	42bb      	cmp	r3, r7
 80030ee:	da3a      	bge.n	8003166 <LCD__DrawBitmap_1bpp+0x1b6>
 80030f0:	f1b8 0f00 	cmp.w	r8, #0
 80030f4:	d105      	bne.n	8003102 <LCD__DrawBitmap_1bpp+0x152>
 80030f6:	9b06      	ldr	r3, [sp, #24]
 80030f8:	f04f 0808 	mov.w	r8, #8
 80030fc:	781d      	ldrb	r5, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	9306      	str	r3, [sp, #24]
 8003102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003104:	ebca 0808 	rsb	r8, sl, r8
 8003108:	fa45 f303 	asr.w	r3, r5, r3
 800310c:	fa05 f50a 	lsl.w	r5, r5, sl
 8003110:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8003114:	b2ed      	uxtb	r5, r5
 8003116:	d104      	bne.n	8003122 <LCD__DrawBitmap_1bpp+0x172>
 8003118:	f8d9 2000 	ldr.w	r2, [r9]
 800311c:	7c12      	ldrb	r2, [r2, #16]
 800311e:	0792      	lsls	r2, r2, #30
 8003120:	d419      	bmi.n	8003156 <LCD__DrawBitmap_1bpp+0x1a6>
 8003122:	f8d9 2000 	ldr.w	r2, [r9]
 8003126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003128:	6810      	ldr	r0, [r2, #0]
 800312a:	900c      	str	r0, [sp, #48]	; 0x30
 800312c:	f1bb 0f00 	cmp.w	fp, #0
 8003130:	d002      	beq.n	8003138 <LCD__DrawBitmap_1bpp+0x188>
 8003132:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8003136:	e000      	b.n	800313a <LCD__DrawBitmap_1bpp+0x18a>
 8003138:	b2db      	uxtb	r3, r3
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	9900      	ldr	r1, [sp, #0]
 800313e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003142:	440a      	add	r2, r1
 8003144:	9800      	ldr	r0, [sp, #0]
 8003146:	4621      	mov	r1, r4
 8003148:	f7ff ff06 	bl	8002f58 <LCD_FillRect>
 800314c:	f8d9 3000 	ldr.w	r3, [r9]
 8003150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	9b04      	ldr	r3, [sp, #16]
 8003158:	9a02      	ldr	r2, [sp, #8]
 800315a:	3301      	adds	r3, #1
 800315c:	9304      	str	r3, [sp, #16]
 800315e:	9b00      	ldr	r3, [sp, #0]
 8003160:	4413      	add	r3, r2
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	e7c1      	b.n	80030ea <LCD__DrawBitmap_1bpp+0x13a>
 8003166:	9b05      	ldr	r3, [sp, #20]
 8003168:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	9305      	str	r3, [sp, #20]
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	441e      	add	r6, r3
 8003172:	e79f      	b.n	80030b4 <LCD__DrawBitmap_1bpp+0x104>
 8003174:	b00f      	add	sp, #60	; 0x3c
 8003176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop
 800317c:	200000a4 	.word	0x200000a4
 8003180:	20025c04 	.word	0x20025c04
 8003184:	20025bc0 	.word	0x20025bc0

08003188 <LCD_DrawBitmap>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	b08f      	sub	sp, #60	; 0x3c
 800318e:	f8df e218 	ldr.w	lr, [pc, #536]	; 80033a8 <LCD_DrawBitmap+0x220>
 8003192:	4605      	mov	r5, r0
 8003194:	4690      	mov	r8, r2
 8003196:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8003198:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800319a:	9402      	str	r4, [sp, #8]
 800319c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800319e:	f8de e000 	ldr.w	lr, [lr]
 80031a2:	9408      	str	r4, [sp, #32]
 80031a4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80031a6:	9100      	str	r1, [sp, #0]
 80031a8:	9403      	str	r4, [sp, #12]
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80031ae:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80031b0:	9604      	str	r6, [sp, #16]
 80031b2:	f1be 0f00 	cmp.w	lr, #0
 80031b6:	d002      	beq.n	80031be <LCD_DrawBitmap+0x36>
 80031b8:	f8de 4000 	ldr.w	r4, [lr]
 80031bc:	e07a      	b.n	80032b4 <LCD_DrawBitmap+0x12c>
 80031be:	9b02      	ldr	r3, [sp, #8]
 80031c0:	9a08      	ldr	r2, [sp, #32]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d17a      	bne.n	80032be <LCD_DrawBitmap+0x136>
 80031c8:	4b75      	ldr	r3, [pc, #468]	; (80033a0 <LCD_DrawBitmap+0x218>)
 80031ca:	9901      	ldr	r1, [sp, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	9b00      	ldr	r3, [sp, #0]
 80031d0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dd07      	ble.n	80031ea <LCD_DrawBitmap+0x62>
 80031da:	1ac9      	subs	r1, r1, r3
 80031dc:	2900      	cmp	r1, #0
 80031de:	f340 80db 	ble.w	8003398 <LCD_DrawBitmap+0x210>
 80031e2:	9e03      	ldr	r6, [sp, #12]
 80031e4:	fb06 4403 	mla	r4, r6, r3, r4
 80031e8:	e000      	b.n	80031ec <LCD_DrawBitmap+0x64>
 80031ea:	9a00      	ldr	r2, [sp, #0]
 80031ec:	e89d 0048 	ldmia.w	sp, {r3, r6}
 80031f0:	441e      	add	r6, r3
 80031f2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80031f6:	3e01      	subs	r6, #1
 80031f8:	1af6      	subs	r6, r6, r3
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	dd03      	ble.n	8003206 <LCD_DrawBitmap+0x7e>
 80031fe:	1b89      	subs	r1, r1, r6
 8003200:	2900      	cmp	r1, #0
 8003202:	f340 80c9 	ble.w	8003398 <LCD_DrawBitmap+0x210>
 8003206:	eb05 0308 	add.w	r3, r5, r8
 800320a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	1b9b      	subs	r3, r3, r6
 8003212:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	bfc8      	it	gt
 800321a:	ebc3 0808 	rsbgt	r8, r3, r8
 800321e:	42b5      	cmp	r5, r6
 8003220:	da31      	bge.n	8003286 <LCD_DrawBitmap+0xfe>
 8003222:	1b73      	subs	r3, r6, r5
 8003224:	2f08      	cmp	r7, #8
 8003226:	ebc3 0808 	rsb	r8, r3, r8
 800322a:	d027      	beq.n	800327c <LCD_DrawBitmap+0xf4>
 800322c:	dc0d      	bgt.n	800324a <LCD_DrawBitmap+0xc2>
 800322e:	2f02      	cmp	r7, #2
 8003230:	d014      	beq.n	800325c <LCD_DrawBitmap+0xd4>
 8003232:	2f04      	cmp	r7, #4
 8003234:	d01a      	beq.n	800326c <LCD_DrawBitmap+0xe4>
 8003236:	2f01      	cmp	r7, #1
 8003238:	d126      	bne.n	8003288 <LCD_DrawBitmap+0x100>
 800323a:	f023 0607 	bic.w	r6, r3, #7
 800323e:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	4435      	add	r5, r6
 8003248:	e01e      	b.n	8003288 <LCD_DrawBitmap+0x100>
 800324a:	2f18      	cmp	r7, #24
 800324c:	d018      	beq.n	8003280 <LCD_DrawBitmap+0xf8>
 800324e:	2f20      	cmp	r7, #32
 8003250:	d016      	beq.n	8003280 <LCD_DrawBitmap+0xf8>
 8003252:	2f10      	cmp	r7, #16
 8003254:	d118      	bne.n	8003288 <LCD_DrawBitmap+0x100>
 8003256:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800325a:	e013      	b.n	8003284 <LCD_DrawBitmap+0xfc>
 800325c:	f023 0603 	bic.w	r6, r3, #3
 8003260:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	4435      	add	r5, r6
 800326a:	e00d      	b.n	8003288 <LCD_DrawBitmap+0x100>
 800326c:	f023 0601 	bic.w	r6, r3, #1
 8003270:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	4435      	add	r5, r6
 800327a:	e005      	b.n	8003288 <LCD_DrawBitmap+0x100>
 800327c:	441c      	add	r4, r3
 800327e:	e001      	b.n	8003284 <LCD_DrawBitmap+0xfc>
 8003280:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003284:	4635      	mov	r5, r6
 8003286:	2300      	movs	r3, #0
 8003288:	f1b8 0f00 	cmp.w	r8, #0
 800328c:	f340 8084 	ble.w	8003398 <LCD_DrawBitmap+0x210>
 8003290:	7c46      	ldrb	r6, [r0, #17]
 8003292:	4844      	ldr	r0, [pc, #272]	; (80033a4 <LCD_DrawBitmap+0x21c>)
 8003294:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8003298:	9e04      	ldr	r6, [sp, #16]
 800329a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800329e:	931c      	str	r3, [sp, #112]	; 0x70
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	9118      	str	r1, [sp, #96]	; 0x60
 80032a4:	4629      	mov	r1, r5
 80032a6:	931a      	str	r3, [sp, #104]	; 0x68
 80032a8:	4643      	mov	r3, r8
 80032aa:	961d      	str	r6, [sp, #116]	; 0x74
 80032ac:	941b      	str	r4, [sp, #108]	; 0x6c
 80032ae:	9719      	str	r7, [sp, #100]	; 0x64
 80032b0:	f8de 4004 	ldr.w	r4, [lr, #4]
 80032b4:	46a4      	mov	ip, r4
 80032b6:	b00f      	add	sp, #60	; 0x3c
 80032b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	4760      	bx	ip
 80032be:	f1c7 0308 	rsb	r3, r7, #8
 80032c2:	46f3      	mov	fp, lr
 80032c4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80033a0 <LCD_DrawBitmap+0x218>
 80032c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ca:	9b02      	ldr	r3, [sp, #8]
 80032cc:	f8cd e018 	str.w	lr, [sp, #24]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	930d      	str	r3, [sp, #52]	; 0x34
 80032d4:	9b06      	ldr	r3, [sp, #24]
 80032d6:	9a01      	ldr	r2, [sp, #4]
 80032d8:	4293      	cmp	r3, r2
 80032da:	da5d      	bge.n	8003398 <LCD_DrawBitmap+0x210>
 80032dc:	9a00      	ldr	r2, [sp, #0]
 80032de:	9b08      	ldr	r3, [sp, #32]
 80032e0:	4413      	add	r3, r2
 80032e2:	9309      	str	r3, [sp, #36]	; 0x24
 80032e4:	3b01      	subs	r3, #1
 80032e6:	930a      	str	r3, [sp, #40]	; 0x28
 80032e8:	f8da 3000 	ldr.w	r3, [sl]
 80032ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80032ee:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80032f2:	428a      	cmp	r2, r1
 80032f4:	dc48      	bgt.n	8003388 <LCD_DrawBitmap+0x200>
 80032f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80032fa:	9a00      	ldr	r2, [sp, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dc43      	bgt.n	8003388 <LCD_DrawBitmap+0x200>
 8003300:	f04f 0900 	mov.w	r9, #0
 8003304:	462e      	mov	r6, r5
 8003306:	9407      	str	r4, [sp, #28]
 8003308:	f8cd 9014 	str.w	r9, [sp, #20]
 800330c:	9b05      	ldr	r3, [sp, #20]
 800330e:	4543      	cmp	r3, r8
 8003310:	da3a      	bge.n	8003388 <LCD_DrawBitmap+0x200>
 8003312:	f1b9 0f00 	cmp.w	r9, #0
 8003316:	d106      	bne.n	8003326 <LCD_DrawBitmap+0x19e>
 8003318:	9b07      	ldr	r3, [sp, #28]
 800331a:	f04f 0908 	mov.w	r9, #8
 800331e:	f893 b000 	ldrb.w	fp, [r3]
 8003322:	3301      	adds	r3, #1
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003328:	fa0b f207 	lsl.w	r2, fp, r7
 800332c:	ebc7 0909 	rsb	r9, r7, r9
 8003330:	fa4b f303 	asr.w	r3, fp, r3
 8003334:	fa5f fb82 	uxtb.w	fp, r2
 8003338:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800333c:	d104      	bne.n	8003348 <LCD_DrawBitmap+0x1c0>
 800333e:	f8da 2000 	ldr.w	r2, [sl]
 8003342:	7c12      	ldrb	r2, [r2, #16]
 8003344:	0792      	lsls	r2, r2, #30
 8003346:	d417      	bmi.n	8003378 <LCD_DrawBitmap+0x1f0>
 8003348:	f8da 2000 	ldr.w	r2, [sl]
 800334c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800334e:	6810      	ldr	r0, [r2, #0]
 8003350:	900c      	str	r0, [sp, #48]	; 0x30
 8003352:	9804      	ldr	r0, [sp, #16]
 8003354:	b110      	cbz	r0, 800335c <LCD_DrawBitmap+0x1d4>
 8003356:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800335a:	e000      	b.n	800335e <LCD_DrawBitmap+0x1d6>
 800335c:	b2db      	uxtb	r3, r3
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4630      	mov	r0, r6
 8003362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003366:	4432      	add	r2, r6
 8003368:	9900      	ldr	r1, [sp, #0]
 800336a:	f7ff fdf5 	bl	8002f58 <LCD_FillRect>
 800336e:	f8da 3000 	ldr.w	r3, [sl]
 8003372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	9b05      	ldr	r3, [sp, #20]
 800337a:	9a02      	ldr	r2, [sp, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	9305      	str	r3, [sp, #20]
 8003380:	4633      	mov	r3, r6
 8003382:	4413      	add	r3, r2
 8003384:	461e      	mov	r6, r3
 8003386:	e7c1      	b.n	800330c <LCD_DrawBitmap+0x184>
 8003388:	9b06      	ldr	r3, [sp, #24]
 800338a:	3301      	adds	r3, #1
 800338c:	9306      	str	r3, [sp, #24]
 800338e:	9b03      	ldr	r3, [sp, #12]
 8003390:	441c      	add	r4, r3
 8003392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	e79d      	b.n	80032d4 <LCD_DrawBitmap+0x14c>
 8003398:	b00f      	add	sp, #60	; 0x3c
 800339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	200000a4 	.word	0x200000a4
 80033a4:	20025c04 	.word	0x20025c04
 80033a8:	20025bc0 	.word	0x20025bc0

080033ac <LCD_SetClipRectMax>:
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <LCD_SetClipRectMax+0x14>)
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <LCD_SetClipRectMax+0x18>)
 80033b2:	7c4a      	ldrb	r2, [r1, #17]
 80033b4:	3108      	adds	r1, #8
 80033b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033ba:	68c3      	ldr	r3, [r0, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4718      	bx	r3
 80033c0:	200000a4 	.word	0x200000a4
 80033c4:	20025c04 	.word	0x20025c04

080033c8 <emWin_LCD_Init>:
 80033c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033ca:	f7ff ffef 	bl	80033ac <LCD_SetClipRectMax>
 80033ce:	f000 f8bb 	bl	8003548 <LCD_InitColors>
 80033d2:	4604      	mov	r4, r0
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d144      	bne.n	8003462 <emWin_LCD_Init+0x9a>
 80033d8:	4605      	mov	r5, r0
 80033da:	4628      	mov	r0, r5
 80033dc:	f7ff fb56 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 80033e0:	9001      	str	r0, [sp, #4]
 80033e2:	b150      	cbz	r0, 80033fa <emWin_LCD_Init+0x32>
 80033e4:	68c3      	ldr	r3, [r0, #12]
 80033e6:	210c      	movs	r1, #12
 80033e8:	a801      	add	r0, sp, #4
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	4798      	blx	r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d034      	beq.n	800345e <emWin_LCD_Init+0x96>
 80033f4:	9801      	ldr	r0, [sp, #4]
 80033f6:	4798      	blx	r3
 80033f8:	4304      	orrs	r4, r0
 80033fa:	3501      	adds	r5, #1
 80033fc:	2d02      	cmp	r5, #2
 80033fe:	d1ec      	bne.n	80033da <emWin_LCD_Init+0x12>
 8003400:	bb7c      	cbnz	r4, 8003462 <emWin_LCD_Init+0x9a>
 8003402:	f000 f8f7 	bl	80035f4 <LCD_InitLUT>
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <emWin_LCD_Init+0xa0>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800340e:	429a      	cmp	r2, r3
 8003410:	d101      	bne.n	8003416 <emWin_LCD_Init+0x4e>
 8003412:	2000      	movs	r0, #0
 8003414:	e026      	b.n	8003464 <emWin_LCD_Init+0x9c>
 8003416:	2401      	movs	r4, #1
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff fb37 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 800341e:	9001      	str	r0, [sp, #4]
 8003420:	b1c8      	cbz	r0, 8003456 <emWin_LCD_Init+0x8e>
 8003422:	4620      	mov	r0, r4
 8003424:	f003 fe1e 	bl	8007064 <GUI_SelectLayer>
 8003428:	2004      	movs	r0, #4
 800342a:	f7ff fd37 	bl	8002e9c <LCD_SetDrawMode>
 800342e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003432:	2100      	movs	r1, #0
 8003434:	461a      	mov	r2, r3
 8003436:	4608      	mov	r0, r1
 8003438:	f7ff fd8e 	bl	8002f58 <LCD_FillRect>
 800343c:	2000      	movs	r0, #0
 800343e:	f7ff fd2d 	bl	8002e9c <LCD_SetDrawMode>
 8003442:	9b01      	ldr	r3, [sp, #4]
 8003444:	210e      	movs	r1, #14
 8003446:	a801      	add	r0, sp, #4
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	4798      	blx	r3
 800344e:	4603      	mov	r3, r0
 8003450:	b108      	cbz	r0, 8003456 <emWin_LCD_Init+0x8e>
 8003452:	9801      	ldr	r0, [sp, #4]
 8003454:	4798      	blx	r3
 8003456:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800345a:	d2dd      	bcs.n	8003418 <emWin_LCD_Init+0x50>
 800345c:	e7d9      	b.n	8003412 <emWin_LCD_Init+0x4a>
 800345e:	2001      	movs	r0, #1
 8003460:	e000      	b.n	8003464 <emWin_LCD_Init+0x9c>
 8003462:	4620      	mov	r0, r4
 8003464:	b003      	add	sp, #12
 8003466:	bd30      	pop	{r4, r5, pc}
 8003468:	2002596c 	.word	0x2002596c

0800346c <LCD_Color2Index>:
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <LCD_Color2Index+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	7c5a      	ldrb	r2, [r3, #17]
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <LCD_Color2Index+0x18>)
 8003474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4718      	bx	r3
 800347e:	bf00      	nop
 8003480:	200000a4 	.word	0x200000a4
 8003484:	20025c04 	.word	0x20025c04

08003488 <LCD_Index2Color>:
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <LCD_Index2Color+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	7c5a      	ldrb	r2, [r3, #17]
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <LCD_Index2Color+0x18>)
 8003490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4718      	bx	r3
 800349a:	bf00      	nop
 800349c:	200000a4 	.word	0x200000a4
 80034a0:	20025c04 	.word	0x20025c04

080034a4 <LCD_SetColorIndex>:
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <LCD_SetColorIndex+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	7c1a      	ldrb	r2, [r3, #16]
 80034aa:	0752      	lsls	r2, r2, #29
 80034ac:	bf4c      	ite	mi
 80034ae:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80034b0:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80034b2:	6018      	str	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	200000a4 	.word	0x200000a4

080034bc <_SetColor>:
 80034bc:	b508      	push	{r3, lr}
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <_SetColor+0x1c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c4:	4281      	cmp	r1, r0
 80034c6:	d006      	beq.n	80034d6 <_SetColor+0x1a>
 80034c8:	6318      	str	r0, [r3, #48]	; 0x30
 80034ca:	f7ff ffcf 	bl	800346c <LCD_Color2Index>
 80034ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80034d2:	f7ff bfe7 	b.w	80034a4 <LCD_SetColorIndex>
 80034d6:	bd08      	pop	{r3, pc}
 80034d8:	200000a4 	.word	0x200000a4

080034dc <LCD_SetBkColorIndex>:
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LCD_SetBkColorIndex+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	7c1a      	ldrb	r2, [r3, #16]
 80034e2:	0752      	lsls	r2, r2, #29
 80034e4:	bf4c      	ite	mi
 80034e6:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80034e8:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80034ea:	6018      	str	r0, [r3, #0]
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	200000a4 	.word	0x200000a4

080034f4 <_SetBkColor>:
 80034f4:	b508      	push	{r3, lr}
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <_SetBkColor+0x1c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034fc:	4281      	cmp	r1, r0
 80034fe:	d006      	beq.n	800350e <_SetBkColor+0x1a>
 8003500:	6358      	str	r0, [r3, #52]	; 0x34
 8003502:	f7ff ffb3 	bl	800346c <LCD_Color2Index>
 8003506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800350a:	f7ff bfe7 	b.w	80034dc <LCD_SetBkColorIndex>
 800350e:	bd08      	pop	{r3, pc}
 8003510:	200000a4 	.word	0x200000a4

08003514 <LCD_SetBkColor>:
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <LCD_SetBkColor+0x8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4718      	bx	r3
 800351c:	200000b0 	.word	0x200000b0

08003520 <LCD_SetColor>:
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <LCD_SetColor+0x8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4718      	bx	r3
 8003528:	200000b0 	.word	0x200000b0

0800352c <_OnExit>:
 800352c:	b510      	push	{r4, lr}
 800352e:	4c04      	ldr	r4, [pc, #16]	; (8003540 <_OnExit+0x14>)
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	f7fe fe4b 	bl	80021cc <GUI_ALLOC_FreeFixedBlock>
 8003536:	2300      	movs	r3, #0
 8003538:	4a02      	ldr	r2, [pc, #8]	; (8003544 <_OnExit+0x18>)
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	bd10      	pop	{r4, pc}
 8003540:	20025c14 	.word	0x20025c14
 8003544:	20025a74 	.word	0x20025a74

08003548 <LCD_InitColors>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d0a      	ldr	r5, [pc, #40]	; (8003574 <LCD_InitColors+0x2c>)
 800354c:	682c      	ldr	r4, [r5, #0]
 800354e:	b964      	cbnz	r4, 800356a <LCD_InitColors+0x22>
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <LCD_InitColors+0x30>)
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	0080      	lsls	r0, r0, #2
 8003556:	f7fe ff11 	bl	800237c <GUI_ALLOC_GetFixedBlock>
 800355a:	6028      	str	r0, [r5, #0]
 800355c:	b138      	cbz	r0, 800356e <LCD_InitColors+0x26>
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <LCD_InitColors+0x34>)
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <LCD_InitColors+0x38>)
 8003562:	f840 3f04 	str.w	r3, [r0, #4]!
 8003566:	f7ff fa7d 	bl	8002a64 <GUI__RegisterExit>
 800356a:	2000      	movs	r0, #0
 800356c:	bd38      	pop	{r3, r4, r5, pc}
 800356e:	2001      	movs	r0, #1
 8003570:	bd38      	pop	{r3, r4, r5, pc}
 8003572:	bf00      	nop
 8003574:	20025c14 	.word	0x20025c14
 8003578:	200000b4 	.word	0x200000b4
 800357c:	20025a74 	.word	0x20025a74
 8003580:	0800352d 	.word	0x0800352d

08003584 <LCD_GetpPalConvTableUncached>:
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	4604      	mov	r4, r0
 800358a:	b318      	cbz	r0, 80035d4 <LCD_GetpPalConvTableUncached+0x50>
 800358c:	6887      	ldr	r7, [r0, #8]
 800358e:	b31f      	cbz	r7, 80035d8 <LCD_GetpPalConvTableUncached+0x54>
 8003590:	4d14      	ldr	r5, [pc, #80]	; (80035e4 <LCD_GetpPalConvTableUncached+0x60>)
 8003592:	6828      	ldr	r0, [r5, #0]
 8003594:	b320      	cbz	r0, 80035e0 <LCD_GetpPalConvTableUncached+0x5c>
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800359c:	dc1f      	bgt.n	80035de <LCD_GetpPalConvTableUncached+0x5a>
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <LCD_GetpPalConvTableUncached+0x64>)
 80035a0:	2600      	movs	r6, #0
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bfa8      	it	ge
 80035a8:	461a      	movge	r2, r3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4546      	cmp	r6, r8
 80035ae:	da09      	bge.n	80035c4 <LCD_GetpPalConvTableUncached+0x40>
 80035b0:	f8d5 9000 	ldr.w	r9, [r5]
 80035b4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80035b8:	f7ff ff58 	bl	800346c <LCD_Color2Index>
 80035bc:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f3      	b.n	80035ac <LCD_GetpPalConvTableUncached+0x28>
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <LCD_GetpPalConvTableUncached+0x68>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b10b      	cbz	r3, 80035ce <LCD_GetpPalConvTableUncached+0x4a>
 80035ca:	4620      	mov	r0, r4
 80035cc:	4798      	blx	r3
 80035ce:	6828      	ldr	r0, [r5, #0]
 80035d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d8:	4638      	mov	r0, r7
 80035da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035de:	2000      	movs	r0, #0
 80035e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e4:	20025c14 	.word	0x20025c14
 80035e8:	200000b4 	.word	0x200000b4
 80035ec:	20025a74 	.word	0x20025a74

080035f0 <LCD_GetpPalConvTableBM>:
 80035f0:	f7ff bfc8 	b.w	8003584 <LCD_GetpPalConvTableUncached>

080035f4 <LCD_InitLUT>:
 80035f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	4e1d      	ldr	r6, [pc, #116]	; (8003670 <LCD_InitLUT+0x7c>)
 80035fa:	f000 f92e 	bl	800385a <LCD_GetNumLayers>
 80035fe:	2400      	movs	r4, #0
 8003600:	4680      	mov	r8, r0
 8003602:	46b1      	mov	r9, r6
 8003604:	f8df a070 	ldr.w	sl, [pc, #112]	; 8003678 <LCD_InitLUT+0x84>
 8003608:	4544      	cmp	r4, r8
 800360a:	da2d      	bge.n	8003668 <LCD_InitLUT+0x74>
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff fa3d 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8003612:	b338      	cbz	r0, 8003664 <LCD_InitLUT+0x70>
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	4620      	mov	r0, r4
 8003618:	f893 b011 	ldrb.w	fp, [r3, #17]
 800361c:	745c      	strb	r4, [r3, #17]
 800361e:	f000 f863 	bl	80036e8 <LCD_GetBitsPerPixelEx>
 8003622:	2808      	cmp	r0, #8
 8003624:	dd04      	ble.n	8003630 <LCD_InitLUT+0x3c>
 8003626:	f8d9 3000 	ldr.w	r3, [r9]
 800362a:	f883 b011 	strb.w	fp, [r3, #17]
 800362e:	e019      	b.n	8003664 <LCD_InitLUT+0x70>
 8003630:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <LCD_InitLUT+0x80>)
 8003638:	429a      	cmp	r2, r3
 800363a:	d0f4      	beq.n	8003626 <LCD_InitLUT+0x32>
 800363c:	4620      	mov	r0, r4
 800363e:	2500      	movs	r5, #0
 8003640:	f000 f855 	bl	80036ee <LCD_GetNumColorsEx>
 8003644:	4603      	mov	r3, r0
 8003646:	429d      	cmp	r5, r3
 8003648:	daed      	bge.n	8003626 <LCD_InitLUT+0x32>
 800364a:	b2ef      	uxtb	r7, r5
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	3501      	adds	r5, #1
 8003650:	4638      	mov	r0, r7
 8003652:	f7ff ff19 	bl	8003488 <LCD_Index2Color>
 8003656:	4639      	mov	r1, r7
 8003658:	4602      	mov	r2, r0
 800365a:	4620      	mov	r0, r4
 800365c:	f000 f92c 	bl	80038b8 <LCD_SetLUTEntryEx>
 8003660:	9b01      	ldr	r3, [sp, #4]
 8003662:	e7f0      	b.n	8003646 <LCD_InitLUT+0x52>
 8003664:	3401      	adds	r4, #1
 8003666:	e7cf      	b.n	8003608 <LCD_InitLUT+0x14>
 8003668:	b003      	add	sp, #12
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	200000a4 	.word	0x200000a4
 8003674:	0800dda4 	.word	0x0800dda4
 8003678:	20025c04 	.word	0x20025c04

0800367c <LCD_GetBkColorIndex>:
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <LCD_GetBkColorIndex+0xc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200000a4 	.word	0x200000a4

0800368c <LCD_GetColorIndex>:
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <LCD_GetColorIndex+0xc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	200000a4 	.word	0x200000a4

0800369c <_GetDevProp>:
 800369c:	2801      	cmp	r0, #1
 800369e:	b510      	push	{r4, lr}
 80036a0:	460c      	mov	r4, r1
 80036a2:	dc08      	bgt.n	80036b6 <_GetDevProp+0x1a>
 80036a4:	f7ff f9f2 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 80036a8:	b128      	cbz	r0, 80036b6 <_GetDevProp+0x1a>
 80036aa:	68c3      	ldr	r3, [r0, #12]
 80036ac:	4621      	mov	r1, r4
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b4:	4718      	bx	r3
 80036b6:	2000      	movs	r0, #0
 80036b8:	bd10      	pop	{r4, pc}

080036ba <_GetMaxValue>:
 80036ba:	b538      	push	{r3, r4, r5, lr}
 80036bc:	4601      	mov	r1, r0
 80036be:	4605      	mov	r5, r0
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff ffeb 	bl	800369c <_GetDevProp>
 80036c6:	4604      	mov	r4, r0
 80036c8:	4629      	mov	r1, r5
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7ff ffe6 	bl	800369c <_GetDevProp>
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	bfb8      	it	lt
 80036d4:	4620      	movlt	r0, r4
 80036d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80036da:	bd38      	pop	{r3, r4, r5, pc}

080036dc <LCD_GetXSizeEx>:
 80036dc:	2101      	movs	r1, #1
 80036de:	f7ff bfdd 	b.w	800369c <_GetDevProp>

080036e2 <LCD_GetYSizeEx>:
 80036e2:	2102      	movs	r1, #2
 80036e4:	f7ff bfda 	b.w	800369c <_GetDevProp>

080036e8 <LCD_GetBitsPerPixelEx>:
 80036e8:	2108      	movs	r1, #8
 80036ea:	f7ff bfd7 	b.w	800369c <_GetDevProp>

080036ee <LCD_GetNumColorsEx>:
 80036ee:	2109      	movs	r1, #9
 80036f0:	f7ff bfd4 	b.w	800369c <_GetDevProp>

080036f4 <LCD_GetXSize>:
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <LCD_GetXSize+0xc>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	7c58      	ldrb	r0, [r3, #17]
 80036fa:	f7ff bfef 	b.w	80036dc <LCD_GetXSizeEx>
 80036fe:	bf00      	nop
 8003700:	200000a4 	.word	0x200000a4

08003704 <LCD_GetYSize>:
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <LCD_GetYSize+0xc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	7c58      	ldrb	r0, [r3, #17]
 800370a:	f7ff bfea 	b.w	80036e2 <LCD_GetYSizeEx>
 800370e:	bf00      	nop
 8003710:	200000a4 	.word	0x200000a4

08003714 <LCD_GetNumColors>:
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <LCD_GetNumColors+0xc>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	7c58      	ldrb	r0, [r3, #17]
 800371a:	f7ff bfe8 	b.w	80036ee <LCD_GetNumColorsEx>
 800371e:	bf00      	nop
 8003720:	200000a4 	.word	0x200000a4

08003724 <GUI_GetBitsPerPixelEx>:
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <GUI_GetBitsPerPixelEx+0x10>)
 8003726:	2108      	movs	r1, #8
 8003728:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800372c:	68c3      	ldr	r3, [r0, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	4718      	bx	r3
 8003732:	bf00      	nop
 8003734:	20025c04 	.word	0x20025c04

08003738 <LCD_GetPaletteEx>:
 8003738:	b510      	push	{r4, lr}
 800373a:	f7ff f9a7 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 800373e:	b128      	cbz	r0, 800374c <LCD_GetPaletteEx+0x14>
 8003740:	68c3      	ldr	r3, [r0, #12]
 8003742:	2102      	movs	r1, #2
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800374a:	4718      	bx	r3
 800374c:	bd10      	pop	{r4, pc}
	...

08003750 <LCD_GetPalette>:
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <LCD_GetPalette+0xc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	7c58      	ldrb	r0, [r3, #17]
 8003756:	f7ff bfef 	b.w	8003738 <LCD_GetPaletteEx>
 800375a:	bf00      	nop
 800375c:	200000a4 	.word	0x200000a4

08003760 <GUI_GetpfIndex2ColorEx>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <GUI_GetpfIndex2ColorEx+0xc>)
 8003762:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	6858      	ldr	r0, [r3, #4]
 800376a:	4770      	bx	lr
 800376c:	20025c04 	.word	0x20025c04

08003770 <GUI_GetpfColor2IndexEx>:
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <GUI_GetpfColor2IndexEx+0xc>)
 8003772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	4770      	bx	lr
 800377c:	20025c04 	.word	0x20025c04

08003780 <LCD_GetXSizeMax>:
 8003780:	2001      	movs	r0, #1
 8003782:	f7ff bf9a 	b.w	80036ba <_GetMaxValue>

08003786 <LCD_GetYSizeMax>:
 8003786:	2002      	movs	r0, #2
 8003788:	f7ff bf97 	b.w	80036ba <_GetMaxValue>

0800378c <LCD_SetDisplaySize>:
 800378c:	4b01      	ldr	r3, [pc, #4]	; (8003794 <LCD_SetDisplaySize+0x8>)
 800378e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003792:	4770      	bx	lr
 8003794:	20025a80 	.word	0x20025a80

08003798 <LCD_GetXSizeDisplay>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <LCD_GetXSizeDisplay+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20025a80 	.word	0x20025a80

080037a4 <LCD_GetYSizeDisplay>:
 80037a4:	4b01      	ldr	r3, [pc, #4]	; (80037ac <LCD_GetYSizeDisplay+0x8>)
 80037a6:	6858      	ldr	r0, [r3, #4]
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20025a80 	.word	0x20025a80

080037b0 <LCD__GetBPP>:
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d03b      	beq.n	800382c <LCD__GetBPP+0x7c>
 80037b4:	f030 0301 	bics.w	r3, r0, #1
 80037b8:	d029      	beq.n	800380e <LCD__GetBPP+0x5e>
 80037ba:	f030 0303 	bics.w	r3, r0, #3
 80037be:	d028      	beq.n	8003812 <LCD__GetBPP+0x62>
 80037c0:	f030 0307 	bics.w	r3, r0, #7
 80037c4:	d027      	beq.n	8003816 <LCD__GetBPP+0x66>
 80037c6:	f030 030f 	bics.w	r3, r0, #15
 80037ca:	d026      	beq.n	800381a <LCD__GetBPP+0x6a>
 80037cc:	f030 031f 	bics.w	r3, r0, #31
 80037d0:	d025      	beq.n	800381e <LCD__GetBPP+0x6e>
 80037d2:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80037d6:	d024      	beq.n	8003822 <LCD__GetBPP+0x72>
 80037d8:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	b30b      	cbz	r3, 8003826 <LCD__GetBPP+0x76>
 80037e2:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80037e6:	f023 030f 	bic.w	r3, r3, #15
 80037ea:	b1e3      	cbz	r3, 8003826 <LCD__GetBPP+0x76>
 80037ec:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80037f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80037f4:	b1bb      	cbz	r3, 8003826 <LCD__GetBPP+0x76>
 80037f6:	0c03      	lsrs	r3, r0, #16
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	b1a3      	cbz	r3, 8003826 <LCD__GetBPP+0x76>
 80037fc:	0c83      	lsrs	r3, r0, #18
 80037fe:	049b      	lsls	r3, r3, #18
 8003800:	b19b      	cbz	r3, 800382a <LCD__GetBPP+0x7a>
 8003802:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003806:	bf0c      	ite	eq
 8003808:	2018      	moveq	r0, #24
 800380a:	2020      	movne	r0, #32
 800380c:	4770      	bx	lr
 800380e:	2001      	movs	r0, #1
 8003810:	4770      	bx	lr
 8003812:	2002      	movs	r0, #2
 8003814:	4770      	bx	lr
 8003816:	2003      	movs	r0, #3
 8003818:	4770      	bx	lr
 800381a:	2004      	movs	r0, #4
 800381c:	4770      	bx	lr
 800381e:	2005      	movs	r0, #5
 8003820:	4770      	bx	lr
 8003822:	2008      	movs	r0, #8
 8003824:	4770      	bx	lr
 8003826:	2010      	movs	r0, #16
 8003828:	4770      	bx	lr
 800382a:	2012      	movs	r0, #18
 800382c:	4770      	bx	lr

0800382e <LCD__GetBPPDevice>:
 800382e:	b508      	push	{r3, lr}
 8003830:	f7ff ffbe 	bl	80037b0 <LCD__GetBPP>
 8003834:	2801      	cmp	r0, #1
 8003836:	d00f      	beq.n	8003858 <LCD__GetBPPDevice+0x2a>
 8003838:	1e83      	subs	r3, r0, #2
 800383a:	2b06      	cmp	r3, #6
 800383c:	d909      	bls.n	8003852 <LCD__GetBPPDevice+0x24>
 800383e:	f1a0 0309 	sub.w	r3, r0, #9
 8003842:	2b07      	cmp	r3, #7
 8003844:	d907      	bls.n	8003856 <LCD__GetBPPDevice+0x28>
 8003846:	3811      	subs	r0, #17
 8003848:	280f      	cmp	r0, #15
 800384a:	bf8c      	ite	hi
 800384c:	2000      	movhi	r0, #0
 800384e:	2020      	movls	r0, #32
 8003850:	bd08      	pop	{r3, pc}
 8003852:	2008      	movs	r0, #8
 8003854:	bd08      	pop	{r3, pc}
 8003856:	2010      	movs	r0, #16
 8003858:	bd08      	pop	{r3, pc}

0800385a <LCD_GetNumLayers>:
 800385a:	b510      	push	{r4, lr}
 800385c:	2000      	movs	r0, #0
 800385e:	f7ff f915 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8003862:	1c04      	adds	r4, r0, #0
 8003864:	f04f 0001 	mov.w	r0, #1
 8003868:	bf18      	it	ne
 800386a:	2401      	movne	r4, #1
 800386c:	f7ff f90e 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8003870:	b100      	cbz	r0, 8003874 <LCD_GetNumLayers+0x1a>
 8003872:	3401      	adds	r4, #1
 8003874:	4620      	mov	r0, r4
 8003876:	bd10      	pop	{r4, pc}

08003878 <LCD_SelectLCD>:
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <LCD_SelectLCD+0x38>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	b510      	push	{r4, lr}
 800387e:	7c51      	ldrb	r1, [r2, #17]
 8003880:	461c      	mov	r4, r3
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <LCD_SelectLCD+0x3c>)
 8003884:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8003888:	b140      	cbz	r0, 800389c <LCD_SelectLCD+0x24>
 800388a:	68c3      	ldr	r3, [r0, #12]
 800388c:	b113      	cbz	r3, 8003894 <LCD_SelectLCD+0x1c>
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d001      	beq.n	8003898 <LCD_SelectLCD+0x20>
 8003894:	6800      	ldr	r0, [r0, #0]
 8003896:	e7f7      	b.n	8003888 <LCD_SelectLCD+0x10>
 8003898:	f7ff f930 	bl	8002afc <GUI_DEVICE_Unlink>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	2200      	movs	r2, #0
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60
 80038a2:	f103 0208 	add.w	r2, r3, #8
 80038a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038aa:	615a      	str	r2, [r3, #20]
 80038ac:	f7ff bd7e 	b.w	80033ac <LCD_SetClipRectMax>
 80038b0:	200000a4 	.word	0x200000a4
 80038b4:	20025c04 	.word	0x20025c04

080038b8 <LCD_SetLUTEntryEx>:
 80038b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ba:	460c      	mov	r4, r1
 80038bc:	4615      	mov	r5, r2
 80038be:	f7ff f8e5 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 80038c2:	9001      	str	r0, [sp, #4]
 80038c4:	b908      	cbnz	r0, 80038ca <LCD_SetLUTEntryEx+0x12>
 80038c6:	2001      	movs	r0, #1
 80038c8:	e00c      	b.n	80038e4 <LCD_SetLUTEntryEx+0x2c>
 80038ca:	68c3      	ldr	r3, [r0, #12]
 80038cc:	2110      	movs	r1, #16
 80038ce:	a801      	add	r0, sp, #4
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	4798      	blx	r3
 80038d4:	4603      	mov	r3, r0
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d0f5      	beq.n	80038c6 <LCD_SetLUTEntryEx+0xe>
 80038da:	9801      	ldr	r0, [sp, #4]
 80038dc:	462a      	mov	r2, r5
 80038de:	4621      	mov	r1, r4
 80038e0:	4798      	blx	r3
 80038e2:	2000      	movs	r0, #0
 80038e4:	b003      	add	sp, #12
 80038e6:	bd30      	pop	{r4, r5, pc}

080038e8 <LCD_SetSizeEx>:
 80038e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ea:	460c      	mov	r4, r1
 80038ec:	4615      	mov	r5, r2
 80038ee:	f7ff f8cd 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 80038f2:	9001      	str	r0, [sp, #4]
 80038f4:	b908      	cbnz	r0, 80038fa <LCD_SetSizeEx+0x12>
 80038f6:	2001      	movs	r0, #1
 80038f8:	e00c      	b.n	8003914 <LCD_SetSizeEx+0x2c>
 80038fa:	68c3      	ldr	r3, [r0, #12]
 80038fc:	210b      	movs	r1, #11
 80038fe:	a801      	add	r0, sp, #4
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	4798      	blx	r3
 8003904:	4603      	mov	r3, r0
 8003906:	2800      	cmp	r0, #0
 8003908:	d0f5      	beq.n	80038f6 <LCD_SetSizeEx+0xe>
 800390a:	9801      	ldr	r0, [sp, #4]
 800390c:	462a      	mov	r2, r5
 800390e:	4621      	mov	r1, r4
 8003910:	4798      	blx	r3
 8003912:	2000      	movs	r0, #0
 8003914:	b003      	add	sp, #12
 8003916:	bd30      	pop	{r4, r5, pc}

08003918 <LCD_SetVSizeEx>:
 8003918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800391a:	460c      	mov	r4, r1
 800391c:	4615      	mov	r5, r2
 800391e:	f7ff f8b5 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8003922:	9001      	str	r0, [sp, #4]
 8003924:	b908      	cbnz	r0, 800392a <LCD_SetVSizeEx+0x12>
 8003926:	2001      	movs	r0, #1
 8003928:	e00c      	b.n	8003944 <LCD_SetVSizeEx+0x2c>
 800392a:	68c3      	ldr	r3, [r0, #12]
 800392c:	210a      	movs	r1, #10
 800392e:	a801      	add	r0, sp, #4
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	4798      	blx	r3
 8003934:	4603      	mov	r3, r0
 8003936:	2800      	cmp	r0, #0
 8003938:	d0f5      	beq.n	8003926 <LCD_SetVSizeEx+0xe>
 800393a:	9801      	ldr	r0, [sp, #4]
 800393c:	462a      	mov	r2, r5
 800393e:	4621      	mov	r1, r4
 8003940:	4798      	blx	r3
 8003942:	2000      	movs	r0, #0
 8003944:	b003      	add	sp, #12
 8003946:	bd30      	pop	{r4, r5, pc}

08003948 <LCD_UpdateColorIndices>:
 8003948:	b510      	push	{r4, lr}
 800394a:	4c07      	ldr	r4, [pc, #28]	; (8003968 <LCD_UpdateColorIndices+0x20>)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003950:	f7ff fd8c 	bl	800346c <LCD_Color2Index>
 8003954:	f7ff fda6 	bl	80034a4 <LCD_SetColorIndex>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800395c:	f7ff fd86 	bl	800346c <LCD_Color2Index>
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003964:	f7ff bdba 	b.w	80034dc <LCD_SetBkColorIndex>
 8003968:	200000a4 	.word	0x200000a4

0800396c <_Log2PhysY_X1Y0S0>:
 800396c:	4610      	mov	r0, r2
 800396e:	4770      	bx	lr

08003970 <_Log2PhysY_X1Y1S0>:
 8003970:	6840      	ldr	r0, [r0, #4]
 8003972:	1a80      	subs	r0, r0, r2
 8003974:	3801      	subs	r0, #1
 8003976:	4770      	bx	lr

08003978 <_Log2PhysY_X1Y0S1>:
 8003978:	4608      	mov	r0, r1
 800397a:	4770      	bx	lr

0800397c <_Log2PhysY_X1Y1S1>:
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	1a40      	subs	r0, r0, r1
 8003980:	3801      	subs	r0, #1
 8003982:	4770      	bx	lr

08003984 <_SetPixelIndex>:
 8003984:	b410      	push	{r4}
 8003986:	6884      	ldr	r4, [r0, #8]
 8003988:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800398c:	46a4      	mov	ip, r4
 800398e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003992:	4760      	bx	ip

08003994 <_GetPixelIndex>:
 8003994:	6883      	ldr	r3, [r0, #8]
 8003996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800399a:	4718      	bx	r3

0800399c <_XorPixel>:
 800399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399e:	6887      	ldr	r7, [r0, #8]
 80039a0:	4616      	mov	r6, r2
 80039a2:	4604      	mov	r4, r0
 80039a4:	460d      	mov	r5, r1
 80039a6:	f7ff fff5 	bl	8003994 <_GetPixelIndex>
 80039aa:	9001      	str	r0, [sp, #4]
 80039ac:	9a01      	ldr	r2, [sp, #4]
 80039ae:	4629      	mov	r1, r5
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	4620      	mov	r0, r4
 80039b4:	4053      	eors	r3, r2
 80039b6:	4632      	mov	r2, r6
 80039b8:	f7ff ffe4 	bl	8003984 <_SetPixelIndex>
 80039bc:	b003      	add	sp, #12
 80039be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c0 <_DrawHLine>:
 80039c0:	b513      	push	{r0, r1, r4, lr}
 80039c2:	6884      	ldr	r4, [r0, #8]
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80039ca:	47a0      	blx	r4
 80039cc:	b002      	add	sp, #8
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <_DrawVLine>:
 80039d0:	b513      	push	{r0, r1, r4, lr}
 80039d2:	6884      	ldr	r4, [r0, #8]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	460b      	mov	r3, r1
 80039d8:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80039dc:	47a0      	blx	r4
 80039de:	b002      	add	sp, #8
 80039e0:	bd10      	pop	{r4, pc}

080039e2 <_FillRect>:
 80039e2:	b410      	push	{r4}
 80039e4:	6884      	ldr	r4, [r0, #8]
 80039e6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80039ea:	46a4      	mov	ip, r4
 80039ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f0:	4760      	bx	ip

080039f2 <_DrawBitmap>:
 80039f2:	b430      	push	{r4, r5}
 80039f4:	6884      	ldr	r4, [r0, #8]
 80039f6:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
 80039fa:	46a4      	mov	ip, r4
 80039fc:	bc30      	pop	{r4, r5}
 80039fe:	4760      	bx	ip

08003a00 <_GetDevFunc_SetRect>:
 8003a00:	4770      	bx	lr
	...

08003a04 <_GetDevFunc_SetRectOutside>:
 8003a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a06:	9e07      	ldr	r6, [sp, #28]
 8003a08:	6884      	ldr	r4, [r0, #8]
 8003a0a:	4d0c      	ldr	r5, [pc, #48]	; (8003a3c <_GetDevFunc_SetRectOutside+0x38>)
 8003a0c:	b176      	cbz	r6, 8003a2c <_GetDevFunc_SetRectOutside+0x28>
 8003a0e:	6828      	ldr	r0, [r5, #0]
 8003a10:	b988      	cbnz	r0, 8003a36 <_GetDevFunc_SetRectOutside+0x32>
 8003a12:	9806      	ldr	r0, [sp, #24]
 8003a14:	9000      	str	r0, [sp, #0]
 8003a16:	4620      	mov	r0, r4
 8003a18:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8003a1c:	47b0      	blx	r6
 8003a1e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <_GetDevFunc_SetRectOutside+0x3c>)
 8003a26:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8003a2a:	e004      	b.n	8003a36 <_GetDevFunc_SetRectOutside+0x32>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b113      	cbz	r3, 8003a36 <_GetDevFunc_SetRectOutside+0x32>
 8003a30:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8003a34:	602e      	str	r6, [r5, #0]
 8003a36:	b002      	add	sp, #8
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20025a88 	.word	0x20025a88
 8003a40:	08003a01 	.word	0x08003a01

08003a44 <_ReadPixelCust_16bpp>:
 8003a44:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a46:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8003a4a:	6990      	ldr	r0, [r2, #24]
 8003a4c:	4718      	bx	r3

08003a4e <_ReadPixelCust_18bpp>:
 8003a4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a50:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8003a54:	6990      	ldr	r0, [r2, #24]
 8003a56:	4718      	bx	r3

08003a58 <_ReadRectCust_16bpp>:
 8003a58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a5e:	4691      	mov	r9, r2
 8003a60:	6885      	ldr	r5, [r0, #8]
 8003a62:	468a      	mov	sl, r1
 8003a64:	4698      	mov	r8, r3
 8003a66:	9400      	str	r4, [sp, #0]
 8003a68:	ebc9 0404 	rsb	r4, r9, r4
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8003a72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003a74:	47b0      	blx	r6
 8003a76:	ebca 0608 	rsb	r6, sl, r8
 8003a7a:	1c62      	adds	r2, r4, #1
 8003a7c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003a7e:	4639      	mov	r1, r7
 8003a80:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 8003a84:	fb06 2202 	mla	r2, r6, r2, r2
 8003a88:	6980      	ldr	r0, [r0, #24]
 8003a8a:	b002      	add	sp, #8
 8003a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	4718      	bx	r3

08003a92 <_ReadRectCust_18bpp>:
 8003a92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a98:	4691      	mov	r9, r2
 8003a9a:	6885      	ldr	r5, [r0, #8]
 8003a9c:	468a      	mov	sl, r1
 8003a9e:	4698      	mov	r8, r3
 8003aa0:	9400      	str	r4, [sp, #0]
 8003aa2:	ebc9 0404 	rsb	r4, r9, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8003aac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003aae:	47b0      	blx	r6
 8003ab0:	ebca 0608 	rsb	r6, sl, r8
 8003ab4:	1c62      	adds	r2, r4, #1
 8003ab6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003ab8:	4639      	mov	r1, r7
 8003aba:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 8003abe:	fb06 2202 	mla	r2, r6, r2, r2
 8003ac2:	6980      	ldr	r0, [r0, #24]
 8003ac4:	b002      	add	sp, #8
 8003ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aca:	4718      	bx	r3

08003acc <_GetDevFunc>:
 8003acc:	3901      	subs	r1, #1
 8003ace:	2917      	cmp	r1, #23
 8003ad0:	d828      	bhi.n	8003b24 <_GetDevFunc+0x58>
 8003ad2:	e8df f001 	tbb	[pc, r1]
 8003ad6:	2714      	.short	0x2714
 8003ad8:	27272727 	.word	0x27272727
 8003adc:	0e272727 	.word	0x0e272727
 8003ae0:	29191210 	.word	0x29191210
 8003ae4:	2727270c 	.word	0x2727270c
 8003ae8:	23272727 	.word	0x23272727
 8003aec:	251e      	.short	0x251e
 8003aee:	480f      	ldr	r0, [pc, #60]	; (8003b2c <_GetDevFunc+0x60>)
 8003af0:	4770      	bx	lr
 8003af2:	480f      	ldr	r0, [pc, #60]	; (8003b30 <_GetDevFunc+0x64>)
 8003af4:	4770      	bx	lr
 8003af6:	480f      	ldr	r0, [pc, #60]	; (8003b34 <_GetDevFunc+0x68>)
 8003af8:	4770      	bx	lr
 8003afa:	480f      	ldr	r0, [pc, #60]	; (8003b38 <_GetDevFunc+0x6c>)
 8003afc:	4770      	bx	lr
 8003afe:	6803      	ldr	r3, [r0, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 8003b06:	4770      	bx	lr
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8003b10:	4770      	bx	lr
 8003b12:	6803      	ldr	r3, [r0, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003b1a:	4770      	bx	lr
 8003b1c:	4807      	ldr	r0, [pc, #28]	; (8003b3c <_GetDevFunc+0x70>)
 8003b1e:	4770      	bx	lr
 8003b20:	4807      	ldr	r0, [pc, #28]	; (8003b40 <_GetDevFunc+0x74>)
 8003b22:	4770      	bx	lr
 8003b24:	2000      	movs	r0, #0
 8003b26:	4770      	bx	lr
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <_GetDevFunc+0x78>)
 8003b2a:	4770      	bx	lr
 8003b2c:	08003eef 	.word	0x08003eef
 8003b30:	08003edb 	.word	0x08003edb
 8003b34:	08003ec7 	.word	0x08003ec7
 8003b38:	08003e7d 	.word	0x08003e7d
 8003b3c:	08003de1 	.word	0x08003de1
 8003b40:	08003a05 	.word	0x08003a05
 8003b44:	08003f05 	.word	0x08003f05

08003b48 <_GetDevProp>:
 8003b48:	3901      	subs	r1, #1
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	290d      	cmp	r1, #13
 8003b4e:	d823      	bhi.n	8003b98 <_GetDevProp+0x50>
 8003b50:	e8df f001 	tbb	[pc, r1]
 8003b54:	0f0d0b09 	.word	0x0f0d0b09
 8003b58:	11222222 	.word	0x11222222
 8003b5c:	13070725 	.word	0x13070725
 8003b60:	1d18      	.short	0x1d18
 8003b62:	2001      	movs	r0, #1
 8003b64:	4770      	bx	lr
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	4770      	bx	lr
 8003b6a:	6840      	ldr	r0, [r0, #4]
 8003b6c:	4770      	bx	lr
 8003b6e:	6880      	ldr	r0, [r0, #8]
 8003b70:	4770      	bx	lr
 8003b72:	68c0      	ldr	r0, [r0, #12]
 8003b74:	4770      	bx	lr
 8003b76:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003b78:	4770      	bx	lr
 8003b7a:	b188      	cbz	r0, 8003ba0 <_GetDevProp+0x58>
 8003b7c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003b7e:	f000 0001 	and.w	r0, r0, #1
 8003b82:	4770      	bx	lr
 8003b84:	b160      	cbz	r0, 8003ba0 <_GetDevProp+0x58>
 8003b86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003b88:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003b8c:	4770      	bx	lr
 8003b8e:	b138      	cbz	r0, 8003ba0 <_GetDevProp+0x58>
 8003b90:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003b92:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003b96:	4770      	bx	lr
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b9c:	4770      	bx	lr
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	4770      	bx	lr

08003ba2 <_GetDevData>:
 8003ba2:	6883      	ldr	r3, [r0, #8]
 8003ba4:	2901      	cmp	r1, #1
 8003ba6:	bf0c      	ite	eq
 8003ba8:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8003baa:	2000      	movne	r0, #0
 8003bac:	4770      	bx	lr

08003bae <_GetRect>:
 8003bae:	6882      	ldr	r2, [r0, #8]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	800b      	strh	r3, [r1, #0]
 8003bb4:	804b      	strh	r3, [r1, #2]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	808b      	strh	r3, [r1, #4]
 8003bbc:	6853      	ldr	r3, [r2, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	80cb      	strh	r3, [r1, #6]
 8003bc2:	4770      	bx	lr

08003bc4 <GUIDRV_FlexColor__SetLog2Phys>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	4c10      	ldr	r4, [pc, #64]	; (8003c08 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8003bc8:	b091      	sub	sp, #68	; 0x44
 8003bca:	4607      	mov	r7, r0
 8003bcc:	4626      	mov	r6, r4
 8003bce:	466d      	mov	r5, sp
 8003bd0:	3420      	adds	r4, #32
 8003bd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003bda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	ad08      	add	r5, sp, #32
 8003be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003be8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003bec:	aa10      	add	r2, sp, #64	; 0x40
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003bf4:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8003bf8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bfc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8003c00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003c04:	b011      	add	sp, #68	; 0x44
 8003c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c08:	0800b51c 	.word	0x0800b51c

08003c0c <_SetOrg>:
 8003c0c:	b507      	push	{r0, r1, r2, lr}
 8003c0e:	e88d 0006 	stmia.w	sp, {r1, r2}
 8003c12:	466a      	mov	r2, sp
 8003c14:	2103      	movs	r1, #3
 8003c16:	6980      	ldr	r0, [r0, #24]
 8003c18:	f7fe f972 	bl	8001f00 <LCD_X_DisplayDriver>
 8003c1c:	b003      	add	sp, #12
 8003c1e:	f85d fb04 	ldr.w	pc, [sp], #4

08003c22 <_Log2PhysY_X0Y0S1>:
 8003c22:	4608      	mov	r0, r1
 8003c24:	4770      	bx	lr

08003c26 <_Log2PhysX_X0Y0S0>:
 8003c26:	4608      	mov	r0, r1
 8003c28:	4770      	bx	lr

08003c2a <_Log2PhysX_X0Y1S0>:
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	4770      	bx	lr

08003c2e <_Log2PhysX_X0Y0S1>:
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4770      	bx	lr

08003c32 <_Log2PhysX_X0Y1S1>:
 8003c32:	4610      	mov	r0, r2
 8003c34:	4770      	bx	lr

08003c36 <_Log2PhysY_X0Y0S0>:
 8003c36:	4610      	mov	r0, r2
 8003c38:	4770      	bx	lr

08003c3a <_Log2PhysY_X0Y1S0>:
 8003c3a:	6840      	ldr	r0, [r0, #4]
 8003c3c:	1a80      	subs	r0, r0, r2
 8003c3e:	3801      	subs	r0, #1
 8003c40:	4770      	bx	lr

08003c42 <_Log2PhysX_X1Y0S0>:
 8003c42:	6800      	ldr	r0, [r0, #0]
 8003c44:	1a40      	subs	r0, r0, r1
 8003c46:	3801      	subs	r0, #1
 8003c48:	4770      	bx	lr

08003c4a <_Log2PhysX_X1Y1S0>:
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	1a40      	subs	r0, r0, r1
 8003c4e:	3801      	subs	r0, #1
 8003c50:	4770      	bx	lr

08003c52 <_Log2PhysX_X1Y0S1>:
 8003c52:	6840      	ldr	r0, [r0, #4]
 8003c54:	1a80      	subs	r0, r0, r2
 8003c56:	3801      	subs	r0, #1
 8003c58:	4770      	bx	lr

08003c5a <_Log2PhysX_X1Y1S1>:
 8003c5a:	6840      	ldr	r0, [r0, #4]
 8003c5c:	1a80      	subs	r0, r0, r2
 8003c5e:	3801      	subs	r0, #1
 8003c60:	4770      	bx	lr

08003c62 <_Log2PhysY_X0Y1S1>:
 8003c62:	6800      	ldr	r0, [r0, #0]
 8003c64:	1a40      	subs	r0, r0, r1
 8003c66:	3801      	subs	r0, #1
 8003c68:	4770      	bx	lr

08003c6a <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8003c6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c6e:	6884      	ldr	r4, [r0, #8]
 8003c70:	4698      	mov	r8, r3
 8003c72:	460e      	mov	r6, r1
 8003c74:	4617      	mov	r7, r2
 8003c76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003c78:	079b      	lsls	r3, r3, #30
 8003c7a:	d52e      	bpl.n	8003cda <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 8003c7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c80:	4620      	mov	r0, r4
 8003c82:	4798      	blx	r3
 8003c84:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003c88:	4605      	mov	r5, r0
 8003c8a:	463a      	mov	r2, r7
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4798      	blx	r3
 8003c92:	69a3      	ldr	r3, [r4, #24]
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	4606      	mov	r6, r0
 8003c98:	429d      	cmp	r5, r3
 8003c9a:	bfd4      	ite	le
 8003c9c:	2300      	movle	r3, #0
 8003c9e:	2301      	movgt	r3, #1
 8003ca0:	4295      	cmp	r5, r2
 8003ca2:	bfb8      	it	lt
 8003ca4:	f043 0301 	orrlt.w	r3, r3, #1
 8003ca8:	6962      	ldr	r2, [r4, #20]
 8003caa:	4290      	cmp	r0, r2
 8003cac:	bfb8      	it	lt
 8003cae:	f043 0301 	orrlt.w	r3, r3, #1
 8003cb2:	b913      	cbnz	r3, 8003cba <GUIDRV_FlexColor__SetPixelIndexNoCache+0x50>
 8003cb4:	69e3      	ldr	r3, [r4, #28]
 8003cb6:	4298      	cmp	r0, r3
 8003cb8:	dd0a      	ble.n	8003cd0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x66>
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	3a01      	subs	r2, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	9200      	str	r2, [sp, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8003ccc:	4611      	mov	r1, r2
 8003cce:	47b8      	blx	r7
 8003cd0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	e001      	b.n	8003cde <GUIDRV_FlexColor__SetPixelIndexNoCache+0x74>
 8003cda:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4798      	blx	r3
 8003ce2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	4620      	mov	r0, r4
 8003cea:	b002      	add	sp, #8
 8003cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf0:	4718      	bx	r3

08003cf2 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8003cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cf4:	6884      	ldr	r4, [r0, #8]
 8003cf6:	460e      	mov	r6, r1
 8003cf8:	4617      	mov	r7, r2
 8003cfa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003cfc:	079b      	lsls	r3, r3, #30
 8003cfe:	d543      	bpl.n	8003d88 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x96>
 8003d00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d04:	4620      	mov	r0, r4
 8003d06:	4798      	blx	r3
 8003d08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4605      	mov	r5, r0
 8003d10:	463a      	mov	r2, r7
 8003d12:	4620      	mov	r0, r4
 8003d14:	4798      	blx	r3
 8003d16:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	b11b      	cbz	r3, 8003d26 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2101      	movs	r1, #1
 8003d22:	4620      	mov	r0, r4
 8003d24:	4798      	blx	r3
 8003d26:	69a3      	ldr	r3, [r4, #24]
 8003d28:	6922      	ldr	r2, [r4, #16]
 8003d2a:	429d      	cmp	r5, r3
 8003d2c:	bfd4      	ite	le
 8003d2e:	2300      	movle	r3, #0
 8003d30:	2301      	movgt	r3, #1
 8003d32:	4295      	cmp	r5, r2
 8003d34:	bfb8      	it	lt
 8003d36:	f043 0301 	orrlt.w	r3, r3, #1
 8003d3a:	6962      	ldr	r2, [r4, #20]
 8003d3c:	4296      	cmp	r6, r2
 8003d3e:	bfb8      	it	lt
 8003d40:	f043 0301 	orrlt.w	r3, r3, #1
 8003d44:	b913      	cbnz	r3, 8003d4c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5a>
 8003d46:	69e3      	ldr	r3, [r4, #28]
 8003d48:	429e      	cmp	r6, r3
 8003d4a:	dd0a      	ble.n	8003d62 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x70>
 8003d4c:	6862      	ldr	r2, [r4, #4]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	3a01      	subs	r2, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	9200      	str	r2, [sp, #0]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8003d5e:	4611      	mov	r1, r2
 8003d60:	47b8      	blx	r7
 8003d62:	4629      	mov	r1, r5
 8003d64:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d68:	4632      	mov	r2, r6
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4798      	blx	r3
 8003d6e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003d72:	4620      	mov	r0, r4
 8003d74:	4798      	blx	r3
 8003d76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	b17b      	cbz	r3, 8003d9e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8003d7e:	2201      	movs	r2, #1
 8003d80:	2100      	movs	r1, #0
 8003d82:	4620      	mov	r0, r4
 8003d84:	4798      	blx	r3
 8003d86:	e00a      	b.n	8003d9e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8003d88:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	4798      	blx	r3
 8003d90:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003d94:	4620      	mov	r0, r4
 8003d96:	b003      	add	sp, #12
 8003d98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003d9c:	4718      	bx	r3
 8003d9e:	4628      	mov	r0, r5
 8003da0:	b003      	add	sp, #12
 8003da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003da4 <GUIDRV_FlexColor__InitOnce>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	6885      	ldr	r5, [r0, #8]
 8003da8:	4604      	mov	r4, r0
 8003daa:	b99d      	cbnz	r5, 8003dd4 <GUIDRV_FlexColor__InitOnce+0x30>
 8003dac:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8003db0:	f7fe fae4 	bl	800237c <GUI_ALLOC_GetFixedBlock>
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <GUIDRV_FlexColor__InitOnce+0x34>)
 8003db6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003dba:	60a0      	str	r0, [r4, #8]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4798      	blx	r3
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	641c      	str	r4, [r3, #64]	; 0x40
 8003dc8:	84da      	strh	r2, [r3, #38]	; 0x26
 8003dca:	2201      	movs	r2, #1
 8003dcc:	621a      	str	r2, [r3, #32]
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <GUIDRV_FlexColor__InitOnce+0x38>)
 8003dd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000ac 	.word	0x200000ac
 8003ddc:	08003bc5 	.word	0x08003bc5

08003de0 <_SetDevFunc>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4606      	mov	r6, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	4614      	mov	r4, r2
 8003de8:	f7ff ffdc 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003dec:	68b3      	ldr	r3, [r6, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03b      	beq.n	8003e6a <_SetDevFunc+0x8a>
 8003df2:	2d26      	cmp	r5, #38	; 0x26
 8003df4:	d002      	beq.n	8003dfc <_SetDevFunc+0x1c>
 8003df6:	2d27      	cmp	r5, #39	; 0x27
 8003df8:	d016      	beq.n	8003e28 <_SetDevFunc+0x48>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	2a10      	cmp	r2, #16
 8003e00:	d002      	beq.n	8003e08 <_SetDevFunc+0x28>
 8003e02:	2a12      	cmp	r2, #18
 8003e04:	d008      	beq.n	8003e18 <_SetDevFunc+0x38>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <_SetDevFunc+0x8c>)
 8003e0a:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 8003e0e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003e12:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <_SetDevFunc+0x90>)
 8003e1a:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8003e1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8003e22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	2a10      	cmp	r2, #16
 8003e2c:	d002      	beq.n	8003e34 <_SetDevFunc+0x54>
 8003e2e:	2a12      	cmp	r2, #18
 8003e30:	d00e      	beq.n	8003e50 <_SetDevFunc+0x70>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	b13c      	cbz	r4, 8003e46 <_SetDevFunc+0x66>
 8003e36:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <_SetDevFunc+0x94>)
 8003e38:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8003e3c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8003e40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8003e4a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	b13c      	cbz	r4, 8003e62 <_SetDevFunc+0x82>
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <_SetDevFunc+0x98>)
 8003e54:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003e58:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003e5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8003e66:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	08003a45 	.word	0x08003a45
 8003e70:	08003a4f 	.word	0x08003a4f
 8003e74:	08003a59 	.word	0x08003a59
 8003e78:	08003a93 	.word	0x08003a93

08003e7c <_GetDevFunc_Init>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4605      	mov	r5, r0
 8003e80:	f7ff ff90 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e88:	68ac      	ldr	r4, [r5, #8]
 8003e8a:	f7fe fa77 	bl	800237c <GUI_ALLOC_GetFixedBlock>
 8003e8e:	66a0      	str	r0, [r4, #104]	; 0x68
 8003e90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	3007      	adds	r0, #7
 8003e96:	10c0      	asrs	r0, r0, #3
 8003e98:	4358      	muls	r0, r3
 8003e9a:	f7fe fa6f 	bl	800237c <GUI_ALLOC_GetFixedBlock>
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003ea4:	69a8      	ldr	r0, [r5, #24]
 8003ea6:	f7fe f82b 	bl	8001f00 <LCD_X_DisplayDriver>
 8003eaa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003eae:	4605      	mov	r5, r0
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	4798      	blx	r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003eba:	4798      	blx	r3
 8003ebc:	2d00      	cmp	r5, #0
 8003ebe:	bfd4      	ite	le
 8003ec0:	2000      	movle	r0, #0
 8003ec2:	2001      	movgt	r0, #1
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}

08003ec6 <_GetDevFunc_SetSize>:
 8003ec6:	b570      	push	{r4, r5, r6, lr}
 8003ec8:	4606      	mov	r6, r0
 8003eca:	460d      	mov	r5, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	f7ff ff69 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003ed2:	68b3      	ldr	r3, [r6, #8]
 8003ed4:	601d      	str	r5, [r3, #0]
 8003ed6:	605c      	str	r4, [r3, #4]
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}

08003eda <_GetDevFunc_SetVSize>:
 8003eda:	b570      	push	{r4, r5, r6, lr}
 8003edc:	4606      	mov	r6, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	f7ff ff5f 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003ee6:	68b3      	ldr	r3, [r6, #8]
 8003ee8:	609d      	str	r5, [r3, #8]
 8003eea:	60dc      	str	r4, [r3, #12]
 8003eec:	bd70      	pop	{r4, r5, r6, pc}

08003eee <_GetDevFunc_Off>:
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	f7ff ff57 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2106      	movs	r1, #6
 8003efa:	69a0      	ldr	r0, [r4, #24]
 8003efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f00:	f7fd bffe 	b.w	8001f00 <LCD_X_DisplayDriver>

08003f04 <_GetDevFunc_On>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4604      	mov	r4, r0
 8003f08:	f7ff ff4c 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2105      	movs	r1, #5
 8003f10:	69a0      	ldr	r0, [r4, #24]
 8003f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f16:	f7fd bff3 	b.w	8001f00 <LCD_X_DisplayDriver>

08003f1a <GUIDRV_FlexColor_Config>:
 8003f1a:	b538      	push	{r3, r4, r5, lr}
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	4605      	mov	r5, r0
 8003f20:	f7ff ff40 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	68ab      	ldr	r3, [r5, #8]
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f2e:	68a2      	ldr	r2, [r4, #8]
 8003f30:	635a      	str	r2, [r3, #52]	; 0x34
 8003f32:	0752      	lsls	r2, r2, #29
 8003f34:	d507      	bpl.n	8003f46 <GUIDRV_FlexColor_Config+0x2c>
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	e883 0006 	stmia.w	r3, {r1, r2}
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	6099      	str	r1, [r3, #8]
 8003f46:	89a2      	ldrh	r2, [r4, #12]
 8003f48:	849a      	strh	r2, [r3, #36]	; 0x24
 8003f4a:	6922      	ldr	r2, [r4, #16]
 8003f4c:	b112      	cbz	r2, 8003f54 <GUIDRV_FlexColor_Config+0x3a>
 8003f4e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	bd38      	pop	{r3, r4, r5, pc}

08003f56 <GUIDRV_FlexColor_SetFunc>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	461e      	mov	r6, r3
 8003f5e:	4617      	mov	r7, r2
 8003f60:	4688      	mov	r8, r1
 8003f62:	f7ff ff1f 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8003f66:	68a5      	ldr	r5, [r4, #8]
 8003f68:	2268      	movs	r2, #104	; 0x68
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	f505 708a 	add.w	r0, r5, #276	; 0x114
 8003f70:	f003 fa62 	bl	8007438 <memcpy>
 8003f74:	4620      	mov	r0, r4
 8003f76:	47b8      	blx	r7
 8003f78:	4620      	mov	r0, r4
 8003f7a:	47b0      	blx	r6
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4798      	blx	r3
 8003f82:	62a8      	str	r0, [r5, #40]	; 0x28
 8003f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f88 <_ReadData>:
 8003f88:	b508      	push	{r3, lr}
 8003f8a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8003f8e:	4798      	blx	r3
 8003f90:	bd08      	pop	{r3, pc}

08003f92 <_WriteData>:
 8003f92:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8003f96:	b288      	uxth	r0, r1
 8003f98:	4718      	bx	r3
	...

08003f9c <_FillRect>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	4e39      	ldr	r6, [pc, #228]	; (8004088 <_FillRect+0xec>)
 8003fa2:	4682      	mov	sl, r0
 8003fa4:	6885      	ldr	r5, [r0, #8]
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	6830      	ldr	r0, [r6, #0]
 8003faa:	4688      	mov	r8, r1
 8003fac:	4614      	mov	r4, r2
 8003fae:	4699      	mov	r9, r3
 8003fb0:	7c00      	ldrb	r0, [r0, #16]
 8003fb2:	f010 0f01 	tst.w	r0, #1
 8003fb6:	eba3 0001 	sub.w	r0, r3, r1
 8003fba:	d03d      	beq.n	8004038 <_FillRect+0x9c>
 8003fbc:	0043      	lsls	r3, r0, #1
 8003fbe:	1c47      	adds	r7, r0, #1
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc4:	429c      	cmp	r4, r3
 8003fc6:	dc5b      	bgt.n	8004080 <_FillRect+0xe4>
 8003fc8:	f8d5 b0c8 	ldr.w	fp, [r5, #200]	; 0xc8
 8003fcc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8003fce:	f1bb 0f00 	cmp.w	fp, #0
 8003fd2:	d101      	bne.n	8003fd8 <_FillRect+0x3c>
 8003fd4:	46c3      	mov	fp, r8
 8003fd6:	e007      	b.n	8003fe8 <_FillRect+0x4c>
 8003fd8:	e88d 0050 	stmia.w	sp, {r4, r6}
 8003fdc:	464b      	mov	r3, r9
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	4650      	mov	r0, sl
 8003fe4:	47d8      	blx	fp
 8003fe6:	e00d      	b.n	8004004 <_FillRect+0x68>
 8003fe8:	45cb      	cmp	fp, r9
 8003fea:	dc0a      	bgt.n	8004002 <_FillRect+0x66>
 8003fec:	4659      	mov	r1, fp
 8003fee:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	4798      	blx	r3
 8003ff8:	f10b 0b01 	add.w	fp, fp, #1
 8003ffc:	f826 0b02 	strh.w	r0, [r6], #2
 8004000:	e7f2      	b.n	8003fe8 <_FillRect+0x4c>
 8004002:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8004004:	9a03      	ldr	r2, [sp, #12]
 8004006:	1eb3      	subs	r3, r6, #2
 8004008:	4416      	add	r6, r2
 800400a:	42b3      	cmp	r3, r6
 800400c:	d005      	beq.n	800401a <_FillRect+0x7e>
 800400e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004010:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8004014:	404a      	eors	r2, r1
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e7f7      	b.n	800400a <_FillRect+0x6e>
 800401a:	9400      	str	r4, [sp, #0]
 800401c:	4622      	mov	r2, r4
 800401e:	464b      	mov	r3, r9
 8004020:	4641      	mov	r1, r8
 8004022:	4628      	mov	r0, r5
 8004024:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8004028:	47b0      	blx	r6
 800402a:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800402e:	4639      	mov	r1, r7
 8004030:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8004032:	4798      	blx	r3
 8004034:	3401      	adds	r4, #1
 8004036:	e7c4      	b.n	8003fc2 <_FillRect+0x26>
 8004038:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800403a:	1abc      	subs	r4, r7, r2
 800403c:	1c67      	adds	r7, r4, #1
 800403e:	fb00 7707 	mla	r7, r0, r7, r7
 8004042:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004044:	9000      	str	r0, [sp, #0]
 8004046:	4628      	mov	r0, r5
 8004048:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800404c:	47a0      	blx	r4
 800404e:	6833      	ldr	r3, [r6, #0]
 8004050:	6eae      	ldr	r6, [r5, #104]	; 0x68
 8004052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004054:	2301      	movs	r3, #1
 8004056:	f8b2 8000 	ldrh.w	r8, [r2]
 800405a:	b18f      	cbz	r7, 8004080 <_FillRect+0xe4>
 800405c:	2ffa      	cmp	r7, #250	; 0xfa
 800405e:	463c      	mov	r4, r7
 8004060:	bf28      	it	cs
 8004062:	24fa      	movcs	r4, #250	; 0xfa
 8004064:	b123      	cbz	r3, 8004070 <_FillRect+0xd4>
 8004066:	4622      	mov	r2, r4
 8004068:	4641      	mov	r1, r8
 800406a:	4630      	mov	r0, r6
 800406c:	f7fe fed0 	bl	8002e10 <GUI__memset16>
 8004070:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8004074:	4621      	mov	r1, r4
 8004076:	4630      	mov	r0, r6
 8004078:	1b3f      	subs	r7, r7, r4
 800407a:	4798      	blx	r3
 800407c:	2300      	movs	r3, #0
 800407e:	e7ec      	b.n	800405a <_FillRect+0xbe>
 8004080:	b005      	add	sp, #20
 8004082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	200000a4 	.word	0x200000a4

0800408c <_DrawBitmap>:
 800408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	b08f      	sub	sp, #60	; 0x3c
 8004092:	9303      	str	r3, [sp, #12]
 8004094:	6883      	ldr	r3, [r0, #8]
 8004096:	9005      	str	r0, [sp, #20]
 8004098:	9309      	str	r3, [sp, #36]	; 0x24
 800409a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800409c:	9106      	str	r1, [sp, #24]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	9208      	str	r2, [sp, #32]
 80040a2:	d80c      	bhi.n	80040be <_DrawBitmap+0x32>
 80040a4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80040a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80040aa:	40d3      	lsrs	r3, r2
 80040ac:	07db      	lsls	r3, r3, #31
 80040ae:	d506      	bpl.n	80040be <_DrawBitmap+0x32>
 80040b0:	4b98      	ldr	r3, [pc, #608]	; (8004314 <_DrawBitmap+0x288>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	7c1b      	ldrb	r3, [r3, #16]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d010      	beq.n	80040e0 <_DrawBitmap+0x54>
 80040be:	9b06      	ldr	r3, [sp, #24]
 80040c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80040c4:	1899      	adds	r1, r3, r2
 80040c6:	9a08      	ldr	r2, [sp, #32]
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	4402      	add	r2, r0
 80040cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ce:	18cb      	adds	r3, r1, r3
 80040d0:	3a01      	subs	r2, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	9200      	str	r2, [sp, #0]
 80040d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d8:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80040dc:	9a08      	ldr	r2, [sp, #32]
 80040de:	47a0      	blx	r4
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040e4:	3b01      	subs	r3, #1
 80040e6:	9f08      	ldr	r7, [sp, #32]
 80040e8:	930d      	str	r3, [sp, #52]	; 0x34
 80040ea:	9b06      	ldr	r3, [sp, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	9a04      	ldr	r2, [sp, #16]
 80040f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040f4:	4413      	add	r3, r2
 80040f6:	930c      	str	r3, [sp, #48]	; 0x30
 80040f8:	9b08      	ldr	r3, [sp, #32]
 80040fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040fc:	1afb      	subs	r3, r7, r3
 80040fe:	429a      	cmp	r2, r3
 8004100:	f340 8258 	ble.w	80045b4 <_DrawBitmap+0x528>
 8004104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004106:	3b01      	subs	r3, #1
 8004108:	2b0f      	cmp	r3, #15
 800410a:	f200 824d 	bhi.w	80045a8 <_DrawBitmap+0x51c>
 800410e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004112:	0010      	.short	0x0010
 8004114:	024b00bf 	.word	0x024b00bf
 8004118:	024b0148 	.word	0x024b0148
 800411c:	024b024b 	.word	0x024b024b
 8004120:	024b01db 	.word	0x024b01db
 8004124:	024b024b 	.word	0x024b024b
 8004128:	024b024b 	.word	0x024b024b
 800412c:	024b024b 	.word	0x024b024b
 8004130:	0245      	.short	0x0245
 8004132:	9b05      	ldr	r3, [sp, #20]
 8004134:	689c      	ldr	r4, [r3, #8]
 8004136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	930b      	str	r3, [sp, #44]	; 0x2c
 800413c:	4b75      	ldr	r3, [pc, #468]	; (8004314 <_DrawBitmap+0x288>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	7c1b      	ldrb	r3, [r3, #16]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d022      	beq.n	8004190 <_DrawBitmap+0x104>
 800414a:	2b03      	cmp	r3, #3
 800414c:	d074      	beq.n	8004238 <_DrawBitmap+0x1ac>
 800414e:	2b01      	cmp	r3, #1
 8004150:	d072      	beq.n	8004238 <_DrawBitmap+0x1ac>
 8004152:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004154:	f04f 0880 	mov.w	r8, #128	; 0x80
 8004158:	9e03      	ldr	r6, [sp, #12]
 800415a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800415c:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8004160:	f8b3 9000 	ldrh.w	r9, [r3]
 8004164:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8004168:	f89b 1000 	ldrb.w	r1, [fp]
 800416c:	fa48 f205 	asr.w	r2, r8, r5
 8004170:	3501      	adds	r5, #1
 8004172:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8004176:	4211      	tst	r1, r2
 8004178:	bf14      	ite	ne
 800417a:	4650      	movne	r0, sl
 800417c:	4648      	moveq	r0, r9
 800417e:	4798      	blx	r3
 8004180:	2d08      	cmp	r5, #8
 8004182:	bf04      	itt	eq
 8004184:	f10b 0b01 	addeq.w	fp, fp, #1
 8004188:	2500      	moveq	r5, #0
 800418a:	3e01      	subs	r6, #1
 800418c:	d1ec      	bne.n	8004168 <_DrawBitmap+0xdc>
 800418e:	e20b      	b.n	80045a8 <_DrawBitmap+0x51c>
 8004190:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004192:	2500      	movs	r5, #0
 8004194:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004198:	930a      	str	r3, [sp, #40]	; 0x28
 800419a:	462b      	mov	r3, r5
 800419c:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80041a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80041a4:	f8cd b01c 	str.w	fp, [sp, #28]
 80041a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041aa:	f892 9000 	ldrb.w	r9, [r2]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	fa42 f208 	asr.w	r2, r2, r8
 80041b4:	ea19 0902 	ands.w	r9, r9, r2
 80041b8:	d00d      	beq.n	80041d6 <_DrawBitmap+0x14a>
 80041ba:	b91b      	cbnz	r3, 80041c4 <_DrawBitmap+0x138>
 80041bc:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80041c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80041c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80041c8:	3501      	adds	r5, #1
 80041ca:	f10a 0a02 	add.w	sl, sl, #2
 80041ce:	f82a 3c02 	strh.w	r3, [sl, #-2]
 80041d2:	2301      	movs	r3, #1
 80041d4:	e013      	b.n	80041fe <_DrawBitmap+0x172>
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d110      	bne.n	80041fc <_DrawBitmap+0x170>
 80041da:	9b07      	ldr	r3, [sp, #28]
 80041dc:	463a      	mov	r2, r7
 80041de:	9700      	str	r7, [sp, #0]
 80041e0:	4659      	mov	r1, fp
 80041e2:	3b01      	subs	r3, #1
 80041e4:	4620      	mov	r0, r4
 80041e6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80041ea:	47b0      	blx	r6
 80041ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80041f0:	4629      	mov	r1, r5
 80041f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80041f4:	4798      	blx	r3
 80041f6:	464d      	mov	r5, r9
 80041f8:	464b      	mov	r3, r9
 80041fa:	e000      	b.n	80041fe <_DrawBitmap+0x172>
 80041fc:	464b      	mov	r3, r9
 80041fe:	9a07      	ldr	r2, [sp, #28]
 8004200:	f108 0801 	add.w	r8, r8, #1
 8004204:	9903      	ldr	r1, [sp, #12]
 8004206:	3201      	adds	r2, #1
 8004208:	f1b8 0f08 	cmp.w	r8, #8
 800420c:	9207      	str	r2, [sp, #28]
 800420e:	bf01      	itttt	eq
 8004210:	f04f 0800 	moveq.w	r8, #0
 8004214:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
 8004216:	3201      	addeq	r2, #1
 8004218:	920a      	streq	r2, [sp, #40]	; 0x28
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	440a      	add	r2, r1
 800421e:	9907      	ldr	r1, [sp, #28]
 8004220:	4291      	cmp	r1, r2
 8004222:	d1c1      	bne.n	80041a8 <_DrawBitmap+0x11c>
 8004224:	2d00      	cmp	r5, #0
 8004226:	f000 81bf 	beq.w	80045a8 <_DrawBitmap+0x51c>
 800422a:	9700      	str	r7, [sp, #0]
 800422c:	463a      	mov	r2, r7
 800422e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8004232:	4659      	mov	r1, fp
 8004234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004236:	e1aa      	b.n	800458e <_DrawBitmap+0x502>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800423e:	9a04      	ldr	r2, [sp, #16]
 8004240:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004242:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8004246:	eb03 0a02 	add.w	sl, r3, r2
 800424a:	9307      	str	r3, [sp, #28]
 800424c:	9b07      	ldr	r3, [sp, #28]
 800424e:	f898 2000 	ldrb.w	r2, [r8]
 8004252:	ebc3 090a 	rsb	r9, r3, sl
 8004256:	fa4b f305 	asr.w	r3, fp, r5
 800425a:	421a      	tst	r2, r3
 800425c:	d00d      	beq.n	800427a <_DrawBitmap+0x1ee>
 800425e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004262:	463a      	mov	r2, r7
 8004264:	4649      	mov	r1, r9
 8004266:	9805      	ldr	r0, [sp, #20]
 8004268:	4798      	blx	r3
 800426a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800426c:	463a      	mov	r2, r7
 800426e:	4649      	mov	r1, r9
 8004270:	4043      	eors	r3, r0
 8004272:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
 8004276:	9805      	ldr	r0, [sp, #20]
 8004278:	47b0      	blx	r6
 800427a:	3501      	adds	r5, #1
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	2d08      	cmp	r5, #8
 8004280:	bf04      	itt	eq
 8004282:	f108 0801 	addeq.w	r8, r8, #1
 8004286:	2500      	moveq	r5, #0
 8004288:	3b01      	subs	r3, #1
 800428a:	9307      	str	r3, [sp, #28]
 800428c:	d1de      	bne.n	800424c <_DrawBitmap+0x1c0>
 800428e:	e18b      	b.n	80045a8 <_DrawBitmap+0x51c>
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	689c      	ldr	r4, [r3, #8]
 8004294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8186 	beq.w	80045a8 <_DrawBitmap+0x51c>
 800429c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800429e:	f893 b000 	ldrb.w	fp, [r3]
 80042a2:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <_DrawBitmap+0x288>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	7c1b      	ldrb	r3, [r3, #16]
 80042a8:	f013 0303 	ands.w	r3, r3, #3
 80042ac:	d00f      	beq.n	80042ce <_DrawBitmap+0x242>
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	f040 817a 	bne.w	80045a8 <_DrawBitmap+0x51c>
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	2600      	movs	r6, #0
 80042b8:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80042bc:	930a      	str	r3, [sp, #40]	; 0x28
 80042be:	4632      	mov	r2, r6
 80042c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042c2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80042cc:	e047      	b.n	800435e <_DrawBitmap+0x2d2>
 80042ce:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80042d0:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 80042d4:	9e03      	ldr	r6, [sp, #12]
 80042d6:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80042da:	f1c5 0203 	rsb	r2, r5, #3
 80042de:	991d      	ldr	r1, [sp, #116]	; 0x74
 80042e0:	3501      	adds	r5, #1
 80042e2:	0052      	lsls	r2, r2, #1
 80042e4:	f1c2 0306 	rsb	r3, r2, #6
 80042e8:	fa48 f303 	asr.w	r3, r8, r3
 80042ec:	ea03 030b 	and.w	r3, r3, fp
 80042f0:	fa23 f202 	lsr.w	r2, r3, r2
 80042f4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80042f8:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 80042fc:	4798      	blx	r3
 80042fe:	2d04      	cmp	r5, #4
 8004300:	bf02      	ittt	eq
 8004302:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 8004306:	2500      	moveq	r5, #0
 8004308:	f109 0901 	addeq.w	r9, r9, #1
 800430c:	3e01      	subs	r6, #1
 800430e:	d1e4      	bne.n	80042da <_DrawBitmap+0x24e>
 8004310:	e14a      	b.n	80045a8 <_DrawBitmap+0x51c>
 8004312:	bf00      	nop
 8004314:	200000a4 	.word	0x200000a4
 8004318:	b91a      	cbnz	r2, 8004322 <_DrawBitmap+0x296>
 800431a:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800431e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004322:	9a07      	ldr	r2, [sp, #28]
 8004324:	3601      	adds	r6, #1
 8004326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004328:	f10a 0a02 	add.w	sl, sl, #2
 800432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004330:	2201      	movs	r2, #1
 8004332:	f82a 3c02 	strh.w	r3, [sl, #-2]
 8004336:	f109 0901 	add.w	r9, r9, #1
 800433a:	f108 0801 	add.w	r8, r8, #1
 800433e:	f1b9 0f04 	cmp.w	r9, #4
 8004342:	d106      	bne.n	8004352 <_DrawBitmap+0x2c6>
 8004344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004346:	f04f 0900 	mov.w	r9, #0
 800434a:	f893 b001 	ldrb.w	fp, [r3, #1]
 800434e:	3301      	adds	r3, #1
 8004350:	930b      	str	r3, [sp, #44]	; 0x2c
 8004352:	9b04      	ldr	r3, [sp, #16]
 8004354:	9903      	ldr	r1, [sp, #12]
 8004356:	440b      	add	r3, r1
 8004358:	4598      	cmp	r8, r3
 800435a:	f000 80a7 	beq.w	80044ac <_DrawBitmap+0x420>
 800435e:	f1c9 0503 	rsb	r5, r9, #3
 8004362:	21c0      	movs	r1, #192	; 0xc0
 8004364:	006d      	lsls	r5, r5, #1
 8004366:	f1c5 0306 	rsb	r3, r5, #6
 800436a:	fa41 f303 	asr.w	r3, r1, r3
 800436e:	ea03 030b 	and.w	r3, r3, fp
 8004372:	40eb      	lsrs	r3, r5
 8004374:	9307      	str	r3, [sp, #28]
 8004376:	d1cf      	bne.n	8004318 <_DrawBitmap+0x28c>
 8004378:	2a01      	cmp	r2, #1
 800437a:	d110      	bne.n	800439e <_DrawBitmap+0x312>
 800437c:	463a      	mov	r2, r7
 800437e:	9700      	str	r7, [sp, #0]
 8004380:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8004384:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004386:	4620      	mov	r0, r4
 8004388:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800438c:	47a8      	blx	r5
 800438e:	4631      	mov	r1, r6
 8004390:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8004394:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004396:	4798      	blx	r3
 8004398:	9e07      	ldr	r6, [sp, #28]
 800439a:	4632      	mov	r2, r6
 800439c:	e7cb      	b.n	8004336 <_DrawBitmap+0x2aa>
 800439e:	9a07      	ldr	r2, [sp, #28]
 80043a0:	e7c9      	b.n	8004336 <_DrawBitmap+0x2aa>
 80043a2:	9b05      	ldr	r3, [sp, #20]
 80043a4:	689c      	ldr	r4, [r3, #8]
 80043a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80fd 	beq.w	80045a8 <_DrawBitmap+0x51c>
 80043ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043b0:	f893 b000 	ldrb.w	fp, [r3]
 80043b4:	4b81      	ldr	r3, [pc, #516]	; (80045bc <_DrawBitmap+0x530>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	7c1b      	ldrb	r3, [r3, #16]
 80043ba:	f013 0303 	ands.w	r3, r3, #3
 80043be:	d00f      	beq.n	80043e0 <_DrawBitmap+0x354>
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f040 80f1 	bne.w	80045a8 <_DrawBitmap+0x51c>
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	2600      	movs	r6, #0
 80043ca:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80043ce:	930a      	str	r3, [sp, #40]	; 0x28
 80043d0:	4632      	mov	r2, r6
 80043d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043d4:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 80043d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80043da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80043de:	e043      	b.n	8004468 <_DrawBitmap+0x3dc>
 80043e0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043e2:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 80043e6:	9e03      	ldr	r6, [sp, #12]
 80043e8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80043ec:	f1c5 0201 	rsb	r2, r5, #1
 80043f0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80043f2:	3501      	adds	r5, #1
 80043f4:	0092      	lsls	r2, r2, #2
 80043f6:	f1c2 0304 	rsb	r3, r2, #4
 80043fa:	fa48 f303 	asr.w	r3, r8, r3
 80043fe:	ea03 030b 	and.w	r3, r3, fp
 8004402:	fa23 f202 	lsr.w	r2, r3, r2
 8004406:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800440a:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800440e:	4798      	blx	r3
 8004410:	2d02      	cmp	r5, #2
 8004412:	bf02      	ittt	eq
 8004414:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 8004418:	2500      	moveq	r5, #0
 800441a:	f109 0901 	addeq.w	r9, r9, #1
 800441e:	3e01      	subs	r6, #1
 8004420:	d1e4      	bne.n	80043ec <_DrawBitmap+0x360>
 8004422:	e0c1      	b.n	80045a8 <_DrawBitmap+0x51c>
 8004424:	b91a      	cbnz	r2, 800442e <_DrawBitmap+0x3a2>
 8004426:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800442a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800442e:	9a07      	ldr	r2, [sp, #28]
 8004430:	3601      	adds	r6, #1
 8004432:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004434:	f10a 0a02 	add.w	sl, sl, #2
 8004438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443c:	2201      	movs	r2, #1
 800443e:	f82a 3c02 	strh.w	r3, [sl, #-2]
 8004442:	f109 0901 	add.w	r9, r9, #1
 8004446:	f108 0801 	add.w	r8, r8, #1
 800444a:	f1b9 0f02 	cmp.w	r9, #2
 800444e:	d106      	bne.n	800445e <_DrawBitmap+0x3d2>
 8004450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004452:	f04f 0900 	mov.w	r9, #0
 8004456:	f893 b001 	ldrb.w	fp, [r3, #1]
 800445a:	3301      	adds	r3, #1
 800445c:	930b      	str	r3, [sp, #44]	; 0x2c
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	9904      	ldr	r1, [sp, #16]
 8004462:	440b      	add	r3, r1
 8004464:	4598      	cmp	r8, r3
 8004466:	d021      	beq.n	80044ac <_DrawBitmap+0x420>
 8004468:	f1c9 0501 	rsb	r5, r9, #1
 800446c:	21f0      	movs	r1, #240	; 0xf0
 800446e:	00ad      	lsls	r5, r5, #2
 8004470:	f1c5 0304 	rsb	r3, r5, #4
 8004474:	fa41 f303 	asr.w	r3, r1, r3
 8004478:	ea03 030b 	and.w	r3, r3, fp
 800447c:	40eb      	lsrs	r3, r5
 800447e:	9307      	str	r3, [sp, #28]
 8004480:	d1d0      	bne.n	8004424 <_DrawBitmap+0x398>
 8004482:	2a01      	cmp	r2, #1
 8004484:	d110      	bne.n	80044a8 <_DrawBitmap+0x41c>
 8004486:	463a      	mov	r2, r7
 8004488:	9700      	str	r7, [sp, #0]
 800448a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800448e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004490:	4620      	mov	r0, r4
 8004492:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8004496:	47a8      	blx	r5
 8004498:	4631      	mov	r1, r6
 800449a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800449e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044a0:	4798      	blx	r3
 80044a2:	9e07      	ldr	r6, [sp, #28]
 80044a4:	4632      	mov	r2, r6
 80044a6:	e7cc      	b.n	8004442 <_DrawBitmap+0x3b6>
 80044a8:	9a07      	ldr	r2, [sp, #28]
 80044aa:	e7ca      	b.n	8004442 <_DrawBitmap+0x3b6>
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	d07b      	beq.n	80045a8 <_DrawBitmap+0x51c>
 80044b0:	9700      	str	r7, [sp, #0]
 80044b2:	463a      	mov	r2, r7
 80044b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044b6:	4620      	mov	r0, r4
 80044b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044ba:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 80044be:	47a8      	blx	r5
 80044c0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80044c4:	4631      	mov	r1, r6
 80044c6:	e067      	b.n	8004598 <_DrawBitmap+0x50c>
 80044c8:	9b05      	ldr	r3, [sp, #20]
 80044ca:	689c      	ldr	r4, [r3, #8]
 80044cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d06a      	beq.n	80045a8 <_DrawBitmap+0x51c>
 80044d2:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <_DrawBitmap+0x530>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	7c1b      	ldrb	r3, [r3, #16]
 80044d8:	f013 0303 	ands.w	r3, r3, #3
 80044dc:	d00f      	beq.n	80044fe <_DrawBitmap+0x472>
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d162      	bne.n	80045a8 <_DrawBitmap+0x51c>
 80044e2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80044e6:	2500      	movs	r5, #0
 80044e8:	9a03      	ldr	r2, [sp, #12]
 80044ea:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80044ee:	462b      	mov	r3, r5
 80044f0:	4452      	add	r2, sl
 80044f2:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 80044f6:	f8cd a01c 	str.w	sl, [sp, #28]
 80044fa:	920a      	str	r2, [sp, #40]	; 0x28
 80044fc:	e024      	b.n	8004548 <_DrawBitmap+0x4bc>
 80044fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004504:	1b5b      	subs	r3, r3, r5
 8004506:	4413      	add	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	dd4d      	ble.n	80045a8 <_DrawBitmap+0x51c>
 800450c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004510:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004512:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8004516:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800451a:	4798      	blx	r3
 800451c:	e7f0      	b.n	8004500 <_DrawBitmap+0x474>
 800451e:	b91b      	cbnz	r3, 8004528 <_DrawBitmap+0x49c>
 8004520:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8004524:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800452a:	3501      	adds	r5, #1
 800452c:	f108 0802 	add.w	r8, r8, #2
 8004530:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8004534:	f828 3c02 	strh.w	r3, [r8, #-2]
 8004538:	2301      	movs	r3, #1
 800453a:	9a07      	ldr	r2, [sp, #28]
 800453c:	3201      	adds	r2, #1
 800453e:	9207      	str	r2, [sp, #28]
 8004540:	9907      	ldr	r1, [sp, #28]
 8004542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004544:	4291      	cmp	r1, r2
 8004546:	d019      	beq.n	800457c <_DrawBitmap+0x4f0>
 8004548:	f81b 9b01 	ldrb.w	r9, [fp], #1
 800454c:	f1b9 0f00 	cmp.w	r9, #0
 8004550:	d1e5      	bne.n	800451e <_DrawBitmap+0x492>
 8004552:	2b01      	cmp	r3, #1
 8004554:	d110      	bne.n	8004578 <_DrawBitmap+0x4ec>
 8004556:	9b07      	ldr	r3, [sp, #28]
 8004558:	463a      	mov	r2, r7
 800455a:	9700      	str	r7, [sp, #0]
 800455c:	4651      	mov	r1, sl
 800455e:	3b01      	subs	r3, #1
 8004560:	4620      	mov	r0, r4
 8004562:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8004566:	47b0      	blx	r6
 8004568:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800456c:	4629      	mov	r1, r5
 800456e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004570:	4798      	blx	r3
 8004572:	464d      	mov	r5, r9
 8004574:	464b      	mov	r3, r9
 8004576:	e7e0      	b.n	800453a <_DrawBitmap+0x4ae>
 8004578:	464b      	mov	r3, r9
 800457a:	e7de      	b.n	800453a <_DrawBitmap+0x4ae>
 800457c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800457e:	9a06      	ldr	r2, [sp, #24]
 8004580:	4413      	add	r3, r2
 8004582:	b18d      	cbz	r5, 80045a8 <_DrawBitmap+0x51c>
 8004584:	9700      	str	r7, [sp, #0]
 8004586:	463a      	mov	r2, r7
 8004588:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800458c:	4651      	mov	r1, sl
 800458e:	4620      	mov	r0, r4
 8004590:	47b0      	blx	r6
 8004592:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8004596:	4629      	mov	r1, r5
 8004598:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800459a:	e004      	b.n	80045a6 <_DrawBitmap+0x51a>
 800459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459e:	9903      	ldr	r1, [sp, #12]
 80045a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80045a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80045a6:	4798      	blx	r3
 80045a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045aa:	3701      	adds	r7, #1
 80045ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045ae:	4413      	add	r3, r2
 80045b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80045b2:	e5a1      	b.n	80040f8 <_DrawBitmap+0x6c>
 80045b4:	b00f      	add	sp, #60	; 0x3c
 80045b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ba:	bf00      	nop
 80045bc:	200000a4 	.word	0x200000a4

080045c0 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4604      	mov	r4, r0
 80045c4:	f7ff fbee 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 80045ca:	2110      	movs	r1, #16
 80045cc:	68a4      	ldr	r4, [r4, #8]
 80045ce:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80045d2:	4620      	mov	r0, r4
 80045d4:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 80045d6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 80045dc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 80045e2:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 80045e8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 80045ee:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80045f2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80045f6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80045fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80045fe:	4798      	blx	r3
 8004600:	2310      	movs	r3, #16
 8004602:	63a3      	str	r3, [r4, #56]	; 0x38
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8004606:	6463      	str	r3, [r4, #68]	; 0x44
 8004608:	bd10      	pop	{r4, pc}
 800460a:	bf00      	nop
 800460c:	0800408d 	.word	0x0800408d
 8004610:	08003f9d 	.word	0x08003f9d
 8004614:	08003cf3 	.word	0x08003cf3
 8004618:	08003c6b 	.word	0x08003c6b
 800461c:	08003f89 	.word	0x08003f89
 8004620:	08003f93 	.word	0x08003f93
 8004624:	0800dd30 	.word	0x0800dd30

08004628 <_SetPhysRAMAddr>:
 8004628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	460e      	mov	r6, r1
 8004630:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8004634:	212a      	movs	r1, #42	; 0x2a
 8004636:	4615      	mov	r5, r2
 8004638:	4798      	blx	r3
 800463a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800463c:	4620      	mov	r0, r4
 800463e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004642:	b2b7      	uxth	r7, r6
 8004644:	4431      	add	r1, r6
 8004646:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800464a:	4798      	blx	r3
 800464c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800464e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004652:	4620      	mov	r0, r4
 8004654:	4439      	add	r1, r7
 8004656:	b2c9      	uxtb	r1, r1
 8004658:	4798      	blx	r3
 800465a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800465c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004660:	4620      	mov	r0, r4
 8004662:	4431      	add	r1, r6
 8004664:	b2ae      	uxth	r6, r5
 8004666:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800466a:	4798      	blx	r3
 800466c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800466e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004672:	4620      	mov	r0, r4
 8004674:	4439      	add	r1, r7
 8004676:	b2c9      	uxtb	r1, r1
 8004678:	4798      	blx	r3
 800467a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800467e:	4620      	mov	r0, r4
 8004680:	212b      	movs	r1, #43	; 0x2b
 8004682:	4798      	blx	r3
 8004684:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004686:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800468a:	4620      	mov	r0, r4
 800468c:	4429      	add	r1, r5
 800468e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8004692:	4798      	blx	r3
 8004694:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004696:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800469a:	4620      	mov	r0, r4
 800469c:	4431      	add	r1, r6
 800469e:	b2c9      	uxtb	r1, r1
 80046a0:	4798      	blx	r3
 80046a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046a8:	4620      	mov	r0, r4
 80046aa:	4429      	add	r1, r5
 80046ac:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80046b0:	4798      	blx	r3
 80046b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046b8:	4620      	mov	r0, r4
 80046ba:	4431      	add	r1, r6
 80046bc:	b2c9      	uxtb	r1, r1
 80046be:	4798      	blx	r3
 80046c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80046c4:	4620      	mov	r0, r4
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	4718      	bx	r3

080046ce <_SetRect>:
 80046ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	4688      	mov	r8, r1
 80046d6:	461f      	mov	r7, r3
 80046d8:	212a      	movs	r1, #42	; 0x2a
 80046da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80046de:	4616      	mov	r6, r2
 80046e0:	9d06      	ldr	r5, [sp, #24]
 80046e2:	4798      	blx	r3
 80046e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046e6:	4620      	mov	r0, r4
 80046e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046ec:	4441      	add	r1, r8
 80046ee:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80046f2:	4798      	blx	r3
 80046f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80046fa:	4620      	mov	r0, r4
 80046fc:	4441      	add	r1, r8
 80046fe:	b2c9      	uxtb	r1, r1
 8004700:	4798      	blx	r3
 8004702:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004704:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004708:	4620      	mov	r0, r4
 800470a:	4439      	add	r1, r7
 800470c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8004710:	4798      	blx	r3
 8004712:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004714:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004718:	4620      	mov	r0, r4
 800471a:	4439      	add	r1, r7
 800471c:	b2c9      	uxtb	r1, r1
 800471e:	4798      	blx	r3
 8004720:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004724:	4620      	mov	r0, r4
 8004726:	212b      	movs	r1, #43	; 0x2b
 8004728:	4798      	blx	r3
 800472a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800472c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004730:	4620      	mov	r0, r4
 8004732:	4431      	add	r1, r6
 8004734:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8004738:	4798      	blx	r3
 800473a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800473c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004740:	4620      	mov	r0, r4
 8004742:	4431      	add	r1, r6
 8004744:	b2c9      	uxtb	r1, r1
 8004746:	4798      	blx	r3
 8004748:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800474a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800474e:	4620      	mov	r0, r4
 8004750:	4429      	add	r1, r5
 8004752:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8004756:	4798      	blx	r3
 8004758:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800475a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800475e:	4620      	mov	r0, r4
 8004760:	4429      	add	r1, r5
 8004762:	b2c9      	uxtb	r1, r1
 8004764:	4798      	blx	r3
 8004766:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800476a:	4620      	mov	r0, r4
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	4718      	bx	r3

08004774 <_SetOrientation>:
 8004774:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <_SetOrientation+0x3c>)
 8004776:	b513      	push	{r0, r1, r4, lr}
 8004778:	4604      	mov	r4, r0
 800477a:	6851      	ldr	r1, [r2, #4]
 800477c:	6810      	ldr	r0, [r2, #0]
 800477e:	466b      	mov	r3, sp
 8004780:	c303      	stmia	r3!, {r0, r1}
 8004782:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004786:	4620      	mov	r0, r4
 8004788:	2136      	movs	r1, #54	; 0x36
 800478a:	4798      	blx	r3
 800478c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800478e:	aa02      	add	r2, sp, #8
 8004790:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8004792:	4620      	mov	r0, r4
 8004794:	4413      	add	r3, r2
 8004796:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800479a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800479e:	4319      	orrs	r1, r3
 80047a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80047a4:	b289      	uxth	r1, r1
 80047a6:	b002      	add	sp, #8
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	4718      	bx	r3
 80047ae:	bf00      	nop
 80047b0:	0800b590 	.word	0x0800b590

080047b4 <_ReadPixel_16bpp_B8>:
 80047b4:	b513      	push	{r0, r1, r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80047bc:	202e      	movs	r0, #46	; 0x2e
 80047be:	4798      	blx	r3
 80047c0:	6a21      	ldr	r1, [r4, #32]
 80047c2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80047c6:	4668      	mov	r0, sp
 80047c8:	3103      	adds	r1, #3
 80047ca:	4798      	blx	r3
 80047cc:	6a23      	ldr	r3, [r4, #32]
 80047ce:	eb0d 0203 	add.w	r2, sp, r3
 80047d2:	f81d 3003 	ldrb.w	r3, [sp, r3]
 80047d6:	7850      	ldrb	r0, [r2, #1]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	0880      	lsrs	r0, r0, #2
 80047dc:	02db      	lsls	r3, r3, #11
 80047de:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 80047e2:	7890      	ldrb	r0, [r2, #2]
 80047e4:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 80047e8:	b002      	add	sp, #8
 80047ea:	bd10      	pop	{r4, pc}

080047ec <_ReadPixel_16bpp_B16_I>:
 80047ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047ee:	4604      	mov	r4, r0
 80047f0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 80047f4:	202e      	movs	r0, #46	; 0x2e
 80047f6:	4798      	blx	r3
 80047f8:	6a21      	ldr	r1, [r4, #32]
 80047fa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80047fe:	4668      	mov	r0, sp
 8004800:	3102      	adds	r1, #2
 8004802:	4798      	blx	r3
 8004804:	6a22      	ldr	r2, [r4, #32]
 8004806:	eb0d 0342 	add.w	r3, sp, r2, lsl #1
 800480a:	885b      	ldrh	r3, [r3, #2]
 800480c:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 8004810:	115b      	asrs	r3, r3, #5
 8004812:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004816:	4303      	orrs	r3, r0
 8004818:	f83d 0012 	ldrh.w	r0, [sp, r2, lsl #1]
 800481c:	0200      	lsls	r0, r0, #8
 800481e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8004822:	4318      	orrs	r0, r3
 8004824:	b004      	add	sp, #16
 8004826:	bd10      	pop	{r4, pc}

08004828 <_SetReg_B8>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4605      	mov	r5, r0
 800482c:	460c      	mov	r4, r1
 800482e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8004832:	0a08      	lsrs	r0, r1, #8
 8004834:	4798      	blx	r3
 8004836:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800483a:	b2e0      	uxtb	r0, r4
 800483c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004840:	4718      	bx	r3

08004842 <_SetReg_B16>:
 8004842:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8004846:	4608      	mov	r0, r1
 8004848:	4718      	bx	r3

0800484a <_WritePara_B8>:
 800484a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800484e:	b2c8      	uxtb	r0, r1
 8004850:	4718      	bx	r3

08004852 <_WritePara_B16>:
 8004852:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8004856:	4608      	mov	r0, r1
 8004858:	4718      	bx	r3
	...

0800485c <_SetInterface>:
 800485c:	2908      	cmp	r1, #8
 800485e:	d002      	beq.n	8004866 <_SetInterface+0xa>
 8004860:	2910      	cmp	r1, #16
 8004862:	d005      	beq.n	8004870 <_SetInterface+0x14>
 8004864:	4770      	bx	lr
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <_SetInterface+0x24>)
 8004868:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <_SetInterface+0x28>)
 800486e:	e003      	b.n	8004878 <_SetInterface+0x1c>
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <_SetInterface+0x2c>)
 8004872:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <_SetInterface+0x30>)
 8004878:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	08004829 	.word	0x08004829
 8004884:	0800484b 	.word	0x0800484b
 8004888:	08004843 	.word	0x08004843
 800488c:	08004853 	.word	0x08004853

08004890 <_ReadRect_16bpp_B8>:
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b085      	sub	sp, #20
 8004894:	6885      	ldr	r5, [r0, #8]
 8004896:	1a58      	subs	r0, r3, r1
 8004898:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800489a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800489c:	1abc      	subs	r4, r7, r2
 800489e:	9700      	str	r7, [sp, #0]
 80048a0:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 80048a4:	3401      	adds	r4, #1
 80048a6:	fb00 4404 	mla	r4, r0, r4, r4
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80048b2:	202e      	movs	r0, #46	; 0x2e
 80048b4:	4798      	blx	r3
 80048b6:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 80048ba:	6a29      	ldr	r1, [r5, #32]
 80048bc:	a802      	add	r0, sp, #8
 80048be:	4798      	blx	r3
 80048c0:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 80048c4:	2103      	movs	r1, #3
 80048c6:	a802      	add	r0, sp, #8
 80048c8:	4798      	blx	r3
 80048ca:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80048ce:	3c01      	subs	r4, #1
 80048d0:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80048d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80048d8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80048dc:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 80048e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80048e4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80048e8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80048ec:	f826 3b02 	strh.w	r3, [r6], #2
 80048f0:	d1e6      	bne.n	80048c0 <_ReadRect_16bpp_B8+0x30>
 80048f2:	b005      	add	sp, #20
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048f6 <_ReadRect_16bpp_B16_I>:
 80048f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f8:	b087      	sub	sp, #28
 80048fa:	6885      	ldr	r5, [r0, #8]
 80048fc:	1a58      	subs	r0, r3, r1
 80048fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004900:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004902:	1abc      	subs	r4, r7, r2
 8004904:	9700      	str	r7, [sp, #0]
 8004906:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800490a:	3401      	adds	r4, #1
 800490c:	fb00 4404 	mla	r4, r0, r4, r4
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
 8004918:	202e      	movs	r0, #46	; 0x2e
 800491a:	4798      	blx	r3
 800491c:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 8004920:	6a29      	ldr	r1, [r5, #32]
 8004922:	a802      	add	r0, sp, #8
 8004924:	4798      	blx	r3
 8004926:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 800492a:	2102      	movs	r1, #2
 800492c:	a802      	add	r0, sp, #8
 800492e:	4798      	blx	r3
 8004930:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004934:	3c01      	subs	r4, #1
 8004936:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 800493a:	ea4f 1363 	mov.w	r3, r3, asr #5
 800493e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004942:	ea43 0302 	orr.w	r3, r3, r2
 8004946:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800494a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800494e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8004952:	ea43 0302 	orr.w	r3, r3, r2
 8004956:	f826 3b02 	strh.w	r3, [r6], #2
 800495a:	d1e4      	bne.n	8004926 <_ReadRect_16bpp_B16_I+0x30>
 800495c:	b007      	add	sp, #28
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004960 <GUIDRV_FlexColor_SetFunc66709>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4604      	mov	r4, r0
 8004964:	f7ff fa1e 	bl	8003da4 <GUIDRV_FlexColor__InitOnce>
 8004968:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <GUIDRV_FlexColor_SetFunc66709+0x50>)
 800496a:	2100      	movs	r1, #0
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8004974:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8004978:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800497c:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800497e:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 8004982:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004986:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 8004988:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800498c:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800498e:	6810      	ldr	r0, [r2, #0]
 8004990:	6852      	ldr	r2, [r2, #4]
 8004992:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
 8004996:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800499a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800499c:	4809      	ldr	r0, [pc, #36]	; (80049c4 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800499e:	f022 0203 	bic.w	r2, r2, #3
 80049a2:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 80049a6:	84da      	strh	r2, [r3, #38]	; 0x26
 80049a8:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 80049aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	08004629 	.word	0x08004629
 80049b4:	080046cf 	.word	0x080046cf
 80049b8:	08004775 	.word	0x08004775
 80049bc:	080047b5 	.word	0x080047b5
 80049c0:	200000b8 	.word	0x200000b8
 80049c4:	08004891 	.word	0x08004891
 80049c8:	0800485d 	.word	0x0800485d

080049cc <_GetDevData>:
 80049cc:	2901      	cmp	r1, #1
 80049ce:	4802      	ldr	r0, [pc, #8]	; (80049d8 <_GetDevData+0xc>)
 80049d0:	bf18      	it	ne
 80049d2:	2000      	movne	r0, #0
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	0800dd30 	.word	0x0800dd30

080049dc <_GetDevFunc>:
 80049dc:	2916      	cmp	r1, #22
 80049de:	4802      	ldr	r0, [pc, #8]	; (80049e8 <_GetDevFunc+0xc>)
 80049e0:	bf18      	it	ne
 80049e2:	2000      	movne	r0, #0
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	080054e1 	.word	0x080054e1

080049ec <_SetOrg>:
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	b110      	cbz	r0, 80049f6 <_SetOrg+0xa>
 80049f0:	68c3      	ldr	r3, [r0, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4718      	bx	r3
 80049f6:	4770      	bx	lr

080049f8 <_GetRect>:
 80049f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049fa:	6880      	ldr	r0, [r0, #8]
 80049fc:	460d      	mov	r5, r1
 80049fe:	f7fd fbf9 	bl	80021f4 <GUI_ALLOC_LockH>
 8004a02:	4602      	mov	r2, r0
 8004a04:	a802      	add	r0, sp, #8
 8004a06:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8004a0a:	8914      	ldrh	r4, [r2, #8]
 8004a0c:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8004a10:	802b      	strh	r3, [r5, #0]
 8004a12:	441c      	add	r4, r3
 8004a14:	8953      	ldrh	r3, [r2, #10]
 8004a16:	3c01      	subs	r4, #1
 8004a18:	f840 2d04 	str.w	r2, [r0, #-4]!
 8004a1c:	440b      	add	r3, r1
 8004a1e:	8069      	strh	r1, [r5, #2]
 8004a20:	80ac      	strh	r4, [r5, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	80eb      	strh	r3, [r5, #6]
 8004a26:	f7fd fbf3 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bd30      	pop	{r4, r5, pc}
	...

08004a30 <_XY2PTR>:
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <_XY2PTR+0x3c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a36:	4606      	mov	r6, r0
 8004a38:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	f7fd fbda 	bl	80021f4 <GUI_ALLOC_LockH>
 8004a40:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8004a44:	ab02      	add	r3, sp, #8
 8004a46:	68c4      	ldr	r4, [r0, #12]
 8004a48:	1a69      	subs	r1, r5, r1
 8004a4a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8004a4e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004a52:	1b76      	subs	r6, r6, r5
 8004a54:	0076      	lsls	r6, r6, #1
 8004a56:	3618      	adds	r6, #24
 8004a58:	fb04 6501 	mla	r5, r4, r1, r6
 8004a5c:	1944      	adds	r4, r0, r5
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fbd6 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004a64:	4620      	mov	r0, r4
 8004a66:	b002      	add	sp, #8
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200000a4 	.word	0x200000a4

08004a70 <_GetPixelIndex>:
 8004a70:	b508      	push	{r3, lr}
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	f7ff ffdb 	bl	8004a30 <_XY2PTR>
 8004a7a:	8800      	ldrh	r0, [r0, #0]
 8004a7c:	bd08      	pop	{r3, pc}
	...

08004a80 <_XorPixel>:
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <_XorPixel+0x54>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a86:	4616      	mov	r6, r2
 8004a88:	460d      	mov	r5, r1
 8004a8a:	4607      	mov	r7, r0
 8004a8c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004a8e:	f7fd fbb1 	bl	80021f4 <GUI_ALLOC_LockH>
 8004a92:	4631      	mov	r1, r6
 8004a94:	9000      	str	r0, [sp, #0]
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7ff ffca 	bl	8004a30 <_XY2PTR>
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4798      	blx	r3
 8004aa4:	8823      	ldrh	r3, [r4, #0]
 8004aa6:	4058      	eors	r0, r3
 8004aa8:	9b00      	ldr	r3, [sp, #0]
 8004aaa:	8020      	strh	r0, [r4, #0]
 8004aac:	6958      	ldr	r0, [r3, #20]
 8004aae:	b160      	cbz	r0, 8004aca <_XorPixel+0x4a>
 8004ab0:	f7fd fba0 	bl	80021f4 <GUI_ALLOC_LockH>
 8004ab4:	ac02      	add	r4, sp, #8
 8004ab6:	6883      	ldr	r3, [r0, #8]
 8004ab8:	4632      	mov	r2, r6
 8004aba:	f844 0d04 	str.w	r0, [r4, #-4]!
 8004abe:	4629      	mov	r1, r5
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4798      	blx	r3
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7fd fba3 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004aca:	4668      	mov	r0, sp
 8004acc:	f7fd fba0 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	200000a4 	.word	0x200000a4

08004ad8 <_SetPixelIndex>:
 8004ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ada:	461c      	mov	r4, r3
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <_SetPixelIndex+0x48>)
 8004ade:	460d      	mov	r5, r1
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004ae6:	f7fd fb85 	bl	80021f4 <GUI_ALLOC_LockH>
 8004aea:	4631      	mov	r1, r6
 8004aec:	9000      	str	r0, [sp, #0]
 8004aee:	4628      	mov	r0, r5
 8004af0:	f7ff ff9e 	bl	8004a30 <_XY2PTR>
 8004af4:	9b00      	ldr	r3, [sp, #0]
 8004af6:	8004      	strh	r4, [r0, #0]
 8004af8:	6958      	ldr	r0, [r3, #20]
 8004afa:	b160      	cbz	r0, 8004b16 <_SetPixelIndex+0x3e>
 8004afc:	f7fd fb7a 	bl	80021f4 <GUI_ALLOC_LockH>
 8004b00:	ac02      	add	r4, sp, #8
 8004b02:	6883      	ldr	r3, [r0, #8]
 8004b04:	4632      	mov	r2, r6
 8004b06:	f844 0d04 	str.w	r0, [r4, #-4]!
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4798      	blx	r3
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7fd fb7d 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004b16:	4668      	mov	r0, sp
 8004b18:	f7fd fb7a 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	200000a4 	.word	0x200000a4

08004b24 <_DrawVLine>:
 8004b24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b28:	4c2c      	ldr	r4, [pc, #176]	; (8004bdc <_DrawVLine+0xb8>)
 8004b2a:	461e      	mov	r6, r3
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	460f      	mov	r7, r1
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	4615      	mov	r5, r2
 8004b34:	46a1      	mov	r9, r4
 8004b36:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004b38:	f7fd fb5c 	bl	80021f4 <GUI_ALLOC_LockH>
 8004b3c:	9000      	str	r0, [sp, #0]
 8004b3e:	6940      	ldr	r0, [r0, #20]
 8004b40:	b108      	cbz	r0, 8004b46 <_DrawVLine+0x22>
 8004b42:	f7fd fb57 	bl	80021f4 <GUI_ALLOC_LockH>
 8004b46:	9001      	str	r0, [sp, #4]
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f7ff ff70 	bl	8004a30 <_XY2PTR>
 8004b50:	f8d9 3000 	ldr.w	r3, [r9]
 8004b54:	4604      	mov	r4, r0
 8004b56:	7c1a      	ldrb	r2, [r3, #16]
 8004b58:	07d2      	lsls	r2, r2, #31
 8004b5a:	d51f      	bpl.n	8004b9c <_DrawVLine+0x78>
 8004b5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4798      	blx	r3
 8004b64:	fa1f f880 	uxth.w	r8, r0
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	b120      	cbz	r0, 8004b76 <_DrawVLine+0x52>
 8004b6c:	6883      	ldr	r3, [r0, #8]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4639      	mov	r1, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4798      	blx	r3
 8004b76:	8823      	ldrh	r3, [r4, #0]
 8004b78:	3501      	adds	r5, #1
 8004b7a:	ea88 0303 	eor.w	r3, r8, r3
 8004b7e:	42b5      	cmp	r5, r6
 8004b80:	8023      	strh	r3, [r4, #0]
 8004b82:	9b00      	ldr	r3, [sp, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	441c      	add	r4, r3
 8004b88:	ddee      	ble.n	8004b68 <_DrawVLine+0x44>
 8004b8a:	4668      	mov	r0, sp
 8004b8c:	f7fd fb40 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004b90:	9b01      	ldr	r3, [sp, #4]
 8004b92:	b303      	cbz	r3, 8004bd6 <_DrawVLine+0xb2>
 8004b94:	a801      	add	r0, sp, #4
 8004b96:	f7fd fb3b 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004b9a:	e01c      	b.n	8004bd6 <_DrawVLine+0xb2>
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	9a00      	ldr	r2, [sp, #0]
 8004ba0:	f8d3 9000 	ldr.w	r9, [r3]
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8004baa:	b163      	cbz	r3, 8004bc6 <_DrawVLine+0xa2>
 8004bac:	9801      	ldr	r0, [sp, #4]
 8004bae:	462a      	mov	r2, r5
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	4639      	mov	r1, r7
 8004bb4:	6883      	ldr	r3, [r0, #8]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4798      	blx	r3
 8004bba:	42ae      	cmp	r6, r5
 8004bbc:	f8a4 9000 	strh.w	r9, [r4]
 8004bc0:	4444      	add	r4, r8
 8004bc2:	daf3      	bge.n	8004bac <_DrawVLine+0x88>
 8004bc4:	e7e1      	b.n	8004b8a <_DrawVLine+0x66>
 8004bc6:	1b75      	subs	r5, r6, r5
 8004bc8:	3501      	adds	r5, #1
 8004bca:	3d01      	subs	r5, #1
 8004bcc:	f8a4 9000 	strh.w	r9, [r4]
 8004bd0:	4444      	add	r4, r8
 8004bd2:	d1fa      	bne.n	8004bca <_DrawVLine+0xa6>
 8004bd4:	e7d9      	b.n	8004b8a <_DrawVLine+0x66>
 8004bd6:	b003      	add	sp, #12
 8004bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bdc:	200000a4 	.word	0x200000a4

08004be0 <_FillRect>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4f2a      	ldr	r7, [pc, #168]	; (8004c90 <_FillRect+0xb0>)
 8004be6:	461d      	mov	r5, r3
 8004be8:	4614      	mov	r4, r2
 8004bea:	b087      	sub	sp, #28
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	4689      	mov	r9, r1
 8004bf0:	4683      	mov	fp, r0
 8004bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf4:	ebc9 0505 	rsb	r5, r9, r5
 8004bf8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	f105 0a01 	add.w	sl, r5, #1
 8004c00:	9202      	str	r2, [sp, #8]
 8004c02:	f7fd faf7 	bl	80021f4 <GUI_ALLOC_LockH>
 8004c06:	4621      	mov	r1, r4
 8004c08:	9004      	str	r0, [sp, #16]
 8004c0a:	4648      	mov	r0, r9
 8004c0c:	f7ff ff10 	bl	8004a30 <_XY2PTR>
 8004c10:	9a04      	ldr	r2, [sp, #16]
 8004c12:	4606      	mov	r6, r0
 8004c14:	68d3      	ldr	r3, [r2, #12]
 8004c16:	6950      	ldr	r0, [r2, #20]
 8004c18:	9303      	str	r3, [sp, #12]
 8004c1a:	b188      	cbz	r0, 8004c40 <_FillRect+0x60>
 8004c1c:	f7fd faea 	bl	80021f4 <GUI_ALLOC_LockH>
 8004c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c22:	f10d 0818 	add.w	r8, sp, #24
 8004c26:	4622      	mov	r2, r4
 8004c28:	1b1b      	subs	r3, r3, r4
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	f848 0d04 	str.w	r0, [r8, #-4]!
 8004c30:	3301      	adds	r3, #1
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	4653      	mov	r3, sl
 8004c36:	f000 fbff 	bl	8005438 <GUI_USAGE_AddRect>
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f7fd fae8 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004c40:	006d      	lsls	r5, r5, #1
 8004c42:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 8004c46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	dc1a      	bgt.n	8004c82 <_FillRect+0xa2>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	7c1b      	ldrb	r3, [r3, #16]
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d50d      	bpl.n	8004c70 <_FillRect+0x90>
 8004c54:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4798      	blx	r3
 8004c5c:	1eb3      	subs	r3, r6, #2
 8004c5e:	b280      	uxth	r0, r0
 8004c60:	1971      	adds	r1, r6, r5
 8004c62:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8004c66:	4042      	eors	r2, r0
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	d1f9      	bne.n	8004c62 <_FillRect+0x82>
 8004c6e:	e004      	b.n	8004c7a <_FillRect+0x9a>
 8004c70:	4652      	mov	r2, sl
 8004c72:	4641      	mov	r1, r8
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7fe f8cb 	bl	8002e10 <GUI__memset16>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	3401      	adds	r4, #1
 8004c7e:	441e      	add	r6, r3
 8004c80:	e7e1      	b.n	8004c46 <_FillRect+0x66>
 8004c82:	a804      	add	r0, sp, #16
 8004c84:	f7fd fac4 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004c88:	b007      	add	sp, #28
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	200000a4 	.word	0x200000a4

08004c94 <_DrawHLine>:
 8004c94:	b507      	push	{r0, r1, r2, lr}
 8004c96:	9200      	str	r2, [sp, #0]
 8004c98:	f7ff ffa2 	bl	8004be0 <_FillRect>
 8004c9c:	b003      	add	sp, #12
 8004c9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004ca4 <_DrawBitmap>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	4d99      	ldr	r5, [pc, #612]	; (8004f10 <_DrawBitmap+0x26c>)
 8004caa:	b091      	sub	sp, #68	; 0x44
 8004cac:	460e      	mov	r6, r1
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	900a      	str	r0, [sp, #40]	; 0x28
 8004cb4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004cb6:	9205      	str	r2, [sp, #20]
 8004cb8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8004cba:	f7fd fa9b 	bl	80021f4 <GUI_ALLOC_LockH>
 8004cbe:	900e      	str	r0, [sp, #56]	; 0x38
 8004cc0:	6940      	ldr	r0, [r0, #20]
 8004cc2:	b108      	cbz	r0, 8004cc8 <_DrawBitmap+0x24>
 8004cc4:	f7fd fa96 	bl	80021f4 <GUI_ALLOC_LockH>
 8004cc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cca:	a810      	add	r0, sp, #64	; 0x40
 8004ccc:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	9306      	str	r3, [sp, #24]
 8004cd4:	f7fd fa9c 	bl	8002210 <GUI_ALLOC_UnlockH>
 8004cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004cdc:	eb06 0b03 	add.w	fp, r6, r3
 8004ce0:	b150      	cbz	r0, 8004cf8 <_DrawBitmap+0x54>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	7c1b      	ldrb	r3, [r3, #16]
 8004ce6:	0799      	lsls	r1, r3, #30
 8004ce8:	d106      	bne.n	8004cf8 <_DrawBitmap+0x54>
 8004cea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004cec:	4659      	mov	r1, fp
 8004cee:	9a05      	ldr	r2, [sp, #20]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	f000 fba0 	bl	8005438 <GUI_USAGE_AddRect>
 8004cf8:	9905      	ldr	r1, [sp, #20]
 8004cfa:	4658      	mov	r0, fp
 8004cfc:	f7ff fe98 	bl	8004a30 <_XY2PTR>
 8004d00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d02:	4605      	mov	r5, r0
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d134      	bne.n	8004d72 <_DrawBitmap+0xce>
 8004d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d0a:	b133      	cbz	r3, 8004d1a <_DrawBitmap+0x76>
 8004d0c:	9b02      	ldr	r3, [sp, #8]
 8004d0e:	2600      	movs	r6, #0
 8004d10:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8004f18 <_DrawBitmap+0x274>
 8004d14:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004d18:	e012      	b.n	8004d40 <_DrawBitmap+0x9c>
 8004d1a:	4b7e      	ldr	r3, [pc, #504]	; (8004f14 <_DrawBitmap+0x270>)
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	d0f4      	beq.n	8004d0c <_DrawBitmap+0x68>
 8004d22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004d24:	4621      	mov	r1, r4
 8004d26:	9a02      	ldr	r2, [sp, #8]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	9b06      	ldr	r3, [sp, #24]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004d30:	47b0      	blx	r6
 8004d32:	e35b      	b.n	80053ec <_DrawBitmap+0x748>
 8004d34:	b944      	cbnz	r4, 8004d48 <_DrawBitmap+0xa4>
 8004d36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004d38:	3601      	adds	r6, #1
 8004d3a:	441c      	add	r4, r3
 8004d3c:	9b06      	ldr	r3, [sp, #24]
 8004d3e:	441d      	add	r5, r3
 8004d40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004d42:	429e      	cmp	r6, r3
 8004d44:	dbf6      	blt.n	8004d34 <_DrawBitmap+0x90>
 8004d46:	e34c      	b.n	80053e2 <_DrawBitmap+0x73e>
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	d0f4      	beq.n	8004d36 <_DrawBitmap+0x92>
 8004d4c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f8d9 3000 	ldr.w	r3, [r9]
 8004d58:	4798      	blx	r3
 8004d5a:	2f00      	cmp	r7, #0
 8004d5c:	d0eb      	beq.n	8004d36 <_DrawBitmap+0x92>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4659      	mov	r1, fp
 8004d62:	9a05      	ldr	r2, [sp, #20]
 8004d64:	4638      	mov	r0, r7
 8004d66:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8004d6a:	4432      	add	r2, r6
 8004d6c:	9b02      	ldr	r3, [sp, #8]
 8004d6e:	47d0      	blx	sl
 8004d70:	e7e1      	b.n	8004d36 <_DrawBitmap+0x92>
 8004d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d74:	2b17      	cmp	r3, #23
 8004d76:	dd44      	ble.n	8004e02 <_DrawBitmap+0x15e>
 8004d78:	f06f 0303 	mvn.w	r3, #3
 8004d7c:	f04f 0800 	mov.w	r8, #0
 8004d80:	fb03 f30b 	mul.w	r3, r3, fp
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f06f 0301 	mvn.w	r3, #1
 8004d8a:	fb03 f30b 	mul.w	r3, r3, fp
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	445b      	add	r3, fp
 8004d94:	9308      	str	r3, [sp, #32]
 8004d96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004d98:	4598      	cmp	r8, r3
 8004d9a:	f280 8322 	bge.w	80053e2 <_DrawBitmap+0x73e>
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	eb03 0908 	add.w	r9, r3, r8
 8004da4:	b934      	cbnz	r4, 8004db4 <_DrawBitmap+0x110>
 8004da6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004da8:	f108 0801 	add.w	r8, r8, #1
 8004dac:	441c      	add	r4, r3
 8004dae:	9b06      	ldr	r3, [sp, #24]
 8004db0:	441d      	add	r5, r3
 8004db2:	e7f0      	b.n	8004d96 <_DrawBitmap+0xf2>
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	d0f6      	beq.n	8004da6 <_DrawBitmap+0x102>
 8004db8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004dba:	b137      	cbz	r7, 8004dca <_DrawBitmap+0x126>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	464a      	mov	r2, r9
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	685e      	ldr	r6, [r3, #4]
 8004dc6:	9b02      	ldr	r3, [sp, #8]
 8004dc8:	47b0      	blx	r6
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	465e      	mov	r6, fp
 8004dce:	eb04 0a03 	add.w	sl, r4, r3
 8004dd2:	9b04      	ldr	r3, [sp, #16]
 8004dd4:	18eb      	adds	r3, r5, r3
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dda:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4798      	blx	r3
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8004dea:	b12f      	cbz	r7, 8004df8 <_DrawBitmap+0x154>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	464a      	mov	r2, r9
 8004df0:	4631      	mov	r1, r6
 8004df2:	4638      	mov	r0, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	9b08      	ldr	r3, [sp, #32]
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <_DrawBitmap+0x134>
 8004e00:	e7d1      	b.n	8004da6 <_DrawBitmap+0x102>
 8004e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	f040 8089 	bne.w	8004f1c <_DrawBitmap+0x278>
 8004e0a:	9b02      	ldr	r3, [sp, #8]
 8004e0c:	3c01      	subs	r4, #1
 8004e0e:	9e05      	ldr	r6, [sp, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004f10 <_DrawBitmap+0x26c>
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	f06f 0301 	mvn.w	r3, #1
 8004e1c:	fb03 f30b 	mul.w	r3, r3, fp
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	9b02      	ldr	r3, [sp, #8]
 8004e24:	445b      	add	r3, fp
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	9b05      	ldr	r3, [sp, #20]
 8004e2a:	1c61      	adds	r1, r4, #1
 8004e2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e2e:	1af3      	subs	r3, r6, r3
 8004e30:	429a      	cmp	r2, r3
 8004e32:	f340 82d6 	ble.w	80053e2 <_DrawBitmap+0x73e>
 8004e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d036      	beq.n	8004eaa <_DrawBitmap+0x206>
 8004e3c:	f8d9 3000 	ldr.w	r3, [r9]
 8004e40:	7c1b      	ldrb	r3, [r3, #16]
 8004e42:	f013 0303 	ands.w	r3, r3, #3
 8004e46:	d009      	beq.n	8004e5c <_DrawBitmap+0x1b8>
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d15a      	bne.n	8004f02 <_DrawBitmap+0x25e>
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	46a2      	mov	sl, r4
 8004e50:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004e54:	465f      	mov	r7, fp
 8004e56:	18eb      	adds	r3, r5, r3
 8004e58:	9308      	str	r3, [sp, #32]
 8004e5a:	e021      	b.n	8004ea0 <_DrawBitmap+0x1fc>
 8004e5c:	9b07      	ldr	r3, [sp, #28]
 8004e5e:	4622      	mov	r2, r4
 8004e60:	18e9      	adds	r1, r5, r3
 8004e62:	462b      	mov	r3, r5
 8004e64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004e68:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8004e6a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8004e6e:	f823 0b02 	strh.w	r0, [r3], #2
 8004e72:	428b      	cmp	r3, r1
 8004e74:	d1f6      	bne.n	8004e64 <_DrawBitmap+0x1c0>
 8004e76:	e044      	b.n	8004f02 <_DrawBitmap+0x25e>
 8004e78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7e:	9a08      	ldr	r2, [sp, #32]
 8004e80:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8004e84:	f1b8 0f00 	cmp.w	r8, #0
 8004e88:	d006      	beq.n	8004e98 <_DrawBitmap+0x1f4>
 8004e8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004e8e:	4632      	mov	r2, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	4640      	mov	r0, r8
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4798      	blx	r3
 8004e98:	3701      	adds	r7, #1
 8004e9a:	9b04      	ldr	r3, [sp, #16]
 8004e9c:	42bb      	cmp	r3, r7
 8004e9e:	d030      	beq.n	8004f02 <_DrawBitmap+0x25e>
 8004ea0:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f7      	beq.n	8004e98 <_DrawBitmap+0x1f4>
 8004ea8:	e7e6      	b.n	8004e78 <_DrawBitmap+0x1d4>
 8004eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8004eae:	7c1b      	ldrb	r3, [r3, #16]
 8004eb0:	f013 0303 	ands.w	r3, r3, #3
 8004eb4:	d009      	beq.n	8004eca <_DrawBitmap+0x226>
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d123      	bne.n	8004f02 <_DrawBitmap+0x25e>
 8004eba:	9b03      	ldr	r3, [sp, #12]
 8004ebc:	46a2      	mov	sl, r4
 8004ebe:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004ec2:	465f      	mov	r7, fp
 8004ec4:	18eb      	adds	r3, r5, r3
 8004ec6:	9308      	str	r3, [sp, #32]
 8004ec8:	e016      	b.n	8004ef8 <_DrawBitmap+0x254>
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <_DrawBitmap+0x274>)
 8004ecc:	4628      	mov	r0, r5
 8004ece:	9a02      	ldr	r2, [sp, #8]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4798      	blx	r3
 8004ed4:	e015      	b.n	8004f02 <_DrawBitmap+0x25e>
 8004ed6:	9a08      	ldr	r2, [sp, #32]
 8004ed8:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8004edc:	f1b8 0f00 	cmp.w	r8, #0
 8004ee0:	d006      	beq.n	8004ef0 <_DrawBitmap+0x24c>
 8004ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	4640      	mov	r0, r8
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4798      	blx	r3
 8004ef0:	3701      	adds	r7, #1
 8004ef2:	9b04      	ldr	r3, [sp, #16]
 8004ef4:	429f      	cmp	r7, r3
 8004ef6:	d004      	beq.n	8004f02 <_DrawBitmap+0x25e>
 8004ef8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f7      	beq.n	8004ef0 <_DrawBitmap+0x24c>
 8004f00:	e7e9      	b.n	8004ed6 <_DrawBitmap+0x232>
 8004f02:	9b06      	ldr	r3, [sp, #24]
 8004f04:	3601      	adds	r6, #1
 8004f06:	441d      	add	r5, r3
 8004f08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004f0a:	441c      	add	r4, r3
 8004f0c:	e78c      	b.n	8004e28 <_DrawBitmap+0x184>
 8004f0e:	bf00      	nop
 8004f10:	200000a4 	.word	0x200000a4
 8004f14:	20025aa4 	.word	0x20025aa4
 8004f18:	200000a8 	.word	0x200000a8
 8004f1c:	4baf      	ldr	r3, [pc, #700]	; (80051dc <_DrawBitmap+0x538>)
 8004f1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	bf08      	it	eq
 8004f24:	461a      	moveq	r2, r3
 8004f26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8004f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	930c      	str	r3, [sp, #48]	; 0x30
 8004f34:	1c63      	adds	r3, r4, #1
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	1c83      	adds	r3, r0, #2
 8004f3a:	9307      	str	r3, [sp, #28]
 8004f3c:	9b05      	ldr	r3, [sp, #20]
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	9b07      	ldr	r3, [sp, #28]
 8004f42:	9a05      	ldr	r2, [sp, #20]
 8004f44:	1e9c      	subs	r4, r3, #2
 8004f46:	9b03      	ldr	r3, [sp, #12]
 8004f48:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f52:	429a      	cmp	r2, r3
 8004f54:	f340 8245 	ble.w	80053e2 <_DrawBitmap+0x73e>
 8004f58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	f000 80c7 	beq.w	80050ee <_DrawBitmap+0x44a>
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	f000 8167 	beq.w	8005234 <_DrawBitmap+0x590>
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 822f 	bne.w	80053ca <_DrawBitmap+0x726>
 8004f6c:	4b9c      	ldr	r3, [pc, #624]	; (80051e0 <_DrawBitmap+0x53c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8004f72:	f7fd f93f 	bl	80021f4 <GUI_ALLOC_LockH>
 8004f76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f78:	4a9a      	ldr	r2, [pc, #616]	; (80051e4 <_DrawBitmap+0x540>)
 8004f7a:	f1c3 0508 	rsb	r5, r3, #8
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	900e      	str	r0, [sp, #56]	; 0x38
 8004f82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004f86:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004f8a:	5cd6      	ldrb	r6, [r2, r3]
 8004f8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f8e:	9f02      	ldr	r7, [sp, #8]
 8004f90:	411e      	asrs	r6, r3
 8004f92:	4b93      	ldr	r3, [pc, #588]	; (80051e0 <_DrawBitmap+0x53c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	7c1b      	ldrb	r3, [r3, #16]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d01f      	beq.n	8004fe0 <_DrawBitmap+0x33c>
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d058      	beq.n	8005056 <_DrawBitmap+0x3b2>
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d056      	beq.n	8005056 <_DrawBitmap+0x3b2>
 8004fa8:	42bd      	cmp	r5, r7
 8004faa:	4622      	mov	r2, r4
 8004fac:	bf28      	it	cs
 8004fae:	463d      	movcs	r5, r7
 8004fb0:	1b7f      	subs	r7, r7, r5
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	f006 0101 	and.w	r1, r6, #1
 8004fb8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004fc0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004fc4:	f822 1b02 	strh.w	r1, [r2], #2
 8004fc8:	d1f4      	bne.n	8004fb4 <_DrawBitmap+0x310>
 8004fca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	f000 8089 	beq.w	80050e6 <_DrawBitmap+0x442>
 8004fd4:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8004fd8:	2508      	movs	r5, #8
 8004fda:	4a82      	ldr	r2, [pc, #520]	; (80051e4 <_DrawBitmap+0x540>)
 8004fdc:	5cd6      	ldrb	r6, [r2, r3]
 8004fde:	e7e3      	b.n	8004fa8 <_DrawBitmap+0x304>
 8004fe0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fe2:	46d8      	mov	r8, fp
 8004fe4:	889b      	ldrh	r3, [r3, #4]
 8004fe6:	9308      	str	r3, [sp, #32]
 8004fe8:	42bd      	cmp	r5, r7
 8004fea:	bf28      	it	cs
 8004fec:	463d      	movcs	r5, r7
 8004fee:	1b7f      	subs	r7, r7, r5
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	d023      	beq.n	800503e <_DrawBitmap+0x39a>
 8004ff6:	b91e      	cbnz	r6, 8005000 <_DrawBitmap+0x35c>
 8004ff8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8004ffc:	44a8      	add	r8, r5
 8004ffe:	e022      	b.n	8005046 <_DrawBitmap+0x3a2>
 8005000:	07f2      	lsls	r2, r6, #31
 8005002:	d509      	bpl.n	8005018 <_DrawBitmap+0x374>
 8005004:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005008:	4641      	mov	r1, r8
 800500a:	9a04      	ldr	r2, [sp, #16]
 800500c:	4648      	mov	r0, r9
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4798      	blx	r3
 8005012:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8005016:	8023      	strh	r3, [r4, #0]
 8005018:	3d01      	subs	r5, #1
 800501a:	f108 0801 	add.w	r8, r8, #1
 800501e:	f104 0402 	add.w	r4, r4, #2
 8005022:	d010      	beq.n	8005046 <_DrawBitmap+0x3a2>
 8005024:	0876      	lsrs	r6, r6, #1
 8005026:	e7e6      	b.n	8004ff6 <_DrawBitmap+0x352>
 8005028:	07f3      	lsls	r3, r6, #31
 800502a:	f104 0402 	add.w	r4, r4, #2
 800502e:	bf44      	itt	mi
 8005030:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 8005034:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 8005038:	3d01      	subs	r5, #1
 800503a:	d004      	beq.n	8005046 <_DrawBitmap+0x3a2>
 800503c:	0876      	lsrs	r6, r6, #1
 800503e:	2e00      	cmp	r6, #0
 8005040:	d1f2      	bne.n	8005028 <_DrawBitmap+0x384>
 8005042:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8005046:	2f00      	cmp	r7, #0
 8005048:	d04d      	beq.n	80050e6 <_DrawBitmap+0x442>
 800504a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800504e:	2508      	movs	r5, #8
 8005050:	4a64      	ldr	r2, [pc, #400]	; (80051e4 <_DrawBitmap+0x540>)
 8005052:	5cd6      	ldrb	r6, [r2, r3]
 8005054:	e7c8      	b.n	8004fe8 <_DrawBitmap+0x344>
 8005056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005058:	46d8      	mov	r8, fp
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	4798      	blx	r3
 8005060:	b283      	uxth	r3, r0
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	9308      	str	r3, [sp, #32]
 8005068:	42bd      	cmp	r5, r7
 800506a:	bf28      	it	cs
 800506c:	463d      	movcs	r5, r7
 800506e:	1b7f      	subs	r7, r7, r5
 8005070:	f1b9 0f00 	cmp.w	r9, #0
 8005074:	d01b      	beq.n	80050ae <_DrawBitmap+0x40a>
 8005076:	eb08 0305 	add.w	r3, r8, r5
 800507a:	46a2      	mov	sl, r4
 800507c:	930d      	str	r3, [sp, #52]	; 0x34
 800507e:	07f0      	lsls	r0, r6, #31
 8005080:	d50c      	bpl.n	800509c <_DrawBitmap+0x3f8>
 8005082:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005086:	4641      	mov	r1, r8
 8005088:	9a04      	ldr	r2, [sp, #16]
 800508a:	4648      	mov	r0, r9
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4798      	blx	r3
 8005090:	f8ba 3000 	ldrh.w	r3, [sl]
 8005094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005096:	4053      	eors	r3, r2
 8005098:	f8aa 3000 	strh.w	r3, [sl]
 800509c:	f108 0801 	add.w	r8, r8, #1
 80050a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a2:	f10a 0a02 	add.w	sl, sl, #2
 80050a6:	0876      	lsrs	r6, r6, #1
 80050a8:	4598      	cmp	r8, r3
 80050aa:	d1e8      	bne.n	800507e <_DrawBitmap+0x3da>
 80050ac:	e00f      	b.n	80050ce <_DrawBitmap+0x42a>
 80050ae:	462a      	mov	r2, r5
 80050b0:	4623      	mov	r3, r4
 80050b2:	07f1      	lsls	r1, r6, #31
 80050b4:	f103 0302 	add.w	r3, r3, #2
 80050b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80050bc:	bf41      	itttt	mi
 80050be:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 80050c2:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 80050c4:	4041      	eormi	r1, r0
 80050c6:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 80050ca:	3a01      	subs	r2, #1
 80050cc:	d1f1      	bne.n	80050b2 <_DrawBitmap+0x40e>
 80050ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80050d2:	b147      	cbz	r7, 80050e6 <_DrawBitmap+0x442>
 80050d4:	9b08      	ldr	r3, [sp, #32]
 80050d6:	2508      	movs	r5, #8
 80050d8:	4a42      	ldr	r2, [pc, #264]	; (80051e4 <_DrawBitmap+0x540>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	5cd6      	ldrb	r6, [r2, r3]
 80050de:	9b08      	ldr	r3, [sp, #32]
 80050e0:	3301      	adds	r3, #1
 80050e2:	9308      	str	r3, [sp, #32]
 80050e4:	e7c0      	b.n	8005068 <_DrawBitmap+0x3c4>
 80050e6:	a80e      	add	r0, sp, #56	; 0x38
 80050e8:	f7fd f892 	bl	8002210 <GUI_ALLOC_UnlockH>
 80050ec:	e16d      	b.n	80053ca <_DrawBitmap+0x726>
 80050ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80050f0:	f1c3 0504 	rsb	r5, r3, #4
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 80050fa:	b2ed      	uxtb	r5, r5
 80050fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fe:	409e      	lsls	r6, r3
 8005100:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <_DrawBitmap+0x53c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2f6      	uxtb	r6, r6
 8005106:	7c1b      	ldrb	r3, [r3, #16]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d009      	beq.n	8005124 <_DrawBitmap+0x480>
 8005110:	d30a      	bcc.n	8005128 <_DrawBitmap+0x484>
 8005112:	2b02      	cmp	r3, #2
 8005114:	f040 8159 	bne.w	80053ca <_DrawBitmap+0x726>
 8005118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800511a:	465f      	mov	r7, fp
 800511c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005120:	9308      	str	r3, [sp, #32]
 8005122:	e036      	b.n	8005192 <_DrawBitmap+0x4ee>
 8005124:	9b02      	ldr	r3, [sp, #8]
 8005126:	e07e      	b.n	8005226 <_DrawBitmap+0x582>
 8005128:	9b02      	ldr	r3, [sp, #8]
 800512a:	429d      	cmp	r5, r3
 800512c:	4621      	mov	r1, r4
 800512e:	bfc8      	it	gt
 8005130:	b2dd      	uxtbgt	r5, r3
 8005132:	1b5b      	subs	r3, r3, r5
 8005134:	462a      	mov	r2, r5
 8005136:	09b0      	lsrs	r0, r6, #6
 8005138:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800513a:	3a01      	subs	r2, #1
 800513c:	00b6      	lsls	r6, r6, #2
 800513e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005142:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8005146:	b2f6      	uxtb	r6, r6
 8005148:	f821 0b02 	strh.w	r0, [r1], #2
 800514c:	d1f3      	bne.n	8005136 <_DrawBitmap+0x492>
 800514e:	3d01      	subs	r5, #1
 8005150:	b2ed      	uxtb	r5, r5
 8005152:	3501      	adds	r5, #1
 8005154:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8136 	beq.w	80053ca <_DrawBitmap+0x726>
 800515e:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8005162:	2504      	movs	r5, #4
 8005164:	e7e1      	b.n	800512a <_DrawBitmap+0x486>
 8005166:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800516a:	d125      	bne.n	80051b8 <_DrawBitmap+0x514>
 800516c:	f109 0901 	add.w	r9, r9, #1
 8005170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005172:	00b6      	lsls	r6, r6, #2
 8005174:	4599      	cmp	r9, r3
 8005176:	b2f6      	uxtb	r6, r6
 8005178:	d1f5      	bne.n	8005166 <_DrawBitmap+0x4c2>
 800517a:	1c6b      	adds	r3, r5, #1
 800517c:	3701      	adds	r7, #1
 800517e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8005182:	442f      	add	r7, r5
 8005184:	f1b8 0f00 	cmp.w	r8, #0
 8005188:	f000 811f 	beq.w	80053ca <_DrawBitmap+0x726>
 800518c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8005190:	2504      	movs	r5, #4
 8005192:	4545      	cmp	r5, r8
 8005194:	f107 0301 	add.w	r3, r7, #1
 8005198:	46b9      	mov	r9, r7
 800519a:	bfc8      	it	gt
 800519c:	fa5f f588 	uxtbgt.w	r5, r8
 80051a0:	ebc5 0808 	rsb	r8, r5, r8
 80051a4:	3d01      	subs	r5, #1
 80051a6:	b2ed      	uxtb	r5, r5
 80051a8:	442b      	add	r3, r5
 80051aa:	930d      	str	r3, [sp, #52]	; 0x34
 80051ac:	f06f 0301 	mvn.w	r3, #1
 80051b0:	fb03 4307 	mla	r3, r3, r7, r4
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	e7d6      	b.n	8005166 <_DrawBitmap+0x4c2>
 80051b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80051ba:	09b3      	lsrs	r3, r6, #6
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c2:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 80051c6:	9b08      	ldr	r3, [sp, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0cf      	beq.n	800516c <_DrawBitmap+0x4c8>
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4649      	mov	r1, r9
 80051d0:	9a04      	ldr	r2, [sp, #16]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9808      	ldr	r0, [sp, #32]
 80051d6:	4798      	blx	r3
 80051d8:	e7c8      	b.n	800516c <_DrawBitmap+0x4c8>
 80051da:	bf00      	nop
 80051dc:	0800dd64 	.word	0x0800dd64
 80051e0:	200000a4 	.word	0x200000a4
 80051e4:	0800ddbc 	.word	0x0800ddbc
 80051e8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80051ec:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80051f0:	ea4f 0686 	mov.w	r6, r6, lsl #2
 80051f4:	f101 0102 	add.w	r1, r1, #2
 80051f8:	bf18      	it	ne
 80051fa:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 80051fe:	b2f6      	uxtb	r6, r6
 8005200:	bf1c      	itt	ne
 8005202:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8005206:	f821 0c02 	strhne.w	r0, [r1, #-2]
 800520a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800520e:	d1eb      	bne.n	80051e8 <_DrawBitmap+0x544>
 8005210:	3d01      	subs	r5, #1
 8005212:	b2ed      	uxtb	r5, r5
 8005214:	3501      	adds	r5, #1
 8005216:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80d5 	beq.w	80053ca <_DrawBitmap+0x726>
 8005220:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8005224:	2504      	movs	r5, #4
 8005226:	429d      	cmp	r5, r3
 8005228:	4621      	mov	r1, r4
 800522a:	bfc8      	it	gt
 800522c:	b2dd      	uxtbgt	r5, r3
 800522e:	1b5b      	subs	r3, r3, r5
 8005230:	462a      	mov	r2, r5
 8005232:	e7d9      	b.n	80051e8 <_DrawBitmap+0x544>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005238:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800523c:	4093      	lsls	r3, r2
 800523e:	4a6d      	ldr	r2, [pc, #436]	; (80053f4 <_DrawBitmap+0x750>)
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	b2dd      	uxtb	r5, r3
 8005244:	7c12      	ldrb	r2, [r2, #16]
 8005246:	f002 0203 	and.w	r2, r2, #3
 800524a:	2a01      	cmp	r2, #1
 800524c:	d003      	beq.n	8005256 <_DrawBitmap+0x5b2>
 800524e:	d308      	bcc.n	8005262 <_DrawBitmap+0x5be>
 8005250:	2a02      	cmp	r2, #2
 8005252:	d03a      	beq.n	80052ca <_DrawBitmap+0x626>
 8005254:	e0b9      	b.n	80053ca <_DrawBitmap+0x726>
 8005256:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005258:	9a02      	ldr	r2, [sp, #8]
 800525a:	f1c3 0302 	rsb	r3, r3, #2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e0ac      	b.n	80053bc <_DrawBitmap+0x718>
 8005262:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005264:	b15b      	cbz	r3, 800527e <_DrawBitmap+0x5da>
 8005266:	092d      	lsrs	r5, r5, #4
 8005268:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800526a:	9a03      	ldr	r2, [sp, #12]
 800526c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005270:	4692      	mov	sl, r2
 8005272:	8023      	strh	r3, [r4, #0]
 8005274:	9b02      	ldr	r3, [sp, #8]
 8005276:	9c07      	ldr	r4, [sp, #28]
 8005278:	3b01      	subs	r3, #1
 800527a:	7815      	ldrb	r5, [r2, #0]
 800527c:	e000      	b.n	8005280 <_DrawBitmap+0x5dc>
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	2b01      	cmp	r3, #1
 8005282:	dd19      	ble.n	80052b8 <_DrawBitmap+0x614>
 8005284:	1059      	asrs	r1, r3, #1
 8005286:	1d22      	adds	r2, r4, #4
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	eb0a 0001 	add.w	r0, sl, r1
 8005290:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005292:	092e      	lsrs	r6, r5, #4
 8005294:	f005 050f 	and.w	r5, r5, #15
 8005298:	3204      	adds	r2, #4
 800529a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800529e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80052a2:	f822 6c08 	strh.w	r6, [r2, #-8]
 80052a6:	463e      	mov	r6, r7
 80052a8:	f822 5c06 	strh.w	r5, [r2, #-6]
 80052ac:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80052b0:	4582      	cmp	sl, r0
 80052b2:	d1ed      	bne.n	8005290 <_DrawBitmap+0x5ec>
 80052b4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8086 	beq.w	80053ca <_DrawBitmap+0x726>
 80052be:	092d      	lsrs	r5, r5, #4
 80052c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052c2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80052c6:	8023      	strh	r3, [r4, #0]
 80052c8:	e07f      	b.n	80053ca <_DrawBitmap+0x726>
 80052ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052cc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80052ce:	b1c2      	cbz	r2, 8005302 <_DrawBitmap+0x65e>
 80052d0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80052d4:	d00b      	beq.n	80052ee <_DrawBitmap+0x64a>
 80052d6:	092d      	lsrs	r5, r5, #4
 80052d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80052de:	8023      	strh	r3, [r4, #0]
 80052e0:	b12e      	cbz	r6, 80052ee <_DrawBitmap+0x64a>
 80052e2:	68b3      	ldr	r3, [r6, #8]
 80052e4:	4659      	mov	r1, fp
 80052e6:	9a04      	ldr	r2, [sp, #16]
 80052e8:	4630      	mov	r0, r6
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4798      	blx	r3
 80052ee:	9b02      	ldr	r3, [sp, #8]
 80052f0:	f10b 0701 	add.w	r7, fp, #1
 80052f4:	9c07      	ldr	r4, [sp, #28]
 80052f6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	781d      	ldrb	r5, [r3, #0]
 80052fe:	469a      	mov	sl, r3
 8005300:	e00f      	b.n	8005322 <_DrawBitmap+0x67e>
 8005302:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005306:	465f      	mov	r7, fp
 8005308:	e00b      	b.n	8005322 <_DrawBitmap+0x67e>
 800530a:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800530e:	d10c      	bne.n	800532a <_DrawBitmap+0x686>
 8005310:	f015 050f 	ands.w	r5, r5, #15
 8005314:	d117      	bne.n	8005346 <_DrawBitmap+0x6a2>
 8005316:	3404      	adds	r4, #4
 8005318:	3702      	adds	r7, #2
 800531a:	f1a8 0802 	sub.w	r8, r8, #2
 800531e:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8005322:	f1b8 0f01 	cmp.w	r8, #1
 8005326:	dcf0      	bgt.n	800530a <_DrawBitmap+0x666>
 8005328:	e01a      	b.n	8005360 <_DrawBitmap+0x6bc>
 800532a:	092b      	lsrs	r3, r5, #4
 800532c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800532e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005332:	8023      	strh	r3, [r4, #0]
 8005334:	2e00      	cmp	r6, #0
 8005336:	d0eb      	beq.n	8005310 <_DrawBitmap+0x66c>
 8005338:	68b3      	ldr	r3, [r6, #8]
 800533a:	4639      	mov	r1, r7
 800533c:	9a04      	ldr	r2, [sp, #16]
 800533e:	4630      	mov	r0, r6
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4798      	blx	r3
 8005344:	e7e4      	b.n	8005310 <_DrawBitmap+0x66c>
 8005346:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005348:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800534c:	8063      	strh	r3, [r4, #2]
 800534e:	2e00      	cmp	r6, #0
 8005350:	d0e1      	beq.n	8005316 <_DrawBitmap+0x672>
 8005352:	68b3      	ldr	r3, [r6, #8]
 8005354:	1c79      	adds	r1, r7, #1
 8005356:	9a04      	ldr	r2, [sp, #16]
 8005358:	4630      	mov	r0, r6
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4798      	blx	r3
 800535e:	e7da      	b.n	8005316 <_DrawBitmap+0x672>
 8005360:	f1b8 0f00 	cmp.w	r8, #0
 8005364:	d031      	beq.n	80053ca <_DrawBitmap+0x726>
 8005366:	092d      	lsrs	r5, r5, #4
 8005368:	d02f      	beq.n	80053ca <_DrawBitmap+0x726>
 800536a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800536c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005370:	8023      	strh	r3, [r4, #0]
 8005372:	b356      	cbz	r6, 80053ca <_DrawBitmap+0x726>
 8005374:	68b3      	ldr	r3, [r6, #8]
 8005376:	4639      	mov	r1, r7
 8005378:	9a04      	ldr	r2, [sp, #16]
 800537a:	4630      	mov	r0, r6
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4798      	blx	r3
 8005380:	e023      	b.n	80053ca <_DrawBitmap+0x726>
 8005382:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005386:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800538a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800538e:	f100 0002 	add.w	r0, r0, #2
 8005392:	bf18      	it	ne
 8005394:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 8005398:	b2ed      	uxtb	r5, r5
 800539a:	bf1c      	itt	ne
 800539c:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 80053a0:	f820 6c02 	strhne.w	r6, [r0, #-2]
 80053a4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80053a8:	d1eb      	bne.n	8005382 <_DrawBitmap+0x6de>
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	3301      	adds	r3, #1
 80053b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80053b4:	b14a      	cbz	r2, 80053ca <_DrawBitmap+0x726>
 80053b6:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80053ba:	2302      	movs	r3, #2
 80053bc:	4293      	cmp	r3, r2
 80053be:	4620      	mov	r0, r4
 80053c0:	bfc8      	it	gt
 80053c2:	b2d3      	uxtbgt	r3, r2
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	e7db      	b.n	8005382 <_DrawBitmap+0x6de>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80053ce:	3301      	adds	r3, #1
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	9a06      	ldr	r2, [sp, #24]
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	9b07      	ldr	r3, [sp, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	9307      	str	r3, [sp, #28]
 80053e0:	e5ae      	b.n	8004f40 <_DrawBitmap+0x29c>
 80053e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053e4:	b113      	cbz	r3, 80053ec <_DrawBitmap+0x748>
 80053e6:	a80f      	add	r0, sp, #60	; 0x3c
 80053e8:	f7fc ff12 	bl	8002210 <GUI_ALLOC_UnlockH>
 80053ec:	b011      	add	sp, #68	; 0x44
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	200000a4 	.word	0x200000a4

080053f8 <_GetDevProp>:
 80053f8:	2908      	cmp	r1, #8
 80053fa:	d004      	beq.n	8005406 <_GetDevProp+0xe>
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	b120      	cbz	r0, 800540a <_GetDevProp+0x12>
 8005400:	68c3      	ldr	r3, [r0, #12]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	4718      	bx	r3
 8005406:	2010      	movs	r0, #16
 8005408:	4770      	bx	lr
 800540a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540e:	4770      	bx	lr

08005410 <GUI_USAGE_DecUseCnt>:
 8005410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	f7fc feee 	bl	80021f4 <GUI_ALLOC_LockH>
 8005418:	8984      	ldrh	r4, [r0, #12]
 800541a:	ab02      	add	r3, sp, #8
 800541c:	3c01      	subs	r4, #1
 800541e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005422:	b224      	sxth	r4, r4
 8005424:	8184      	strh	r4, [r0, #12]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fc fef2 	bl	8002210 <GUI_ALLOC_UnlockH>
 800542c:	b914      	cbnz	r4, 8005434 <GUI_USAGE_DecUseCnt+0x24>
 800542e:	4628      	mov	r0, r5
 8005430:	f7fc ff0e 	bl	8002250 <GUI_ALLOC_Free>
 8005434:	b003      	add	sp, #12
 8005436:	bd30      	pop	{r4, r5, pc}

08005438 <GUI_USAGE_AddRect>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	9c08      	ldr	r4, [sp, #32]
 800543e:	4605      	mov	r5, r0
 8005440:	4688      	mov	r8, r1
 8005442:	4699      	mov	r9, r3
 8005444:	4414      	add	r4, r2
 8005446:	68ab      	ldr	r3, [r5, #8]
 8005448:	1c56      	adds	r6, r2, #1
 800544a:	4641      	mov	r1, r8
 800544c:	4628      	mov	r0, r5
 800544e:	685f      	ldr	r7, [r3, #4]
 8005450:	464b      	mov	r3, r9
 8005452:	47b8      	blx	r7
 8005454:	42b4      	cmp	r4, r6
 8005456:	4632      	mov	r2, r6
 8005458:	d1f5      	bne.n	8005446 <GUI_USAGE_AddRect+0xe>
 800545a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800545e <_Convert16>:
 800545e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005462:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005466:	4681      	mov	r9, r0
 8005468:	460d      	mov	r5, r1
 800546a:	4616      	mov	r6, r2
 800546c:	461f      	mov	r7, r3
 800546e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005472:	4614      	mov	r4, r2
 8005474:	4688      	mov	r8, r1
 8005476:	f839 0b02 	ldrh.w	r0, [r9], #2
 800547a:	47d8      	blx	fp
 800547c:	47d0      	blx	sl
 800547e:	3c01      	subs	r4, #1
 8005480:	f848 0b04 	str.w	r0, [r8], #4
 8005484:	d1f7      	bne.n	8005476 <_Convert16+0x18>
 8005486:	2f1f      	cmp	r7, #31
 8005488:	d806      	bhi.n	8005498 <_Convert16+0x3a>
 800548a:	463a      	mov	r2, r7
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	f001 bdfc 	b.w	8007090 <GUI__CompactPixelIndices>
 8005498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800549c <_Convert8>:
 800549c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80054a4:	4680      	mov	r8, r0
 80054a6:	460d      	mov	r5, r1
 80054a8:	4616      	mov	r6, r2
 80054aa:	461f      	mov	r7, r3
 80054ac:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80054b0:	4689      	mov	r9, r1
 80054b2:	4604      	mov	r4, r0
 80054b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80054b8:	47d8      	blx	fp
 80054ba:	47d0      	blx	sl
 80054bc:	1b33      	subs	r3, r6, r4
 80054be:	f849 0b04 	str.w	r0, [r9], #4
 80054c2:	eb18 0f03 	cmn.w	r8, r3
 80054c6:	d1f5      	bne.n	80054b4 <_Convert8+0x18>
 80054c8:	2f1f      	cmp	r7, #31
 80054ca:	d806      	bhi.n	80054da <_Convert8+0x3e>
 80054cc:	463a      	mov	r2, r7
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d6:	f001 bddb 	b.w	8007090 <GUI__CompactPixelIndices>
 80054da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080054e0 <GUI_MEMDEV__WriteToActiveOpaque>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	b09b      	sub	sp, #108	; 0x6c
 80054e6:	4605      	mov	r5, r0
 80054e8:	9108      	str	r1, [sp, #32]
 80054ea:	9209      	str	r2, [sp, #36]	; 0x24
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f000 8399 	beq.w	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80054f2:	f7fc fe7f 	bl	80021f4 <GUI_ALLOC_LockH>
 80054f6:	ab1a      	add	r3, sp, #104	; 0x68
 80054f8:	6944      	ldr	r4, [r0, #20]
 80054fa:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fc fe86 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005504:	4628      	mov	r0, r5
 8005506:	f001 ff09 	bl	800731c <GUI_MEMDEV_GetBitsPerPixel>
 800550a:	2808      	cmp	r0, #8
 800550c:	4607      	mov	r7, r0
 800550e:	4ea5      	ldr	r6, [pc, #660]	; (80057a4 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8005510:	dd02      	ble.n	8005518 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 8005512:	2c00      	cmp	r4, #0
 8005514:	f000 81c9 	beq.w	80058aa <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 8005518:	2301      	movs	r3, #1
 800551a:	2700      	movs	r7, #0
 800551c:	4628      	mov	r0, r5
 800551e:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8005522:	9319      	str	r3, [sp, #100]	; 0x64
 8005524:	930d      	str	r3, [sp, #52]	; 0x34
 8005526:	9718      	str	r7, [sp, #96]	; 0x60
 8005528:	f7fc fe64 	bl	80021f4 <GUI_ALLOC_LockH>
 800552c:	6802      	ldr	r2, [r0, #0]
 800552e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8005532:	6912      	ldr	r2, [r2, #16]
 8005534:	930e      	str	r3, [sp, #56]	; 0x38
 8005536:	6853      	ldr	r3, [r2, #4]
 8005538:	6832      	ldr	r2, [r6, #0]
 800553a:	f849 0d14 	str.w	r0, [r9, #-20]!
 800553e:	6904      	ldr	r4, [r0, #16]
 8005540:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8005544:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8005548:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800554c:	7c50      	ldrb	r0, [r2, #17]
 800554e:	930c      	str	r3, [sp, #48]	; 0x30
 8005550:	f7fe f8e8 	bl	8003724 <GUI_GetBitsPerPixelEx>
 8005554:	6832      	ldr	r2, [r6, #0]
 8005556:	900b      	str	r0, [sp, #44]	; 0x2c
 8005558:	7c50      	ldrb	r0, [r2, #17]
 800555a:	f7fe f901 	bl	8003760 <GUI_GetpfIndex2ColorEx>
 800555e:	900a      	str	r0, [sp, #40]	; 0x28
 8005560:	4648      	mov	r0, r9
 8005562:	f7fc fe55 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005566:	2c08      	cmp	r4, #8
 8005568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800556a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800556c:	d904      	bls.n	8005578 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 800556e:	2c10      	cmp	r4, #16
 8005570:	bf8c      	ite	hi
 8005572:	2304      	movhi	r3, #4
 8005574:	2302      	movls	r3, #2
 8005576:	e005      	b.n	8005584 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8005578:	2c01      	cmp	r4, #1
 800557a:	d103      	bne.n	8005584 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800557c:	ab18      	add	r3, sp, #96	; 0x60
 800557e:	940d      	str	r4, [sp, #52]	; 0x34
 8005580:	930a      	str	r3, [sp, #40]	; 0x28
 8005582:	e001      	b.n	8005588 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8005584:	930d      	str	r3, [sp, #52]	; 0x34
 8005586:	970a      	str	r7, [sp, #40]	; 0x28
 8005588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800558a:	4293      	cmp	r3, r2
 800558c:	f000 80df 	beq.w	800574e <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	7c58      	ldrb	r0, [r3, #17]
 8005594:	f7fe f8ec 	bl	8003770 <GUI_GetpfColor2IndexEx>
 8005598:	900f      	str	r0, [sp, #60]	; 0x3c
 800559a:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800559e:	f7fc ffb7 	bl	8002510 <GUI_ALLOC_AllocNoInit>
 80055a2:	9010      	str	r0, [sp, #64]	; 0x40
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f000 833d 	beq.w	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80055aa:	4628      	mov	r0, r5
 80055ac:	f001 feee 	bl	800738c <GUI_MEMDEV_GetDataPtr>
 80055b0:	4605      	mov	r5, r0
 80055b2:	f1b8 0f00 	cmp.w	r8, #0
 80055b6:	f000 80b9 	beq.w	800572c <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 80055ba:	4640      	mov	r0, r8
 80055bc:	f7fc fe1a 	bl	80021f4 <GUI_ALLOC_LockH>
 80055c0:	eb05 030a 	add.w	r3, r5, sl
 80055c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055c8:	9311      	str	r3, [sp, #68]	; 0x44
 80055ca:	2300      	movs	r3, #0
 80055cc:	9016      	str	r0, [sp, #88]	; 0x58
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d4:	ebca 0703 	rsb	r7, sl, r3
 80055d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055da:	4293      	cmp	r3, r2
 80055dc:	f340 80a2 	ble.w	8005724 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 80055e0:	2300      	movs	r3, #0
 80055e2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80055e4:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80055e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80055ec:	6883      	ldr	r3, [r0, #8]
 80055ee:	4641      	mov	r1, r8
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4798      	blx	r3
 80055f4:	4583      	cmp	fp, r0
 80055f6:	4605      	mov	r5, r0
 80055f8:	d128      	bne.n	800564c <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 80055fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80055fc:	f7fc fdfa 	bl	80021f4 <GUI_ALLOC_LockH>
 8005600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005602:	2c08      	cmp	r4, #8
 8005604:	4601      	mov	r1, r0
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	465a      	mov	r2, fp
 800560a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800560c:	9014      	str	r0, [sp, #80]	; 0x50
 800560e:	4638      	mov	r0, r7
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005614:	d902      	bls.n	800561c <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 8005616:	f7ff ff22 	bl	800545e <_Convert16>
 800561a:	e001      	b.n	8005620 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 800561c:	f7ff ff3e 	bl	800549c <_Convert8>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	ad1a      	add	r5, sp, #104	; 0x68
 8005624:	9808      	ldr	r0, [sp, #32]
 8005626:	465a      	mov	r2, fp
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	4649      	mov	r1, r9
 800562c:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	9303      	str	r3, [sp, #12]
 8005636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	2301      	movs	r3, #1
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	f7fd fda2 	bl	8003188 <LCD_DrawBitmap>
 8005644:	4628      	mov	r0, r5
 8005646:	f7fc fde3 	bl	8002210 <GUI_ALLOC_UnlockH>
 800564a:	e062      	b.n	8005712 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800564c:	2c01      	cmp	r4, #1
 800564e:	d002      	beq.n	8005656 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8005650:	f04f 0801 	mov.w	r8, #1
 8005654:	e057      	b.n	8005706 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8005656:	2d00      	cmp	r5, #0
 8005658:	d05b      	beq.n	8005712 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800565a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800565c:	462a      	mov	r2, r5
 800565e:	9e08      	ldr	r6, [sp, #32]
 8005660:	4649      	mov	r1, r9
 8005662:	f000 0307 	and.w	r3, r0, #7
 8005666:	f8cd a00c 	str.w	sl, [sp, #12]
 800566a:	9306      	str	r3, [sp, #24]
 800566c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566e:	9305      	str	r3, [sp, #20]
 8005670:	2308      	movs	r3, #8
 8005672:	fb90 f3f3 	sdiv	r3, r0, r3
 8005676:	443b      	add	r3, r7
 8005678:	4430      	add	r0, r6
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	2301      	movs	r3, #1
 800567e:	9302      	str	r3, [sp, #8]
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	f7fd fc94 	bl	8002fb0 <LCD__DrawBitmap_1bpp>
 8005688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800568a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800568c:	4641      	mov	r1, r8
 800568e:	441d      	add	r5, r3
 8005690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005692:	6883      	ldr	r3, [r0, #8]
 8005694:	9517      	str	r5, [sp, #92]	; 0x5c
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	4798      	blx	r3
 800569a:	4605      	mov	r5, r0
 800569c:	e7db      	b.n	8005656 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800569e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80056a0:	f7fc fda8 	bl	80021f4 <GUI_ALLOC_LockH>
 80056a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a6:	4601      	mov	r1, r0
 80056a8:	9014      	str	r0, [sp, #80]	; 0x50
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	2c08      	cmp	r4, #8
 80056ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056b0:	462a      	mov	r2, r5
 80056b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	fb00 7006 	mla	r0, r0, r6, r7
 80056bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056be:	d925      	bls.n	800570c <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 80056c0:	f7ff fecd 	bl	800545e <_Convert16>
 80056c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c6:	462a      	mov	r2, r5
 80056c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056ca:	4649      	mov	r1, r9
 80056cc:	9305      	str	r3, [sp, #20]
 80056ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056d0:	9e08      	ldr	r6, [sp, #32]
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	2300      	movs	r3, #0
 80056d6:	4430      	add	r0, r6
 80056d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e0:	f8cd 8000 	str.w	r8, [sp]
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	2301      	movs	r3, #1
 80056e8:	f7fd fd4e 	bl	8003188 <LCD_DrawBitmap>
 80056ec:	a814      	add	r0, sp, #80	; 0x50
 80056ee:	f7fc fd8f 	bl	8002210 <GUI_ALLOC_UnlockH>
 80056f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80056f6:	a917      	add	r1, sp, #92	; 0x5c
 80056f8:	441d      	add	r5, r3
 80056fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056fc:	6883      	ldr	r3, [r0, #8]
 80056fe:	9517      	str	r5, [sp, #92]	; 0x5c
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	4798      	blx	r3
 8005704:	4605      	mov	r5, r0
 8005706:	2d00      	cmp	r5, #0
 8005708:	d1c9      	bne.n	800569e <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 800570a:	e002      	b.n	8005712 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800570c:	f7ff fec6 	bl	800549c <_Convert8>
 8005710:	e7d8      	b.n	80056c4 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 8005712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005714:	f109 0901 	add.w	r9, r9, #1
 8005718:	3301      	adds	r3, #1
 800571a:	9309      	str	r3, [sp, #36]	; 0x24
 800571c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800571e:	4453      	add	r3, sl
 8005720:	9311      	str	r3, [sp, #68]	; 0x44
 8005722:	e755      	b.n	80055d0 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8005724:	a816      	add	r0, sp, #88	; 0x58
 8005726:	f7fc fd73 	bl	8002210 <GUI_ALLOC_UnlockH>
 800572a:	e00e      	b.n	800574a <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 800572c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572e:	465a      	mov	r2, fp
 8005730:	9004      	str	r0, [sp, #16]
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	2301      	movs	r3, #1
 8005736:	f8cd a00c 	str.w	sl, [sp, #12]
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	9402      	str	r4, [sp, #8]
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005744:	9808      	ldr	r0, [sp, #32]
 8005746:	f7fd fd1f 	bl	8003188 <LCD_DrawBitmap>
 800574a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800574c:	e268      	b.n	8005c20 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 800574e:	4628      	mov	r0, r5
 8005750:	f001 fe1c 	bl	800738c <GUI_MEMDEV_GetDataPtr>
 8005754:	4607      	mov	r7, r0
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	f000 809a 	beq.w	8005892 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 800575e:	2500      	movs	r5, #0
 8005760:	4640      	mov	r0, r8
 8005762:	f7fc fd47 	bl	80021f4 <GUI_ALLOC_LockH>
 8005766:	9016      	str	r0, [sp, #88]	; 0x58
 8005768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576a:	42ab      	cmp	r3, r5
 800576c:	f340 808d 	ble.w	800588a <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 8005770:	2300      	movs	r3, #0
 8005772:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005774:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8005778:	462a      	mov	r2, r5
 800577a:	9317      	str	r3, [sp, #92]	; 0x5c
 800577c:	6883      	ldr	r3, [r0, #8]
 800577e:	4641      	mov	r1, r8
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4798      	blx	r3
 8005784:	4583      	cmp	fp, r0
 8005786:	4606      	mov	r6, r0
 8005788:	d126      	bne.n	80057d8 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 800578a:	462e      	mov	r6, r5
 800578c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800578e:	f106 0901 	add.w	r9, r6, #1
 8005792:	4641      	mov	r1, r8
 8005794:	6883      	ldr	r3, [r0, #8]
 8005796:	464a      	mov	r2, r9
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	4798      	blx	r3
 800579c:	4583      	cmp	fp, r0
 800579e:	d103      	bne.n	80057a8 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 80057a0:	464e      	mov	r6, r9
 80057a2:	e7f3      	b.n	800578c <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 80057a4:	200000a4 	.word	0x200000a4
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	ebc5 0806 	rsb	r8, r5, r6
 80057ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057b0:	465a      	mov	r2, fp
 80057b2:	f108 0801 	add.w	r8, r8, #1
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	2301      	movs	r3, #1
 80057ba:	9704      	str	r7, [sp, #16]
 80057bc:	4429      	add	r1, r5
 80057be:	f8cd a00c 	str.w	sl, [sp, #12]
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	4635      	mov	r5, r6
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	4643      	mov	r3, r8
 80057ca:	9402      	str	r4, [sp, #8]
 80057cc:	9808      	ldr	r0, [sp, #32]
 80057ce:	fb0a 7708 	mla	r7, sl, r8, r7
 80057d2:	f7fd fcd9 	bl	8003188 <LCD_DrawBitmap>
 80057d6:	e056      	b.n	8005886 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 80057d8:	2c01      	cmp	r4, #1
 80057da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057dc:	d004      	beq.n	80057e8 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 80057de:	442b      	add	r3, r5
 80057e0:	f04f 0901 	mov.w	r9, #1
 80057e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e6:	e02b      	b.n	8005840 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 80057e8:	eb03 0905 	add.w	r9, r3, r5
 80057ec:	46a0      	mov	r8, r4
 80057ee:	b32e      	cbz	r6, 800583c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80057f0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80057f4:	4632      	mov	r2, r6
 80057f6:	9808      	ldr	r0, [sp, #32]
 80057f8:	4649      	mov	r1, r9
 80057fa:	f00e 0307 	and.w	r3, lr, #7
 80057fe:	f8cd a00c 	str.w	sl, [sp, #12]
 8005802:	4470      	add	r0, lr
 8005804:	f8cd 8008 	str.w	r8, [sp, #8]
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580c:	f8cd 8004 	str.w	r8, [sp, #4]
 8005810:	9305      	str	r3, [sp, #20]
 8005812:	2308      	movs	r3, #8
 8005814:	f8cd 8000 	str.w	r8, [sp]
 8005818:	fb9e f3f3 	sdiv	r3, lr, r3
 800581c:	443b      	add	r3, r7
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	2301      	movs	r3, #1
 8005822:	f7fd fbc5 	bl	8002fb0 <LCD__DrawBitmap_1bpp>
 8005826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005828:	9816      	ldr	r0, [sp, #88]	; 0x58
 800582a:	462a      	mov	r2, r5
 800582c:	441e      	add	r6, r3
 800582e:	a917      	add	r1, sp, #92	; 0x5c
 8005830:	6883      	ldr	r3, [r0, #8]
 8005832:	9617      	str	r6, [sp, #92]	; 0x5c
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4798      	blx	r3
 8005838:	4606      	mov	r6, r0
 800583a:	e7d8      	b.n	80057ee <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 800583c:	4457      	add	r7, sl
 800583e:	e022      	b.n	8005886 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8005840:	2e00      	cmp	r6, #0
 8005842:	d0fb      	beq.n	800583c <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8005844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005846:	4632      	mov	r2, r6
 8005848:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005850:	9808      	ldr	r0, [sp, #32]
 8005852:	fb03 730e 	mla	r3, r3, lr, r7
 8005856:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005858:	4470      	add	r0, lr
 800585a:	f8cd a00c 	str.w	sl, [sp, #12]
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	2301      	movs	r3, #1
 8005862:	9402      	str	r4, [sp, #8]
 8005864:	f8cd 9004 	str.w	r9, [sp, #4]
 8005868:	f8cd 9000 	str.w	r9, [sp]
 800586c:	f7fd fc8c 	bl	8003188 <LCD_DrawBitmap>
 8005870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005872:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005874:	462a      	mov	r2, r5
 8005876:	441e      	add	r6, r3
 8005878:	4641      	mov	r1, r8
 800587a:	6883      	ldr	r3, [r0, #8]
 800587c:	9617      	str	r6, [sp, #92]	; 0x5c
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	4798      	blx	r3
 8005882:	4606      	mov	r6, r0
 8005884:	e7dc      	b.n	8005840 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8005886:	3501      	adds	r5, #1
 8005888:	e76e      	b.n	8005768 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800588a:	a816      	add	r0, sp, #88	; 0x58
 800588c:	f7fc fcc0 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005890:	e1c8      	b.n	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	465a      	mov	r2, fp
 8005896:	9004      	str	r0, [sp, #16]
 8005898:	9305      	str	r3, [sp, #20]
 800589a:	2301      	movs	r3, #1
 800589c:	f8cd a00c 	str.w	sl, [sp, #12]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	9402      	str	r4, [sp, #8]
 80058a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a8:	e03a      	b.n	8005920 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7fc fca2 	bl	80021f4 <GUI_ALLOC_LockH>
 80058b0:	4683      	mov	fp, r0
 80058b2:	a81a      	add	r0, sp, #104	; 0x68
 80058b4:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80058b8:	f840 bd10 	str.w	fp, [r0, #-16]!
 80058bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058be:	f8db 2000 	ldr.w	r2, [fp]
 80058c2:	f8db 300c 	ldr.w	r3, [fp, #12]
 80058c6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80058ca:	930c      	str	r3, [sp, #48]	; 0x30
 80058cc:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 80058d0:	f7fc fc9e 	bl	8002210 <GUI_ALLOC_UnlockH>
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80058da:	7c50      	ldrb	r0, [r2, #17]
 80058dc:	4aa1      	ldr	r2, [pc, #644]	; (8005b64 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 80058de:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80058e2:	6916      	ldr	r6, [r2, #16]
 80058e4:	6833      	ldr	r3, [r6, #0]
 80058e6:	930a      	str	r3, [sp, #40]	; 0x28
 80058e8:	f7fd ff1c 	bl	8003724 <GUI_GetBitsPerPixelEx>
 80058ec:	2808      	cmp	r0, #8
 80058ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058f0:	d906      	bls.n	8005900 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 80058f2:	2810      	cmp	r0, #16
 80058f4:	bf8c      	ite	hi
 80058f6:	f04f 0a04 	movhi.w	sl, #4
 80058fa:	f04f 0a02 	movls.w	sl, #2
 80058fe:	e001      	b.n	8005904 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 8005900:	f04f 0a01 	mov.w	sl, #1
 8005904:	45b0      	cmp	r8, r6
 8005906:	d110      	bne.n	800592a <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 8005908:	2200      	movs	r2, #0
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	2301      	movs	r3, #1
 800590e:	f10b 0018 	add.w	r0, fp, #24
 8005912:	9205      	str	r2, [sp, #20]
 8005914:	4622      	mov	r2, r4
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800591c:	9004      	str	r0, [sp, #16]
 800591e:	9702      	str	r7, [sp, #8]
 8005920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005922:	9808      	ldr	r0, [sp, #32]
 8005924:	f7fd fc30 	bl	8003188 <LCD_DrawBitmap>
 8005928:	e17c      	b.n	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800592a:	2f20      	cmp	r7, #32
 800592c:	f040 80a2 	bne.w	8005a74 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 8005930:	fb0a f004 	mul.w	r0, sl, r4
 8005934:	f7fc fdec 	bl	8002510 <GUI_ALLOC_AllocNoInit>
 8005938:	900d      	str	r0, [sp, #52]	; 0x34
 800593a:	2800      	cmp	r0, #0
 800593c:	f000 8172 	beq.w	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8005940:	f7fc fc58 	bl	80021f4 <GUI_ALLOC_LockH>
 8005944:	9018      	str	r0, [sp, #96]	; 0x60
 8005946:	4628      	mov	r0, r5
 8005948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800594c:	f7fc fc52 	bl	80021f4 <GUI_ALLOC_LockH>
 8005950:	9016      	str	r0, [sp, #88]	; 0x58
 8005952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005956:	6933      	ldr	r3, [r6, #16]
 8005958:	f100 0518 	add.w	r5, r0, #24
 800595c:	920c      	str	r2, [sp, #48]	; 0x30
 800595e:	b373      	cbz	r3, 80059be <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8005960:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005964:	f04f 0901 	mov.w	r9, #1
 8005968:	f1ba 0f02 	cmp.w	sl, #2
 800596c:	d005      	beq.n	800597a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800596e:	f1ba 0f04 	cmp.w	sl, #4
 8005972:	d002      	beq.n	800597a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8005974:	f1ba 0f01 	cmp.w	sl, #1
 8005978:	d106      	bne.n	8005988 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 800597a:	4628      	mov	r0, r5
 800597c:	445d      	add	r5, fp
 800597e:	6937      	ldr	r7, [r6, #16]
 8005980:	4653      	mov	r3, sl
 8005982:	4622      	mov	r2, r4
 8005984:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005986:	47b8      	blx	r7
 8005988:	2300      	movs	r3, #0
 800598a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800598c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005990:	4641      	mov	r1, r8
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	f108 0701 	add.w	r7, r8, #1
 8005998:	9303      	str	r3, [sp, #12]
 800599a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800599c:	9204      	str	r2, [sp, #16]
 800599e:	4622      	mov	r2, r4
 80059a0:	9302      	str	r3, [sp, #8]
 80059a2:	2301      	movs	r3, #1
 80059a4:	f8cd 9000 	str.w	r9, [sp]
 80059a8:	9808      	ldr	r0, [sp, #32]
 80059aa:	f7fd fbed 	bl	8003188 <LCD_DrawBitmap>
 80059ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b2:	4413      	add	r3, r2
 80059b4:	429f      	cmp	r7, r3
 80059b6:	f000 812c 	beq.w	8005c12 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 80059ba:	46b8      	mov	r8, r7
 80059bc:	e7d4      	b.n	8005968 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 80059be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059c0:	461e      	mov	r6, r3
 80059c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c4:	f04f 0901 	mov.w	r9, #1
 80059c8:	443b      	add	r3, r7
 80059ca:	9309      	str	r3, [sp, #36]	; 0x24
 80059cc:	f1ba 0f02 	cmp.w	sl, #2
 80059d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059d4:	d016      	beq.n	8005a04 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 80059d6:	f1ba 0f04 	cmp.w	sl, #4
 80059da:	d024      	beq.n	8005a26 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 80059dc:	f1ba 0f01 	cmp.w	sl, #1
 80059e0:	d130      	bne.n	8005a44 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 80059e2:	4643      	mov	r3, r8
 80059e4:	462a      	mov	r2, r5
 80059e6:	f852 0b04 	ldr.w	r0, [r2], #4
 80059ea:	930e      	str	r3, [sp, #56]	; 0x38
 80059ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80059f0:	4798      	blx	r3
 80059f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059f6:	f803 0b01 	strb.w	r0, [r3], #1
 80059fa:	1ae1      	subs	r1, r4, r3
 80059fc:	eb18 0f01 	cmn.w	r8, r1
 8005a00:	d1f1      	bne.n	80059e6 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 8005a02:	e01e      	b.n	8005a42 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8005a04:	4643      	mov	r3, r8
 8005a06:	462a      	mov	r2, r5
 8005a08:	46a0      	mov	r8, r4
 8005a0a:	f852 0b04 	ldr.w	r0, [r2], #4
 8005a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a14:	4798      	blx	r3
 8005a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a18:	f1b8 0801 	subs.w	r8, r8, #1
 8005a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a1e:	f823 0b02 	strh.w	r0, [r3], #2
 8005a22:	d1f2      	bne.n	8005a0a <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 8005a24:	e00d      	b.n	8005a42 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8005a26:	462a      	mov	r2, r5
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f852 0b04 	ldr.w	r0, [r2], #4
 8005a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a34:	4798      	blx	r3
 8005a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a38:	f848 0b04 	str.w	r0, [r8], #4
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a40:	d1f3      	bne.n	8005a2a <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8005a42:	445d      	add	r5, fp
 8005a44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005a46:	4622      	mov	r2, r4
 8005a48:	9605      	str	r6, [sp, #20]
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	f107 0801 	add.w	r8, r7, #1
 8005a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a54:	9603      	str	r6, [sp, #12]
 8005a56:	9302      	str	r3, [sp, #8]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a5e:	f8cd 9000 	str.w	r9, [sp]
 8005a62:	9808      	ldr	r0, [sp, #32]
 8005a64:	f7fd fb90 	bl	8003188 <LCD_DrawBitmap>
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	4543      	cmp	r3, r8
 8005a6c:	f000 80d1 	beq.w	8005c12 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8005a70:	4647      	mov	r7, r8
 8005a72:	e7ab      	b.n	80059cc <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8005a74:	2f10      	cmp	r7, #16
 8005a76:	f040 80d5 	bne.w	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8005a7a:	fb04 f00a 	mul.w	r0, r4, sl
 8005a7e:	f7fc fd47 	bl	8002510 <GUI_ALLOC_AllocNoInit>
 8005a82:	900d      	str	r0, [sp, #52]	; 0x34
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f000 80cd 	beq.w	8005c24 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8005a8a:	f7fc fbb3 	bl	80021f4 <GUI_ALLOC_LockH>
 8005a8e:	9018      	str	r0, [sp, #96]	; 0x60
 8005a90:	4628      	mov	r0, r5
 8005a92:	f7fc fbaf 	bl	80021f4 <GUI_ALLOC_LockH>
 8005a96:	9016      	str	r0, [sp, #88]	; 0x58
 8005a98:	6933      	ldr	r3, [r6, #16]
 8005a9a:	f100 0718 	add.w	r7, r0, #24
 8005a9e:	b113      	cbz	r3, 8005aa6 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8005aa0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005aa4:	b953      	cbnz	r3, 8005abc <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 8005aa6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005aaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005aac:	0066      	lsls	r6, r4, #1
 8005aae:	f04f 0b00 	mov.w	fp, #0
 8005ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab6:	442b      	add	r3, r5
 8005ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aba:	e083      	b.n	8005bc4 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8005abc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005ac0:	0080      	lsls	r0, r0, #2
 8005ac2:	f7fc fd25 	bl	8002510 <GUI_ALLOC_AllocNoInit>
 8005ac6:	900c      	str	r0, [sp, #48]	; 0x30
 8005ac8:	b118      	cbz	r0, 8005ad2 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8005aca:	f7fc fb93 	bl	80021f4 <GUI_ALLOC_LockH>
 8005ace:	9017      	str	r0, [sp, #92]	; 0x5c
 8005ad0:	e001      	b.n	8005ad6 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8005ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 809a 	beq.w	8005c12 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8005ade:	0063      	lsls	r3, r4, #1
 8005ae0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005aea:	930e      	str	r3, [sp, #56]	; 0x38
 8005aec:	f1ba 0f02 	cmp.w	sl, #2
 8005af0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8005af4:	d006      	beq.n	8005b04 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 8005af6:	f1ba 0f04 	cmp.w	sl, #4
 8005afa:	d005      	beq.n	8005b08 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8005afc:	f1ba 0f01 	cmp.w	sl, #1
 8005b00:	d111      	bne.n	8005b26 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 8005b02:	e001      	b.n	8005b08 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8005b04:	4653      	mov	r3, sl
 8005b06:	e000      	b.n	8005b0a <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005b10:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8005b14:	47a8      	blx	r5
 8005b16:	4653      	mov	r3, sl
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005b1e:	6935      	ldr	r5, [r6, #16]
 8005b20:	47a8      	blx	r5
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	441f      	add	r7, r3
 8005b26:	2300      	movs	r3, #0
 8005b28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	9808      	ldr	r0, [sp, #32]
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	f10b 0901 	add.w	r9, fp, #1
 8005b34:	9303      	str	r3, [sp, #12]
 8005b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b38:	9204      	str	r2, [sp, #16]
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	9302      	str	r3, [sp, #8]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f7fd fb20 	bl	8003188 <LCD_DrawBitmap>
 8005b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4599      	cmp	r9, r3
 8005b50:	d001      	beq.n	8005b56 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 8005b52:	46cb      	mov	fp, r9
 8005b54:	e7ca      	b.n	8005aec <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8005b56:	a817      	add	r0, sp, #92	; 0x5c
 8005b58:	f7fc fb5a 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b5e:	f7fc fb77 	bl	8002250 <GUI_ALLOC_Free>
 8005b62:	e056      	b.n	8005c12 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8005b64:	20025c04 	.word	0x20025c04
 8005b68:	f1ba 0f04 	cmp.w	sl, #4
 8005b6c:	d041      	beq.n	8005bf2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 8005b6e:	f1ba 0f01 	cmp.w	sl, #1
 8005b72:	d111      	bne.n	8005b98 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8005b74:	4643      	mov	r3, r8
 8005b76:	463a      	mov	r2, r7
 8005b78:	f832 0b02 	ldrh.w	r0, [r2], #2
 8005b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b80:	47c8      	blx	r9
 8005b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b84:	4798      	blx	r3
 8005b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b8a:	f803 0b01 	strb.w	r0, [r3], #1
 8005b8e:	1ae1      	subs	r1, r4, r3
 8005b90:	eb18 0f01 	cmn.w	r8, r1
 8005b94:	d1f0      	bne.n	8005b78 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 8005b96:	4437      	add	r7, r6
 8005b98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	f8cd b014 	str.w	fp, [sp, #20]
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	f105 0801 	add.w	r8, r5, #1
 8005ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005baa:	f8cd b00c 	str.w	fp, [sp, #12]
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	9808      	ldr	r0, [sp, #32]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f7fd fae6 	bl	8003188 <LCD_DrawBitmap>
 8005bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbe:	4543      	cmp	r3, r8
 8005bc0:	d027      	beq.n	8005c12 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8005bc2:	4645      	mov	r5, r8
 8005bc4:	f1ba 0f02 	cmp.w	sl, #2
 8005bc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bcc:	d1cc      	bne.n	8005b68 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8005bce:	4643      	mov	r3, r8
 8005bd0:	463a      	mov	r2, r7
 8005bd2:	46a0      	mov	r8, r4
 8005bd4:	f832 0b02 	ldrh.w	r0, [r2], #2
 8005bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8005bda:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bdc:	47c8      	blx	r9
 8005bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be0:	4798      	blx	r3
 8005be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005be4:	f1b8 0801 	subs.w	r8, r8, #1
 8005be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bea:	f823 0b02 	strh.w	r0, [r3], #2
 8005bee:	d1f1      	bne.n	8005bd4 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8005bf0:	e7d1      	b.n	8005b96 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8005bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8005bfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bfe:	47c8      	blx	r9
 8005c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c02:	4798      	blx	r3
 8005c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c06:	f848 0b04 	str.w	r0, [r8], #4
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c0e:	d1f2      	bne.n	8005bf6 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8005c10:	e7c1      	b.n	8005b96 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 8005c12:	a816      	add	r0, sp, #88	; 0x58
 8005c14:	f7fc fafc 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005c18:	a818      	add	r0, sp, #96	; 0x60
 8005c1a:	f7fc faf9 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005c1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005c20:	f7fc fb16 	bl	8002250 <GUI_ALLOC_Free>
 8005c24:	b01b      	add	sp, #108	; 0x6c
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	bf00      	nop

08005c2c <_OnExit>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <_OnExit+0x6c>)
 8005c30:	2400      	movs	r4, #0
 8005c32:	4d1a      	ldr	r5, [pc, #104]	; (8005c9c <_OnExit+0x70>)
 8005c34:	601c      	str	r4, [r3, #0]
 8005c36:	4621      	mov	r1, r4
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <_OnExit+0x74>)
 8005c3a:	481a      	ldr	r0, [pc, #104]	; (8005ca4 <_OnExit+0x78>)
 8005c3c:	601c      	str	r4, [r3, #0]
 8005c3e:	605c      	str	r4, [r3, #4]
 8005c40:	300c      	adds	r0, #12
 8005c42:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <_OnExit+0x7c>)
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <_OnExit+0x80>)
 8005c46:	601c      	str	r4, [r3, #0]
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <_OnExit+0x84>)
 8005c4a:	f800 4c0c 	strb.w	r4, [r0, #-12]
 8005c4e:	601c      	str	r4, [r3, #0]
 8005c50:	4b18      	ldr	r3, [pc, #96]	; (8005cb4 <_OnExit+0x88>)
 8005c52:	f840 4c08 	str.w	r4, [r0, #-8]
 8005c56:	601c      	str	r4, [r3, #0]
 8005c58:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <_OnExit+0x8c>)
 8005c5a:	6014      	str	r4, [r2, #0]
 8005c5c:	6054      	str	r4, [r2, #4]
 8005c5e:	2218      	movs	r2, #24
 8005c60:	601c      	str	r4, [r3, #0]
 8005c62:	f840 4c04 	str.w	r4, [r0, #-4]
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	4798      	blx	r3
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <_OnExit+0x90>)
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	2210      	movs	r2, #16
 8005c70:	601c      	str	r4, [r3, #0]
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <_OnExit+0x94>)
 8005c74:	4813      	ldr	r0, [pc, #76]	; (8005cc4 <_OnExit+0x98>)
 8005c76:	601c      	str	r4, [r3, #0]
 8005c78:	605c      	str	r4, [r3, #4]
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	4798      	blx	r3
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	4621      	mov	r1, r4
 8005c82:	2210      	movs	r2, #16
 8005c84:	4810      	ldr	r0, [pc, #64]	; (8005cc8 <_OnExit+0x9c>)
 8005c86:	4798      	blx	r3
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	480f      	ldr	r0, [pc, #60]	; (8005ccc <_OnExit+0xa0>)
 8005c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c94:	4718      	bx	r3
 8005c96:	bf00      	nop
 8005c98:	20025c5c 	.word	0x20025c5c
 8005c9c:	200000ac 	.word	0x200000ac
 8005ca0:	20025c64 	.word	0x20025c64
 8005ca4:	20025aa8 	.word	0x20025aa8
 8005ca8:	20025c70 	.word	0x20025c70
 8005cac:	20025c30 	.word	0x20025c30
 8005cb0:	20025c1c 	.word	0x20025c1c
 8005cb4:	20025c50 	.word	0x20025c50
 8005cb8:	20025c60 	.word	0x20025c60
 8005cbc:	20025c2c 	.word	0x20025c2c
 8005cc0:	20025c20 	.word	0x20025c20
 8005cc4:	20025c94 	.word	0x20025c94
 8005cc8:	20025c84 	.word	0x20025c84
 8005ccc:	20025c74 	.word	0x20025c74

08005cd0 <_Findy1>:
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4616      	mov	r6, r2
 8005cda:	ad02      	add	r5, sp, #8
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	d048      	beq.n	8005d72 <_Findy1+0xa2>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7fc fa87 	bl	80021f4 <GUI_ALLOC_LockH>
 8005ce6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8005ce8:	4601      	mov	r1, r0
 8005cea:	9001      	str	r0, [sp, #4]
 8005cec:	07bb      	lsls	r3, r7, #30
 8005cee:	d53a      	bpl.n	8005d66 <_Findy1+0x96>
 8005cf0:	b126      	cbz	r6, 8005cfc <_Findy1+0x2c>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f7fd f860 	bl	8002dba <GUI__IntersectRects>
 8005cfa:	e002      	b.n	8005d02 <_Findy1+0x32>
 8005cfc:	c803      	ldmia	r0, {r0, r1}
 8005cfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d02:	4629      	mov	r1, r5
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7fc fca5 	bl	8002654 <GUI_RectsIntersect>
 8005d0a:	b360      	cbz	r0, 8005d66 <_Findy1+0x96>
 8005d0c:	f017 0f01 	tst.w	r7, #1
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	d11c      	bne.n	8005d4e <_Findy1+0x7e>
 8005d14:	b13e      	cbz	r6, 8005d26 <_Findy1+0x56>
 8005d16:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005d1a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bfb8      	it	lt
 8005d22:	4613      	movlt	r3, r2
 8005d24:	e001      	b.n	8005d2a <_Findy1+0x5a>
 8005d26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d2a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8005d34:	dd05      	ble.n	8005d42 <_Findy1+0x72>
 8005d36:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	db13      	blt.n	8005d66 <_Findy1+0x96>
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	e003      	b.n	8005d4a <_Findy1+0x7a>
 8005d42:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	dd0d      	ble.n	8005d66 <_Findy1+0x96>
 8005d4a:	80e3      	strh	r3, [r4, #6]
 8005d4c:	e00b      	b.n	8005d66 <_Findy1+0x96>
 8005d4e:	69df      	ldr	r7, [r3, #28]
 8005d50:	b14f      	cbz	r7, 8005d66 <_Findy1+0x96>
 8005d52:	4638      	mov	r0, r7
 8005d54:	462a      	mov	r2, r5
 8005d56:	4621      	mov	r1, r4
 8005d58:	f7ff ffba 	bl	8005cd0 <_Findy1>
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7fc fa3f 	bl	80021e0 <GUI_ALLOC_h2p>
 8005d62:	6a07      	ldr	r7, [r0, #32]
 8005d64:	e7f4      	b.n	8005d50 <_Findy1+0x80>
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	a801      	add	r0, sp, #4
 8005d6a:	6a1f      	ldr	r7, [r3, #32]
 8005d6c:	f7fc fa50 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005d70:	e7b4      	b.n	8005cdc <_Findy1+0xc>
 8005d72:	b005      	add	sp, #20
 8005d74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d76 <_Findx0>:
 8005d76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005d7a:	4606      	mov	r6, r0
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	4690      	mov	r8, r2
 8005d80:	2500      	movs	r5, #0
 8005d82:	ac02      	add	r4, sp, #8
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	d035      	beq.n	8005df4 <_Findx0+0x7e>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7fc fa33 	bl	80021f4 <GUI_ALLOC_LockH>
 8005d8e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8005d90:	4601      	mov	r1, r0
 8005d92:	9001      	str	r0, [sp, #4]
 8005d94:	07b2      	lsls	r2, r6, #30
 8005d96:	d527      	bpl.n	8005de8 <_Findx0+0x72>
 8005d98:	f1b8 0f00 	cmp.w	r8, #0
 8005d9c:	d004      	beq.n	8005da8 <_Findx0+0x32>
 8005d9e:	4642      	mov	r2, r8
 8005da0:	4620      	mov	r0, r4
 8005da2:	f7fd f80a 	bl	8002dba <GUI__IntersectRects>
 8005da6:	e002      	b.n	8005dae <_Findx0+0x38>
 8005da8:	c803      	ldmia	r0, {r0, r1}
 8005daa:	e884 0003 	stmia.w	r4, {r0, r1}
 8005dae:	4621      	mov	r1, r4
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7fc fc4f 	bl	8002654 <GUI_RectsIntersect>
 8005db6:	b1b8      	cbz	r0, 8005de8 <_Findx0+0x72>
 8005db8:	07f3      	lsls	r3, r6, #31
 8005dba:	d405      	bmi.n	8005dc8 <_Findx0+0x52>
 8005dbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005dc0:	2501      	movs	r5, #1
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	803b      	strh	r3, [r7, #0]
 8005dc6:	e00f      	b.n	8005de8 <_Findx0+0x72>
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	69de      	ldr	r6, [r3, #28]
 8005dcc:	b166      	cbz	r6, 8005de8 <_Findx0+0x72>
 8005dce:	4622      	mov	r2, r4
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ffcf 	bl	8005d76 <_Findx0>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	bf18      	it	ne
 8005dde:	2501      	movne	r5, #1
 8005de0:	f7fc f9fe 	bl	80021e0 <GUI_ALLOC_h2p>
 8005de4:	6a06      	ldr	r6, [r0, #32]
 8005de6:	e7f1      	b.n	8005dcc <_Findx0+0x56>
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	a801      	add	r0, sp, #4
 8005dec:	6a1e      	ldr	r6, [r3, #32]
 8005dee:	f7fc fa0f 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005df2:	e7c7      	b.n	8005d84 <_Findx0+0xe>
 8005df4:	4628      	mov	r0, r5
 8005df6:	b004      	add	sp, #16
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dfc <_Findx1>:
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	4605      	mov	r5, r0
 8005e02:	460e      	mov	r6, r1
 8005e04:	4617      	mov	r7, r2
 8005e06:	ac02      	add	r4, sp, #8
 8005e08:	b37d      	cbz	r5, 8005e6a <_Findx1+0x6e>
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7fc f9f2 	bl	80021f4 <GUI_ALLOC_LockH>
 8005e10:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8005e12:	4601      	mov	r1, r0
 8005e14:	9001      	str	r0, [sp, #4]
 8005e16:	07aa      	lsls	r2, r5, #30
 8005e18:	d521      	bpl.n	8005e5e <_Findx1+0x62>
 8005e1a:	b127      	cbz	r7, 8005e26 <_Findx1+0x2a>
 8005e1c:	463a      	mov	r2, r7
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7fc ffcb 	bl	8002dba <GUI__IntersectRects>
 8005e24:	e002      	b.n	8005e2c <_Findx1+0x30>
 8005e26:	c803      	ldmia	r0, {r0, r1}
 8005e28:	e884 0003 	stmia.w	r4, {r0, r1}
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7fc fc10 	bl	8002654 <GUI_RectsIntersect>
 8005e34:	b198      	cbz	r0, 8005e5e <_Findx1+0x62>
 8005e36:	07eb      	lsls	r3, r5, #31
 8005e38:	d404      	bmi.n	8005e44 <_Findx1+0x48>
 8005e3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	80b3      	strh	r3, [r6, #4]
 8005e42:	e00c      	b.n	8005e5e <_Findx1+0x62>
 8005e44:	9b01      	ldr	r3, [sp, #4]
 8005e46:	69dd      	ldr	r5, [r3, #28]
 8005e48:	b14d      	cbz	r5, 8005e5e <_Findx1+0x62>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4631      	mov	r1, r6
 8005e50:	f7ff ffd4 	bl	8005dfc <_Findx1>
 8005e54:	4628      	mov	r0, r5
 8005e56:	f7fc f9c3 	bl	80021e0 <GUI_ALLOC_h2p>
 8005e5a:	6a05      	ldr	r5, [r0, #32]
 8005e5c:	e7f4      	b.n	8005e48 <_Findx1+0x4c>
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	a801      	add	r0, sp, #4
 8005e62:	6a1d      	ldr	r5, [r3, #32]
 8005e64:	f7fc f9d4 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005e68:	e7ce      	b.n	8005e08 <_Findx1+0xc>
 8005e6a:	b005      	add	sp, #20
 8005e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005e70 <WM__ClipAtParentBorders>:
 8005e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e72:	4606      	mov	r6, r0
 8005e74:	460d      	mov	r5, r1
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7fc f9bc 	bl	80021f4 <GUI_ALLOC_LockH>
 8005e7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e7e:	4601      	mov	r1, r0
 8005e80:	9001      	str	r0, [sp, #4]
 8005e82:	f013 0402 	ands.w	r4, r3, #2
 8005e86:	d104      	bne.n	8005e92 <WM__ClipAtParentBorders+0x22>
 8005e88:	a801      	add	r0, sp, #4
 8005e8a:	f7fc f9c1 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	e016      	b.n	8005ec0 <WM__ClipAtParentBorders+0x50>
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7fc ff74 	bl	8002d80 <GUI__IntersectRect>
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	a801      	add	r0, sp, #4
 8005e9c:	699c      	ldr	r4, [r3, #24]
 8005e9e:	b954      	cbnz	r4, 8005eb6 <WM__ClipAtParentBorders+0x46>
 8005ea0:	f7fc f9b6 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <WM__ClipAtParentBorders+0x54>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4295      	cmp	r5, r2
 8005eaa:	d008      	beq.n	8005ebe <WM__ClipAtParentBorders+0x4e>
 8005eac:	6858      	ldr	r0, [r3, #4]
 8005eae:	1b43      	subs	r3, r0, r5
 8005eb0:	4258      	negs	r0, r3
 8005eb2:	4158      	adcs	r0, r3
 8005eb4:	e004      	b.n	8005ec0 <WM__ClipAtParentBorders+0x50>
 8005eb6:	f7fc f9ab 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005eba:	4625      	mov	r5, r4
 8005ebc:	e7db      	b.n	8005e76 <WM__ClipAtParentBorders+0x6>
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	b002      	add	sp, #8
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	20025c20 	.word	0x20025c20

08005ec8 <WM__InsertWindowIntoList>:
 8005ec8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005ecc:	4606      	mov	r6, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d04c      	beq.n	8005f6e <WM__InsertWindowIntoList+0xa6>
 8005ed4:	f7fc f98e 	bl	80021f4 <GUI_ALLOC_LockH>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6184      	str	r4, [r0, #24]
 8005edc:	9001      	str	r0, [sp, #4]
 8005ede:	6203      	str	r3, [r0, #32]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7fc f987 	bl	80021f4 <GUI_ALLOC_LockH>
 8005ee6:	ac04      	add	r4, sp, #16
 8005ee8:	69c7      	ldr	r7, [r0, #28]
 8005eea:	f844 0d08 	str.w	r0, [r4, #-8]!
 8005eee:	b92f      	cbnz	r7, 8005efc <WM__InsertWindowIntoList+0x34>
 8005ef0:	61c6      	str	r6, [r0, #28]
 8005ef2:	a801      	add	r0, sp, #4
 8005ef4:	f7fc f98c 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	e036      	b.n	8005f6a <WM__InsertWindowIntoList+0xa2>
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	f10d 0810 	add.w	r8, sp, #16
 8005f02:	4638      	mov	r0, r7
 8005f04:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005f06:	f7fc f975 	bl	80021f4 <GUI_ALLOC_LockH>
 8005f0a:	f848 0d04 	str.w	r0, [r8, #-4]!
 8005f0e:	f005 0508 	and.w	r5, r5, #8
 8005f12:	b975      	cbnz	r5, 8005f32 <WM__InsertWindowIntoList+0x6a>
 8005f14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f16:	071a      	lsls	r2, r3, #28
 8005f18:	d50b      	bpl.n	8005f32 <WM__InsertWindowIntoList+0x6a>
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	a801      	add	r0, sp, #4
 8005f1e:	621f      	str	r7, [r3, #32]
 8005f20:	9b02      	ldr	r3, [sp, #8]
 8005f22:	61de      	str	r6, [r3, #28]
 8005f24:	f7fc f974 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7fc f971 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005f2e:	4640      	mov	r0, r8
 8005f30:	e01b      	b.n	8005f6a <WM__InsertWindowIntoList+0xa2>
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7fc f96c 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005f38:	4640      	mov	r0, r8
 8005f3a:	f7fc f969 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7fc f94e 	bl	80021e0 <GUI_ALLOC_h2p>
 8005f44:	9003      	str	r0, [sp, #12]
 8005f46:	9b03      	ldr	r3, [sp, #12]
 8005f48:	6a1c      	ldr	r4, [r3, #32]
 8005f4a:	b90c      	cbnz	r4, 8005f50 <WM__InsertWindowIntoList+0x88>
 8005f4c:	621e      	str	r6, [r3, #32]
 8005f4e:	e00b      	b.n	8005f68 <WM__InsertWindowIntoList+0xa0>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7fc f945 	bl	80021e0 <GUI_ALLOC_h2p>
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	d1f4      	bne.n	8005f44 <WM__InsertWindowIntoList+0x7c>
 8005f5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f5c:	071b      	lsls	r3, r3, #28
 8005f5e:	d5f1      	bpl.n	8005f44 <WM__InsertWindowIntoList+0x7c>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	621e      	str	r6, [r3, #32]
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	621c      	str	r4, [r3, #32]
 8005f68:	a801      	add	r0, sp, #4
 8005f6a:	f7fc f951 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005f6e:	b004      	add	sp, #16
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f74 <WM__Client2Screen>:
 8005f74:	4603      	mov	r3, r0
 8005f76:	4608      	mov	r0, r1
 8005f78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005f7c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005f80:	f7fc bb4f 	b.w	8002622 <GUI_MoveRect>

08005f84 <_SetClipRectUserIntersect>:
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <_SetClipRectUserIntersect+0x48>)
 8005f86:	b530      	push	{r4, r5, lr}
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f90:	b1ba      	cbz	r2, 8005fc2 <_SetClipRectUserIntersect+0x3e>
 8005f92:	6810      	ldr	r0, [r2, #0]
 8005f94:	ab02      	add	r3, sp, #8
 8005f96:	6851      	ldr	r1, [r2, #4]
 8005f98:	c303      	stmia	r3!, {r0, r1}
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <_SetClipRectUserIntersect+0x4c>)
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	b900      	cbnz	r0, 8005fa2 <_SetClipRectUserIntersect+0x1e>
 8005fa0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005fa2:	ac04      	add	r4, sp, #16
 8005fa4:	f7fc f926 	bl	80021f4 <GUI_ALLOC_LockH>
 8005fa8:	a902      	add	r1, sp, #8
 8005faa:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8005fae:	f7ff ffe1 	bl	8005f74 <WM__Client2Screen>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7fc f92c 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005fb8:	a802      	add	r0, sp, #8
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fc fee0 	bl	8002d80 <GUI__IntersectRect>
 8005fc0:	a802      	add	r0, sp, #8
 8005fc2:	f001 f993 	bl	80072ec <LCD_SetClipRectEx>
 8005fc6:	b005      	add	sp, #20
 8005fc8:	bd30      	pop	{r4, r5, pc}
 8005fca:	bf00      	nop
 8005fcc:	200000a4 	.word	0x200000a4
 8005fd0:	20025c1c 	.word	0x20025c1c

08005fd4 <WM__ActivateClipRect>:
 8005fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <WM__ActivateClipRect+0x3c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005fde:	b10a      	cbz	r2, 8005fe4 <WM__ActivateClipRect+0x10>
 8005fe0:	480c      	ldr	r0, [pc, #48]	; (8006014 <WM__ActivateClipRect+0x40>)
 8005fe2:	e011      	b.n	8006008 <WM__ActivateClipRect+0x34>
 8005fe4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fe6:	ac02      	add	r4, sp, #8
 8005fe8:	f7fc f904 	bl	80021f4 <GUI_ALLOC_LockH>
 8005fec:	9001      	str	r0, [sp, #4]
 8005fee:	c803      	ldmia	r0, {r0, r1}
 8005ff0:	e884 0003 	stmia.w	r4, {r0, r1}
 8005ff4:	a801      	add	r0, sp, #4
 8005ff6:	f7fc f90b 	bl	8002210 <GUI_ALLOC_UnlockH>
 8005ffa:	4b07      	ldr	r3, [pc, #28]	; (8006018 <WM__ActivateClipRect+0x44>)
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	b111      	cbz	r1, 8006006 <WM__ActivateClipRect+0x32>
 8006000:	4620      	mov	r0, r4
 8006002:	f7ff ff35 	bl	8005e70 <WM__ClipAtParentBorders>
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff ffbc 	bl	8005f84 <_SetClipRectUserIntersect>
 800600c:	b004      	add	sp, #16
 800600e:	bd10      	pop	{r4, pc}
 8006010:	200000a4 	.word	0x200000a4
 8006014:	20025abc 	.word	0x20025abc
 8006018:	20025c1c 	.word	0x20025c1c

0800601c <WM__InvalidateDrawAndDescs>:
 800601c:	b513      	push	{r0, r1, r4, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	b300      	cbz	r0, 8006064 <WM__InvalidateDrawAndDescs+0x48>
 8006022:	f7fc f8e7 	bl	80021f4 <GUI_ALLOC_LockH>
 8006026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006028:	9001      	str	r0, [sp, #4]
 800602a:	079b      	lsls	r3, r3, #30
 800602c:	d517      	bpl.n	800605e <WM__InvalidateDrawAndDescs+0x42>
 800602e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006030:	b140      	cbz	r0, 8006044 <WM__InvalidateDrawAndDescs+0x28>
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <WM__InvalidateDrawAndDescs+0x4c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429c      	cmp	r4, r3
 8006038:	d004      	beq.n	8006044 <WM__InvalidateDrawAndDescs+0x28>
 800603a:	f001 f985 	bl	8007348 <GUI_MEMDEV_Delete>
 800603e:	2200      	movs	r2, #0
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fc4f 	bl	80068e8 <WM_GetFirstChild>
 800604a:	4604      	mov	r4, r0
 800604c:	b13c      	cbz	r4, 800605e <WM__InvalidateDrawAndDescs+0x42>
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff ffe4 	bl	800601c <WM__InvalidateDrawAndDescs>
 8006054:	4620      	mov	r0, r4
 8006056:	f7fc f8c3 	bl	80021e0 <GUI_ALLOC_h2p>
 800605a:	6a04      	ldr	r4, [r0, #32]
 800605c:	e7f6      	b.n	800604c <WM__InvalidateDrawAndDescs+0x30>
 800605e:	a801      	add	r0, sp, #4
 8006060:	f7fc f8d6 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006064:	b002      	add	sp, #8
 8006066:	bd10      	pop	{r4, pc}
 8006068:	20025c6c 	.word	0x20025c6c

0800606c <WM__RectIsNZ>:
 800606c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006070:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	dc08      	bgt.n	800608a <WM__RectIsNZ+0x1e>
 8006078:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800607c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006080:	4283      	cmp	r3, r0
 8006082:	bfcc      	ite	gt
 8006084:	2000      	movgt	r0, #0
 8006086:	2001      	movle	r0, #1
 8006088:	4770      	bx	lr
 800608a:	2000      	movs	r0, #0
 800608c:	4770      	bx	lr

0800608e <WM__SendMsgNoData>:
 800608e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006090:	ab04      	add	r3, sp, #16
 8006092:	9001      	str	r0, [sp, #4]
 8006094:	f843 1d10 	str.w	r1, [r3, #-16]!
 8006098:	4619      	mov	r1, r3
 800609a:	f000 fcab 	bl	80069f4 <WM__SendMessage>
 800609e:	b005      	add	sp, #20
 80060a0:	f85d fb04 	ldr.w	pc, [sp], #4

080060a4 <WM__GetClientRectWin>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	804b      	strh	r3, [r1, #2]
 80060a8:	800b      	strh	r3, [r1, #0]
 80060aa:	8883      	ldrh	r3, [r0, #4]
 80060ac:	8802      	ldrh	r2, [r0, #0]
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	8842      	ldrh	r2, [r0, #2]
 80060b2:	808b      	strh	r3, [r1, #4]
 80060b4:	88c3      	ldrh	r3, [r0, #6]
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	80cb      	strh	r3, [r1, #6]
 80060ba:	4770      	bx	lr

080060bc <WM__GetTopLevelLayer>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	f7fc f88e 	bl	80021e0 <GUI_ALLOC_h2p>
 80060c4:	6980      	ldr	r0, [r0, #24]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d1f9      	bne.n	80060be <WM__GetTopLevelLayer+0x2>
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <WM__GetTopLevelLayer+0x24>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4294      	cmp	r4, r2
 80060d0:	d005      	beq.n	80060de <WM__GetTopLevelLayer+0x22>
 80060d2:	6858      	ldr	r0, [r3, #4]
 80060d4:	4284      	cmp	r4, r0
 80060d6:	bf0c      	ite	eq
 80060d8:	2001      	moveq	r0, #1
 80060da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	20025c20 	.word	0x20025c20

080060e4 <_Invalidate1Abs>:
 80060e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e6:	b085      	sub	sp, #20
 80060e8:	460d      	mov	r5, r1
 80060ea:	4606      	mov	r6, r0
 80060ec:	4617      	mov	r7, r2
 80060ee:	f7fc f877 	bl	80021e0 <GUI_ALLOC_h2p>
 80060f2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80060f4:	9001      	str	r0, [sp, #4]
 80060f6:	078b      	lsls	r3, r1, #30
 80060f8:	d53e      	bpl.n	8006178 <_Invalidate1Abs+0x94>
 80060fa:	4628      	mov	r0, r5
 80060fc:	f7ff ffb6 	bl	800606c <WM__RectIsNZ>
 8006100:	2800      	cmp	r0, #0
 8006102:	d039      	beq.n	8006178 <_Invalidate1Abs+0x94>
 8006104:	f640 0301 	movw	r3, #2049	; 0x801
 8006108:	400b      	ands	r3, r1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d034      	beq.n	8006178 <_Invalidate1Abs+0x94>
 800610e:	ac02      	add	r4, sp, #8
 8006110:	4630      	mov	r0, r6
 8006112:	f7fc f86f 	bl	80021f4 <GUI_ALLOC_LockH>
 8006116:	4629      	mov	r1, r5
 8006118:	4602      	mov	r2, r0
 800611a:	9001      	str	r0, [sp, #4]
 800611c:	4620      	mov	r0, r4
 800611e:	f7fc fe4c 	bl	8002dba <GUI__IntersectRects>
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff ffa2 	bl	800606c <WM__RectIsNZ>
 8006128:	b318      	cbz	r0, 8006172 <_Invalidate1Abs+0x8e>
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	f244 0120 	movw	r1, #16416	; 0x4020
 8006130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006132:	f103 0508 	add.w	r5, r3, #8
 8006136:	4011      	ands	r1, r2
 8006138:	b129      	cbz	r1, 8006146 <_Invalidate1Abs+0x62>
 800613a:	4622      	mov	r2, r4
 800613c:	4629      	mov	r1, r5
 800613e:	4628      	mov	r0, r5
 8006140:	f7fc fa44 	bl	80025cc <GUI_MergeRect>
 8006144:	e015      	b.n	8006172 <_Invalidate1Abs+0x8e>
 8006146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800614a:	433a      	orrs	r2, r7
 800614c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
 8006152:	4630      	mov	r0, r6
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <_Invalidate1Abs+0x98>)
 8006156:	8813      	ldrh	r3, [r2, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	8013      	strh	r3, [r2, #0]
 800615c:	f7ff ffae 	bl	80060bc <WM__GetTopLevelLayer>
 8006160:	4a07      	ldr	r2, [pc, #28]	; (8006180 <_Invalidate1Abs+0x9c>)
 8006162:	2301      	movs	r3, #1
 8006164:	fa03 f000 	lsl.w	r0, r3, r0
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	4303      	orrs	r3, r0
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f7fc fdff 	bl	8002d70 <GUI_SignalEvent>
 8006172:	a801      	add	r0, sp, #4
 8006174:	f7fc f84c 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006178:	b005      	add	sp, #20
 800617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617c:	20025c38 	.word	0x20025c38
 8006180:	20025c48 	.word	0x20025c48

08006184 <WM__Invalidate1Abs>:
 8006184:	2220      	movs	r2, #32
 8006186:	f7ff bfad 	b.w	80060e4 <_Invalidate1Abs>

0800618a <WM_InvalidateWindowAndDescsEx>:
 800618a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618c:	460f      	mov	r7, r1
 800618e:	b085      	sub	sp, #20
 8006190:	4615      	mov	r5, r2
 8006192:	4606      	mov	r6, r0
 8006194:	b348      	cbz	r0, 80061ea <WM_InvalidateWindowAndDescsEx+0x60>
 8006196:	f7fc f82d 	bl	80021f4 <GUI_ALLOC_LockH>
 800619a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800619c:	ac04      	add	r4, sp, #16
 800619e:	4602      	mov	r2, r0
 80061a0:	079b      	lsls	r3, r3, #30
 80061a2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80061a6:	d403      	bmi.n	80061b0 <WM_InvalidateWindowAndDescsEx+0x26>
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7fc f831 	bl	8002210 <GUI_ALLOC_UnlockH>
 80061ae:	e01c      	b.n	80061ea <WM_InvalidateWindowAndDescsEx+0x60>
 80061b0:	4639      	mov	r1, r7
 80061b2:	a802      	add	r0, sp, #8
 80061b4:	f7fc fe01 	bl	8002dba <GUI__IntersectRects>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d0f5      	beq.n	80061a8 <WM_InvalidateWindowAndDescsEx+0x1e>
 80061bc:	4620      	mov	r0, r4
 80061be:	f7fc f827 	bl	8002210 <GUI_ALLOC_UnlockH>
 80061c2:	462a      	mov	r2, r5
 80061c4:	a902      	add	r1, sp, #8
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ff8c 	bl	80060e4 <_Invalidate1Abs>
 80061cc:	4630      	mov	r0, r6
 80061ce:	f000 fb8b 	bl	80068e8 <WM_GetFirstChild>
 80061d2:	4604      	mov	r4, r0
 80061d4:	b14c      	cbz	r4, 80061ea <WM_InvalidateWindowAndDescsEx+0x60>
 80061d6:	4620      	mov	r0, r4
 80061d8:	462a      	mov	r2, r5
 80061da:	a902      	add	r1, sp, #8
 80061dc:	f7ff ffd5 	bl	800618a <WM_InvalidateWindowAndDescsEx>
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7fb fffd 	bl	80021e0 <GUI_ALLOC_h2p>
 80061e6:	6a04      	ldr	r4, [r0, #32]
 80061e8:	e7f4      	b.n	80061d4 <WM_InvalidateWindowAndDescsEx+0x4a>
 80061ea:	b005      	add	sp, #20
 80061ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ee <WM__InvalidateRect>:
 80061ee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80061f2:	4680      	mov	r8, r0
 80061f4:	4617      	mov	r7, r2
 80061f6:	461d      	mov	r5, r3
 80061f8:	460c      	mov	r4, r1
 80061fa:	b381      	cbz	r1, 800625e <WM__InvalidateRect+0x70>
 80061fc:	4608      	mov	r0, r1
 80061fe:	f7fb fff9 	bl	80021f4 <GUI_ALLOC_LockH>
 8006202:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006204:	4602      	mov	r2, r0
 8006206:	9001      	str	r0, [sp, #4]
 8006208:	07b3      	lsls	r3, r6, #30
 800620a:	d525      	bpl.n	8006258 <WM__InvalidateRect+0x6a>
 800620c:	4641      	mov	r1, r8
 800620e:	a802      	add	r0, sp, #8
 8006210:	f7fc fdd3 	bl	8002dba <GUI__IntersectRects>
 8006214:	b300      	cbz	r0, 8006258 <WM__InvalidateRect+0x6a>
 8006216:	f640 0301 	movw	r3, #2049	; 0x801
 800621a:	4033      	ands	r3, r6
 800621c:	2b01      	cmp	r3, #1
 800621e:	d107      	bne.n	8006230 <WM__InvalidateRect+0x42>
 8006220:	9901      	ldr	r1, [sp, #4]
 8006222:	462b      	mov	r3, r5
 8006224:	a802      	add	r0, sp, #8
 8006226:	6a0a      	ldr	r2, [r1, #32]
 8006228:	6989      	ldr	r1, [r1, #24]
 800622a:	f7ff ffe0 	bl	80061ee <WM__InvalidateRect>
 800622e:	e004      	b.n	800623a <WM__InvalidateRect+0x4c>
 8006230:	462a      	mov	r2, r5
 8006232:	a902      	add	r1, sp, #8
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff ff55 	bl	80060e4 <_Invalidate1Abs>
 800623a:	9b01      	ldr	r3, [sp, #4]
 800623c:	69dc      	ldr	r4, [r3, #28]
 800623e:	b15c      	cbz	r4, 8006258 <WM__InvalidateRect+0x6a>
 8006240:	42bc      	cmp	r4, r7
 8006242:	d009      	beq.n	8006258 <WM__InvalidateRect+0x6a>
 8006244:	4620      	mov	r0, r4
 8006246:	462a      	mov	r2, r5
 8006248:	a902      	add	r1, sp, #8
 800624a:	f7ff ff9e 	bl	800618a <WM_InvalidateWindowAndDescsEx>
 800624e:	4620      	mov	r0, r4
 8006250:	f7fb ffc6 	bl	80021e0 <GUI_ALLOC_h2p>
 8006254:	6a04      	ldr	r4, [r0, #32]
 8006256:	e7f2      	b.n	800623e <WM__InvalidateRect+0x50>
 8006258:	a801      	add	r0, sp, #4
 800625a:	f7fb ffd9 	bl	8002210 <GUI_ALLOC_UnlockH>
 800625e:	b004      	add	sp, #16
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006264 <WM__InvalidateRectEx>:
 8006264:	2320      	movs	r3, #32
 8006266:	f7ff bfc2 	b.w	80061ee <WM__InvalidateRect>

0800626a <WM_InvalidateRect>:
 800626a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626c:	460f      	mov	r7, r1
 800626e:	b087      	sub	sp, #28
 8006270:	4605      	mov	r5, r0
 8006272:	2800      	cmp	r0, #0
 8006274:	d033      	beq.n	80062de <WM_InvalidateRect+0x74>
 8006276:	f7fb ffbd 	bl	80021f4 <GUI_ALLOC_LockH>
 800627a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800627c:	9001      	str	r0, [sp, #4]
 800627e:	07b2      	lsls	r2, r6, #30
 8006280:	d52a      	bpl.n	80062d8 <WM_InvalidateRect+0x6e>
 8006282:	ac04      	add	r4, sp, #16
 8006284:	03f3      	lsls	r3, r6, #15
 8006286:	c803      	ldmia	r0, {r0, r1}
 8006288:	e884 0003 	stmia.w	r4, {r0, r1}
 800628c:	d502      	bpl.n	8006294 <WM_InvalidateRect+0x2a>
 800628e:	4628      	mov	r0, r5
 8006290:	f7ff fec4 	bl	800601c <WM__InvalidateDrawAndDescs>
 8006294:	b15f      	cbz	r7, 80062ae <WM_InvalidateRect+0x44>
 8006296:	6838      	ldr	r0, [r7, #0]
 8006298:	ab02      	add	r3, sp, #8
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	c303      	stmia	r3!, {r0, r1}
 800629e:	a902      	add	r1, sp, #8
 80062a0:	9801      	ldr	r0, [sp, #4]
 80062a2:	f7ff fe67 	bl	8005f74 <WM__Client2Screen>
 80062a6:	a902      	add	r1, sp, #8
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7fc fd69 	bl	8002d80 <GUI__IntersectRect>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7ff fddd 	bl	8005e70 <WM__ClipAtParentBorders>
 80062b6:	b178      	cbz	r0, 80062d8 <WM_InvalidateRect+0x6e>
 80062b8:	f640 0301 	movw	r3, #2049	; 0x801
 80062bc:	4033      	ands	r3, r6
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d106      	bne.n	80062d0 <WM_InvalidateRect+0x66>
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	4620      	mov	r0, r4
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	f7ff ffcb 	bl	8006264 <WM__InvalidateRectEx>
 80062ce:	e003      	b.n	80062d8 <WM_InvalidateRect+0x6e>
 80062d0:	4621      	mov	r1, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7ff ff56 	bl	8006184 <WM__Invalidate1Abs>
 80062d8:	a801      	add	r0, sp, #4
 80062da:	f7fb ff99 	bl	8002210 <GUI_ALLOC_UnlockH>
 80062de:	b007      	add	sp, #28
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062e2 <WM_InvalidateWindow>:
 80062e2:	2100      	movs	r1, #0
 80062e4:	f7ff bfc1 	b.w	800626a <WM_InvalidateRect>

080062e8 <WM__SelectTopLevelLayer>:
 80062e8:	b508      	push	{r3, lr}
 80062ea:	f7ff fee7 	bl	80060bc <WM__GetTopLevelLayer>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	db03      	blt.n	80062fa <WM__SelectTopLevelLayer+0x12>
 80062f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062f6:	f000 beb5 	b.w	8007064 <GUI_SelectLayer>
 80062fa:	bd08      	pop	{r3, pc}

080062fc <WM_SelectWindow>:
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <WM_SelectWindow+0x38>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8006304:	4604      	mov	r4, r0
 8006306:	461d      	mov	r5, r3
 8006308:	b908      	cbnz	r0, 800630e <WM_SelectWindow+0x12>
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <WM_SelectWindow+0x3c>)
 800630c:	681c      	ldr	r4, [r3, #0]
 800630e:	6494      	str	r4, [r2, #72]	; 0x48
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff ffe9 	bl	80062e8 <WM__SelectTopLevelLayer>
 8006316:	f7fd f849 	bl	80033ac <LCD_SetClipRectMax>
 800631a:	4620      	mov	r0, r4
 800631c:	f7fb ff60 	bl	80021e0 <GUI_ALLOC_h2p>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006326:	64da      	str	r2, [r3, #76]	; 0x4c
 8006328:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800632c:	4630      	mov	r0, r6
 800632e:	651a      	str	r2, [r3, #80]	; 0x50
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	bf00      	nop
 8006334:	200000a4 	.word	0x200000a4
 8006338:	20025c3c 	.word	0x20025c3c

0800633c <WM_CreateWindowAsChild>:
 800633c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006344:	4698      	mov	r8, r3
 8006346:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <WM_CreateWindowAsChild+0x144>)
 8006348:	4605      	mov	r5, r0
 800634a:	460e      	mov	r6, r1
 800634c:	4617      	mov	r7, r2
 800634e:	f8d3 9000 	ldr.w	r9, [r3]
 8006352:	f1ba 0f00 	cmp.w	sl, #0
 8006356:	d128      	bne.n	80063aa <WM_CreateWindowAsChild+0x6e>
 8006358:	4b4a      	ldr	r3, [pc, #296]	; (8006484 <WM_CreateWindowAsChild+0x148>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b353      	cbz	r3, 80063b4 <WM_CreateWindowAsChild+0x78>
 800635e:	4b4a      	ldr	r3, [pc, #296]	; (8006488 <WM_CreateWindowAsChild+0x14c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	7c5a      	ldrb	r2, [r3, #17]
 8006364:	4b49      	ldr	r3, [pc, #292]	; (800648c <WM_CreateWindowAsChild+0x150>)
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	2a01      	cmp	r2, #1
 800636e:	d921      	bls.n	80063b4 <WM_CreateWindowAsChild+0x78>
 8006370:	469a      	mov	sl, r3
 8006372:	4650      	mov	r0, sl
 8006374:	f7fb ff3e 	bl	80021f4 <GUI_ALLOC_LockH>
 8006378:	f9b0 1000 	ldrsh.w	r1, [r0]
 800637c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006380:	9001      	str	r0, [sp, #4]
 8006382:	440d      	add	r5, r1
 8006384:	4416      	add	r6, r2
 8006386:	b91f      	cbnz	r7, 8006390 <WM_CreateWindowAsChild+0x54>
 8006388:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800638c:	1a5f      	subs	r7, r3, r1
 800638e:	3701      	adds	r7, #1
 8006390:	f1b8 0f00 	cmp.w	r8, #0
 8006394:	d105      	bne.n	80063a2 <WM_CreateWindowAsChild+0x66>
 8006396:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800639a:	ebc2 0803 	rsb	r8, r2, r3
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	a801      	add	r0, sp, #4
 80063a4:	f7fb ff34 	bl	8002210 <GUI_ALLOC_UnlockH>
 80063a8:	e004      	b.n	80063b4 <WM_CreateWindowAsChild+0x78>
 80063aa:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80063ae:	d1e0      	bne.n	8006372 <WM_CreateWindowAsChild+0x36>
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80063b6:	302c      	adds	r0, #44	; 0x2c
 80063b8:	f7fc f8ae 	bl	8002518 <GUI_ALLOC_AllocZero>
 80063bc:	4604      	mov	r4, r0
 80063be:	2800      	cmp	r0, #0
 80063c0:	d059      	beq.n	8006476 <WM_CreateWindowAsChild+0x13a>
 80063c2:	4a30      	ldr	r2, [pc, #192]	; (8006484 <WM_CreateWindowAsChild+0x148>)
 80063c4:	f10d 0b08 	add.w	fp, sp, #8
 80063c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ca:	ea49 0903 	orr.w	r9, r9, r3
 80063ce:	8813      	ldrh	r3, [r2, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	8013      	strh	r3, [r2, #0]
 80063d4:	f7fb ff0e 	bl	80021f4 <GUI_ALLOC_LockH>
 80063d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063da:	f84b 0d08 	str.w	r0, [fp, #-8]!
 80063de:	6103      	str	r3, [r0, #16]
 80063e0:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <WM_CreateWindowAsChild+0x154>)
 80063e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80063e4:	8005      	strh	r5, [r0, #0]
 80063e6:	ea09 0303 	and.w	r3, r9, r3
 80063ea:	8046      	strh	r6, [r0, #2]
 80063ec:	443d      	add	r5, r7
 80063ee:	4446      	add	r6, r8
 80063f0:	4313      	orrs	r3, r2
 80063f2:	3d01      	subs	r5, #1
 80063f4:	3e01      	subs	r6, #1
 80063f6:	6283      	str	r3, [r0, #40]	; 0x28
 80063f8:	8085      	strh	r5, [r0, #4]
 80063fa:	80c6      	strh	r6, [r0, #6]
 80063fc:	4658      	mov	r0, fp
 80063fe:	f7fb ff07 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <WM_CreateWindowAsChild+0x158>)
 8006404:	6818      	ldr	r0, [r3, #0]
 8006406:	b148      	cbz	r0, 800641c <WM_CreateWindowAsChild+0xe0>
 8006408:	f7fb feea 	bl	80021e0 <GUI_ALLOC_h2p>
 800640c:	4605      	mov	r5, r0
 800640e:	4620      	mov	r0, r4
 8006410:	f7fb fee6 	bl	80021e0 <GUI_ALLOC_h2p>
 8006414:	696b      	ldr	r3, [r5, #20]
 8006416:	6143      	str	r3, [r0, #20]
 8006418:	616c      	str	r4, [r5, #20]
 800641a:	e000      	b.n	800641e <WM_CreateWindowAsChild+0xe2>
 800641c:	601c      	str	r4, [r3, #0]
 800641e:	4651      	mov	r1, sl
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff fd51 	bl	8005ec8 <WM__InsertWindowIntoList>
 8006426:	f019 0f20 	tst.w	r9, #32
 800642a:	d002      	beq.n	8006432 <WM_CreateWindowAsChild+0xf6>
 800642c:	4620      	mov	r0, r4
 800642e:	f7ff ff65 	bl	80062fc <WM_SelectWindow>
 8006432:	f019 0f01 	tst.w	r9, #1
 8006436:	bf1f      	itttt	ne
 8006438:	4a17      	ldrne	r2, [pc, #92]	; (8006498 <WM_CreateWindowAsChild+0x15c>)
 800643a:	6813      	ldrne	r3, [r2, #0]
 800643c:	3301      	addne	r3, #1
 800643e:	6013      	strne	r3, [r2, #0]
 8006440:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006444:	d002      	beq.n	800644c <WM_CreateWindowAsChild+0x110>
 8006446:	4620      	mov	r0, r4
 8006448:	f000 fa5e 	bl	8006908 <WM_BringToBottom>
 800644c:	f019 0f02 	tst.w	r9, #2
 8006450:	d00d      	beq.n	800646e <WM_CreateWindowAsChild+0x132>
 8006452:	4620      	mov	r0, r4
 8006454:	f7fb fece 	bl	80021f4 <GUI_ALLOC_LockH>
 8006458:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800645a:	9000      	str	r0, [sp, #0]
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	6283      	str	r3, [r0, #40]	; 0x28
 8006462:	4658      	mov	r0, fp
 8006464:	f7fb fed4 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff ff3a 	bl	80062e2 <WM_InvalidateWindow>
 800646e:	2101      	movs	r1, #1
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff fe0c 	bl	800608e <WM__SendMsgNoData>
 8006476:	4620      	mov	r0, r4
 8006478:	b003      	add	sp, #12
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	20025c50 	.word	0x20025c50
 8006484:	20025c18 	.word	0x20025c18
 8006488:	200000a4 	.word	0x200000a4
 800648c:	20025c20 	.word	0x20025c20
 8006490:	003f3f9f 	.word	0x003f3f9f
 8006494:	20025c3c 	.word	0x20025c3c
 8006498:	20025c70 	.word	0x20025c70

0800649c <WM__GetNextIVR>:
 800649c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80064a0:	4f5d      	ldr	r7, [pc, #372]	; (8006618 <WM__GetNextIVR+0x17c>)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f000 80b1 	beq.w	8006610 <WM__GetNextIVR+0x174>
 80064ae:	4a5b      	ldr	r2, [pc, #364]	; (800661c <WM__GetNextIVR+0x180>)
 80064b0:	6a13      	ldr	r3, [r2, #32]
 80064b2:	4614      	mov	r4, r2
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	dd03      	ble.n	80064c0 <WM__GetNextIVR+0x24>
 80064b8:	3b01      	subs	r3, #1
 80064ba:	2000      	movs	r0, #0
 80064bc:	6213      	str	r3, [r2, #32]
 80064be:	e0a7      	b.n	8006610 <WM__GetNextIVR+0x174>
 80064c0:	69d3      	ldr	r3, [r2, #28]
 80064c2:	f102 0614 	add.w	r6, r2, #20
 80064c6:	ad02      	add	r5, sp, #8
 80064c8:	3301      	adds	r3, #1
 80064ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 80064ce:	61d3      	str	r3, [r2, #28]
 80064d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80064d4:	b923      	cbnz	r3, 80064e0 <WM__GetNextIVR+0x44>
 80064d6:	8993      	ldrh	r3, [r2, #12]
 80064d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80064dc:	89d3      	ldrh	r3, [r2, #14]
 80064de:	e010      	b.n	8006502 <WM__GetNextIVR+0x66>
 80064e0:	8b13      	ldrh	r3, [r2, #24]
 80064e2:	8ad2      	ldrh	r2, [r2, #22]
 80064e4:	3301      	adds	r3, #1
 80064e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80064f6:	da06      	bge.n	8006506 <WM__GetNextIVR+0x6a>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f8ad 3008 	strh.w	r3, [sp, #8]
 80064fe:	8b63      	ldrh	r3, [r4, #26]
 8006500:	3301      	adds	r3, #1
 8006502:	f8ad 300a 	strh.w	r3, [sp, #10]
 8006506:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800650a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800650e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800661c <WM__GetNextIVR+0x180>
 8006512:	429a      	cmp	r2, r3
 8006514:	dd04      	ble.n	8006520 <WM__GetNextIVR+0x84>
 8006516:	6a23      	ldr	r3, [r4, #32]
 8006518:	2000      	movs	r0, #0
 800651a:	3b01      	subs	r3, #1
 800651c:	6223      	str	r3, [r4, #32]
 800651e:	e077      	b.n	8006610 <WM__GetNextIVR+0x174>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006524:	f7fb fe66 	bl	80021f4 <GUI_ALLOC_LockH>
 8006528:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800652c:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8006530:	9001      	str	r0, [sp, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d11c      	bne.n	8006570 <WM__GetNextIVR+0xd4>
 8006536:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800653a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800653e:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8006542:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006546:	4b34      	ldr	r3, [pc, #208]	; (8006618 <WM__GetNextIVR+0x17c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800654c:	b15a      	cbz	r2, 8006566 <WM__GetNextIVR+0xca>
 800654e:	4610      	mov	r0, r2
 8006550:	f7fb fe46 	bl	80021e0 <GUI_ALLOC_h2p>
 8006554:	4680      	mov	r8, r0
 8006556:	2200      	movs	r2, #0
 8006558:	4629      	mov	r1, r5
 800655a:	6a00      	ldr	r0, [r0, #32]
 800655c:	f7ff fbb8 	bl	8005cd0 <_Findy1>
 8006560:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006564:	e7f2      	b.n	800654c <WM__GetNextIVR+0xb0>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	4629      	mov	r1, r5
 800656a:	69d8      	ldr	r0, [r3, #28]
 800656c:	f7ff fbb0 	bl	8005cd0 <_Findy1>
 8006570:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006574:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800657c:	b16a      	cbz	r2, 800659a <WM__GetNextIVR+0xfe>
 800657e:	4610      	mov	r0, r2
 8006580:	f7fb fe2e 	bl	80021e0 <GUI_ALLOC_h2p>
 8006584:	2200      	movs	r2, #0
 8006586:	4680      	mov	r8, r0
 8006588:	4629      	mov	r1, r5
 800658a:	6a00      	ldr	r0, [r0, #32]
 800658c:	f7ff fbf3 	bl	8005d76 <_Findx0>
 8006590:	2800      	cmp	r0, #0
 8006592:	d1ed      	bne.n	8006570 <WM__GetNextIVR+0xd4>
 8006594:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006598:	e7f0      	b.n	800657c <WM__GetNextIVR+0xe0>
 800659a:	9b01      	ldr	r3, [sp, #4]
 800659c:	4629      	mov	r1, r5
 800659e:	69d8      	ldr	r0, [r3, #28]
 80065a0:	f7ff fbe9 	bl	8005d76 <_Findx0>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1e3      	bne.n	8006570 <WM__GetNextIVR+0xd4>
 80065a8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80065ac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80065b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	dd07      	ble.n	80065c8 <WM__GetNextIVR+0x12c>
 80065b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80065bc:	e886 0003 	stmia.w	r6, {r0, r1}
 80065c0:	a801      	add	r0, sp, #4
 80065c2:	f7fb fe25 	bl	8002210 <GUI_ALLOC_UnlockH>
 80065c6:	e797      	b.n	80064f8 <WM__GetNextIVR+0x5c>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065cc:	b152      	cbz	r2, 80065e4 <WM__GetNextIVR+0x148>
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7fb fe06 	bl	80021e0 <GUI_ALLOC_h2p>
 80065d4:	4607      	mov	r7, r0
 80065d6:	2200      	movs	r2, #0
 80065d8:	4629      	mov	r1, r5
 80065da:	6a00      	ldr	r0, [r0, #32]
 80065dc:	f7ff fc0e 	bl	8005dfc <_Findx1>
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	e7f3      	b.n	80065cc <WM__GetNextIVR+0x130>
 80065e4:	af04      	add	r7, sp, #16
 80065e6:	4629      	mov	r1, r5
 80065e8:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 80065ec:	69d8      	ldr	r0, [r3, #28]
 80065ee:	f7ff fc05 	bl	8005dfc <_Findx1>
 80065f2:	4638      	mov	r0, r7
 80065f4:	f7fb fe0c 	bl	8002210 <GUI_ALLOC_UnlockH>
 80065f8:	69e2      	ldr	r2, [r4, #28]
 80065fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80065fe:	429a      	cmp	r2, r3
 8006600:	dc89      	bgt.n	8006516 <WM__GetNextIVR+0x7a>
 8006602:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006606:	e886 0003 	stmia.w	r6, {r0, r1}
 800660a:	f7ff fce3 	bl	8005fd4 <WM__ActivateClipRect>
 800660e:	2001      	movs	r0, #1
 8006610:	b004      	add	sp, #16
 8006612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006616:	bf00      	nop
 8006618:	200000a4 	.word	0x200000a4
 800661c:	20025aa8 	.word	0x20025aa8

08006620 <WM__InitIVRSearch>:
 8006620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006624:	4e39      	ldr	r6, [pc, #228]	; (800670c <WM__InitIVRSearch+0xec>)
 8006626:	b086      	sub	sp, #24
 8006628:	4680      	mov	r8, r0
 800662a:	6832      	ldr	r2, [r6, #0]
 800662c:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8006630:	b913      	cbnz	r3, 8006638 <WM__InitIVRSearch+0x18>
 8006632:	f7ff fccf 	bl	8005fd4 <WM__ActivateClipRect>
 8006636:	e064      	b.n	8006702 <WM__InitIVRSearch+0xe2>
 8006638:	4f35      	ldr	r7, [pc, #212]	; (8006710 <WM__InitIVRSearch+0xf0>)
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	463d      	mov	r5, r7
 800663e:	3301      	adds	r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	dc5d      	bgt.n	8006702 <WM__InitIVRSearch+0xe2>
 8006646:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8006648:	f7fb fdd4 	bl	80021f4 <GUI_ALLOC_LockH>
 800664c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006650:	9000      	str	r0, [sp, #0]
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <WM__InitIVRSearch+0xf4>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b113      	cbz	r3, 8006660 <WM__InitIVRSearch+0x40>
 800665a:	ab02      	add	r3, sp, #8
 800665c:	3008      	adds	r0, #8
 800665e:	e004      	b.n	800666a <WM__InitIVRSearch+0x4a>
 8006660:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006662:	f013 0402 	ands.w	r4, r3, #2
 8006666:	d00c      	beq.n	8006682 <WM__InitIVRSearch+0x62>
 8006668:	ab02      	add	r3, sp, #8
 800666a:	ac02      	add	r4, sp, #8
 800666c:	c803      	ldmia	r0, {r0, r1}
 800666e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	d00c      	beq.n	8006692 <WM__InitIVRSearch+0x72>
 8006678:	4641      	mov	r1, r8
 800667a:	4620      	mov	r0, r4
 800667c:	f7fc fb80 	bl	8002d80 <GUI__IntersectRect>
 8006680:	e007      	b.n	8006692 <WM__InitIVRSearch+0x72>
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	4668      	mov	r0, sp
 8006686:	3b01      	subs	r3, #1
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	f7fb fdc1 	bl	8002210 <GUI_ALLOC_UnlockH>
 800668e:	4620      	mov	r0, r4
 8006690:	e038      	b.n	8006704 <WM__InitIVRSearch+0xe4>
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	4f20      	ldr	r7, [pc, #128]	; (8006718 <WM__InitIVRSearch+0xf8>)
 8006696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006698:	b1c2      	cbz	r2, 80066cc <WM__InitIVRSearch+0xac>
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	6810      	ldr	r0, [r2, #0]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	ab04      	add	r3, sp, #16
 80066a2:	6851      	ldr	r1, [r2, #4]
 80066a4:	c303      	stmia	r3!, {r0, r1}
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	b133      	cbz	r3, 80066b8 <WM__InitIVRSearch+0x98>
 80066aa:	a801      	add	r0, sp, #4
 80066ac:	f7fb fdb0 	bl	8002210 <GUI_ALLOC_UnlockH>
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	f7fb fd9f 	bl	80021f4 <GUI_ALLOC_LockH>
 80066b6:	9001      	str	r0, [sp, #4]
 80066b8:	a904      	add	r1, sp, #16
 80066ba:	9801      	ldr	r0, [sp, #4]
 80066bc:	f7ff fc5a 	bl	8005f74 <WM__Client2Screen>
 80066c0:	4620      	mov	r0, r4
 80066c2:	a904      	add	r1, sp, #16
 80066c4:	f7fc fb5c 	bl	8002d80 <GUI__IntersectRect>
 80066c8:	a801      	add	r0, sp, #4
 80066ca:	e000      	b.n	80066ce <WM__InitIVRSearch+0xae>
 80066cc:	4668      	mov	r0, sp
 80066ce:	f7fb fd9f 	bl	8002210 <GUI_ALLOC_UnlockH>
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	b119      	cbz	r1, 80066de <WM__InitIVRSearch+0xbe>
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff fbca 	bl	8005e70 <WM__ClipAtParentBorders>
 80066dc:	b128      	cbz	r0, 80066ea <WM__InitIVRSearch+0xca>
 80066de:	6833      	ldr	r3, [r6, #0]
 80066e0:	4620      	mov	r0, r4
 80066e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80066e4:	f7ff fbc4 	bl	8005e70 <WM__ClipAtParentBorders>
 80066e8:	b918      	cbnz	r0, 80066f2 <WM__InitIVRSearch+0xd2>
 80066ea:	6a2b      	ldr	r3, [r5, #32]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	622b      	str	r3, [r5, #32]
 80066f0:	e008      	b.n	8006704 <WM__InitIVRSearch+0xe4>
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <WM__InitIVRSearch+0xfc>)
 80066f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80066fc:	f7ff fece 	bl	800649c <WM__GetNextIVR>
 8006700:	e000      	b.n	8006704 <WM__InitIVRSearch+0xe4>
 8006702:	2001      	movs	r0, #1
 8006704:	b006      	add	sp, #24
 8006706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670a:	bf00      	nop
 800670c:	200000a4 	.word	0x200000a4
 8006710:	20025aa8 	.word	0x20025aa8
 8006714:	20025c4c 	.word	0x20025c4c
 8006718:	20025c1c 	.word	0x20025c1c
 800671c:	20025ab4 	.word	0x20025ab4

08006720 <WM_Activate>:
 8006720:	4b02      	ldr	r3, [pc, #8]	; (800672c <WM_Activate+0xc>)
 8006722:	2201      	movs	r2, #1
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800672a:	4770      	bx	lr
 800672c:	200000a4 	.word	0x200000a4

08006730 <WM_DefaultProc>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	6840      	ldr	r0, [r0, #4]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	2b17      	cmp	r3, #23
 800673a:	d010      	beq.n	800675e <WM_DefaultProc+0x2e>
 800673c:	dc07      	bgt.n	800674e <WM_DefaultProc+0x1e>
 800673e:	2b0e      	cmp	r3, #14
 8006740:	d00f      	beq.n	8006762 <WM_DefaultProc+0x32>
 8006742:	2b14      	cmp	r3, #20
 8006744:	d115      	bne.n	8006772 <WM_DefaultProc+0x42>
 8006746:	68e1      	ldr	r1, [r4, #12]
 8006748:	f000 f97a 	bl	8006a40 <WM__GetClientRectEx>
 800674c:	e011      	b.n	8006772 <WM_DefaultProc+0x42>
 800674e:	2b22      	cmp	r3, #34	; 0x22
 8006750:	d00c      	beq.n	800676c <WM_DefaultProc+0x3c>
 8006752:	2b28      	cmp	r3, #40	; 0x28
 8006754:	d10d      	bne.n	8006772 <WM_DefaultProc+0x42>
 8006756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675a:	f7ff bdc2 	b.w	80062e2 <WM_InvalidateWindow>
 800675e:	60e0      	str	r0, [r4, #12]
 8006760:	bd10      	pop	{r4, pc}
 8006762:	4621      	mov	r1, r4
 8006764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006768:	f000 b911 	b.w	800698e <WM_SendToParent>
 800676c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006770:	e000      	b.n	8006774 <WM_DefaultProc+0x44>
 8006772:	2300      	movs	r3, #0
 8006774:	60e3      	str	r3, [r4, #12]
 8006776:	bd10      	pop	{r4, pc}

08006778 <_cbBackWin>:
 8006778:	6803      	ldr	r3, [r0, #0]
 800677a:	2b0e      	cmp	r3, #14
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	d002      	beq.n	8006788 <_cbBackWin+0x10>
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d009      	beq.n	800679a <_cbBackWin+0x22>
 8006786:	e020      	b.n	80067ca <_cbBackWin+0x52>
 8006788:	68c3      	ldr	r3, [r0, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	2a01      	cmp	r2, #1
 800678e:	d121      	bne.n	80067d4 <_cbBackWin+0x5c>
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	f7fc bab3 	b.w	8002d00 <GUI_StoreKey>
 800679a:	4a0f      	ldr	r2, [pc, #60]	; (80067d8 <_cbBackWin+0x60>)
 800679c:	6843      	ldr	r3, [r0, #4]
 800679e:	6811      	ldr	r1, [r2, #0]
 80067a0:	428b      	cmp	r3, r1
 80067a2:	d006      	beq.n	80067b2 <_cbBackWin+0x3a>
 80067a4:	6852      	ldr	r2, [r2, #4]
 80067a6:	4293      	cmp	r3, r2
 80067a8:	bf0c      	ite	eq
 80067aa:	2301      	moveq	r3, #1
 80067ac:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80067b0:	e000      	b.n	80067b4 <_cbBackWin+0x3c>
 80067b2:	2300      	movs	r3, #0
 80067b4:	4a09      	ldr	r2, [pc, #36]	; (80067dc <_cbBackWin+0x64>)
 80067b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80067ba:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80067be:	4298      	cmp	r0, r3
 80067c0:	d003      	beq.n	80067ca <_cbBackWin+0x52>
 80067c2:	f7fb ff6d 	bl	80026a0 <GUI_SetBkColor>
 80067c6:	f7fc f82d 	bl	8002824 <GUI_Clear>
 80067ca:	4620      	mov	r0, r4
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bfae 	b.w	8006730 <WM_DefaultProc>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	20025c20 	.word	0x20025c20
 80067dc:	20025c54 	.word	0x20025c54

080067e0 <WM_Init>:
 80067e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80067e4:	4d2a      	ldr	r5, [pc, #168]	; (8006890 <WM_Init+0xb0>)
 80067e6:	7828      	ldrb	r0, [r5, #0]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d14d      	bne.n	8006888 <WM_Init+0xa8>
 80067ec:	4b29      	ldr	r3, [pc, #164]	; (8006894 <WM_Init+0xb4>)
 80067ee:	4604      	mov	r4, r0
 80067f0:	4e29      	ldr	r6, [pc, #164]	; (8006898 <WM_Init+0xb8>)
 80067f2:	6018      	str	r0, [r3, #0]
 80067f4:	4b29      	ldr	r3, [pc, #164]	; (800689c <WM_Init+0xbc>)
 80067f6:	4f2a      	ldr	r7, [pc, #168]	; (80068a0 <WM_Init+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068cc <WM_Init+0xec>
 80067fe:	6458      	str	r0, [r3, #68]	; 0x44
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <WM_Init+0xc4>)
 8006802:	60a8      	str	r0, [r5, #8]
 8006804:	8018      	strh	r0, [r3, #0]
 8006806:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <WM_Init+0xc8>)
 8006808:	8018      	strh	r0, [r3, #0]
 800680a:	4620      	mov	r0, r4
 800680c:	f7fc f93e 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8006810:	b1a8      	cbz	r0, 800683e <WM_Init+0x5e>
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006816:	2302      	movs	r3, #2
 8006818:	2100      	movs	r1, #0
 800681a:	9602      	str	r6, [sp, #8]
 800681c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006820:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8006824:	9103      	str	r1, [sp, #12]
 8006826:	4608      	mov	r0, r1
 8006828:	461a      	mov	r2, r3
 800682a:	f7ff fd87 	bl	800633c <WM_CreateWindowAsChild>
 800682e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006832:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8006836:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800683a:	f7ff fd52 	bl	80062e2 <WM_InvalidateWindow>
 800683e:	3401      	adds	r4, #1
 8006840:	2c02      	cmp	r4, #2
 8006842:	d1e2      	bne.n	800680a <WM_Init+0x2a>
 8006844:	4819      	ldr	r0, [pc, #100]	; (80068ac <WM_Init+0xcc>)
 8006846:	f000 f8f3 	bl	8006a30 <WM__AddCriticalHandle>
 800684a:	4819      	ldr	r0, [pc, #100]	; (80068b0 <WM_Init+0xd0>)
 800684c:	f000 f8f0 	bl	8006a30 <WM__AddCriticalHandle>
 8006850:	4818      	ldr	r0, [pc, #96]	; (80068b4 <WM_Init+0xd4>)
 8006852:	f000 f8ed 	bl	8006a30 <WM__AddCriticalHandle>
 8006856:	4818      	ldr	r0, [pc, #96]	; (80068b8 <WM_Init+0xd8>)
 8006858:	f000 f8ea 	bl	8006a30 <WM__AddCriticalHandle>
 800685c:	4817      	ldr	r0, [pc, #92]	; (80068bc <WM_Init+0xdc>)
 800685e:	f000 f8e7 	bl	8006a30 <WM__AddCriticalHandle>
 8006862:	4817      	ldr	r0, [pc, #92]	; (80068c0 <WM_Init+0xe0>)
 8006864:	f000 f8e4 	bl	8006a30 <WM__AddCriticalHandle>
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <WM_Init+0xc0>)
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	f7ff fd46 	bl	80062fc <WM_SelectWindow>
 8006870:	f7ff ff56 	bl	8006720 <WM_Activate>
 8006874:	2301      	movs	r3, #1
 8006876:	4813      	ldr	r0, [pc, #76]	; (80068c4 <WM_Init+0xe4>)
 8006878:	702b      	strb	r3, [r5, #0]
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <WM_Init+0xe8>)
 800687c:	626b      	str	r3, [r5, #36]	; 0x24
 800687e:	b004      	add	sp, #16
 8006880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	f7fc b8ee 	b.w	8002a64 <GUI__RegisterExit>
 8006888:	b004      	add	sp, #16
 800688a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688e:	bf00      	nop
 8006890:	20025aa8 	.word	0x20025aa8
 8006894:	20025c3c 	.word	0x20025c3c
 8006898:	08006779 	.word	0x08006779
 800689c:	200000a4 	.word	0x200000a4
 80068a0:	20025c20 	.word	0x20025c20
 80068a4:	20025c38 	.word	0x20025c38
 80068a8:	20025c18 	.word	0x20025c18
 80068ac:	20025c94 	.word	0x20025c94
 80068b0:	20025c84 	.word	0x20025c84
 80068b4:	20025c74 	.word	0x20025c74
 80068b8:	20025c9c 	.word	0x20025c9c
 80068bc:	20025c8c 	.word	0x20025c8c
 80068c0:	20025c7c 	.word	0x20025c7c
 80068c4:	20025acc 	.word	0x20025acc
 80068c8:	08005c2d 	.word	0x08005c2d
 80068cc:	20025c54 	.word	0x20025c54

080068d0 <WM_GetDesktopWindow>:
 80068d0:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <WM_GetDesktopWindow+0x10>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	7c5a      	ldrb	r2, [r3, #17]
 80068d6:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <WM_GetDesktopWindow+0x14>)
 80068d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	200000a4 	.word	0x200000a4
 80068e4:	20025c20 	.word	0x20025c20

080068e8 <WM_GetFirstChild>:
 80068e8:	b508      	push	{r3, lr}
 80068ea:	4603      	mov	r3, r0
 80068ec:	b110      	cbz	r0, 80068f4 <WM_GetFirstChild+0xc>
 80068ee:	f7fb fc77 	bl	80021e0 <GUI_ALLOC_h2p>
 80068f2:	69c3      	ldr	r3, [r0, #28]
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd08      	pop	{r3, pc}

080068f8 <WM_GetParent>:
 80068f8:	b508      	push	{r3, lr}
 80068fa:	4603      	mov	r3, r0
 80068fc:	b110      	cbz	r0, 8006904 <WM_GetParent+0xc>
 80068fe:	f7fb fc6f 	bl	80021e0 <GUI_ALLOC_h2p>
 8006902:	6983      	ldr	r3, [r0, #24]
 8006904:	4618      	mov	r0, r3
 8006906:	bd08      	pop	{r3, pc}

08006908 <WM_BringToBottom>:
 8006908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	b087      	sub	sp, #28
 8006910:	2800      	cmp	r0, #0
 8006912:	d039      	beq.n	8006988 <WM_BringToBottom+0x80>
 8006914:	f7fb fc6e 	bl	80021f4 <GUI_ALLOC_LockH>
 8006918:	ad04      	add	r5, sp, #16
 800691a:	4603      	mov	r3, r0
 800691c:	9001      	str	r0, [sp, #4]
 800691e:	c803      	ldmia	r0, {r0, r1}
 8006920:	6a1e      	ldr	r6, [r3, #32]
 8006922:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8006926:	e885 0003 	stmia.w	r5, {r0, r1}
 800692a:	a801      	add	r0, sp, #4
 800692c:	f7fb fc70 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006930:	4620      	mov	r0, r4
 8006932:	f000 f84c 	bl	80069ce <WM__GetPrevSibling>
 8006936:	4607      	mov	r7, r0
 8006938:	b330      	cbz	r0, 8006988 <WM_BringToBottom+0x80>
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff ffdc 	bl	80068f8 <WM_GetParent>
 8006940:	f019 0f02 	tst.w	r9, #2
 8006944:	4680      	mov	r8, r0
 8006946:	d004      	beq.n	8006952 <WM_BringToBottom+0x4a>
 8006948:	4601      	mov	r1, r0
 800694a:	4632      	mov	r2, r6
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff fc89 	bl	8006264 <WM__InvalidateRectEx>
 8006952:	4620      	mov	r0, r4
 8006954:	f7fb fc4e 	bl	80021f4 <GUI_ALLOC_LockH>
 8006958:	9001      	str	r0, [sp, #4]
 800695a:	4640      	mov	r0, r8
 800695c:	f7fb fc4a 	bl	80021f4 <GUI_ALLOC_LockH>
 8006960:	9003      	str	r0, [sp, #12]
 8006962:	4638      	mov	r0, r7
 8006964:	f7fb fc46 	bl	80021f4 <GUI_ALLOC_LockH>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	69d9      	ldr	r1, [r3, #28]
 800696e:	6206      	str	r6, [r0, #32]
 8006970:	9002      	str	r0, [sp, #8]
 8006972:	a801      	add	r0, sp, #4
 8006974:	6211      	str	r1, [r2, #32]
 8006976:	61dc      	str	r4, [r3, #28]
 8006978:	f7fb fc4a 	bl	8002210 <GUI_ALLOC_UnlockH>
 800697c:	a803      	add	r0, sp, #12
 800697e:	f7fb fc47 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006982:	a802      	add	r0, sp, #8
 8006984:	f7fb fc44 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006988:	b007      	add	sp, #28
 800698a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800698e <WM_SendToParent>:
 800698e:	b538      	push	{r3, r4, r5, lr}
 8006990:	4605      	mov	r5, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b141      	cbz	r1, 80069a8 <WM_SendToParent+0x1a>
 8006996:	f7ff ffaf 	bl	80068f8 <WM_GetParent>
 800699a:	b128      	cbz	r0, 80069a8 <WM_SendToParent+0x1a>
 800699c:	60a5      	str	r5, [r4, #8]
 800699e:	4621      	mov	r1, r4
 80069a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a4:	f000 b826 	b.w	80069f4 <WM__SendMessage>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080069ac <WM_SetCreateFlags>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <WM_SetCreateFlags+0xc>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	6018      	str	r0, [r3, #0]
 80069b2:	4610      	mov	r0, r2
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20025c50 	.word	0x20025c50

080069bc <WM__GetFirstSibling>:
 80069bc:	b508      	push	{r3, lr}
 80069be:	f7ff ff9b 	bl	80068f8 <WM_GetParent>
 80069c2:	b118      	cbz	r0, 80069cc <WM__GetFirstSibling+0x10>
 80069c4:	f7fb fc0c 	bl	80021e0 <GUI_ALLOC_h2p>
 80069c8:	69c0      	ldr	r0, [r0, #28]
 80069ca:	bd08      	pop	{r3, pc}
 80069cc:	bd08      	pop	{r3, pc}

080069ce <WM__GetPrevSibling>:
 80069ce:	b538      	push	{r3, r4, r5, lr}
 80069d0:	4605      	mov	r5, r0
 80069d2:	f7ff fff3 	bl	80069bc <WM__GetFirstSibling>
 80069d6:	4604      	mov	r4, r0
 80069d8:	b154      	cbz	r4, 80069f0 <WM__GetPrevSibling+0x22>
 80069da:	42ac      	cmp	r4, r5
 80069dc:	d007      	beq.n	80069ee <WM__GetPrevSibling+0x20>
 80069de:	4620      	mov	r0, r4
 80069e0:	f7fb fbfe 	bl	80021e0 <GUI_ALLOC_h2p>
 80069e4:	6a03      	ldr	r3, [r0, #32]
 80069e6:	429d      	cmp	r5, r3
 80069e8:	d002      	beq.n	80069f0 <WM__GetPrevSibling+0x22>
 80069ea:	461c      	mov	r4, r3
 80069ec:	e7f4      	b.n	80069d8 <WM__GetPrevSibling+0xa>
 80069ee:	2400      	movs	r4, #0
 80069f0:	4620      	mov	r0, r4
 80069f2:	bd38      	pop	{r3, r4, r5, pc}

080069f4 <WM__SendMessage>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4c0d      	ldr	r4, [pc, #52]	; (8006a2c <WM__SendMessage+0x38>)
 80069f8:	4606      	mov	r6, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	2b13      	cmp	r3, #19
 8006a00:	dc12      	bgt.n	8006a28 <WM__SendMessage+0x34>
 8006a02:	f7fb fbed 	bl	80021e0 <GUI_ALLOC_h2p>
 8006a06:	6902      	ldr	r2, [r0, #16]
 8006a08:	606e      	str	r6, [r5, #4]
 8006a0a:	b142      	cbz	r2, 8006a1e <WM__SendMessage+0x2a>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	4628      	mov	r0, r5
 8006a10:	3301      	adds	r3, #1
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	4790      	blx	r2
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a24:	f7ff be84 	b.w	8006730 <WM_DefaultProc>
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20025ad8 	.word	0x20025ad8

08006a30 <WM__AddCriticalHandle>:
 8006a30:	4b02      	ldr	r3, [pc, #8]	; (8006a3c <WM__AddCriticalHandle+0xc>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	6002      	str	r2, [r0, #0]
 8006a36:	6018      	str	r0, [r3, #0]
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20025c5c 	.word	0x20025c5c

08006a40 <WM__GetClientRectEx>:
 8006a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a42:	460d      	mov	r5, r1
 8006a44:	b158      	cbz	r0, 8006a5e <WM__GetClientRectEx+0x1e>
 8006a46:	b151      	cbz	r1, 8006a5e <WM__GetClientRectEx+0x1e>
 8006a48:	ac02      	add	r4, sp, #8
 8006a4a:	f7fb fbd3 	bl	80021f4 <GUI_ALLOC_LockH>
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006a54:	f7ff fb26 	bl	80060a4 <WM__GetClientRectWin>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7fb fbd9 	bl	8002210 <GUI_ALLOC_UnlockH>
 8006a5e:	b003      	add	sp, #12
 8006a60:	bd30      	pop	{r4, r5, pc}

08006a62 <_GetIndexMask_0>:
 8006a62:	b508      	push	{r3, lr}
 8006a64:	f7fc fe56 	bl	8003714 <LCD_GetNumColors>
 8006a68:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006a6c:	d010      	beq.n	8006a90 <_GetIndexMask_0+0x2e>
 8006a6e:	287f      	cmp	r0, #127	; 0x7f
 8006a70:	d810      	bhi.n	8006a94 <_GetIndexMask_0+0x32>
 8006a72:	283f      	cmp	r0, #63	; 0x3f
 8006a74:	d810      	bhi.n	8006a98 <_GetIndexMask_0+0x36>
 8006a76:	281f      	cmp	r0, #31
 8006a78:	d810      	bhi.n	8006a9c <_GetIndexMask_0+0x3a>
 8006a7a:	280f      	cmp	r0, #15
 8006a7c:	d810      	bhi.n	8006aa0 <_GetIndexMask_0+0x3e>
 8006a7e:	2807      	cmp	r0, #7
 8006a80:	d810      	bhi.n	8006aa4 <_GetIndexMask_0+0x42>
 8006a82:	2803      	cmp	r0, #3
 8006a84:	d810      	bhi.n	8006aa8 <_GetIndexMask_0+0x46>
 8006a86:	2801      	cmp	r0, #1
 8006a88:	bf94      	ite	ls
 8006a8a:	2000      	movls	r0, #0
 8006a8c:	2001      	movhi	r0, #1
 8006a8e:	e00c      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006a90:	2008      	movs	r0, #8
 8006a92:	e00a      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006a94:	2007      	movs	r0, #7
 8006a96:	e008      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006a98:	2006      	movs	r0, #6
 8006a9a:	e006      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006a9c:	2005      	movs	r0, #5
 8006a9e:	e004      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006aa0:	2004      	movs	r0, #4
 8006aa2:	e002      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006aa4:	2003      	movs	r0, #3
 8006aa6:	e000      	b.n	8006aaa <_GetIndexMask_0+0x48>
 8006aa8:	2002      	movs	r0, #2
 8006aaa:	2301      	movs	r3, #1
 8006aac:	fa03 f000 	lsl.w	r0, r3, r0
 8006ab0:	3801      	subs	r0, #1
 8006ab2:	bd08      	pop	{r3, pc}

08006ab4 <_Index2Color_0>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	f7fc fe2c 	bl	8003714 <LCD_GetNumColors>
 8006abc:	4605      	mov	r5, r0
 8006abe:	f7fc fe47 	bl	8003750 <LCD_GetPalette>
 8006ac2:	42a5      	cmp	r5, r4
 8006ac4:	d903      	bls.n	8006ace <_Index2Color_0+0x1a>
 8006ac6:	b118      	cbz	r0, 8006ad0 <_Index2Color_0+0x1c>
 8006ac8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	2000      	movs	r0, #0
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}

08006ad2 <_Color2Index_0>:
 8006ad2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad6:	4681      	mov	r9, r0
 8006ad8:	f7fc fe1c 	bl	8003714 <LCD_GetNumColors>
 8006adc:	4607      	mov	r7, r0
 8006ade:	f7fc fe37 	bl	8003750 <LCD_GetPalette>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	b1e0      	cbz	r0, 8006b20 <_Color2Index_0+0x4e>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8006aec:	454b      	cmp	r3, r9
 8006aee:	d017      	beq.n	8006b20 <_Color2Index_0+0x4e>
 8006af0:	3001      	adds	r0, #1
 8006af2:	4287      	cmp	r7, r0
 8006af4:	dcf8      	bgt.n	8006ae8 <_Color2Index_0+0x16>
 8006af6:	2400      	movs	r4, #0
 8006af8:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8006afc:	4625      	mov	r5, r4
 8006afe:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8006b02:	4648      	mov	r0, r9
 8006b04:	f7fb fd20 	bl	8002548 <GUI_CalcColorDist>
 8006b08:	4580      	cmp	r8, r0
 8006b0a:	bf88      	it	hi
 8006b0c:	462c      	movhi	r4, r5
 8006b0e:	f105 0501 	add.w	r5, r5, #1
 8006b12:	bf88      	it	hi
 8006b14:	4680      	movhi	r8, r0
 8006b16:	42af      	cmp	r7, r5
 8006b18:	dcf1      	bgt.n	8006afe <_Color2Index_0+0x2c>
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006b24 <GUI_GetYAdjust>:
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <GUI_GetYAdjust+0x2c>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8006b2a:	f003 030c 	and.w	r3, r3, #12
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d007      	beq.n	8006b42 <GUI_GetYAdjust+0x1e>
 8006b32:	2b0c      	cmp	r3, #12
 8006b34:	d005      	beq.n	8006b42 <GUI_GetYAdjust+0x1e>
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d107      	bne.n	8006b4a <GUI_GetYAdjust+0x26>
 8006b3a:	69d3      	ldr	r3, [r2, #28]
 8006b3c:	7e18      	ldrb	r0, [r3, #24]
 8006b3e:	3801      	subs	r0, #1
 8006b40:	4770      	bx	lr
 8006b42:	69d3      	ldr	r3, [r2, #28]
 8006b44:	7e18      	ldrb	r0, [r3, #24]
 8006b46:	0840      	lsrs	r0, r0, #1
 8006b48:	4770      	bx	lr
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	200000a4 	.word	0x200000a4

08006b54 <GUI_GetFontDistY>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <GUI_GetFontDistY+0xc>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	7e58      	ldrb	r0, [r3, #25]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	200000a4 	.word	0x200000a4

08006b64 <GUI_GetCharDistX>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <GUI_GetCharDistX+0xc>)
 8006b66:	2100      	movs	r1, #0
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4718      	bx	r3
 8006b70:	200000a4 	.word	0x200000a4

08006b74 <GUI_GetCharDistXEx>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <GUI_GetCharDistXEx+0xc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4718      	bx	r3
 8006b7e:	bf00      	nop
 8006b80:	200000a4 	.word	0x200000a4

08006b84 <_Log2VisBuffered>:
 8006b84:	4770      	bx	lr
	...

08006b88 <_DispLine>:
 8006b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b8a:	4615      	mov	r5, r2
 8006b8c:	ab02      	add	r3, sp, #8
 8006b8e:	4a21      	ldr	r2, [pc, #132]	; (8006c14 <_DispLine+0x8c>)
 8006b90:	4c21      	ldr	r4, [pc, #132]	; (8006c18 <_DispLine+0x90>)
 8006b92:	f843 1d08 	str.w	r1, [r3, #-8]!
 8006b96:	4619      	mov	r1, r3
 8006b98:	9001      	str	r0, [sp, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	4790      	blx	r2
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	9001      	str	r0, [sp, #4]
 8006ba2:	6958      	ldr	r0, [r3, #20]
 8006ba4:	b940      	cbnz	r0, 8006bb8 <_DispLine+0x30>
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f000 fb98 	bl	80072dc <GUI__ManageCache>
 8006bac:	6822      	ldr	r2, [r4, #0]
 8006bae:	69d3      	ldr	r3, [r2, #28]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	b93b      	cbnz	r3, 8006bc4 <_DispLine+0x3c>
 8006bb4:	4d19      	ldr	r5, [pc, #100]	; (8006c1c <_DispLine+0x94>)
 8006bb6:	e022      	b.n	8006bfe <_DispLine+0x76>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7fb fd4b 	bl	8002654 <GUI_RectsIntersect>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1f1      	bne.n	8006ba6 <_DispLine+0x1e>
 8006bc2:	e024      	b.n	8006c0e <_DispLine+0x86>
 8006bc4:	4c16      	ldr	r4, [pc, #88]	; (8006c20 <_DispLine+0x98>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	b141      	cbz	r1, 8006bde <_DispLine+0x56>
 8006bcc:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8006bd0:	9801      	ldr	r0, [sp, #4]
 8006bd2:	9900      	ldr	r1, [sp, #0]
 8006bd4:	4798      	blx	r3
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	4628      	mov	r0, r5
 8006bda:	4798      	blx	r3
 8006bdc:	e014      	b.n	8006c08 <_DispLine+0x80>
 8006bde:	9900      	ldr	r1, [sp, #0]
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	4798      	blx	r3
 8006be4:	e010      	b.n	8006c08 <_DispLine+0x80>
 8006be6:	a801      	add	r0, sp, #4
 8006be8:	f7fc f892 	bl	8002d10 <GUI_UC__GetCharCodeInc>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	4606      	mov	r6, r0
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4798      	blx	r3
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	b10b      	cbz	r3, 8006bfe <_DispLine+0x76>
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	4798      	blx	r3
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	daee      	bge.n	8006be6 <_DispLine+0x5e>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f000 fb67 	bl	80072dc <GUI__ManageCache>
 8006c0e:	b002      	add	sp, #8
 8006c10:	bd70      	pop	{r4, r5, r6, pc}
 8006c12:	bf00      	nop
 8006c14:	200000c0 	.word	0x200000c0
 8006c18:	200000a4 	.word	0x200000a4
 8006c1c:	20025be0 	.word	0x20025be0
 8006c20:	20025bd4 	.word	0x20025bd4

08006c24 <GUI__GetLineNumChars>:
 8006c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c26:	460d      	mov	r5, r1
 8006c28:	9001      	str	r0, [sp, #4]
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b188      	cbz	r0, 8006c52 <GUI__GetLineNumChars+0x2e>
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <GUI__GetLineNumChars+0x34>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	695c      	ldr	r4, [r3, #20]
 8006c36:	b154      	cbz	r4, 8006c4e <GUI__GetLineNumChars+0x2a>
 8006c38:	6864      	ldr	r4, [r4, #4]
 8006c3a:	b144      	cbz	r4, 8006c4e <GUI__GetLineNumChars+0x2a>
 8006c3c:	47a0      	blx	r4
 8006c3e:	e009      	b.n	8006c54 <GUI__GetLineNumChars+0x30>
 8006c40:	a801      	add	r0, sp, #4
 8006c42:	f7fc f865 	bl	8002d10 <GUI_UC__GetCharCodeInc>
 8006c46:	b120      	cbz	r0, 8006c52 <GUI__GetLineNumChars+0x2e>
 8006c48:	280a      	cmp	r0, #10
 8006c4a:	d002      	beq.n	8006c52 <GUI__GetLineNumChars+0x2e>
 8006c4c:	3401      	adds	r4, #1
 8006c4e:	42ac      	cmp	r4, r5
 8006c50:	dbf6      	blt.n	8006c40 <GUI__GetLineNumChars+0x1c>
 8006c52:	4620      	mov	r0, r4
 8006c54:	b003      	add	sp, #12
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	200000a4 	.word	0x200000a4

08006c5c <GUI__GetOverlap>:
 8006c5c:	b513      	push	{r0, r1, r4, lr}
 8006c5e:	2400      	movs	r4, #0
 8006c60:	a902      	add	r1, sp, #8
 8006c62:	f841 4d04 	str.w	r4, [r1, #-4]!
 8006c66:	f7ff ff85 	bl	8006b74 <GUI_GetCharDistXEx>
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	4298      	cmp	r0, r3
 8006c6e:	bfb4      	ite	lt
 8006c70:	1a18      	sublt	r0, r3, r0
 8006c72:	4620      	movge	r0, r4
 8006c74:	b002      	add	sp, #8
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <GUI__GetLineDistX>:
 8006c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c7a:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <GUI__GetLineDistX+0x58>)
 8006c7c:	ab02      	add	r3, sp, #8
 8006c7e:	9001      	str	r0, [sp, #4]
 8006c80:	f843 1d08 	str.w	r1, [r3, #-8]!
 8006c84:	4619      	mov	r1, r3
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4790      	blx	r2
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	b1e8      	cbz	r0, 8006cca <GUI__GetLineDistX+0x52>
 8006c8e:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <GUI__GetLineDistX+0x5c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	695c      	ldr	r4, [r3, #20]
 8006c96:	b10c      	cbz	r4, 8006c9c <GUI__GetLineDistX+0x24>
 8006c98:	6824      	ldr	r4, [r4, #0]
 8006c9a:	b90c      	cbnz	r4, 8006ca0 <GUI__GetLineDistX+0x28>
 8006c9c:	4625      	mov	r5, r4
 8006c9e:	e002      	b.n	8006ca6 <GUI__GetLineDistX+0x2e>
 8006ca0:	9900      	ldr	r1, [sp, #0]
 8006ca2:	47a0      	blx	r4
 8006ca4:	e011      	b.n	8006cca <GUI__GetLineDistX+0x52>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	db07      	blt.n	8006cc0 <GUI__GetLineDistX+0x48>
 8006cb0:	a801      	add	r0, sp, #4
 8006cb2:	f7fc f82d 	bl	8002d10 <GUI_UC__GetCharCodeInc>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff ff54 	bl	8006b64 <GUI_GetCharDistX>
 8006cbc:	4405      	add	r5, r0
 8006cbe:	e7f2      	b.n	8006ca6 <GUI__GetLineDistX+0x2e>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7ff ffcb 	bl	8006c5c <GUI__GetOverlap>
 8006cc6:	4428      	add	r0, r5
 8006cc8:	e7ff      	b.n	8006cca <GUI__GetLineDistX+0x52>
 8006cca:	b003      	add	sp, #12
 8006ccc:	bd30      	pop	{r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	200000c0 	.word	0x200000c0
 8006cd4:	200000a4 	.word	0x200000a4

08006cd8 <GUI__DispLine>:
 8006cd8:	4b27      	ldr	r3, [pc, #156]	; (8006d78 <GUI__DispLine+0xa0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cde:	4605      	mov	r5, r0
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	b163      	cbz	r3, 8006cfe <GUI__DispLine+0x26>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7ff fc9b 	bl	8006620 <WM__InitIVRSearch>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d041      	beq.n	8006d72 <GUI__DispLine+0x9a>
 8006cee:	466a      	mov	r2, sp
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f7ff ff48 	bl	8006b88 <_DispLine>
 8006cf8:	f7ff fbd0 	bl	800649c <WM__GetNextIVR>
 8006cfc:	e7f5      	b.n	8006cea <GUI__DispLine+0x12>
 8006cfe:	4c1f      	ldr	r4, [pc, #124]	; (8006d7c <GUI__DispLine+0xa4>)
 8006d00:	466b      	mov	r3, sp
 8006d02:	6810      	ldr	r0, [r2, #0]
 8006d04:	6851      	ldr	r1, [r2, #4]
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	c303      	stmia	r3!, {r0, r1}
 8006d0a:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 8006d0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d12:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8006d16:	443b      	add	r3, r7
 8006d18:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006d1c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006d20:	f8ad 3000 	strh.w	r3, [sp]
 8006d24:	4401      	add	r1, r0
 8006d26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006d2a:	443a      	add	r2, r7
 8006d2c:	f8ad 1002 	strh.w	r1, [sp, #2]
 8006d30:	4403      	add	r3, r0
 8006d32:	4668      	mov	r0, sp
 8006d34:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006d38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006d3c:	f7ff fc70 	bl	8006620 <WM__InitIVRSearch>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	b940      	cbnz	r0, 8006d56 <GUI__DispLine+0x7e>
 8006d44:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d46:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8006d48:	1a52      	subs	r2, r2, r1
 8006d4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d4c:	845a      	strh	r2, [r3, #34]	; 0x22
 8006d4e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006d50:	1a52      	subs	r2, r2, r1
 8006d52:	849a      	strh	r2, [r3, #36]	; 0x24
 8006d54:	e00d      	b.n	8006d72 <GUI__DispLine+0x9a>
 8006d56:	f8bd 2000 	ldrh.w	r2, [sp]
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	845a      	strh	r2, [r3, #34]	; 0x22
 8006d60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006d64:	849a      	strh	r2, [r3, #36]	; 0x24
 8006d66:	466a      	mov	r2, sp
 8006d68:	f7ff ff0e 	bl	8006b88 <_DispLine>
 8006d6c:	f7ff fb96 	bl	800649c <WM__GetNextIVR>
 8006d70:	e7e6      	b.n	8006d40 <GUI__DispLine+0x68>
 8006d72:	b003      	add	sp, #12
 8006d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20025bc0 	.word	0x20025bc0
 8006d7c:	200000a4 	.word	0x200000a4

08006d80 <GUIMONO_DispChar>:
 8006d80:	4b4d      	ldr	r3, [pc, #308]	; (8006eb8 <GUIMONO_DispChar+0x138>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	69d1      	ldr	r1, [r2, #28]
 8006d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	69cc      	ldr	r4, [r1, #28]
 8006d8c:	b08b      	sub	sp, #44	; 0x2c
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	4283      	cmp	r3, r0
 8006d92:	d808      	bhi.n	8006da6 <GUIMONO_DispChar+0x26>
 8006d94:	89e5      	ldrh	r5, [r4, #14]
 8006d96:	4285      	cmp	r5, r0
 8006d98:	d305      	bcc.n	8006da6 <GUIMONO_DispChar+0x26>
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	1ac3      	subs	r3, r0, r3
 8006d9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006da2:	9506      	str	r5, [sp, #24]
 8006da4:	e013      	b.n	8006dce <GUIMONO_DispChar+0x4e>
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d07c      	beq.n	8006ea6 <GUIMONO_DispChar+0x126>
 8006dac:	881d      	ldrh	r5, [r3, #0]
 8006dae:	42a8      	cmp	r0, r5
 8006db0:	d379      	bcc.n	8006ea6 <GUIMONO_DispChar+0x126>
 8006db2:	885e      	ldrh	r6, [r3, #2]
 8006db4:	4286      	cmp	r6, r0
 8006db6:	d376      	bcc.n	8006ea6 <GUIMONO_DispChar+0x126>
 8006db8:	1b40      	subs	r0, r0, r5
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	6866      	ldr	r6, [r4, #4]
 8006dbe:	b280      	uxth	r0, r0
 8006dc0:	9606      	str	r6, [sp, #24]
 8006dc2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8006dc6:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8006dca:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8006dce:	1c58      	adds	r0, r3, #1
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd2:	d068      	beq.n	8006ea6 <GUIMONO_DispChar+0x126>
 8006dd4:	f891 b018 	ldrb.w	fp, [r1, #24]
 8006dd8:	7ca1      	ldrb	r1, [r4, #18]
 8006dda:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8006dde:	fb1b f301 	smulbb	r3, fp, r1
 8006de2:	4d35      	ldr	r5, [pc, #212]	; (8006eb8 <GUIMONO_DispChar+0x138>)
 8006de4:	4648      	mov	r0, r9
 8006de6:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8006dea:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	f894 a010 	ldrb.w	sl, [r4, #16]
 8006df4:	f7fc f852 	bl	8002e9c <LCD_SetDrawMode>
 8006df8:	6829      	ldr	r1, [r5, #0]
 8006dfa:	9b07      	ldr	r3, [sp, #28]
 8006dfc:	69ca      	ldr	r2, [r1, #28]
 8006dfe:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006e00:	9008      	str	r0, [sp, #32]
 8006e02:	4618      	mov	r0, r3
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	9906      	ldr	r1, [sp, #24]
 8006e0a:	fb00 1003 	mla	r0, r0, r3, r1
 8006e0e:	4641      	mov	r1, r8
 8006e10:	9004      	str	r0, [sp, #16]
 8006e12:	4638      	mov	r0, r7
 8006e14:	7ca3      	ldrb	r3, [r4, #18]
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	7ed3      	ldrb	r3, [r2, #27]
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	7e93      	ldrb	r3, [r2, #26]
 8006e22:	4652      	mov	r2, sl
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	465b      	mov	r3, fp
 8006e28:	f7fc f9ae 	bl	8003188 <LCD_DrawBitmap>
 8006e2c:	1c73      	adds	r3, r6, #1
 8006e2e:	d01a      	beq.n	8006e66 <GUIMONO_DispChar+0xe6>
 8006e30:	f049 0002 	orr.w	r0, r9, #2
 8006e34:	f7fc f832 	bl	8002e9c <LCD_SetDrawMode>
 8006e38:	682a      	ldr	r2, [r5, #0]
 8006e3a:	9906      	ldr	r1, [sp, #24]
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	69d3      	ldr	r3, [r2, #28]
 8006e40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e42:	9205      	str	r2, [sp, #20]
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	fb02 1606 	mla	r6, r2, r6, r1
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	9604      	str	r6, [sp, #16]
 8006e4e:	7ca2      	ldrb	r2, [r4, #18]
 8006e50:	9203      	str	r2, [sp, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	9202      	str	r2, [sp, #8]
 8006e56:	7eda      	ldrb	r2, [r3, #27]
 8006e58:	9201      	str	r2, [sp, #4]
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	7e9b      	ldrb	r3, [r3, #26]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	465b      	mov	r3, fp
 8006e62:	f7fc f991 	bl	8003188 <LCD_DrawBitmap>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	7e5a      	ldrb	r2, [r3, #25]
 8006e6c:	7e1b      	ldrb	r3, [r3, #24]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d915      	bls.n	8006e9e <GUIMONO_DispChar+0x11e>
 8006e72:	f1b9 0f02 	cmp.w	r9, #2
 8006e76:	d012      	beq.n	8006e9e <GUIMONO_DispChar+0x11e>
 8006e78:	f089 0004 	eor.w	r0, r9, #4
 8006e7c:	f7fc f80e 	bl	8002e9c <LCD_SetDrawMode>
 8006e80:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <GUIMONO_DispChar+0x138>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	7e18      	ldrb	r0, [r3, #24]
 8006e88:	7ed9      	ldrb	r1, [r3, #27]
 8006e8a:	7e9a      	ldrb	r2, [r3, #26]
 8006e8c:	7e5b      	ldrb	r3, [r3, #25]
 8006e8e:	fb00 8101 	mla	r1, r0, r1, r8
 8006e92:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e96:	4638      	mov	r0, r7
 8006e98:	4443      	add	r3, r8
 8006e9a:	f7fc f85d 	bl	8002f58 <LCD_FillRect>
 8006e9e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8006ea2:	f7fb fffb 	bl	8002e9c <LCD_SetDrawMode>
 8006ea6:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <GUIMONO_DispChar+0x138>)
 8006ea8:	7c61      	ldrb	r1, [r4, #17]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8006eae:	440b      	add	r3, r1
 8006eb0:	8453      	strh	r3, [r2, #34]	; 0x22
 8006eb2:	b00b      	add	sp, #44	; 0x2c
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	200000a4 	.word	0x200000a4

08006ebc <GUIMONO_GetCharDistX>:
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <GUIMONO_GetCharDistX+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	b109      	cbz	r1, 8006eca <GUIMONO_GetCharDistX+0xe>
 8006ec6:	7c1a      	ldrb	r2, [r3, #16]
 8006ec8:	600a      	str	r2, [r1, #0]
 8006eca:	7c58      	ldrb	r0, [r3, #17]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	200000a4 	.word	0x200000a4

08006ed4 <GUIMONO_GetFontInfo>:
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	800b      	strh	r3, [r1, #0]
 8006ed8:	4770      	bx	lr

08006eda <GUIMONO_IsInFont>:
 8006eda:	69c3      	ldr	r3, [r0, #28]
 8006edc:	899a      	ldrh	r2, [r3, #12]
 8006ede:	428a      	cmp	r2, r1
 8006ee0:	d802      	bhi.n	8006ee8 <GUIMONO_IsInFont+0xe>
 8006ee2:	89da      	ldrh	r2, [r3, #14]
 8006ee4:	428a      	cmp	r2, r1
 8006ee6:	d20f      	bcs.n	8006f08 <GUIMONO_IsInFont+0x2e>
 8006ee8:	6898      	ldr	r0, [r3, #8]
 8006eea:	b180      	cbz	r0, 8006f0e <GUIMONO_IsInFont+0x34>
 8006eec:	8803      	ldrh	r3, [r0, #0]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	d30c      	bcc.n	8006f0c <GUIMONO_IsInFont+0x32>
 8006ef2:	8842      	ldrh	r2, [r0, #2]
 8006ef4:	428a      	cmp	r2, r1
 8006ef6:	d309      	bcc.n	8006f0c <GUIMONO_IsInFont+0x32>
 8006ef8:	1ac9      	subs	r1, r1, r3
 8006efa:	6843      	ldr	r3, [r0, #4]
 8006efc:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8006f00:	43c0      	mvns	r0, r0
 8006f02:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8006f06:	4770      	bx	lr
 8006f08:	2001      	movs	r0, #1
 8006f0a:	4770      	bx	lr
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	4770      	bx	lr

08006f10 <GUIPROP__FindChar>:
 8006f10:	b138      	cbz	r0, 8006f22 <GUIPROP__FindChar+0x12>
 8006f12:	8803      	ldrh	r3, [r0, #0]
 8006f14:	428b      	cmp	r3, r1
 8006f16:	d802      	bhi.n	8006f1e <GUIPROP__FindChar+0xe>
 8006f18:	8843      	ldrh	r3, [r0, #2]
 8006f1a:	428b      	cmp	r3, r1
 8006f1c:	d201      	bcs.n	8006f22 <GUIPROP__FindChar+0x12>
 8006f1e:	6880      	ldr	r0, [r0, #8]
 8006f20:	e7f6      	b.n	8006f10 <GUIPROP__FindChar>
 8006f22:	4770      	bx	lr

08006f24 <GUIPROP_DispChar>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	4c38      	ldr	r4, [pc, #224]	; (800700c <GUIPROP_DispChar+0xe8>)
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	4601      	mov	r1, r0
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	69d8      	ldr	r0, [r3, #28]
 8006f3a:	f7ff ffe9 	bl	8006f10 <GUIPROP__FindChar>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d060      	beq.n	8007004 <GUIPROP_DispChar+0xe0>
 8006f42:	8805      	ldrh	r5, [r0, #0]
 8006f44:	6847      	ldr	r7, [r0, #4]
 8006f46:	4640      	mov	r0, r8
 8006f48:	1b75      	subs	r5, r6, r5
 8006f4a:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8006f4e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8006f52:	f7fb ffa3 	bl	8002e9c <LCD_SetDrawMode>
 8006f56:	f8d4 c000 	ldr.w	ip, [r4]
 8006f5a:	4681      	mov	r9, r0
 8006f5c:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8006f60:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8006f64:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8006f68:	f89e b018 	ldrb.w	fp, [lr, #24]
 8006f6c:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8006f70:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8006f74:	f04f 0c01 	mov.w	ip, #1
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	6873      	ldr	r3, [r6, #4]
 8006f7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	465b      	mov	r3, fp
 8006f84:	f8cd c008 	str.w	ip, [sp, #8]
 8006f88:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8006f8c:	f8cd c004 	str.w	ip, [sp, #4]
 8006f90:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8006f94:	f8cd e000 	str.w	lr, [sp]
 8006f98:	f7fc f8f6 	bl	8003188 <LCD_DrawBitmap>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	7e59      	ldrb	r1, [r3, #25]
 8006fa2:	f893 a018 	ldrb.w	sl, [r3, #24]
 8006fa6:	9107      	str	r1, [sp, #28]
 8006fa8:	4551      	cmp	r1, sl
 8006faa:	d920      	bls.n	8006fee <GUIPROP_DispChar+0xca>
 8006fac:	f1b8 0f02 	cmp.w	r8, #2
 8006fb0:	d01d      	beq.n	8006fee <GUIPROP_DispChar+0xca>
 8006fb2:	f893 b01b 	ldrb.w	fp, [r3, #27]
 8006fb6:	f7fb faf5 	bl	80025a4 <GUI_GetColor>
 8006fba:	4680      	mov	r8, r0
 8006fbc:	f7fb faeb 	bl	8002596 <GUI_GetBkColor>
 8006fc0:	f7fb fb70 	bl	80026a4 <GUI_SetColor>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	9907      	ldr	r1, [sp, #28]
 8006fc8:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8006fcc:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 8006fd6:	7eda      	ldrb	r2, [r3, #27]
 8006fd8:	fb0b e301 	mla	r3, fp, r1, lr
 8006fdc:	fb0b e10a 	mla	r1, fp, sl, lr
 8006fe0:	fb05 0202 	mla	r2, r5, r2, r0
 8006fe4:	f7fb ffb8 	bl	8002f58 <LCD_FillRect>
 8006fe8:	4640      	mov	r0, r8
 8006fea:	f7fb fb5b 	bl	80026a4 <GUI_SetColor>
 8006fee:	4648      	mov	r0, r9
 8006ff0:	f7fb ff54 	bl	8002e9c <LCD_SetDrawMode>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	7871      	ldrb	r1, [r6, #1]
 8006ff8:	69da      	ldr	r2, [r3, #28]
 8006ffa:	7e90      	ldrb	r0, [r2, #26]
 8006ffc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8006ffe:	fb00 2201 	mla	r2, r0, r1, r2
 8007002:	845a      	strh	r2, [r3, #34]	; 0x22
 8007004:	b009      	add	sp, #36	; 0x24
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	bf00      	nop
 800700c:	200000a4 	.word	0x200000a4

08007010 <GUIPROP_GetCharDistX>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <GUIPROP_GetCharDistX+0x38>)
 8007014:	4602      	mov	r2, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4601      	mov	r1, r0
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69dd      	ldr	r5, [r3, #28]
 800701e:	69e8      	ldr	r0, [r5, #28]
 8007020:	f7ff ff76 	bl	8006f10 <GUIPROP__FindChar>
 8007024:	b170      	cbz	r0, 8007044 <GUIPROP_GetCharDistX+0x34>
 8007026:	8803      	ldrh	r3, [r0, #0]
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	6843      	ldr	r3, [r0, #4]
 800702c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8007030:	7848      	ldrb	r0, [r1, #1]
 8007032:	7ea9      	ldrb	r1, [r5, #26]
 8007034:	fb10 f001 	smulbb	r0, r0, r1
 8007038:	b124      	cbz	r4, 8007044 <GUIPROP_GetCharDistX+0x34>
 800703a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 800703e:	fb11 f303 	smulbb	r3, r1, r3
 8007042:	6023      	str	r3, [r4, #0]
 8007044:	bd38      	pop	{r3, r4, r5, pc}
 8007046:	bf00      	nop
 8007048:	200000a4 	.word	0x200000a4

0800704c <GUIPROP_GetFontInfo>:
 800704c:	2301      	movs	r3, #1
 800704e:	800b      	strh	r3, [r1, #0]
 8007050:	4770      	bx	lr

08007052 <GUIPROP_IsInFont>:
 8007052:	b508      	push	{r3, lr}
 8007054:	69c0      	ldr	r0, [r0, #28]
 8007056:	f7ff ff5b 	bl	8006f10 <GUIPROP__FindChar>
 800705a:	3000      	adds	r0, #0
 800705c:	bf18      	it	ne
 800705e:	2001      	movne	r0, #1
 8007060:	bd08      	pop	{r3, pc}
	...

08007064 <GUI_SelectLayer>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4d08      	ldr	r5, [pc, #32]	; (8007088 <GUI_SelectLayer+0x24>)
 8007068:	2801      	cmp	r0, #1
 800706a:	4604      	mov	r4, r0
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	7c5e      	ldrb	r6, [r3, #17]
 8007070:	d808      	bhi.n	8007084 <GUI_SelectLayer+0x20>
 8007072:	f7fb fd0b 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8007076:	b128      	cbz	r0, 8007084 <GUI_SelectLayer+0x20>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	745c      	strb	r4, [r3, #17]
 800707c:	f7fb fb07 	bl	800268e <GUI_SelectLCD>
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <GUI_SelectLayer+0x28>)
 8007082:	601c      	str	r4, [r3, #0]
 8007084:	4630      	mov	r0, r6
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	200000a4 	.word	0x200000a4
 800708c:	20025c40 	.word	0x20025c40

08007090 <GUI__CompactPixelIndices>:
 8007090:	2a08      	cmp	r2, #8
 8007092:	b510      	push	{r4, lr}
 8007094:	dd0e      	ble.n	80070b4 <GUI__CompactPixelIndices+0x24>
 8007096:	2a10      	cmp	r2, #16
 8007098:	dc0a      	bgt.n	80070b0 <GUI__CompactPixelIndices+0x20>
 800709a:	4603      	mov	r3, r0
 800709c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80070a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070a4:	f823 2b02 	strh.w	r2, [r3], #2
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d1f9      	bne.n	80070a0 <GUI__CompactPixelIndices+0x10>
 80070ac:	2001      	movs	r0, #1
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	2000      	movs	r0, #0
 80070b2:	bd10      	pop	{r4, pc}
 80070b4:	2a02      	cmp	r2, #2
 80070b6:	d12a      	bne.n	800710e <GUI__CompactPixelIndices+0x7e>
 80070b8:	4604      	mov	r4, r0
 80070ba:	6803      	ldr	r3, [r0, #0]
 80070bc:	2901      	cmp	r1, #1
 80070be:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	d020      	beq.n	8007108 <GUI__CompactPixelIndices+0x78>
 80070c6:	6842      	ldr	r2, [r0, #4]
 80070c8:	2902      	cmp	r1, #2
 80070ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80070ce:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80070d2:	ea43 0302 	orr.w	r3, r3, r2
 80070d6:	d101      	bne.n	80070dc <GUI__CompactPixelIndices+0x4c>
 80070d8:	3008      	adds	r0, #8
 80070da:	e016      	b.n	800710a <GUI__CompactPixelIndices+0x7a>
 80070dc:	6882      	ldr	r2, [r0, #8]
 80070de:	2903      	cmp	r1, #3
 80070e0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80070e4:	f002 020c 	and.w	r2, r2, #12
 80070e8:	ea43 0302 	orr.w	r3, r3, r2
 80070ec:	d101      	bne.n	80070f2 <GUI__CompactPixelIndices+0x62>
 80070ee:	300c      	adds	r0, #12
 80070f0:	e00b      	b.n	800710a <GUI__CompactPixelIndices+0x7a>
 80070f2:	68c2      	ldr	r2, [r0, #12]
 80070f4:	3904      	subs	r1, #4
 80070f6:	3010      	adds	r0, #16
 80070f8:	f002 0203 	and.w	r2, r2, #3
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f804 3b01 	strb.w	r3, [r4], #1
 8007102:	2900      	cmp	r1, #0
 8007104:	d1d9      	bne.n	80070ba <GUI__CompactPixelIndices+0x2a>
 8007106:	e7d1      	b.n	80070ac <GUI__CompactPixelIndices+0x1c>
 8007108:	3004      	adds	r0, #4
 800710a:	2100      	movs	r1, #0
 800710c:	e7f7      	b.n	80070fe <GUI__CompactPixelIndices+0x6e>
 800710e:	2a04      	cmp	r2, #4
 8007110:	d115      	bne.n	800713e <GUI__CompactPixelIndices+0xae>
 8007112:	4604      	mov	r4, r0
 8007114:	2901      	cmp	r1, #1
 8007116:	6803      	ldr	r3, [r0, #0]
 8007118:	bf18      	it	ne
 800711a:	6842      	ldrne	r2, [r0, #4]
 800711c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007120:	bf0c      	ite	eq
 8007122:	2100      	moveq	r1, #0
 8007124:	3902      	subne	r1, #2
 8007126:	b2db      	uxtb	r3, r3
 8007128:	bf17      	itett	ne
 800712a:	f002 020f 	andne.w	r2, r2, #15
 800712e:	3004      	addeq	r0, #4
 8007130:	3008      	addne	r0, #8
 8007132:	4313      	orrne	r3, r2
 8007134:	f804 3b01 	strb.w	r3, [r4], #1
 8007138:	2900      	cmp	r1, #0
 800713a:	d1eb      	bne.n	8007114 <GUI__CompactPixelIndices+0x84>
 800713c:	e7b6      	b.n	80070ac <GUI__CompactPixelIndices+0x1c>
 800713e:	2a01      	cmp	r2, #1
 8007140:	4603      	mov	r3, r0
 8007142:	d154      	bne.n	80071ee <GUI__CompactPixelIndices+0x15e>
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	2901      	cmp	r1, #1
 8007148:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	d04b      	beq.n	80071e8 <GUI__CompactPixelIndices+0x158>
 8007150:	685c      	ldr	r4, [r3, #4]
 8007152:	2902      	cmp	r1, #2
 8007154:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8007158:	f004 0440 	and.w	r4, r4, #64	; 0x40
 800715c:	ea42 0204 	orr.w	r2, r2, r4
 8007160:	d101      	bne.n	8007166 <GUI__CompactPixelIndices+0xd6>
 8007162:	3308      	adds	r3, #8
 8007164:	e041      	b.n	80071ea <GUI__CompactPixelIndices+0x15a>
 8007166:	689c      	ldr	r4, [r3, #8]
 8007168:	2903      	cmp	r1, #3
 800716a:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800716e:	f004 0420 	and.w	r4, r4, #32
 8007172:	ea42 0204 	orr.w	r2, r2, r4
 8007176:	d101      	bne.n	800717c <GUI__CompactPixelIndices+0xec>
 8007178:	330c      	adds	r3, #12
 800717a:	e036      	b.n	80071ea <GUI__CompactPixelIndices+0x15a>
 800717c:	68dc      	ldr	r4, [r3, #12]
 800717e:	2904      	cmp	r1, #4
 8007180:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8007184:	f004 0410 	and.w	r4, r4, #16
 8007188:	ea42 0204 	orr.w	r2, r2, r4
 800718c:	d101      	bne.n	8007192 <GUI__CompactPixelIndices+0x102>
 800718e:	3310      	adds	r3, #16
 8007190:	e02b      	b.n	80071ea <GUI__CompactPixelIndices+0x15a>
 8007192:	691c      	ldr	r4, [r3, #16]
 8007194:	2905      	cmp	r1, #5
 8007196:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800719a:	f004 0408 	and.w	r4, r4, #8
 800719e:	ea42 0204 	orr.w	r2, r2, r4
 80071a2:	d101      	bne.n	80071a8 <GUI__CompactPixelIndices+0x118>
 80071a4:	3314      	adds	r3, #20
 80071a6:	e020      	b.n	80071ea <GUI__CompactPixelIndices+0x15a>
 80071a8:	695c      	ldr	r4, [r3, #20]
 80071aa:	2906      	cmp	r1, #6
 80071ac:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80071b0:	f004 0404 	and.w	r4, r4, #4
 80071b4:	ea42 0204 	orr.w	r2, r2, r4
 80071b8:	d101      	bne.n	80071be <GUI__CompactPixelIndices+0x12e>
 80071ba:	3318      	adds	r3, #24
 80071bc:	e015      	b.n	80071ea <GUI__CompactPixelIndices+0x15a>
 80071be:	699c      	ldr	r4, [r3, #24]
 80071c0:	3907      	subs	r1, #7
 80071c2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80071c6:	bf08      	it	eq
 80071c8:	331c      	addeq	r3, #28
 80071ca:	f004 0402 	and.w	r4, r4, #2
 80071ce:	ea42 0204 	orr.w	r2, r2, r4
 80071d2:	bf1f      	itttt	ne
 80071d4:	69dc      	ldrne	r4, [r3, #28]
 80071d6:	3320      	addne	r3, #32
 80071d8:	f004 0401 	andne.w	r4, r4, #1
 80071dc:	4322      	orrne	r2, r4
 80071de:	f800 2b01 	strb.w	r2, [r0], #1
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d1ae      	bne.n	8007144 <GUI__CompactPixelIndices+0xb4>
 80071e6:	e761      	b.n	80070ac <GUI__CompactPixelIndices+0x1c>
 80071e8:	3304      	adds	r3, #4
 80071ea:	2100      	movs	r1, #0
 80071ec:	e7f7      	b.n	80071de <GUI__CompactPixelIndices+0x14e>
 80071ee:	4401      	add	r1, r0
 80071f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80071f4:	f803 2b01 	strb.w	r2, [r3], #1
 80071f8:	4299      	cmp	r1, r3
 80071fa:	d1f9      	bne.n	80071f0 <GUI__CompactPixelIndices+0x160>
 80071fc:	e756      	b.n	80070ac <GUI__CompactPixelIndices+0x1c>
	...

08007200 <GUI__ManageCacheEx>:
 8007200:	2801      	cmp	r0, #1
 8007202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007204:	4606      	mov	r6, r0
 8007206:	460c      	mov	r4, r1
 8007208:	dc62      	bgt.n	80072d0 <GUI__ManageCacheEx+0xd0>
 800720a:	4d33      	ldr	r5, [pc, #204]	; (80072d8 <GUI__ManageCacheEx+0xd8>)
 800720c:	686b      	ldr	r3, [r5, #4]
 800720e:	b103      	cbz	r3, 8007212 <GUI__ManageCacheEx+0x12>
 8007210:	4798      	blx	r3
 8007212:	2c01      	cmp	r4, #1
 8007214:	d004      	beq.n	8007220 <GUI__ManageCacheEx+0x20>
 8007216:	2c02      	cmp	r4, #2
 8007218:	d020      	beq.n	800725c <GUI__ManageCacheEx+0x5c>
 800721a:	2c00      	cmp	r4, #0
 800721c:	d158      	bne.n	80072d0 <GUI__ManageCacheEx+0xd0>
 800721e:	e033      	b.n	8007288 <GUI__ManageCacheEx+0x88>
 8007220:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8007224:	68af      	ldr	r7, [r5, #8]
 8007226:	b9af      	cbnz	r7, 8007254 <GUI__ManageCacheEx+0x54>
 8007228:	4630      	mov	r0, r6
 800722a:	f7fb fc2f 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 800722e:	9001      	str	r0, [sp, #4]
 8007230:	2800      	cmp	r0, #0
 8007232:	d04d      	beq.n	80072d0 <GUI__ManageCacheEx+0xd0>
 8007234:	68c3      	ldr	r3, [r0, #12]
 8007236:	210d      	movs	r1, #13
 8007238:	a801      	add	r0, sp, #4
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	4798      	blx	r3
 800723e:	4603      	mov	r3, r0
 8007240:	2800      	cmp	r0, #0
 8007242:	d045      	beq.n	80072d0 <GUI__ManageCacheEx+0xd0>
 8007244:	4621      	mov	r1, r4
 8007246:	9801      	ldr	r0, [sp, #4]
 8007248:	4798      	blx	r3
 800724a:	68ab      	ldr	r3, [r5, #8]
 800724c:	4638      	mov	r0, r7
 800724e:	3301      	adds	r3, #1
 8007250:	60ab      	str	r3, [r5, #8]
 8007252:	e03e      	b.n	80072d2 <GUI__ManageCacheEx+0xd2>
 8007254:	1c78      	adds	r0, r7, #1
 8007256:	60a8      	str	r0, [r5, #8]
 8007258:	4620      	mov	r0, r4
 800725a:	e03a      	b.n	80072d2 <GUI__ManageCacheEx+0xd2>
 800725c:	4630      	mov	r0, r6
 800725e:	f7fb fc15 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 8007262:	9001      	str	r0, [sp, #4]
 8007264:	2800      	cmp	r0, #0
 8007266:	d033      	beq.n	80072d0 <GUI__ManageCacheEx+0xd0>
 8007268:	68c3      	ldr	r3, [r0, #12]
 800726a:	210d      	movs	r1, #13
 800726c:	a801      	add	r0, sp, #4
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	4798      	blx	r3
 8007272:	4604      	mov	r4, r0
 8007274:	2800      	cmp	r0, #0
 8007276:	d02b      	beq.n	80072d0 <GUI__ManageCacheEx+0xd0>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <GUI__ManageCacheEx+0x7e>
 800727c:	4798      	blx	r3
 800727e:	2102      	movs	r1, #2
 8007280:	9801      	ldr	r0, [sp, #4]
 8007282:	47a0      	blx	r4
 8007284:	2000      	movs	r0, #0
 8007286:	e024      	b.n	80072d2 <GUI__ManageCacheEx+0xd2>
 8007288:	00b4      	lsls	r4, r6, #2
 800728a:	192b      	adds	r3, r5, r4
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d001      	beq.n	8007296 <GUI__ManageCacheEx+0x96>
 8007292:	2001      	movs	r0, #1
 8007294:	e015      	b.n	80072c2 <GUI__ManageCacheEx+0xc2>
 8007296:	4630      	mov	r0, r6
 8007298:	f7fb fbf8 	bl	8002a8c <GUI_DEVICE__GetpDriver>
 800729c:	9001      	str	r0, [sp, #4]
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0f7      	beq.n	8007292 <GUI__ManageCacheEx+0x92>
 80072a2:	68c3      	ldr	r3, [r0, #12]
 80072a4:	210d      	movs	r1, #13
 80072a6:	a801      	add	r0, sp, #4
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	4798      	blx	r3
 80072ac:	4606      	mov	r6, r0
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0ef      	beq.n	8007292 <GUI__ManageCacheEx+0x92>
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <GUI__ManageCacheEx+0xd8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	b103      	cbz	r3, 80072ba <GUI__ManageCacheEx+0xba>
 80072b8:	4798      	blx	r3
 80072ba:	2100      	movs	r1, #0
 80072bc:	9801      	ldr	r0, [sp, #4]
 80072be:	47b0      	blx	r6
 80072c0:	2000      	movs	r0, #0
 80072c2:	4425      	add	r5, r4
 80072c4:	68ab      	ldr	r3, [r5, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf18      	it	ne
 80072ca:	3b01      	subne	r3, #1
 80072cc:	60ab      	str	r3, [r5, #8]
 80072ce:	e000      	b.n	80072d2 <GUI__ManageCacheEx+0xd2>
 80072d0:	2001      	movs	r0, #1
 80072d2:	b003      	add	sp, #12
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20025adc 	.word	0x20025adc

080072dc <GUI__ManageCache>:
 80072dc:	4b02      	ldr	r3, [pc, #8]	; (80072e8 <GUI__ManageCache+0xc>)
 80072de:	4601      	mov	r1, r0
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	7c58      	ldrb	r0, [r3, #17]
 80072e4:	f7ff bf8c 	b.w	8007200 <GUI__ManageCacheEx>
 80072e8:	200000a4 	.word	0x200000a4

080072ec <LCD_SetClipRectEx>:
 80072ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ee:	4c09      	ldr	r4, [pc, #36]	; (8007314 <LCD_SetClipRectEx+0x28>)
 80072f0:	4605      	mov	r5, r0
 80072f2:	4669      	mov	r1, sp
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	7c5a      	ldrb	r2, [r3, #17]
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <LCD_SetClipRectEx+0x2c>)
 80072fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80072fe:	68c3      	ldr	r3, [r0, #12]
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	4798      	blx	r3
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	466a      	mov	r2, sp
 8007308:	4629      	mov	r1, r5
 800730a:	3008      	adds	r0, #8
 800730c:	f7fb fd55 	bl	8002dba <GUI__IntersectRects>
 8007310:	b003      	add	sp, #12
 8007312:	bd30      	pop	{r4, r5, pc}
 8007314:	200000a4 	.word	0x200000a4
 8007318:	20025c04 	.word	0x20025c04

0800731c <GUI_MEMDEV_GetBitsPerPixel>:
 800731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	b170      	cbz	r0, 8007340 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8007322:	f7fa ff67 	bl	80021f4 <GUI_ALLOC_LockH>
 8007326:	6803      	ldr	r3, [r0, #0]
 8007328:	ad02      	add	r5, sp, #8
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	4798      	blx	r3
 8007334:	f7fc fa7b 	bl	800382e <LCD__GetBPPDevice>
 8007338:	4604      	mov	r4, r0
 800733a:	4628      	mov	r0, r5
 800733c:	f7fa ff68 	bl	8002210 <GUI_ALLOC_UnlockH>
 8007340:	4620      	mov	r0, r4
 8007342:	b003      	add	sp, #12
 8007344:	bd30      	pop	{r4, r5, pc}
	...

08007348 <GUI_MEMDEV_Delete>:
 8007348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	b1d0      	cbz	r0, 8007384 <GUI_MEMDEV_Delete+0x3c>
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <GUI_MEMDEV_Delete+0x40>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007354:	4298      	cmp	r0, r3
 8007356:	d101      	bne.n	800735c <GUI_MEMDEV_Delete+0x14>
 8007358:	f7fb f999 	bl	800268e <GUI_SelectLCD>
 800735c:	4620      	mov	r0, r4
 800735e:	f7fa ff49 	bl	80021f4 <GUI_ALLOC_LockH>
 8007362:	9001      	str	r0, [sp, #4]
 8007364:	6940      	ldr	r0, [r0, #20]
 8007366:	b108      	cbz	r0, 800736c <GUI_MEMDEV_Delete+0x24>
 8007368:	f7fe f852 	bl	8005410 <GUI_USAGE_DecUseCnt>
 800736c:	ad02      	add	r5, sp, #8
 800736e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	f7fb fb9a 	bl	8002aac <GUI_DEVICE_Delete>
 8007378:	4628      	mov	r0, r5
 800737a:	f7fa ff49 	bl	8002210 <GUI_ALLOC_UnlockH>
 800737e:	4620      	mov	r0, r4
 8007380:	f7fa ff66 	bl	8002250 <GUI_ALLOC_Free>
 8007384:	b003      	add	sp, #12
 8007386:	bd30      	pop	{r4, r5, pc}
 8007388:	200000a4 	.word	0x200000a4

0800738c <GUI_MEMDEV_GetDataPtr>:
 800738c:	b513      	push	{r0, r1, r4, lr}
 800738e:	b158      	cbz	r0, 80073a8 <GUI_MEMDEV_GetDataPtr+0x1c>
 8007390:	f7fa ff30 	bl	80021f4 <GUI_ALLOC_LockH>
 8007394:	ab02      	add	r3, sp, #8
 8007396:	f100 0418 	add.w	r4, r0, #24
 800739a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fa ff36 	bl	8002210 <GUI_ALLOC_UnlockH>
 80073a4:	4620      	mov	r0, r4
 80073a6:	e7ff      	b.n	80073a8 <GUI_MEMDEV_GetDataPtr+0x1c>
 80073a8:	b002      	add	sp, #8
 80073aa:	bd10      	pop	{r4, pc}

080073ac <memmove>:
 80073ac:	4288      	cmp	r0, r1
 80073ae:	b510      	push	{r4, lr}
 80073b0:	eb01 0402 	add.w	r4, r1, r2
 80073b4:	d902      	bls.n	80073bc <memmove+0x10>
 80073b6:	4284      	cmp	r4, r0
 80073b8:	4623      	mov	r3, r4
 80073ba:	d807      	bhi.n	80073cc <memmove+0x20>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	42a1      	cmp	r1, r4
 80073c0:	d008      	beq.n	80073d4 <memmove+0x28>
 80073c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ca:	e7f8      	b.n	80073be <memmove+0x12>
 80073cc:	4402      	add	r2, r0
 80073ce:	4601      	mov	r1, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d100      	bne.n	80073d6 <memmove+0x2a>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073de:	e7f7      	b.n	80073d0 <memmove+0x24>

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <__libc_init_array>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4d0d      	ldr	r5, [pc, #52]	; (8007428 <__libc_init_array+0x38>)
 80073f4:	4c0d      	ldr	r4, [pc, #52]	; (800742c <__libc_init_array+0x3c>)
 80073f6:	1b64      	subs	r4, r4, r5
 80073f8:	10a4      	asrs	r4, r4, #2
 80073fa:	2600      	movs	r6, #0
 80073fc:	42a6      	cmp	r6, r4
 80073fe:	d109      	bne.n	8007414 <__libc_init_array+0x24>
 8007400:	4d0b      	ldr	r5, [pc, #44]	; (8007430 <__libc_init_array+0x40>)
 8007402:	4c0c      	ldr	r4, [pc, #48]	; (8007434 <__libc_init_array+0x44>)
 8007404:	f000 f826 	bl	8007454 <_init>
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	2600      	movs	r6, #0
 800740e:	42a6      	cmp	r6, r4
 8007410:	d105      	bne.n	800741e <__libc_init_array+0x2e>
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	f855 3b04 	ldr.w	r3, [r5], #4
 8007418:	4798      	blx	r3
 800741a:	3601      	adds	r6, #1
 800741c:	e7ee      	b.n	80073fc <__libc_init_array+0xc>
 800741e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007422:	4798      	blx	r3
 8007424:	3601      	adds	r6, #1
 8007426:	e7f2      	b.n	800740e <__libc_init_array+0x1e>
 8007428:	0800ded4 	.word	0x0800ded4
 800742c:	0800ded4 	.word	0x0800ded4
 8007430:	0800ded4 	.word	0x0800ded4
 8007434:	0800ded8 	.word	0x0800ded8

08007438 <memcpy>:
 8007438:	440a      	add	r2, r1
 800743a:	4291      	cmp	r1, r2
 800743c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007440:	d100      	bne.n	8007444 <memcpy+0xc>
 8007442:	4770      	bx	lr
 8007444:	b510      	push	{r4, lr}
 8007446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800744a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800744e:	4291      	cmp	r1, r2
 8007450:	d1f9      	bne.n	8007446 <memcpy+0xe>
 8007452:	bd10      	pop	{r4, pc}

08007454 <_init>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	bf00      	nop
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr

08007460 <_fini>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr
